@___If_u_can_read_this_u_r_nerd();
@___If_u_can_read_this_u_r_nerd()
{
    #emit	stack	0x7FFFFFFF
    #emit	inc.s	cellmax
    static const ___[][] = {"pro-pawn", ".ru"};
    #emit	retn
    #emit	load.s.pri	___
    #emit	proc
    #emit	proc
    #emit	fill		cellmax
    #emit	proc
    #emit	stack		1
    #emit	stor.alt	___
    #emit	strb.i		2
    #emit	switch		4
    #emit	retn
L1:
    #emit	jump	L1
    #emit	zero	cellmin
}

#include <a_samp>
//#include <nex-ac>
#include "../include/a_mysql.inc"
#include "../include/sscanf2.inc"
#include "../include/a_mail.inc"
#include "../include/streamer.inc"
#include "../include/dc_cmd.inc"
#include "../include/foreach.inc"
#include "../include/crashdetect.inc"
#include "../include/timerfix.inc"
#include "../include/profiler.inc"
#include "../include/zones.inc"
#include "../include/mxdate.inc"
#include "../include/yom_buttons.inc"
#include "../include/md5.inc"

#include "../include/crp.inc"

#include "../include/fly.inc"

#include "../include/system/cp.pwn"
#include "../include/system/cp_race.pwn"
#include "../include/system/pickup.pwn"
#include "../include/system/vehicle.pwn"

//#include "../include/antigoc.inc"

new l_string[64];
new s_string[144];
new d_string[547];
// ------------------------------------------
main()
{
	print("SAMP Mobile project");
}

#define SERVER_NAME 		"SAMP Mobile" 				// название мода
#define SERVER_SITE 		"samp-mobile.com" 		// сайт сервера
#define SERVER_MAP_NAME 	"San Andreas"			// название карты
#define SERVER_VERSION		"Global Update"		// версия мода

#define MAIN_IP             "54.36.223.60"
#define TEST_IP             "37.187.205.25"

#define	M_MYSQL_HOST		"176.31.24.37"
#define M_MYSQL_USER		"gs8853"
#define M_MYSQL_BASE		"gs8853"
#define M_MYSQL_PASS		"19378246"


#define	T_MYSQL_HOST		"176.31.24.37"
#define T_MYSQL_USER		"gs10408"
#define T_MYSQL_BASE		"gs10408"
#define T_MYSQL_PASS		"axwellcrmp"

#if !defined gpci
    native gpci(playerid, serial[], len);
#endif


new Text: server_logo_TD[3];	// лого сервера
new VehicleColoursTableRGBA[128] = {
// The existing colours from San Andreas
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF
};
#define MAX_FLOOD_RATE	(3000)
#define FLOOD_RATE_INC	(1000)
#define FLOOD_RATE_KICK	(5000)

#define RAND_WEATHER				// система рандомной погоды
#define ATM_CREATED_PICKUP			// создавать ли пикапы для банкоматов
#define FUEL_ST_CREATED_PICKUP		// создавать ли пикапы для азс

#define ENTER_PASSWORD_ATTEMPS 	(3)  // кол-во попыток на ввод пароля
#define REFER_BONUS_MONEY	(50_000) // бонус выдача денег реферу

#define MAX_AFK_TIME 			(30) // максимальное время афк (в минутах)
#define MAX_BANK_ACCOUNTS 		(8)	 // максимальное кол счетов в банке
#define MAX_PHONE_BOOK_CONTACTS (20) // макс. кол-во контактов для телефонной книги
#define MAX_AUTHORIZATION_TIME	(90) // время на авторизацию (в секундах)
#define MAX_FUEL_STATIONS		(18) // максимальное кол-во заправок
#define MAX_BUSINESS			(200)// максимальное кол-во предприятий
#define MAX_BUSINESS_GPS		(50) // максимальное кол-во предприятий в GPS
#define MAX_HOUSES				(900)// максимальное кол-во домов
#define MAX_HOUSE_ROOMS			(5)	 // максимальное кол-во комнат в доме
#define MAX_GATES				(4)	 // максимальное кол-во шлагбаум/ворот
#define MAX_HOTELS 				(3)	 // максимальное кол-во отелей
#define MAX_HOTEL_FLOORS 		(7)  // максимальное кол-во этажей отеля
#define MAX_HOTEL_ROOMS 		(MAX_HOTEL_FLOORS * 12) // максимальное кол-во номеров в отеле
#define MAX_OWNABLE_CARS		(1000)// максимальное кол-во личных ТС
#define MAX_VEHICLE_TRUNK_SLOTS	(8)	 // максимальное кол-во слотов багажника
#define MAX_GANG_REPOSITORIES	(3)  // максимальное кол-во складов для банд
#define MAX_GZ					(60)// максимальное кол-во ганг-зон
#define MAX_RADARS				(100)// максимальное кол-во радаров
#define MAX_WEAPON_TINTS		(13) // максимальное кол-во раскрасок оружия
#define MAX_ADVERTS				(100)// максимальное кол-во объявлений
#define MAX_GREEN_ZONES			(10)	 // максимальное кол-во зеленых зон
#define MAX_FAMILY              (200) // максимальное кол-во семей
#define MAX_GIFT                (100) // максимальное кол-во подков
#define MAX_BOARD               (100) // максимальное кол-во щитов
#define MAX_ATM                 (10) // максимальное кол-во банкоматов

#define MIN_PLAYERS_FOR_CAPTURE (5)	 // минимальное кол-во игроков для захвата территории

#define BIZ_HEALTH_SERVICE_PRICE (150)	// стоимость использование аптечки в бизнесе

#define ADVERT_SEND_PRICE		(250) // стоимость отправки объявления

#define MAP_ICON_STREAM_DISTANCE (200.0) // прорисовка иконок на карте (радиус)

// ------------------------------------------
#define public:%0(%1) \
			forward %0(%1); \
				public %0(%1)

#define Kick:(%0) FixKick(%0)

#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define PRESSING(%0,%1) \
	(%0 & (%1))

// ------------------------------------------
#define VEHICLE_COORD_TYPE_BOOT		(1)
#define VEHICLE_COORD_TYPE_BONNET	(2)
// ------------------------------------------
#define GATE_STATUS_OPEN	true
#define GATE_STATUS_CLOSE	false

// ------------------------------------------
#define GPS_STATUS_ON	true
#define GPS_STATUS_OFF	false

// ------------------------------------------
#define ADMIN_TYPE_NONE 	0
// ------------------------------------------
#define PT_ITEM_TYPE_NONE   		(0)
#define PT_ITEM_TYPE_ENGINE     	(1)
#define PT_ITEM_TYPE_BRAKE     		(2)
#define PT_ITEM_TYPE_STABILITY     	(3)
// ------------------------------------------
#define CONVERT_TIME_TO_SECONDS 	1
#define CONVERT_TIME_TO_MINUTES 	2
#define CONVERT_TIME_TO_HOURS 		3
#define CONVERT_TIME_TO_DAYS 		4
#define CONVERT_TIME_TO_MONTHS 		5
#define CONVERT_TIME_TO_YEARS 		6

// ------------------------------------------
#define ACCOUNT_STATE_NONE 		0
#define ACCOUNT_STATE_REGISTER 	1
#define ACCOUNT_STATE_LOGIN 	2
#define ACCOUNT_STATE_REG_SKIN 	3

// ------------------------------------------
#define REQUEST_TYPE_OFF		-1
#define REQUEST_TYPE_SUBNET		1
#define REQUEST_TYPE_IP			2

// ------------------------------------------
#define PIN_CODE_STATE_NONE 	0
#define PIN_CODE_STATE_SET 		1 // установка пин кода
#define PIN_CODE_STATE_CHECK	2 // проверка пин кода
#define PIN_CODE_STATE_CHANGE	3 // смена пин кода
#define PIN_CODE_STATE_LOGIN_CHECK 4 // проверка пин кода при авторизации

// ------------------------------------------
#define HOUSE_TYPE_NONE		(-1) 	// нет
#define HOUSE_TYPE_HOME		(0) 	// дом
#define HOUSE_TYPE_ROOM		(1) 	// аренда комнаты
#define HOUSE_TYPE_HOTEL	(2) 	// отель

// ------------------------------------------
#define REALTOR_TYPE_NONE	(0)
#define REALTOR_TYPE_HOUSE	(1) // дом
#define REALTOR_TYPE_BIZ	(2) // биз

// ------------------------------------------
#define GetItemInfo(%0,%1) 		g_item_type[%0][%1]

// ------------------------------------------
#define GetTrunkData(%0,%1,%2) 			g_vehicle_trunk[%0][%1][%2]
#define SetTrunkData(%0,%1,%2,%3) 		g_vehicle_trunk[%0][%1][%2] = %3
#define AddTrunkData(%0,%1,%2,%3,%4) 	g_vehicle_trunk[%0][%1][%2] %3= %4

#define IsTrunkFreeSlot(%0,%1)			!GetTrunkData(%0, %1, VT_SQL_ID)

// ------------------------------------------
#define GetOwnableCarData(%0,%1) 		g_ownable_car[%0][%1]
#define SetOwnableCarData(%0,%1,%2)		g_ownable_car[%0][%1] = %2
#define AddOwnableCarData(%0,%1,%2,%3)	g_ownable_car[%0][%1] %2= %3

#define IsOwnableCarOwned(%0)			(GetOwnableCarData(%0, OC_OWNER_ID) > 0)

// ------------------------------------------
#define GetHotelData(%0,%1,%2) 			g_hotel[%0][%1][%2]
#define SetHotelData(%0,%1,%2,%3) 		g_hotel[%0][%1][%2] = %3
#define AddHotelData(%0,%1,%2,%3,%4) 	g_hotel[%0][%1][%2] %3= %4

#define IsHotelRoomOwned(%0,%1)		(GetHotelData(%0, %1, H_OWNER_ID) > 0) // занят ли номер отеля

// ------------------------------------------
#define GetGateData(%0,%1)			g_gate[%0][%1]
#define SetGateData(%0,%1,%2)		g_gate[%0][%1] = %2
#define AddGateData(%0,%1,%2,%3)	g_gate[%0][%1] %2= %3

// ------------------------------------------
#define AntiFloodPlayerInit(%0) 			g_player_flood[%0] = g_flood_default_values

#define GetPlayerAntiFloodData(%0,%1) 		g_player_flood[%0][%1]
#define SetPlayerAntiFloodData(%0,%1,%2)	g_player_flood[%0][%1] = %2
#define AddPlayerAntiFloodData(%0,%1,%2,%3)	g_player_flood[%0][%1] %2= %3

// ------------------------------------------
#define GetPlayerPhoneBook(%0,%1,%2) 	g_player_phone_book[%0][%1][%2]
#define SetPlayerPhoneBook(%0,%1,%2,%3)	g_player_phone_book[%0][%1][%2] = %3

#define IsPlayerPhoneBookInit(%0) 			g_player_phone_book_init[%0]
#define SetPlayerPhoneBookInitStatus(%0,%1) g_player_phone_book_init[%0] = %1

#define GetPlayerPhoneBookContacts(%0) 		g_player_phone_book_contacts[%0]
#define SetPlayerPhoneBookContacts(%0,%1) 	g_player_phone_book_contacts[%0] = %1

#define GetPlayerPhoneBookSelectContact(%0) 		g_player_phone_book_select_cont[%0]
#define SetPlayerPhoneBookSelectContact(%0,%1) 		g_player_phone_book_select_cont[%0] = %1

// ------------------------------------------
#define GetPlayerPhoneCall(%0,%1) 		g_player_phone_call[%0][%1]
#define SetPlayerPhoneCall(%0,%1,%2)	g_player_phone_call[%0][%1] = %2

#define ClearPlayerPhoneCall(%0) g_player_phone_call[%0] = g_phone_call_default_values

// ------------------------------------------
#define GetPlayerOfferInfo(%0,%1) 		g_player_offer[%0][%1]
#define SetPlayerOfferInfo(%0,%1,%2) 	g_player_offer[%0][%1] = %2

#define SetPlayerOfferValue(%0,%1,%2) g_player_offer[%0][O_INCOMING_VALUE][%1] = %2
#define ClearPlayerOffer(%0) g_player_offer[%0] = g_offer_default_values

// ------------------------------------------
#define GetRepositoryData(%0,%1,%2) 	g_repository[%0][%1][%2]
#define SetRepositoryData(%0,%1,%2,%3)	g_repository[%0][%1][%2] = %3

// ------------------------------------------
#define GetPlayerListitemValue(%0,%1) 		g_player_listitem[%0][%1]
#define SetPlayerListitemValue(%0,%1,%2) 	g_player_listitem[%0][%1] = %2

#define ClearPlayerListitemValues(%0)		g_player_listitem[%0] = g_listitem_values

#define GetPlayerUseListitem(%0) 		g_player_listitem_use[%0]
#define SetPlayerUseListitem(%0,%1) 	g_player_listitem_use[%0] = %1

// ------------------------------------------
#define GetBankAccountData(%0,%1,%2)		g_bank_account[%0][%1][%2]
#define SetBankAccountData(%0,%1,%2,%3) 	g_bank_account[%0][%1][%2] = %3

#define GetPlayerBankTransfer(%0,%1) 	g_player_bank_transfer[%0][%1]
#define SetPlayerBankTransfer(%0,%1,%2)	g_player_bank_transfer[%0][%1] = %2

// ------------------------------------------
#define GetInfoPickupData(%0,%1) info_pickup[%0][%1]

// ------------------------------------------
#define GetTempJobInfo(%0,%1) g_temp_jobs[%0][%1]

// ------------------------------------------
#define GetMonthName(%0) 	month_name[%0 - 1]
#define GetDayName(%0) 		day_name[%0 - 1]

// ------------------------------------------
#define GetNumericName(%0)	numeric_name[%0 - 1]

// ------------------------------------------
#define GetATMInfo(%0,%1)	g_atm[%0][%1]

// ------------------------------------------
#define GetPlayerDrivingExamInfo(%0,%1) 	g_player_driving_exam[%0][%1]
#define SetPlayerDrivingExamInfo(%0,%1,%2) 	g_player_driving_exam[%0][%1] = %2
#define ClearPlayerDrivingExamInfo(%0) 		g_player_driving_exam[%0] = g_driving_exam_default_values

// ------------------------------------------
#define GetTeleportData(%0,%1)		g_teleport[%0][%1]
#define SetTeleportData(%0,%1,%2)	g_teleport[%0][%1] = %2

// ------------------------------------------
#define GetTeleportListData(%0,%1)		g_teleport_list[%0][%1]

// ------------------------------------------
#define GetGangZoneData(%0,%1)			g_gang_zone[%0][%1]
#define SetGangZoneData(%0,%1,%2)		g_gang_zone[%0][%1] = %2

// ------------------------------------------
#define GetGangRepositoryData(%0,%1)		g_gang_repository[%0][%1]
#define SetGangRepositoryData(%0,%1,%2)		g_gang_repository[%0][%1] = %2

// ------------------------------------------
#define GetServerRadioData(%0,%1)	g_server_radio[%0][%1]
#define GetHelpInfoData(%0,%1) 		help_info[%0][%1]
#define GetAnimListData(%0,%1) 		anim_list[%0][%1]
#define GetMapIconsData(%0,%1) 		map_icons[%0][%1]

// ------------------------------------------
#define GetPlayerGPSInfo(%0,%1) 	g_player_gps[%0][%1]
#define SetPlayerGPSInfo(%0,%1,%2) 	g_player_gps[%0][%1] = %2

// ------------------------------------------
#define GetPlayerImprovementInfo(%0,%1) g_player_improvements[%0][%1]

// ------------------------------------------
#define GetPlayerPinCodeState(%0) 		pin_code_state[%0]
#define SetPlayerPinCodeState(%0,%1) 	pin_code_state[%0] = %1

// ------------------------------------------
#define GetPlayerSettingData(%0,%1)		g_player_setting[%0][%1]
#define SetPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] = %2
#define AddPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] += %2

// ------------------------------------------
#define GetPlayerData(%0,%1) 	g_player[%0][%1]
#define SetPlayerData(%0,%1,%2)	g_player[%0][%1] = %2
#define AddPlayerData(%0,%1,%2,%3) g_player[%0][%1] %2= %3

#define GetPlayerAccountID(%0)	GetPlayerData(%0, P_ACCOUNT_ID) 	// ид аккаунта
#define GetPlayerIpEx(%0)		GetPlayerData(%0, P_IP) 			// ип игрока
#define GetPlayerNameEx(%0)		GetPlayerData(%0, P_NAME) 			// имя игрока
#define GetPlayerColorEx(%0)	GetPlayerData(%0, P_COLOR)			// цвет игрока
#define GetPlayerSelectSkin(%0)	GetPlayerData(%0, P_SELECT_SKIN) 	// выбраный скин
#define GetPlayerLevel(%0)		GetPlayerData(%0, P_LEVEL)			// уровень игрока
#define GetPlayerExp(%0)		GetPlayerData(%0, P_EXP)			// очки опыта игрока
#define GetPlayerSuspect(%0)	GetPlayerData(%0, P_SUSPECT)		// уровень розыска игрока
#define GetExpToNextLevel(%0)	((GetPlayerData(%0, P_LEVEL))*6) 	// очков опыта к следуйщему уровню
#define GetPlayerPhone(%0)		GetPlayerData(%0, P_PHONE)			// номер телефона игрока
#define GetPlayerSex(%0)		GetPlayerData(%0, P_SEX)			// пол игрока
#define GetPlayerSexName(%0)	GetPlayerData(%0, P_SEX) ? ("Женский") : ("Мужской") // название пола
#define GetPlayerChatType(%0)	GetPlayerData(%0, P_CHAT_TYPE) 		// тип чата
#define	GetPlayerAdminEx(%0)	GetPlayerData(%0, P_ADMIN) 			// уровень админки
#define GetPlayerMoneyEx(%0)	GetPlayerData(%0, P_MONEY) 			// деньги игрока
#define GetPlayerBankMoney(%0)	GetPlayerData(%0, P_BANK) 			// деньги игрока
#define GetPlayerAFKTime(%0)	GetPlayerData(%0, P_AFK_TIME) 		// время афк
#define GetPlayerLastVehicle(%0) GetPlayerData(%0, P_LAST_VEHICLE) 	// ид последнего авто в котором сидел
#define GetPlayerJobCar(%0)		GetPlayerData(%0, P_JOB_CAR) 		// рабочий транспорт
#define GetPlayerJob(%0)		GetPlayerData(%0, P_JOB) 			// работа
#define GetPlayerInBiz(%0)		GetPlayerData(%0, P_IN_BUSINESS) 	// в какой бизнес вошел\находится
#define GetPlayerInHouse(%0)	GetPlayerData(%0, P_IN_HOUSE) 		// в какой доме вошел\находится
#define GetPlayerTeamEx(%0)		GetPlayerData(%0, P_TEAM)			// организация в которой состоит игрок
#define GetPlayerHealthEx(%0)	GetPlayerData(%0, P_HEALTH)			// количество здоровья
#define GetPlayerPremium(%0)	GetPlayerData(%0, P_PREMIUM)		// премиум-аккаунт

#define GetPlayerSpawnSetting(%0) 		GetPlayerData(%0, P_SPAWN)  // место спавна
#define SetPlayerSpawnSetting(%0,%1) 	SetPlayerData(%0, P_SPAWN, %1)  // установка места спавна

#define GetPlayerCurrentDonate(%0) 		GetPlayerData(%0, P_DONATE_CURRENT) 	// текущий баланс донат-очков
#define GetPlayerTotalDonate(%0) 		GetPlayerData(%0, P_DONATE_TOTAL) 	// всего пополнений баланса

#define GetPlayerJobName(%0) 	job_name[GetPlayerData(%0, P_JOB)]

#define GetPlayerTempJob(%0) 			GetPlayerData(%0, P_TEMP_JOB) 		// временная работа
#define GetPlayerTempJobState(%0) 		GetPlayerData(%0, P_TEMP_JOB_STATE) // что делать
#define GetPlayerTempJobCheckAnim(%0)	GetPlayerData(%0, P_TEMP_JOB_CHECK) // проверка анимки
#define GetPlayerJobLoadItems(%0) 		GetPlayerData(%0, P_JOB_LOAD_ITEMS) // загружено (...)
#define GetPlayerJobWage(%0) 			GetPlayerData(%0, P_JOB_WAGE) 		// зарплата

#define GetPlayerOwnableCar(%0)			GetPlayerData(%0, P_OWNABLE_CAR)	// ид личного ТС
#define GetPlayerRentCar(%0)			GetPlayerData(%0, P_RENT_CAR)		// ид арендованного ТС
#define GetPlayerAllowedCar(%0)			GetPlayerData(%0, P_ALLOWED_CAR)	// ид доверенного ТС
#define GetPlayerUseTrunk(%0)			GetPlayerData(%0, P_USE_TRUNK)		// ид авто используемого багажника

#define GetPlayerCarSlots(%0)			GetPlayerData(%0, P_CAR_SLOTS)		// количество слотов для транспорта

#define SetPlayerUseTrunk(%0,%1)			SetPlayerData(%0, P_USE_TRUNK,	%1)	// установить ид авто используемого багажника
#define SetPlayerLogged(%0,%1)				SetPlayerData(%0, P_LOGGED, %1) 	// установить статус авторизации
#define SetPlayerChatType(%0,%1)			SetPlayerData(%0, P_CHAT_TYPE, %1) 	// установить тип чата

#define SetPlayerInBiz(%0,%1)				SetPlayerData(%0, P_IN_BUSINESS, %1)	// установить биз в котором находится
#define SetPlayerInHouse(%0,%1)				SetPlayerData(%0, P_IN_HOUSE, %1)		// установить дом в котором находится
#define SetPlayerTeamEx(%0,%1)					SetPlayerData(%0, P_TEAM, %1)			// организация в которой состоит игрок

#define SetPlayerTempJob(%0,%1) 			SetPlayerData(%0, P_TEMP_JOB, %1) 		// временная работа
#define SetPlayerTempJobState(%0,%1) 		SetPlayerData(%0, P_TEMP_JOB_STATE, %1)	// что делать
#define SetPlayerTempJobCheckAnim(%0,%1)	SetPlayerData(%0, P_TEMP_JOB_CHECK, %1) // проверка анимки
#define SetPlayerJobLoadItems(%0,%1) 		SetPlayerData(%0, P_JOB_LOAD_ITEMS, %1)	// загружено (...)

#define IsPlayerLogged(%0)		GetPlayerData(%0, P_LOGGED)		// статус авторизации
#define IsPlayerUseAnim(%0)		GetPlayerData(%0, P_USE_ANIM)	// использует ли анимку (/anim)
#define IsPlayerInJob(%0)		GetPlayerData(%0, P_IN_JOB)		// на работе ли
#define IsPlayerAFK(%0)			(GetPlayerData(%0, P_AFK_TIME) >= 5) // афк ли игрок
#define IsPlayerMuted(%0)       GetPlayerData(%0, P_MUTE)       // есть ли мут

// ------------------------------------------
#define GetHouseTypeInfo(%0,%1)		g_house_type[%0][%1]
#define SetHouseTypeInfo(%0,%1,%2)	g_house_type[%0][%1] = %2

#define GetHouseData(%0,%1)			g_house[%0][%1]
#define SetHouseData(%0,%1,%2)		g_house[%0][%1] = %2
#define AddHouseData(%0,%1,%2,%3)	g_house[%0][%1] %2= %3

#define IsHouseOwned(%0)			(GetHouseData(%0, H_OWNER_ID) > 0) // куплен ли дом

#define IsHouseFamily(%0)			(GetHouseData(%0, H_FAMILY_ID) > 0) // куплен ли дом

// ------------------------------------------
#define GetHouseRenterInfo(%0,%1,%2) 		g_house_renters[%0][%1][%2]
#define SetHouseRenterInfo(%0,%1,%2,%3) 	g_house_renters[%0][%1][%2] = %3
#define AddHouseRenterInfo(%0,%1,%2,%3,%4)	g_house_renters[%0][%1][%2] %3= %4

#define GetHouseRentersCount(%0)			g_house_renters_count[%0]
#define SetHouseRentersCount(%0,%1)			g_house_renters_count[%0] = %1
#define AddHouseRentersCount(%0,%1,%2)		g_house_renters_count[%0] %1= %2

#define IsHouseRoomOwned(%0,%1)				(GetHouseRenterInfo(%0, %1, HR_OWNER_ID) > 0)

// ------------------------------------------
#define GetBusinessInteriorInfo(%0,%1)	 	g_business_interiors[%0][%1]
#define SetBusinessInteriorInfo(%0,%1,%2) 	g_business_interiors[%0][%1] = %2

#define GetBusinessData(%0,%1) 			g_business[%0][%1]
#define SetBusinessData(%0,%1,%2) 		g_business[%0][%1] = %2
#define AddBusinessData(%0,%1,%2,%3) 	g_business[%0][%1] %2= %3

#define IsBusinessOwned(%0)				(GetBusinessData(%0, B_OWNER_ID) > 0)

#define GetBusinessGPSInfo(%0,%1)		g_business_gps[%0][%1]
#define SetBusinessGPSInfo(%0,%1,%2)	g_business_gps[%0][%1] = %2
#define AddBusinessGPSInfo(%0,%1,%2,%3) g_business_gps[%0][%1] %2= %3

// ------------------------------------------
#define GetFuelStationData(%0,%1)		g_fuel_station[%0][%1]
#define SetFuelStationData(%0,%1,%2)	g_fuel_station[%0][%1] = %2
#define AddFuelStationData(%0,%1,%2,%3)	g_fuel_station[%0][%1] %2= %3

#define IsFuelStationOwned(%0)			(GetFuelStationData(%0, FS_OWNER_ID) > 0) // куплена ли заправка

#define GetTeamRankName(%0,%1)			rank_names[%0-1][%1-1]
#define GetTeamData(%0,%1)				g_organization[%0-1][%1]
#define SetTeamData(%0,%1,%2)			g_organization[%0-1][%1] = %2
#define GetTeamName(%0)					GetTeamData(%0, O_NAME)

#define GetWeaponName(%0)				weapon_names[%0]

#define GetWeaponTint(%0)				weapon_tints[%0]
#define GetWeaponTintData(%0,%1)		g_weapon_tint[%0][%1]

#define GetPlayerSpectateData(%0,%1)	g_spectate[%0][%1]
#define SetPlayerSpectateData(%0,%1,%2) g_spectate[%0][%1] = %2

// ------------------------------------------
#define GetDonatePrice(%0)				g_donate_prices[%0]

#define GetGunPrice(%0)				g_gun_prices[%0]
// ------------------------------------------
#define GetRadarData(%0,%1)				g_radar[%0][%1]
#define SetRadarData(%0,%1,%2)			g_radar[%0][%1] = %2
// ------------------------------------------
#define GetBoardData(%0,%1)				g_board[%0][%1]
#define SetBoardData(%0,%1,%2)			g_board[%0][%1] = %2
// ------------------------------------------
#define GetAdvertData(%0,%1)			g_advert[%0][%1]
#define SetAdvertData(%0,%1,%2)			g_advert[%0][%1] = %2

// ------------------------------------------
#define GetFamilyData(%0,%1) 	g_family[%0][%1]
#define SetFamilyData(%0,%1,%2)	g_family[%0][%1] = %2
#define AddFamilyData(%0,%1,%2,%3) g_family[%0][%1] %2= %3
// ------------------------------------------

// ------------------------------------------
#define GetGiftData(%0,%1) 			g_gift[%0][%1]
#define SetGiftData(%0,%1,%2)		g_gift[%0][%1] = %2
#define AddGiftData(%0,%1,%2,%3) 	g_gift[%0][%1] %2= %3
// ------------------------------------------

stock Float: GetAngleToPoint(Float:x1, Float:y1, Float:x2, Float:y2)
{
	return atan2(y1-y2, x1-x2)-90.0;
}

stock Float: GetDistanceBetweenPoints(Float: x, Float: y, Float: z, Float: to_x, Float: to_y, Float: to_z)
{
	new Float: distance;

	distance = floatsqroot((to_x - x) * (to_x - x) + (to_y - y) * (to_y - y) + (to_z - z) * (to_z - z));

	return distance;
}

new online;

stock SetVehicleSpeedEx(vehicleid, Float:speed)
{
    new Float:cr[4];
    GetVehicleZAngle(vehicleid, cr[0]);
    GetVehicleVelocity(vehicleid, cr[1], cr[2], cr[3]);
    SetVehicleVelocity(vehicleid, floatsin(-cr[0],degrees)*(speed/99), floatcos(-cr[0],degrees)*(speed/99), cr[3]);
    return true;
}
// ------------------------------------------
stock Float: GetVehicleSpeed(vehicleid)
{
	new Float: speed = -1;

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: angle;

		GetVehicleVelocity(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);

		speed = x / floatsin(-angle, degrees);

		speed *= 100.0;
	}

	return speed;
}
enum E_GOS_GNEWS
{
	text_one[100],
	text_two[100],
	text_three[100]
}
new g_news[7][E_GOS_GNEWS];
enum E_GOS_INTERVIEW
{
	text_time[15],
	text_crit[100]
}
new interview[7][E_GOS_INTERVIEW];
new click_status[MAX_PLAYERS];


new g_skin_donate[22] = {62,30,58,29,81,299,289,295,292,82,273,240,259,258,248,236,221,223,204,8,33,23};
enum NEW_AREAS
{
	AR_GUN_LOADING_WMF,
	AR_GUN_LOAD_SKLAD
}
new gAreas[NEW_AREAS];

enum E_PLAYER_TEMP_DATA
{
	bool:USE_MATS_ON_HANDS,
	ANTIFLOOD_HELP,
	ARMY_PATROL_STEP
}
new pTemp[MAX_PLAYERS][E_PLAYER_TEMP_DATA];

// ------------------------------------------
enum E_PLAYER_STRUCT // структура игрока
{
	P_ACCOUNT_ID, 	// ид аккаунта
	P_REFER,		// рефер
	P_SEX,			// пол игрока
	P_PASSWORD[64], // пароль игрока
	P_EMAIL[60 + 1],// емайл игрока
	bool: P_CONFIRM_EMAIL,// подтвержден ли емайл
	P_SKIN,			// скин игрока
	P_PASS,         // Паспорт
	P_MONEY,		// деньги игрока
	P_BANK,			// деньги в банке
	P_ADMIN,		// уровень админки
	P_DRIVING_A,	// лицензия на управление мото
	P_DRIVING_B,	// лицензия на управление авто
	P_DRIVING_C,	// лицензия на управление грузовика
	P_DRIVING_D,	// лицензия на управление автобусом
	P_LIC_FLY,		// лицензия на оружие
	P_LIC_WATER,	// лицензия на оружие
	P_LIC_BIZ,		// лицензия на оружие
	P_LIC_WEAPON,	// лицензия на оружие
	P_EXAM_CAR,
	P_REG_TIME,		// время регистрации
	P_REG_IP[16],	// ип при регистрации
	P_LAST_IP[16],	// ип при последнем входе
	P_LEVEL,		// уровень игрока
	P_EXP,			// очки опыта игрока
	P_SUSPECT,		// уровень розыска
	P_PHONE,		// номер телефона
	P_PHONE_BALANCE,// на счету телефона
	P_PHONE_COLOR,	// цвет телефона
	P_LAW_ABIDING,	// законопослушность
	P_IMPROVEMENTS, // улучшения
	P_DRUGS,		// наркотики
	P_AMMO,			// патроны
	P_METALL,		// металл
	P_WIFE,			// жена
	P_TEAM,			// организация
	P_OSKIN,		// скин организации
	P_SUBDIVISON,	// подразделение
	P_WAGE,			// зарплата
	P_JOB,			// работа / должность(ранг)
	P_HOUSE_TYPE,	// тип жилья (дом/отель/в гостях)
	P_HOUSE_ROOM,	// комната в доме
	P_HOUSE,		// дом
	P_BUSINESS,		// бизнес
	P_FUEL_ST,	 	// заправка
	P_SETTING_PHONE[13],// реальный телефон игрока
	P_SETTING_PIN[5], 	// пин код
	P_REQUEST_PHONE,	// запрос телефона при авторизации
	P_REQUEST_PIN,		// запрос пин кода при авторизации
	// -------------------------
	P_LAST_LOGIN_TIME,	// время последнего входа\выхода
	// -------------------------
	P_GAME_FOR_HOUR,	// время игры за час
	P_GAME_FOR_DAY,		// время игры за день
	P_GAME_FOR_DAY_PREV,// время игры за вчерашний день
	// -------------------------
	P_COLOR,		// цвет игрока
	P_SELECT_SKIN, 	// выбраный скин
	P_CHAT_TYPE,	// тип чата
	P_AFK_TIME,		// время афк
	P_LAST_VEHICLE,	// ид последнего авто в котором сидел
	P_LAST_DIALOG,	// ид последнего диалога
	P_USE_ANIM_TYPE,// тип анимки который использует
	P_PASS_ATTEMPS, // кол-во попыток на авторизацию
	P_TARGET_ID,	// нацелен на игрока
	Float: P_HEALTH,// хп игрока
	P_CHECK,
	// -------------------------
	P_TEMP_JOB,				// временная работа
	P_TEMP_JOB_STATE,		// действие что надо делать
	P_TEMP_JOB_CHECK,		// проверка анимки
	// -------------------------
	P_JOB_SERVICE_NAME[17],	// название службы
	P_JOB_TARIFF,			// тариф
	P_JOB_WAGE,				// Зарплата
	P_JOB_LOAD_ITEMS,		// загружено/перенесено (груза/руды)
	P_JOB_CAR,				// рабочий транспорт
	P_END_JOB_TIMER,		// таймер окончания работы
	P_FACTORY_USE_DESK,		// Какой стол использует на заводе
	P_BUS_ROUTE, 			// маршрут автобуса
	P_BUS_ROUTE_STEP,		// шаг маршрута
	P_FARM_ROUTE_STEP,		// шаг маршрута
	P_COMBAIN_ROUTE_STEP,	// шаг маршрута
	P_MECHANIC_FILL_PAY,	// заправлено на N$
	P_MECHANIC_REPAIR_PAY,	// отремонтировано на N$
	bool: P_IN_JOB,			// на работе ли
	// -------------------------
	bool: P_LOGGED,				// статус авторизации
	bool: P_USE_ANIM,			// использует ли анимку (/anim)
	bool: P_BLOCK_LEAVE_AREA, 	// заблокировать вызов OnPlayerLeaveDynamicArea
	bool: P_ANIMS_INIT,			// прогружены ли анимки при спавне
	bool: P_ANIM_LIST_INIT,		// прогружен ли анимлист
	bool: P_SNACK,				// есть ли у игрока закуска
	Text3D: P_ADVISOR_LABEL,	// бейджик советника
	bool: P_ADVISOR_BLOCK_CHAT,	// отключение чата организации
	// -------------------------
	P_AUTH_TIME,		// время на авторизаци
	P_IN_BUSINESS,		// в какой бизнес вошел
	P_IN_HOUSE,			// в какой дом вошел
	P_LAST_PICKUP,		// ид пикапа на которым стоял последний раз
	P_IN_HOTEL_ROOM,	// в каком номере в отеле
	P_IN_HOTEL_FLOOR,	// на каком этаже в отеле
	P_MED_CHEST,		// аптечка
	P_MASK,				// маска
	P_LOTTERY,			// лотерейный билет
	P_DRINK_STEP,		// кол-во использование напитка
	P_REALTOR_TYPE,		// риелторка
	P_OWNABLE_CAR,		// ид личного ТС
	P_USE_TRUNK,		// ид авто используемого багажника
	// -------------------------
	P_IP[16], 			// ип игрока
	P_NAME[20 + 1], 	// имя игрока
	P_WIFE_NAME[21],	// имя жены
	// -------------------------
	P_ACCOUNT_STATE, 		// статус аккаунта (авторизаци/регистрация)
	P_ACCOUNT_STEP_STATE, 	// шаг (регистрации/авторизации)
	// -------------------------
	P_WARN,             // варны
	P_ADMIN_WARN,
	P_WARN_TIME,        // время варнов
	P_MUTE,             // время мута
	// -------------------------
	P_POWER,			// сила
	P_SKILL_COLT,     	// скилл кольт
	P_SKILL_SDPISTOL,   // скилл пистолет с глушителем
	P_SKILL_DEAGLE,     // скилл дигл
	P_SKILL_SHOTGUN,    // скилл дробовик
	P_SKILL_MP5,        // скилл мп5
	P_SKILL_AK47,	    // скилл ак47
	P_SKILL_M4,         // скилл м4
	P_SKILL_SNIPER_RIFLE,	// скилл снайперская винтовка
	P_SKILL_SAWNOFF,    // скилл обрез
	P_SKILL_COMBAT_SG,  // скилл тактический дробовик
 	P_SKILL_MICRO_UZI,  // скилл микро-узи
 	// -------------------------
 	P_SPAWN,            // место спавна
 	// -------------------------
	P_DONATE_CURRENT,	// текущий баланс донат-очков
	P_DONATE_TOTAL,		// всего приобретено донат-очков
	// -------------------------
	bool: P_HOSPITAL,	// лежит ли в больнице
	P_OCCUPIED_BED,		// номер койки
	// -------------------------
	bool: P_WEAPON_RELOADING,	// перезаряжает ли оружие
	P_RELOADINGS_COUNT[11],		// количество перезарядок для каждого оружия
	P_CUFFED,			// наручники на игроке
	P_FOLLOWED_BY,		// кто ведёт за собой
	// -------------------------
	P_BUY_CAR,			// покупает ли авто
	P_RENT_CAR,			// арендованная машина
	P_ALLOWED_CAR,		// доверенная машина
	P_CAR_SLOTS,		// количество слотов для авто
	// -------------------------
	P_JAIL,				// время заключения
	// -------------------------
	P_WEAPON_TINT[MAX_WEAPON_TINTS], // раскраски оружия
	// -------------------------
	P_PREMIUM,			// уровень премиум аккаунта
	P_PREMIUM_DATE,
	P_PREMIUM_CHAT,

	P_LOAD_SKILL,       // скилл грузчика
	P_LUMBERG_SKILL,    // скилл лесоруба
	P_DEPOSIT,          // депозит
	P_FAMILY,           // id семьи
	P_FAMILY_RANK,      // ранг в семье
	P_USED_FISH,        // ловит ли рыбу
	P_FISH_MAS,         // сколько киллограмм рыбы
	// ------------------------
	P_USER_PC,          // пользователь PC версии
	P_STOP_ID,          // id остановки
	P_STOP_STEP,        // на каком шаге поездки
	P_NEED_EAT,         // Нужда: Голод
	P_NEED_WATER,      	// Нужда: Жажда
	// ------------------------
 	Float: P_POS_X,     // позиция выхода
	Float: P_POS_Y,     // позиция выхода
	Float: P_POS_Z,     // позиция выхода
	Float: P_ANGLE,     // позиция выхода
	P_VIRTUAL_WORLD,    // вирт. мир выхода
	P_INTERIOR,         // интерьер выхода
	P_EXIT_PROPERTY,   	// имущество, в котором находился
	P_ATWORK,           // на работе или нет
	// ------------------------ ( Дальнобойщик )
	P_TRUCK_WAGE,           // заработанные деньги на дальнобойщиках
	P_TRUCK_ROAD,     		// уровень дальнобойщика
	Float: P_TRUCK_MILEAGE, // сколько проехал киллометров на фуре
	P_TRUCK_ID,             // ид грузовика который арендовал
	P_TRAILER_ID,           // ид прицепа который взял
	P_TRUCK_ORDER_ID,       // номер заказа который взял
	P_TRUCK_ATWORK,         // начал рабочий день
	P_LAST_MP,              // мероприятие
	P_USED_SHOP,        	// стоит ли за прилавком
	P_GIFTS,                // подковы
	P_TUNING_CAR,           // таймер ускорения авто
	P_BONUS_DAY,            // Бонусы
	P_BONUS_GET,            // Бонусы
	P_FIGHT_STYLE_BOXING,   // СПОРТЗАЛ
	P_FIGHT_STYLE_KUNGFU,   // СПОРТЗАЛ
	P_FIGHT_STYLE_KNEEHEAD, // СПОРТЗАЛ
	P_FIGHT_STYLE_GRABKICK, // СПОРТЗАЛ
	P_FIGHT_STYLE_ELBOW,    // СПОРТЗАЛ
	//----------------------- (( Дополнения SAMP Mobile + ))
	P_UNJ,
	P_PAYDAY_X,
	//----------------------- (( Pass System ))
	P_MED_REFERENCE,
	P_PASS_CASH,
	P_PASS_PHOTO,
	//---------------------- (( Last position of crash ))
	Float:P_LAST_X,
	Float:P_LAST_Y,
	Float:P_LAST_Z,
	Float:P_LAST_FA,
	//
	P_USE_DRUGS,
	//--------------------- (( RentBike ))
	P_RENT_BIKE,
	P_STATUS[4],
	P_STATE_REG_INFO,
};
new timer_calling[MAX_PLAYERS];
// ------------------------------------------
enum
{
	PROMO_TYPE_MONEY = 0, 	// деньги
	PROMO_TYPE_DONATE,		// донат
	PROMO_TYPE_EXP,			// опыт
}

enum E_PROMO_STRUCT
{
	E_PLAYER_STRUCT: P_DATA,
	P_SQL_NAME[16],
	P_NAME[7]
}

new promo_info[3][E_PROMO_STRUCT] =
{
	{P_MONEY, "money", "Деньги"},
	{P_DONATE_CURRENT, "donate", "Донат"},
	{P_EXP, "exp", "Exp"}
};

enum E_GIFT_STRUCT
{
	G_SQL_ID,
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z
}

//new g_gift[MAX_GIFT][E_GIFT_STRUCT];
//new g_gift_loaded;

// ------------------------------------------
enum E_BACKPACK_TYPE
{
	TYPE_MONEY = 0,
	TYPE_FISH,
	TYPE_DRUGS,
	TYPE_AMMO,
	TYPE_METALL,
	TYPE_MED,
	TYPE_MASK,
	TYPE_GIFT
};

enum E_BACKPACK_STRUCT
{
	BP_ITEAM_NAME[32],
	E_PLAYER_STRUCT: P_DATA,
	BP_SQL_NAME[16],
	bool:BP_ITEAM_USED,
	BP_MAX_QUANTITY
};

new const
	g_backpack_info[8][E_BACKPACK_STRUCT]=
{
	{"Деньги",				P_MONEY,	"money",	false,	50000000},		// 1
	{"Рыба",				P_FISH_MAS,	"fish_mas",	false,	50},			// 2
	{"Наркотики",			P_DRUGS,	"drugs",	true,	250},			// 3
	{"Патроны",				P_AMMO,		"ammo",		false,	500},			// 4
	{"Металл",				P_METALL,	"metall",	false,	500},			// 5
	{"Аптечка",				P_MED_CHEST,"no_sql",	true,	3},				// 6
	{"Маска",				P_MASK,		"no_sql",	true,	5},				// 7
	{"Подковы",				P_GIFTS,	"gifts",	false,	100}			// 9
};

new
	Float: g_shop_pos[][] = // позиции лавок
{
	{1146.70947, -1437.16602, 15.91380},
	{1146.69617, -1443.02417, 15.91380},
	{1146.68323, -1448.84082, 15.91380},
	{1146.67761, -1455.08655, 15.91380},
	{1146.67285, -1460.99060, 15.91380},
	{1146.62732, -1466.79346, 15.91380},
	{1110.56348, -1466.18860, 15.91380},
	{1110.40344, -1459.17944, 15.91380},
	{1110.38367, -1452.87939, 15.91380},
	{1110.38831, -1446.70715, 15.91380},
	{1110.43506, -1440.76489, 15.9138},
	{1110.44226, -1434.60437, 15.91380}
};

new g_shop_pos_used[sizeof g_shop_pos] = {false, ...}; // занята ли лавка
new Text3D: g_shop_pos_label[sizeof g_shop_pos]; // текст лавки
new g_shop_area[sizeof g_shop_pos]; // зона лавок

enum E_PROD_STRUCT
{
	P_ITEAM_NAME[32],
	E_PLAYER_STRUCT: P_DATA,
	P_SQL_NAME[16],
	P_COST
};

new g_prod_info[sizeof g_shop_pos][E_PROD_STRUCT];
new const g_prodload[sizeof g_shop_pos];

enum E_FOOTBALL_STRUCT
{
	FB_COMAND_NAME[32],
	FB_SCORE
};

new const
	g_football_info[20][E_FOOTBALL_STRUCT]=
{
	{"Бельгия",				1727},			// 1
	{"Франция",				1726},			// 2
	{"Бразилия",			1676},			// 3
	{"Хорватия",			1634},			// 4
	{"Англия",				1631},			// 5
	{"Португалия",			1614},			// 6
	{"Уругвай",				1609},			// 7
	{"Швейцария",			1599},			// 8
	{"Испания",				1591},			// 9
	{"Дания",				1589},			// 10
	{"Аргентина",			1582},			// 11
	{"Колумбия",			1575},			// 12
	{"Чили",				1565},			// 13
	{"Швеция",				1560},			// 14
	{"Нидерланды",			1560},			// 15
	{"Германия",			1558},			// 16
	{"Мексика",				1540},			// 17
	{"Италия",				1539},			// 18
	{"Уэльс",				1525},			// 19
	{"Россия",				1518}			// 20
};

// ------------------------------------------
static const trucker_rank_name[][] =
{
	"Утенок",
	"Летчик",
	"Сухогруз",
	"Водила",
	"Бывалый",
	"Тракер",
	"Эксперт",
	"Турбовоз",
	"Дальнобойщик",
	"Легенда"
};

enum
{
	T_MENU = 0, 	// меню
	T_ORDER,        // начало / конец работы
	T_PASSPORT,		// паспорт
	T_WAGE,         // выдача заработной платы
	T_RESPV,        // удаление рабочего транспорта
}

enum E_MP_STRUCT
{
	MP_CREATE, 			// создано ли мероприятие
	MP_NAME[32],        // название
	MP_PRIZE,           // приз на мероприятии
	Float: MP_POS_X,    // координата X
	Float: MP_POS_Y,    // координата Y
	Float: MP_POS_Z     // координата Z
};

new mp[E_MP_STRUCT];

static const admins_rank_name[][] =
{
	"",
	"Администратор",
	"Администратор",
	"Администратор",
	"Администратор",
	"Администратор",
	"Администратор"
};
#define MAX_PERFORMANCE_ITEMS

new engine_ptune[MAX_PERFORMANCE_ITEMS][] =
{
	"Чип-тюнинг",
	"Удаление катализаторов",
	"Воздушный фильтр нулевого сопротивления",
	"Дроссельная заслонка увеличенного диаметра",
	"Кованые поршни двигателя"
};

new engine_ptune_price[MAX_PERFORMANCE_ITEMS] = {150000, 100000, 70000, 120000, 140000};
new Float:engine_ptune_boost[MAX_PERFORMANCE_ITEMS] = {0.15, 0.08, 0.08, 0.08, 0.10};

new brake_ptune[MAX_PERFORMANCE_ITEMS][] =
{
	"Керамические колодки",
	"Спортивные тормозные диски",
	"Расширенные суппорта",
	"Тормозной цилиндр",
	"Вакуумный усилитель тормозов"
};
new brake_ptune_price[MAX_PERFORMANCE_ITEMS] = {90000, 100000, 70000, 120000, 140000};
new Float:brake_ptune_boost[MAX_PERFORMANCE_ITEMS] = {2.5, 2.5, 2.0, 3.0, 3.5};

new stability_ptune[MAX_PERFORMANCE_ITEMS][] =
{
	"Распорки на стойки",
	"Амортизаторы",
	"Усиленные пружины",
	"Стабилизаторы поперечной устойчивости",
	"Шарниры подвески"
};

new stability_ptune_price[MAX_PERFORMANCE_ITEMS] = {25000, 70000, 50000, 80000, 65000};
// ------------------------------------------
enum
{
	STORAGE_METALL = 0, // максимальное кол-во металла
	STORAGE_AMMO, // максимальное кол-во патронов
	STORAGE_DRUGS // максимальное кол-во наркотиков
}

// ------------------------------------------
enum E_OWNABLE_CAR_STRUCT
{
	OC_SQL_ID, 			// ид в базе
	OC_OWNER_ID,		// ид владельца
	OC_OWNER_NAME[21],	// имя владельца
	OC_NUMBER[8],		// номер ТС
	OC_MODEL_ID,		// модель
	OC_COLOR_1,			// цвет 1
	OC_COLOR_2,			// цвет 2
	Float: OC_POS_X,	// позиции ТС
	Float: OC_POS_Y,	// позиции ТС
	Float: OC_POS_Z,	// позиции ТС
	Float: OC_ANGLE,	// позиции ТС (угол поворота)
	OC_World,
	OC_Int,
	bool: OC_KEY_IN,	// вставлен ли ключ
	OC_CREATE,	// время создания
	Float: OC_FUEL,            // топливо
	OC_PT_ENGINE,       // performance tuning двигатель
	OC_PT_BRAKE,       	// performance tuning тормоза
	OC_PT_STABILITY,    // performance tuning устойчивость
};

// ------------------------------------------
enum E_VEHICLE_TRUNK_STRUCT
{
	VT_SQL_ID,
	VT_ITEM_TYPE, 		// тип предмета
	VT_ITEM_AMOUNT,		// кол-во
	VT_ITEM_VALUE
};

// ------------------------------------------
enum E_ITEM_STRUCT
{
	I_NAME[16],
	I_NAME_COUNT[8],
	bool: I_COMBINATION
};

// ------------------------------------------
enum E_HOTEL_STRUCT
{
	H_SQL_ID,
	H_OWNER_ID,
	H_RENT_DATE,
	bool: H_STATUS,
	H_OWNER_NAME[21]
};

enum E_HOTEL_CAR_PARK_STRUCT
{
	Float: HC_POS_X,
	Float: HC_POS_Y,
	Float: HC_POS_Z,
	Float: HC_ANGLE,
	HC_VEHICLE_ID
};

// ------------------------------------------
enum E_HOUSE_STRUCT
{
	H_SQL_ID,			// ид в базе данных
	H_NAME[20],			// название \ тип
	H_OWNER_ID,			// ид аккаунта владельца
	H_CITY,				// ид города
	H_ZONE,				// ид района
	H_IMPROVEMENTS,		// уровень улучшений
	H_RENT_DATE,		// аренда на n времени
	H_PRICE,			// стоимость дома
	H_RENT_PRICE,		// плата за аренду в день
	H_LOCK_STATUS,		// статус (открыто/закрыто)
	H_TYPE,				// тип дома (интерьер)
	Float: H_POS_X,		// позиция пикапа входа
	Float: H_POS_Y,		// позиция пикапа входа
	Float: H_POS_Z,		// позиция пикапа входа
	Float: H_EXIT_POS_X,// позиция после выхода из дома
	Float: H_EXIT_POS_Y,// позиция после выхода из дома
	Float: H_EXIT_POS_Z,// позиция после выхода из дома
	Float: H_EXIT_ANGLE,// угол поворота
	Float: H_CAR_POS_X,	// позиция транспорта
	Float: H_CAR_POS_Y,	// позиция транспорта
	Float: H_CAR_POS_Z,	// позиция транспорта
	Float: H_CAR_ANGLE,	// угол поворота транспорта
	Float: H_STORE_X,	// позиция шкафа
	Float: H_STORE_Y,	// позиция шкафа
	Float: H_STORE_Z,	// позиция шкафа
	// -------------------------
	H_OWNER_NAME[63 + 1],	// имя владельца
	Text3D: H_STORE_LABEL,	// 3д текст (шкаф)
	H_ENTER_PICKUP,			// пикап входа
	H_HEALTH_PICKUP,		// пикап аптечки
	H_MAP_ICON,				// иконка на карте
	H_FLAT_ID,				// номер квартиры
	// -------------------------
	H_STORE_METALL,		// металл в шкафу
	H_STORE_DRUGS,		// наркотики в шкафу
	H_STORE_WEAPON,		// оружие в шкафу
	H_STORE_AMMO,		// патроны оружия в шкафу
	H_STORE_SKIN,		// одежда в шкафу
	H_FAMILY_ID,         // id семьи
	H_MEBEL_1,         // Пакет мебели №1
};

enum E_HOUSE_TYPE_STRUCT
{
	HT_NAME[20],
	Float: HT_ENTER_POS_X,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Y,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Z,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_ANGLE,	// позиции после входа в интерьера
	Float: HT_HEALTH_POS_X,		// позиции аптечки
	Float: HT_HEALTH_POS_Y,		// позиции аптечки
	Float: HT_HEALTH_POS_Z,		// позиции аптечки
	Float: HT_STORE_POS_X,		// позиции шкафа
	Float: HT_STORE_POS_Y,		// позиции шкафа
	Float: HT_STORE_POS_Z,		// позиции шкафа
	HT_INTERIOR,				// ид интерьера
	HT_ROOMS,					// кол-во комнат
	HT_PRICE                   // цена
};

enum E_HOUSE_ROOM_STRUCT
{
	HR_SQL_ID,			// ид в базе
	HR_OWNER_ID,		// ид игрока
	HR_RENT_DATE,		// насколько арендована комната
	HR_RENT_TIME,		// когда поселился
	HR_OWNER_NAME[21]	// ник арендатора
};

enum // управление домом
{
	HOUSE_OPERATION_PARAMS, 		// изменение параметров дома
	HOUSE_OPERATION_LOCK,			// открыть / закрыть
	HOUSE_OPERATION_IMPROVEMENTS,	// улучшение
	HOUSE_OPERATION_CAR_DELIVERY,	// доставить ТС к дому
	HOUSE_OPERATION_CAR_GPS,		// отметить транспорт на GPS
	HOUSE_OPERATION_RENTERS,		// список арендаторов
	HOUSE_OPERATION_TYPE			// смена интереьра
}

// ------------------------------------------
enum E_BUSINESS_STRUCT
{
	B_SQL_ID,			// ид в базе данных
	B_NAME[24],			// название
	B_OWNER_ID,			// ид аккаунта владельца
	B_CITY,				// ид города
	B_ZONE,				// ид района
	B_ENTER_PRICE,		// цена за вход в биз
	B_ENTER_MUSIC,		// звук при входе
	B_IMPROVEMENTS,		// уровень улучшений
	B_PRODS,			// количества продуктов
	B_PROD_PRICE,		// стоимость 1 продукта
	B_BALANCE,			// бюджет бизнеса
	B_BALANCE_DAY,      // прибыль за день
	B_RENT_DATE,		// аренда на n времени
	B_PRICE,			// стоимость бизнеса
	B_RENT_PRICE,		// плата за аренду в день
	B_LOCK_STATUS,		// статус (открыта/закрыта)
	B_TYPE,				// тип бизнеса
	B_INTERIOR,			// интерьер
	Float: B_POS_X,		// позиция бизнеса
	Float: B_POS_Y,		// позиция бизнеса
	Float: B_POS_Z,		// позиция бизнеса
	Float: B_EXIT_POS_X,// позиция после выхода из бизнеса
	Float: B_EXIT_POS_Y,// позиция после выхода из бизнеса
	Float: B_EXIT_POS_Z,// позиция после выхода из бизнеса
	Float: B_EXIT_ANGLE,// угол поворота
	B_PRICE_1,          // цена на товар 1
	B_PRICE_2,          // цена на товар 2
	B_PRICE_3,          // цена на товар 3
	B_PRICE_4,          // цена на товар 4
	B_PRICE_5,          // цена на товар 5
	B_PRICE_6,          // цена на товар 6
	B_PRICE_7,          // цена на товар 7
	B_PRICE_8,          // цена на товар 8
	B_PRICE_9,          // цена на товар 9
	B_PRICE_10,         // цена на товар 10
	// -------------------------
	B_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: B_LABEL,		// 3д текст
	B_HEALTH_PICKUP		// ид пикапа аптечки
};

enum // типы бизнесов
{
	BUSINESS_TYPE_SHOP_24_7 = 1, 	// магазин 24/7
	BUSINESS_TYPE_CLUB = 2, 		// клуб (алхамбра)
	BUSINESS_TYPE_REALTOR_BIZ = 3, 	// управление статистики (бизнесы)
	BUSINESS_TYPE_REALTOR_HOME = 4,	// риелторское агенство (дома)
	BUSINESS_TYPE_CLOTHING_SHOP = 5,// магазин одежды
	BUSINESS_TYPE_HOTEL = 6,		// отель
	BUSINESS_TYPE_CAR_MARKET = 7,	// авторынок
	BUSINESS_TYPE_CASINO = 8,		// казино
	BUSINESS_TYPE_CELL_SALON = 9,	// сотовый салон
	BUSINESS_TYPE_CAR_TUNING = 10, 	// станция тех. обслуживания
	BUSINESS_TYPE_MCDONALDS = 11, 	// закусочная // UPDATE
	BUSINESS_TYPE_SHOP_GUN = 12, 	// магазин оружия
	BUSINESS_TYPE_SPORTZAL = 13, 	// Спортзал
	BUSINESS_TYPE_AUTOSCHOOL = 14,  // автошкола
	BUSINESS_TYPE_MEBEL = 15  		// Смена интерьера дома
};

enum //
{
	BIZ_OPERATION_PARAMS = 0,		// управление заправкой
	BIZ_OPERATION_LOCK,				// открыть / закрыть
	BIZ_OPERATION_ENTER_PRICE,		// установить цену за вход
	BIZ_OPERATION_PROD_ORDER,		// заказать продукты
	BIZ_OPERATION_PROFIT_STATS,		// финансовая статистика
	BIZ_OPERATION_IMPROVEMENTS,		// Улучшения
	BIZ_OPERATION_PROD_PRICE,		// установить стоимость продукта
	BIZ_OPERATION_SET_NAME,         // Смена названия бизнеса
	BIZ_OPERATION_CASH,         	// Снятие денег со счета бизнеса.
};

enum E_BUSINESS_INTERIOR_STRUCT
{
	BT_NAME[30],            // название
	Float: BT_EXIT_POS_X, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Y, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Z, 	// позиции пикапа выхода
	// -------------------
	Float: BT_ENTER_POS_X, 	// позиции входа
	Float: BT_ENTER_POS_Y, 	// позиции входа
	Float: BT_ENTER_POS_Z, 	// позиции входа
	Float: BT_ENTER_ANGLE, 	// угол поворота
	BT_ENTER_INTERIOR,		// интерьер
	// -------------------
	Float: BT_HEALTH_POS_X,	// позиции аптечки
	Float: BT_HEALTH_POS_Y,	// позиции аптечки
	Float: BT_HEALTH_POS_Z,	// позиции аптечки
	// -------------------
	Float: BT_BUY_POS_X, 	// позиции покупки
	Float: BT_BUY_POS_Y, 	// позиции покупки
	Float: BT_BUY_POS_Z, 	// позиции покупки
	// -------------------
	Float: BT_LABEL_POS_X,	// позиции 3д текста
	Float: BT_LABEL_POS_Y,	// позиции 3д текста
	Float: BT_LABEL_POS_Z,	// позиции 3д текста
	BT_BUY_CHECK_ID			// ид чекпоинта
};

enum E_BUSINESS_GPS_STRUCT // список бизнесов в GPS
{
	BG_SQL_ID,
	BG_BIZ_ID,
	BG_POS,
	BG_TIME
};

// ------------------------------------------

enum E_FUEL_STATION_STRUCT
{
	FS_SQL_ID,			// ид в базе данных
	FS_NAME[20],		// название
	FS_OWNER_ID,		// ид аккаунта владельца
	FS_CITY,			// ид города
	FS_ZONE,			// ид района
	FS_IMPROVEMENTS,	// уровень улучшений
	FS_FUELS,			// количества топлива
	FS_FUEL_PRICE,		// цена топлива за 1 л
	FS_BUY_FUEL_PRICE,	// закупочная цена за 1 л
	FS_BALANCE,			// бюджет заправки
	FS_RENT_DATE,		// аренда на n времени
	FS_PRICE,			// стоимость заправки
	FS_RENT_PRICE,		// плата за аренду в день
	FS_LOCK_STATUS,		// статус (открыта/закрыта)
	Float: FS_POS_X,	// позиция заправки
	Float: FS_POS_Y,	// позиция заправки
	Float: FS_POS_Z,	// позиция заправки
	// -------------------------
	FS_OWNER_NAME[20 + 1],	// имя владельца
	Text3D: FS_LABEL,		// 3д текст
	FS_AREA				// зона
};

enum //
{
	FUEL_ST_OPERATION_PARAMS = 0,		// Управление заправкой
	FUEL_ST_OPERATION_LOCK,				// Открыть / закрыть
	FUEL_ST_OPERATION_NEW_NAME,			// Новое название
	FUEL_ST_OPERATION_FUEL_PRICE,		// установить цену за топливо
	FUEL_ST_OPERATION_FUEL_ORDER,		// заказать топливо
	FUEL_ST_OPERATION_PROFIT_STATS,		// финансовая статистика
	FUEL_ST_OPERATION_IMPROVEMENTS,		// Улучшения
	FUEL_ST_OPERATION_CASH				// Снять / положить деньги.
};

// ------------------------------------------
enum E_WEATHER_STRUCT
{
	W_NAME[32],
	W_ID,
	W_DEGREES
};

// ------------------------------------------
// 			Личные настройки

enum E_PLAYER_SETTINGS_STRUCT
{
//	S_CHAT_TYPE,	// тип чата (Отключен,Стандарт,Advance)
	S_TEAM_CHAT,	// отображение чата организации
	S_PLAYERS_NICK,	// отображение ников над игроками
//	S_NICK_IN_CHAT,	// отображение ников в чате
//	S_ID_IN_CHAT,	// отображение ид игрока в чате
	S_CHANGE_NAME   // ввод ника при регистрации / авторизации
};

enum
{
	SETTING_CHAT_OFF = 0,
	SETTING_CHAT_STANDART,
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_OFF = 0,
	SETTING_TYPE_ON
};

// ------------------------------------------
enum E_IMPROVEMENTS_STRUCT
{
	I_NAME[32],
	I_PRICE,
	I_LEVEL
};

// ------------------------------------------
enum E_PLAYER_GPS_STRUCT
{
	bool: G_ENABLED,
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z
};

enum E_GPS_STURCT
{
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z,
	G_MARKET_TYPE
};

// ------------------------------------------
enum E_HELP_INFO_STRUCT
{
	H_TITLE[64],
	H_INFO[1024]
};

// ------------------------------------------
enum E_SERVER_RADIO_STRUCT
{
	SR_CHANNEL_NAME[32],
	SR_CHANNEL_URL[64]
};

// ------------------------------------------
enum E_ANIM_LIST_STRUCT
{
	AL_DESCRIPTION[32],
	AL_LIB[32],
	AL_NAME[32],
	Float: AL_DELTA,
	AL_LOOP,
	AL_LOCK_X,
	AL_LOCK_Y,
	AL_FREEZE,
	AL_TIME
};

// ------------------------------------------
enum E_MAP_ICONS_STRUCT
{
	Float: MI_POS_X,
	Float: MI_POS_Y,
	Float: MI_POS_Z,
	MI_TYPE
};

// ------------------------------------------
enum E_TELEPORT_STRUCT
{
	T_NAME[64],
//	T_ID,
	T_PICKUP_ID,
	Float: T_PICKUP_POS_X,
	Float: T_PICKUP_POS_Y,
	Float: T_PICKUP_POS_Z,
	T_PICKUP_VIRTUAL_WORLD,
	Float: T_POS_X,
	Float: T_POS_Y,
	Float: T_POS_Z,
	Float: T_ANGLE,
	T_INTERIOR,
	T_VIRTUAL_WORLD,
	T_ACTION_TYPE,
	Text3D: T_LABEL
};

enum // типы телепорта
{
	T_ACTION_TYPE_BLOCK_LEAVE_AREA = 1, // заблокировать вызов паблика OnPlayerLeaveDynamicArea
	T_ACTION_TYPE_END_JOB,	// анулировать деньги на временной работе если выходит из инта
	T_ACTION_TYPE_LEAVE_HOSPITAL, // проверить вылечился или нет в больнице
	T_ACTION_TYPE_LEAVE_PPS, // проверить сидит ли в тюрьме
	T_ACTION_TYPE_ENTER_PHOTO,
};

// ------------------------------------------
enum E_DRIVING_TUTORIAL_STRUCT
{
	DT_TITLE[64],
	DT_INFO[2048]
};

enum E_PLAYER_DRIVING_EXAM_STRUCT
{
	DE_POINTS, // Балы
	DE_EXAM_STEP, // теория
	DE_ROUTE_STEP // практика
};

// ------------------------------------------
enum E_DRIVING_EXAM_STRUCT
{
	DE_TITLE[64],
	DE_LIST_ITEMS[256],
	DE_CORRECT_ANSWER
};

// ------------------------------------------
enum E_ATM_STRUCT
{
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z,
	Float: A_ROT_Z
};

// ------------------------------------------
enum E_GATE_STRUCT
{
	G_DESCRIPTION[16],	// описание (наприм. жд-вьезд/жд-выезд)
	G_TYPE,				// тип (шлагбаум,ворота)
	Float: G_POS_X,		// позиции
	Float: G_POS_Y,		// позиции
	Float: G_POS_Z,		// позиции
	Float: G_ANGLE,		// угол
	Float: G_OPEN_POS_X, // позиции открытия
	Float: G_OPEN_POS_Y, // позиции открытия
	Float: G_OPEN_POS_Z, // позиции открытия
	Float: G_OPEN_ANGLE, // угол открытия (для кнопки)
	bool: G_STATUS,		// статус
	G_OBJECT_ID[2]		// иды обьектов
};

enum
{
	GATE_TYPE_BARRIER = 1,		// шлагбаум
	GATE_TYPE_BARRIER_MSG,		// шлагбаум (с сообщением)
	GATE_TYPE_BARRIER_BUTTON,	// шлагбаум (на кнопку)
	GATE_TYPE_NORMAL,	 		// ворота
}

// ------------------------------------------
enum E_BANK_ACCOUNT_STRUCT
{
	BA_ID,
	BA_NAME[20 + 1],
	BA_PIN_CODE[9],
	BA_BALANCE,
	BA_REG_TIME
};

enum E_BANK_TRANSFER_STRUCT
{
	BT_ID,
	BT_NAME[20 + 1]
};

// ------------------------------------------
enum E_PHONE_CALL_STRUCT
{
	PC_INCOMING_PLAYER,		// исходящий вызов
	PC_OUTCOMING_PLAYER,	// входящий вызов
	PC_TIME,				// время звонка
	bool:PC_ENABLED		// режим телефона (вкл\откл)
};

// ------------------------------------------
enum E_PHONE_BOOK_STRUCT
{
	PB_SQL_ID,
	PB_NAME[21],
	PB_NUMBER[10],
	PB_TIME
};

enum
{
	PHONE_BOOK_OPERATION_OPTIONS = 0,	// варианты
	PHONE_BOOK_OPERATION_CALL,			// позвонить
	PHONE_BOOK_OPERATION_SEND_SMS,		// отправить смс
	PHONE_BOOK_OPERATION_CHANGE_NAM,	// изменить имя
	PHONE_BOOK_OPERATION_CHANGE_NUM,	// изменить номер
	PHONE_BOOK_OPERATION_DELETE_CON,	// удалить контакт
};
// ------------------------------------------
enum E_INFO_PICKUP_STRUCT
{
	IP_TITLE[64],
	IP_INFO[1024],
	IP_LABEL_INFO[64],
	IP_TITLE_COLOR,
	Float: IP_POS_X,
	Float: IP_POS_Y,
	Float: IP_POS_Z
};

// ------------------------------------------
enum E_MINER_CARRIAGE_STRUCT
{
	Float: MC_START_POS_X,
	Float: MC_START_POS_Y,
	Float: MC_START_POS_Z,
	Float: MC_END_POS_X,
	Float: MC_END_POS_Y,
	Float: MC_END_POS_Z,
	bool: MC_STATUS,
	MC_OBJECT_ID,
	MC_PICKUP_ID,
	Text3D: MC_LABEL,
	MC_ORE_COUNT,
	bool: MC_IN_MOVE
};

// ------------------------------------------
enum E_FACTORY_DESK_STRUCT
{
	Float: FD_POS_X,
	Float: FD_POS_Y,
	Float: FD_POS_Z,
	FD_CHEK_ID,
	FD_OBJECT_ID,
	bool: FD_USED,
	Text3D: FD_LABEl
};

// ------------------------------------------
enum E_REPOSITORY_STRUCT
{
	R_AMOUNT, // кол-во
	Text3D: R_LABEL,
	Text3D: R_LABEL_2,
	bool: R_NOT_SAVE
};

enum // типы складов
{
	REPOSITORY_TYPE_MINER, 		// шахта
	REPOSITORY_TYPE_FACTORY, 	// завод
	REPOSITORY_TYPE_OIL_FACTORY, // нефтезавод
	REPOSITORY_TYPE_ARMY,		// ВМФ
	REPOSITORY_TYPE_SAWMILL,	// лесопилка
	REPOSITORY_TYPE_FARM,		// ферма
	REPOSITORY_TYPE_MAYOR,		// мэрия
};

enum
{
	// шахта
	REPOSITORY_ACTION_MINER_METAL = 0,	// металл шахты
	REPOSITORY_ACTION_MINER_ORE,		// руда
	REPOSITORY_ACTION_MINER_REMELTI,	// на переплавке

	// завод
	REPOSITORY_ACTION_FACTORY_METAL = 0, // металл
	REPOSITORY_ACTION_FACTORY_FUEL,		// топливо
	REPOSITORY_ACTION_FACTORY_PROD,		// продукты

	// нефтезавод
	REPOSITORY_ACTION_OIL_FACTORY_F = 0, // топливо на нефтезаводе

	// ВМФ
	REPOSITORY_ACTION_ARMY_METAL = 0,	// металл на складе воинской части
	REPOSITORY_ACTION_ARMY_AMMO,		// патроны на складе воинской части

	// лесопилка
	REPOSITORY_ACTION_SAWMILL_WOOD = 0,	// лесопилка дерево

	// ферма
	REPOSITORY_ACTION_FARM_WOOD = 0,	// ферма пшеница

	// мэрия
	REPOSITORY_ACTION_COFFERS = 0,	// мэрия деньги
};
new g_repository[8][3][E_REPOSITORY_STRUCT]; // склады

// ------------------------------------------
enum E_GANG_REPOSITORY_STRUCT
{
	GR_GANG,
	GR_METALL,
	GR_AMMO,
	GR_DRUGS,
	GR_MONEY,
	Text3D: GR_LABEL,
	GR_PICKUP,
	bool: GR_LOCK
}

new g_gang_repository[MAX_GANG_REPOSITORIES][E_GANG_REPOSITORY_STRUCT]; // склады банд

// ------------------------------------------
enum E_GANG_ZONES_STRUCT
{
	Float: GZ_MIN_X,
	Float: GZ_MIN_Y,
	Float: GZ_MAX_X,
	Float: GZ_MAX_Y,
	GZ_GANG,
	GZ_ZONE,
	GZ_AREA
}

new g_gang_zone[MAX_GZ][E_GANG_ZONES_STRUCT]; // гангзоны
new g_gang_zones_loaded; // количество загруженных гангзон

// ------------------------------------------
enum
{
	GANG_GROVE = 1,	// Grove Gang
	GANG_VAGOS,		// Vagos Gang
	GANG_BALLAS,	// Ballas Gang
	GANG_AZTECAS,	// Aztecas Gang
}

// ------------------------------------------
new gang_zone_colors[5] =
{
	0xFFFFFF90,	// Свободная зона
	0x00D900C8, // Grove Gang
	0xFFC801C8, // Vagos Gang
	0xD900D3C8,  // Ballas Gang
	0x01FCFFC8  // Aztecas Gang
};

new family_colors[17] =
{
	0xFFFFFFFF, // белый
	0xCD5C5CFF, // багровый
	0xFF0000FF, // красный
	0x8B0000FF, // темно-красный
	0xFFC0CBFF, // светло-розовый
	0xFFA07AFF, // цвет кожи
	0xFFFF00FF, // желтый
	0xFFD700FF, // золотой
	0xEE82EEFF, // фиолетовый
	0x800080FF, // темно-фиолетовый
	0x808080FF, // серый
	0xC0C0C0FF, // серебристый
	0x00FF00FF, // лайм
	0x008000FF, // зеленый
	0x228B22FF, // лесной
	0x1E90FFFF, // синий
	0x00BFFFFF // цвет неба
};

new family_colors_name[][32] =
{
	{"Белый"},
	{"Багровый"},
	{"Красный"},
	{"Темно-красный"},
	{"Светло-розовый"},
	{"Цвет кожи"},
	{"Желтый"},
	{"Золотой"},
	{"Фиолетовый"},
	{"Темно-фиолетовый"},
	{"Серый"},
	{"Серебристый"},
	{"Лайм"},
	{"Зеленый"},
	{"Лесной"},
	{"Синий"},
	{"Цвет неба"}
};

// ------------------------------------------
enum E_CAPTURE_STRUCT
{
	bool: C_STATUS,
	C_GANG_ZONE,
	C_ATTACK_TEAM,
	C_PROTECT_TEAM,
	C_ATTACKER_KILLS,
	C_PROTECTOR_KILLS,
	C_TIME,
	C_WAIT_TIME[4]
}

new g_capture[E_CAPTURE_STRUCT]; // капты для ОПГ

// ------------------------------------------
new weapon_tints[6] =
{
	0xFF4B5320, // Камуфляж
	0xFF9EAF43, // Зеленый
	0xFFFFAE1A, // Оранжевый
	0xFF0073E6, // Синий (полицейский)
	0xFFFF1493, // Розовый
	0xFFFFD700 	// Золотой
};

enum
{
	WEAPON_TINT_CAMO = 0,
	WEAPON_TINT_GREEN = 1,
	WEAPON_TINT_ORANGE,
	WEAPON_TINT_POLICE,
	WEAPON_TINT_PINK,
	WEAPON_TINT_GOLD
}

enum E_WEAPON_TINT_STRUCT
{
	WT_OBJECT,
	Float: WT_X,
	Float: WT_Y,
	Float: WT_Z,
	Float: WT_RX,
	Float: WT_RY,
	Float: WT_RZ,
	Float: WT_SCALE_X,
	Float: WT_SCALE_Y,
	Float: WT_SCALE_Z
}

new g_weapon_tint[MAX_WEAPON_TINTS][E_WEAPON_TINT_STRUCT] =
{
	{346, 	-0.004999, 	-0.003999, 	-0.006000, 	0.000000, 	0.000000, 	-1.800000, 	1.007000,	1.337999, 	1.069000},
	{347, 	-0.003999, 	-0.001999, 	-0.003999, 	0.000000, 	0.299999, 	-0.999999, 	1.000000,	1.188000, 	1.063000},
	{348, 	-0.006999, 	-0.004000, 	0.002000, 	-1.600000, 	-0.200000, 	0.400000, 	1.019999, 	1.146999, 	1.027000},
	{349, 	0.000000, 	-0.008999, 	-0.004000, 	0.000000, 	1.099999, 	1.499999, 	1.000000, 	1.222000, 	1.088000},
	{351, 	0.003000, 	-0.014000, 	-0.003000, 	0.000000, 	0.000000, 	2.199999, 	1.000000, 	1.371000, 	1.023000},
	{352, 	-0.002000, 	-0.008000, 	-0.001999, 	-0.300000, 	0.000000, 	1.199999, 	1.019999, 	1.245000, 	1.043000},
	{353, 	0.000000, 	-0.009000, 	-0.009000, 	0.000000, 	0.099999, 	2.100000, 	1.000000, 	1.290001, 	1.053000},
	{355, 	0.000000, 	-0.011000, 	0.000000, 	0.000000, 	0.000000, 	2.100000, 	1.009000, 	1.424000, 	1.013000},
	{356, 	-0.002000, 	-0.005999, 	0.001000, 	0.000000, 	0.899999, 	1.699999, 	0.997999, 	1.318999, 	1.088001},
	{372, 	-0.003000, 	-0.009000, 	-0.001999, 	0.000000, 	0.400000, 	0.800000, 	1.015000, 	1.232000, 	1.055000},
	{357, 	0.000000, 	-0.015000, 	-0.001999, 	0.000000, 	1.200000, 	2.199999, 	1.000000, 	1.286001, 	1.096001},
	{359, 	0.001999, 	-0.007000, 	-0.009000, 	0.000000, 	-0.100000, 	0.000000, 	0.989999, 	1.213001, 	1.084001},
	{360, 	0.001000, 	-0.004999, 	-0.008000, 	0.000000, 	0.000000, 	0.000000, 	1.000000, 	1.140000, 	1.055000}
};

enum E_TRAILER_STRUCT
{
	Float: TK_X,
	Float: TK_Y,
	Float: TK_Z,
	Float: TR_X,
	Float: TR_Y,
	Float: TR_Z
}

new g_trailer_pos[12][E_TRAILER_STRUCT] =
{
	{2452.2041, -2099.4314, 14.0410,		2452.2041, -2108.9253, 16.0410},
	{2457.2439, -2099.4314, 14.0410,		2457.2439, -2108.9253, 16.0410},
	{2462.7747, -2099.4314, 14.0410,		2462.7747, -2108.9253, 16.0410},
	{2468.4016, -2099.4314, 14.0410,		2468.4016, -2108.9253, 16.0410},
	{2474.9736, -2099.4314, 14.0410,		2474.9736, -2108.9253, 16.0410},
	{2480.3936, -2099.4314, 14.0410,		2480.3936, -2108.9253, 16.0410},
	{2485.9548, -2099.4292, 14.0410,		2485.9548, -2108.9253, 16.0410},
	{2491.5886, -2099.4314, 14.0410,		2491.5886, -2108.9253, 16.0410},
	{2499.5256, -2099.4314, 14.0410,		2499.5256, -2108.9253, 16.0410},
	{2504.9946, -2099.4500, 14.0410,		2504.9946, -2108.9253, 16.0410},
	{2510.5408, -2099.4238, 14.0410,		2510.5520, -2108.9253, 16.0410},
	{2516.1675, -2099.4314, 14.0410,		2516.1675, -2108.9253, 16.0410}
};

new const
	Float: g_unload_truck_pos[4][3] =
{
	{649.7244, -564.9355, 16.2738},
	{1003.6676, -944.8878, 42.1681},
	{1934.5881,-1773.3428,13.3828},
	{-98.1167,-1185.8690,2.0424}
};


// ------------------------------------------
enum E_GREEN_ZONES_STRUCT
{
	Float: GZ_MIN_X,
	Float: GZ_MIN_Y,
	Float: GZ_MAX_X,
	Float: GZ_MAX_Y,
	GZ_NAME[32],
	GZ_AREA,
	bool: GZ_ALLOW_PARK
}

new
	g_green_zones[MAX_GREEN_ZONES][E_GREEN_ZONES_STRUCT] =
{
	{-395.0290,-232.9831, -627.7357,-115.7705, "Лесоруб", -1, true},
	{1033.1023,-1717.0176, 1281.9651,-1826.2123, "Автовокзал", -1, false},
	{716.4014,-1543.9395, 638.0472,-1588.8828, "Центр лицензирования", -1, false},
	{623.7018,-1217.9603, 513.3560,-1356.1583, "Автосалон эконом", -1, true},
	{1412.6255,-1815.8468, 1593.1559,-1578.1869, "Площадь", -1, false},
	{2201.4766,-2155.0671, 2170.1594,-2382.9766, "Грузчики", -1, true},
	{270.0465,80.8955, 253.1604,67.4372, "КПЗ", -1, false},
	{-1948.0, -1500.0, -1698.0, -1250.0 , "Шахта", -1, true},
	{1682.0, -1838.0, 1834.0, -1706.0 , "Вокзал", -1, true},
	{1006.0, -1682.0, 1318.0, -1502.0  , "Вокзал", -1, true}

};

enum E_CASINO_STRUCT
{
	C_NUMBER, 			// номер стола в казино
	C_CRUPA_ID,			// id игрока который является крупье
	C_BET,				// ставка на том или ином столе
	C_STEP,				// переменная действия которое идет
	C_PLAYERS[6]		// максимальное количество игроков за столом
};

// ------------------------------------------
enum E_BUS_ROUTE_STRUCT
{
	BR_NAME[32],
	BR_COLOR,
	BR_IN_JOB
};

enum E_BUS_ROUTE_STEP_STRUCT
{
	Float: BRS_POS_X,
	Float: BRS_POS_Y,
	Float: BRS_POS_Z,
	bool: BRS_STOP
};

enum E_FARM_ROUTE_STEP_STRUCT
{
	Float: FRS_POS_X,
	Float: FRS_POS_Y,
	Float: FRS_POS_Z,
	bool: FRS_STOP
};

enum E_COMBAIN_ROUTE_STEP_STRUCT
{
	Float: CRS_POS_X,
	Float: CRS_POS_Y,
	Float: CRS_POS_Z,
	bool: CRS_STOP
};

// ------------------------------------------
enum E_PLAYER_SPECTATE_STRUCT
{
	Float: S_START_POS_X,
	Float: S_START_POS_Y,
	Float: S_START_POS_Z,
	Float: S_START_ANGLE,
	S_START_INTERIOR,
	S_START_VIRTUAL_WORLD,
	S_PLAYER
};
new g_spectate[MAX_PLAYERS][E_PLAYER_SPECTATE_STRUCT];

// ------------------------------------------
enum
{
	PEDAL_TYPE_NONE = 0, // не жмёт ни на какую педаль
	PEDAL_TYPE_GAS, // педаль газа
	PEDAL_TYPE_BRAKE // педаль тормоза
}


new Float: vehicle_old_z_angle[MAX_VEHICLES],
	Float: vehicle_old_speed[MAX_VEHICLES],
	player_holding_key_down[MAX_PLAYERS];

new max_veh_speed [ 212 ] = { 160,160,200,120,150,165,110,170,110,180,160,240,160,160,140,230,155,200,150,160,180,180,
	165,145,170,200,200,170,170,200,190,130,80,180,200,120,160,160,160,160,160,75,150,150,110,
	165,280,200,190,150,120,240,190,190,190,140,160,160,165,160,200,190,190,190,75,75,160,160,
	190,200,170,160,190,190,160,160,200,200,150,165,200,120,150,120,190,160,100,200,200,170,170,
	160,160,190,220,170,200,200,140,140,160,75,220,220,160,170,230,165,140,120,140,200,200,200,120,
	120,165,165,160,330,330,190,190,190,110,160,160,160,170,160,60,70,140,200,160,160,160,110,110,150,
	160,230,160,165,170,160,160,160,200,160,160,165,160,200,170,180,110,110,200,200,200,200,200,200,75,
	200,160,160,170,110,110,90,60,110,60,160,160,200,110,160,165,190,160,170,120,165,190,200,140,200,110,
	120,200,200,60,190,200,200,200,160,165,110,200,200,160,165,160,160,160,140,160,160 } ;

enum E_PLAYER_WEAPON_STRUCT
{
	PW_WEAPON,
	PW_CHARGED,
	PW_AMMO,
	PW_RELOAD
}

new player_weapon[MAX_PLAYERS][2][E_PLAYER_WEAPON_STRUCT];

new player_weapon_slot[MAX_PLAYERS] = {-1, ...};
new player_weapon_object[MAX_PLAYERS] = {INVALID_OBJECT_ID, ...};

enum E_WEAPON_INFO_STRUCT
{
	WI_NAME[32],
	WI_ID,
	WI_MAX_AMMO,
	Float: WI_DAMAGE,
	Float: WI_RANGE,
	WI_SHOT_INTERVAL,
	WI_RELOAD_TIME,
	bool: WI_AUTOMATIC,
	WI_OBJECT
}

new weapon_info[6][E_WEAPON_INFO_STRUCT] =
{
	{"Desert Eagle", 24, 20, 20.0, 400.0, 750, 800, false, 348},
	{"Shotgun", 25, 20, 17.0, 400.0, 600, 900, false, 349},
	{"AK47", 30, 30, 10.0, 1000.0, 500, 1000, true, 355},
	{"M4", 31, 30, 10.0, 1000.0, 500, 1000, true, 356},
	{"Country Rifle", 32, 30, 10.0, 1000.0, 500, 1000, true, 357},
	{"Tazer", 200, 1, 0.0, 15.0, 190, 0, false, 354}
};

// ------------------------------------------
enum // иды диалогов
{
	INVALID_DIALOG_ID,
	// ---------------
	DIALOG_LOGIN,					// Авторизация
	DIALOG_REGISTER,				// Регистрация
	// ---------------
	DIALOG_PLAYER_MENU,  			// меню игрока
	DIALOG_PLAYER_STATS, 			// статистика игрока
	DIALOG_PLAYER_CMDS,  			// список команд
	DIALOG_PLAYER_COMMAND,          // информация о командах
	DIALOG_PLAYER_SETTINGS,			// личные настройки
	DIALOG_PLAYER_SECURITY_SETTINGS,// настройки безопасности
	// ---------------
	DIALOG_SECURITY_SETTING_INFO,	// информацию о настройках
	DIALOG_SECURITY_SETTING_PHONE,	// запрос телефона при авторизации
	DIALOG_SECURITY_SETTING_PHONE_S,// устанавить запрос телефона при авторизации
	DIALOG_SECURITY_SETTING_PIN,	// запрос пин кода при авторизации
	DIALOG_SECURITY_SETTING_PIN_SET,// устанавить запрос пин кода при авторизации
	DIALOG_SECURITY_SETTING_PASS_1, // смена пароля (проверка текущего)
	DIALOG_SECURITY_SETTING_PASS_2, // смена пароля (смена)
	DIALOG_SECURITY_SETTING_EMAIL,	// подтверждения емайла
	// ---------------
	DIALOG_TYPE_ADD_PIN,
	DIALOG_TYPE_CHECK_PIN,
	// ---------------
	DIALOG_REPORT,					// репорт
	// ---------------
	DIALOG_PLAYER_IMPROVEMENTS, 	// улучшения
	// ---------------
	DIALOG_CHANGE_NAME, 			// смена ника
	// ---------------
	DIALOG_GPS, 					// gps
	DIALOG_GPS_PUBLIC_PLACES, 		// общественные места
	DIALOG_GPS_TRANSPORT, 			// транспортные узлы
	DIALOG_GPS_STATE_ORGANIZATIONS, // государственные организации
	DIALOG_GPS_GANGS,				// базы банд и мафий
	DIALOG_GPS_JOBS,				// по работе
	DIALOG_GPS_ENTERTAINMENT,		// развлечения
	DIALOG_GPS_BUSINESS,			// реклама бизнеса
	// ---------------
	DIALOG_HELP,					// помощь по игре
	DIALOG_HELP_SECTION,			// раздел
	// ---------------
	DIALOG_SERVER_RADIO, 			// радио (/play)
	// ---------------
	DIALOG_ANIM_LIST, 				// аним лист (/anim)
	// ---------------
	DIALOG_OPEN_HOOD_OR_TRUNK,		// управление капотом/багажником
	// ---------------
	DIALOG_DRIVING_TUTORIAL_START,	// теория в автошколе
	DIALOG_DRIVING_TUTORIAL,	 	// теория в автошколе
	DIALOG_DRIVING_TUTORIAL_END, 	// теория в автошколе
	DIALOG_DRIVING_EXAM_INFO, 		// экзамен по вождению
	DIALOG_DRIVING_EXAM_START,		// экзамен по вождению
	DIALOG_DRIVING_EXAM, 			// экзамен по вождению
	DIALOG_DRIVING_EXAM_RESULT, 	// экзамен по вождению
	// ---------------
	DIALOG_ATM, 					// банкомат
	DIALOG_ATM_TAKE_MONEY, 			// снять деньги
	DIALOG_ATM_TAKE_OTHER_MONEY,	// снять деньги (другая сума)
	DIALOG_ATM_PUT_MONEY, 			// положить деньги
	DIALOG_ATM_PUT_OTHER_MONEY, 	// положить деньги (другая сума)
	DIALOG_ATM_BALANCE, 			// баланс в банке
	DIALOG_ATM_PHONE_BALANCE,		// пополнить баланс телефона

	DIALOG_ATM_SELECT_COMPANY_TAKE,	// выбрать предприятие с которого снять деньги
	DIALOG_ATM_SELECT_COMPANY_PUT,	// выбрать предприятие на которое положить деньги
	DIALOG_ATM_FUEL_ST_TAKE_MONEY,	// снять деньги с заправочной станции
	DIALOG_ATM_FUEL_ST_PUT_MONEY,	// полижить деньги на счет заправочной станции
	DIALOG_ATM_BIZ_TAKE_MONEY,		// снять деньги с предприятия
	DIALOG_ATM_BIZ_PUT_MONEY,		// полижить деньги на счет предприятия

	DIALOG_ATM_TRANSFER_MONEY_1, 	// перевод на банковский счет
	DIALOG_ATM_TRANSFER_MONEY_2, 	// перевод на банковский счет
	DIALOG_ATM_CHARITY, 			// Благотворительность

	DIALOG_ATM_TICKET_SELECT,		// Выбор способа оплаты штрафа
	DIALOG_ATM_TICKET_LIST,			// Список штрафов
	DIALOG_ATM_TICKET_PAY,			// Оплата штрафа по номеру
	// ---------------
	DIALOG_PAY_FOR_RENT,			// оплата аренды (биз,дом,азс)
	DIALOG_PAY_FOR_RENT_FUEL_ST,	// оплата за АЗС
	DIALOG_PAY_FOR_RENT_BIZ,		// оплата за бизнес
	DIALOG_PAY_FOR_RENT_HOUSE,		// оплата за дом
	// ---------------
	DIALOG_BANK,					// банк
	DIALOG_BANK_ACCOUNTS, 			// мои счета
	DIALOG_BANK_ACCOUNT_LOGIN, 		// авторизация
	DIALOG_BANK_ACCOUNT_OPERATION,	// Список операций
	DIALOG_BANK_ACCOUNT_INFO, 		// информация о счете
	DIALOG_BANK_ACCOUNT_TAKE_MONEY,	// снять деньги
	DIALOG_BANK_ACCOUNT_PUT_MONEY,	// положить деньги
	DIALOG_BANK_ACCOUNT_TRANSFER_1, // перевод денег на другой счет 1
	DIALOG_BANK_ACCOUNT_TRANSFER_2, // перевод денег на другой счет 2
	DIALOG_BANK_ACCOUNT_CHANGE_NAME,// переименирование счета
	DIALOG_BANK_ACCOUNT_CHANGE_PIN,	// смена пин-кода
	DIALOG_BANK_DEPOSIT,			// депозит меню
	DIALOG_BANK_DEPOSIT_TAKE_MONEY,	// депозит снять
	DIALOG_BANK_DEPOSIT_PUT_MONEY,	// депозит положить

	DIALOG_BANK_CREATE_ACCOUNT, 	// создание счета
	DIALOG_BANK_CREATED_ACCOUNT, 	// создание счета
	// ---------------
	DIALOG_PHONE_CALL,				// Номера государственных организаций
	DIALOG_PHONE_CALL_BALANCE,		// Узнать баланс мобильного
	// ---------------
	DIALOG_ACTION,					// меню действия
	// ---------------
	DIALOG_VIEV_JOBS_LIST,			// посмотреть список работ
	DIALOG_JOIN_TO_JOB,				// устроится на работу
	DIALOG_MAYOR_PASS,              // Получение паспорта
	// ---------------
	DIALOG_END_JOB,					// закончить работу
	// ---------------

	DIALOG_BUS_RENT_CAR,			// арендовать автобус
	DIALOG_BUS_ROUTE_COST,			// ввести стоимость проезда
	DIALOG_BUS_ROUTE_SELECTION,		// выбрать маршрут
	//---
	DIALOG_TAXI_RENT_CAR,			// арендовать такси
	DIALOG_TAXI_NAME,				// название такси
	DIALOG_TAXI_TARIFF,				// тариф
	//---
	DIALOG_MECHANIC_RENT_CAR,		// арендовать эвакуатор
	DIALOG_MECHANIC_START_JOB,		// начать работу механика
	DIALOG_MECHANIC_NAME,			// название службы
	//---
	DIALOG_TRUCKER_RENT_CAR,		// арендовать грузовик
	DIALOG_TRUCK_RENT_CAR,          // арендовать тягач (контракты)
	DIALOG_TRUCKER_START_JOB,		// начать работу

	// ---------------
	DIALOG_PHONE_BOOK,				// телефонная книга
	DIALOG_PHONE_BOOK_OPTION,		// варианты
	DIALOG_PHONE_BOOK_SEND_SMS,		// отправить смс
	DIALOG_PHONE_BOOK_CHANGE_NAME,	// сменить имя контакта
	DIALOG_PHONE_BOOK_CHANGE_NUMBER,// сменить номер контакта

	DIALOG_PHONE_BOOK_ADD_CONTACT,	// телефонная книга (добавить контакт)
	// ---------------
	DIALOG_MINER_BUY_METALL, 		// покупка металла на шахте
	// ---------------
	DIALOG_TEMP_JOB_LOADER_START,	// Начать работу строителя
	DIALOG_TEMP_JOB_LOADER_END,		// Закончить работу строителя
	DIALOG_TEMP_JOB_MINER_START,	// Начать работу шахтера
	DIALOG_TEMP_JOB_MINER_END,		// Закончить работу шахтера
	DIALOG_TEMP_JOB_FACTORY_TRUCKER,// Служба доставки завода
	DIALOG_TEMP_JOB_FACTORY,		// Производственный цех
	DIALOG_TEMP_JOB_LUMBERJACK_ST, 	// Начать работу лесоруба
	DIALOG_TEMP_JOB_LUMBERJACK_END,	// Закончить работу лесоруба
	DIALOG_TEMP_JOB_FARM_ST, 		// Начать работу фермера
	DIALOG_TEMP_JOB_FARM_END,		// Закончить работу фермера
	DIALOG_TEMP_JOB_COMBAIN_ST, 	// Начать работу комбайнера
	DIALOG_TEMP_JOB_COMBAIN_END,	// Закончить работу комбайнера
	DIALOG_TEMP_JOB_LOADERA_START,	// Начать работу строителя
	DIALOG_TEMP_JOB_LOADERA_END,		// Закончить работу строителя
	DIALOG_TEMP_JOB_PIZZA_ST,       // Начать работу Развозчика пиццы
	DIALOG_TEMP_JOB_PIZZA_END,		// законечить работу Развозчика пиццы
	// ---------------
	DIALOG_FUEL_STATION_BUY,		// покупка заправочной станции
	DIALOG_FUEL_STATION_INFO,		// инфо о заправочной станции
	DIALOG_FUEL_STATION_PARAMS,		// меню управления заправочной станцией
	DIALOG_FUEL_STATION_NAME,		// Смена названия
	DIALOG_FUEL_STATION_PRICE_FUEL,	// Цена топлива
	DIALOG_FUEL_STATION_BUY_FUEL_PR,// закупочная цена
	DIALOG_FUEL_STATION_ORDER_FUELS,// заказ топлива
	DIALOG_FUEL_STATION_ORDER_CANCE,// отмена заказа
	DIALOG_FUEL_STATION_IMPROVEMENT,// улучшения АЗС
	DIALOG_FUEL_STATION_SELL,		// продажа АЗС государству
	DIALOG_FUEL_STATION_BUY_JERRICA,// покупка канистры на АЗС
	DIALOG_FUEL_STATION_BUY_FUEL_M,	// покупка топлива (механик)
	// ---------------
	DIALOG_JERRICAN_FILL_CAR,		// заправка авто с канистры
	// ---------------
	DIALOG_BIZ_BUY,					// покупка бизнеса
	DIALOG_BIZ_INFO,				// инфо о бизнесе
	DIALOG_BIZ_PARAMS,				// меню управления бизнесом
	DIALOG_BIZ_ENTER_PRICE,			// установить цену за вход
	DIALOG_BIZ_PROD_PRICE,			// установить стоимость продутка
	DIALOG_BIZ_PROD_PRICE_LIST,			// установить стоимость продутка
	DIALOG_BIZ_ORDER_PRODS,			// заказ продуктов
	DIALOG_BIZ_ORDER_CANCEL,		// отмена заказа
	DIALOG_BIZ_IMPROVEMENT,			// улучшение
	DIALOG_BIZ_SELL,				// продажа Бизнеса государству
	DIALOG_BIZ_ENTER_MUSIC,			// установить звук при входе
	DIALOG_BIZ_ENTER,				// платный вход
	DIALOG_BIZ_SET_NAMES,            // Смена названия.

	DIALOG_BIZ_SHOP_24_7,			// магазин 24\7
	DIALOG_BIZ_MCDONALDS,           // закусочная
	DIALOG_BIZ_LOTTERY,				// лотерея
	DIALOG_BIZ_SHOP_GUN,			// магазин оружия

	DIALOG_BIZ_CAR_MARKET,			// авторынок
	DIALOG_BIZ_CAR_MARKET_BUY_CAR,	// покупка авто
	DIALOG_BIZ_CAR_MARKET_CAR_INFO,	// информация об авто
	DIALOG_BIZ_CAR_MARKET_FAMILY,   // Авто для семьи

	DIALOG_BIZ_CELL_SALON,			// сотовый салон
	DIALOG_BIZ_PHONE_BALANCE,		// пополнить счет телефона
	DIALOG_BIZ_CHANGE_PHONE_NUMBER,	// смена номера телефона
	DIALOG_BIZ_CHANGE_PHONE_COLOR,	// смена цвет телефона

	DIALOG_BIZ_CLUB,				// меню бара (клуб)

	DIALOG_BIZ_REALTOR_BIZ_LIST,	// список свободных бизнесов (управление статистики)
	DIALOG_BIZ_REALTOR_BIZ_INFO,	// фото бизнеса

	DIALOG_BIZ_REALTOR_HOME_GET,	// найти информацию о доме
	DIALOG_BIZ_REALTOR_HOME_INFO,	// фото дома

	DIALOG_BIZ_CLOTHING_BUY,		// покупка одежды

	DIALOG_BIZ_CAR_TUNING,			// тюнинг транспорта
	// ---------------
	DIALOG_HOUSE_BUY,				// покупка дома
	DIALOG_HOUSE_SELL,				// продажа дома
	DIALOG_FHOUSE_SELL,				// продажа дома
	DIALOG_HOUSE_INFO,				// инфо о доме
	DIALOG_HOUSE_PARAMS,			// меню управления домом
	DIALOG_HOUSE_IMPROVEMENTS,		// улучшение для дома
    DIALOG_HOUSE_TYPE,				// смена интерьера дома
	DIALOG_HOUSE_RENTERS,			// список арендаторов
	DIALOG_HOUSE_RENTER_INFO,		// информация о арендаторе
	DIALOG_HOUSE_RENTER_EVICT,		// выселение арендатора
	DIALOG_HOUSE_EVICT,				// выселение арендатора (/liveout)
	DIALOG_HOUSE_MOVE_STORE,		// переставить шкаф (/makestore)
	DIALOG_HOUSE_STORE,				// использовать шкаф
	DIALOG_HOUSE_STORE_PUT,			// положить металл/наркотики
	DIALOG_HOUSE_STORE_TAKE,		// взять металл/наркотики

	DIALOG_HOUSE_ENTER,				// вход в дом
	DIALOG_HOUSE_OUT,               // Система гаражей
	DIALOG_GARAGE_ENTER,
	// ---------------
	DIALOG_HOTEL,					// меню отеля
	DIALOG_HOTEL_FLOOR_SELECT,		// Выбрать этаж (просмотр инфы о номерах)
	DIALOG_HOTEL_FLOOR_INFO,		// Информация о номерах этажа
	DIALOG_HOTEL_FLOOR_LIFT,		// лифт в отеле
	DIALOG_HOTEL_REG_ROOM,			// регистрация в номере
	DIALOG_HOTEL_CLIENT_MENU,		// меню клиента
	DIALOG_HOTEL_PAY_FOR_ROOM,		// оплата за комнату
	DIALOG_HOTEL_OUT,				// выселиться
	// ---------------
	DIALOG_OWNABLE_CAR,				// система управления транспортом
	DIALOG_OWNABLE_CAR_LOAD,		// загрузить транспорт
	DIALOG_OWNABLE_CAR_LIST,		// выбор транспорта из списка
	DIALOG_OWNABLE_CAR_SELL,		// продажа личного ТС
	DIALOG_OWNABLE_CAR_NUMBER,		// получение номера на ТС
	DIALOG_CHANGE_COLOR_CAR,        // покраска авто
	DIALOG_OWNABLE_CAR_PT,          // performance tuning
	DIALOG_OWNABLE_CAR_PT_ITEM,     // улучшения
	DIALOG_OWNABLE_CAR_PT_ACCEPT,   // подтвердить улучшение
	// ---------------
	DIALOG_VEHICLE_TRUNK,			// багажник
	DIALOG_VEHICLE_TRUNK_PUT,		// положить предмет
	DIALOG_VEHICLE_TRUNK_PUT_ITEM,	// количество предметов
	DIALOG_VEHICLE_TRUNK_TAKE,		// достать предмет
	// ---------------
	DIALOG_SET_SPAWN,               // диалог смены спавна
	DIALOG_SELECT_SPAWN,            // диалог выбора спавна при входе
	// ---------------
	DIALOG_DONATE_INFO, 			// информация о донате (первый диалог)
	DIALOG_DONATE_MENU,				// меню доната
	DIALOG_DONATE_CONVERT,			// конвертация валюты
	DIALOG_DONATE_GET_MONEY,		// получение денег
	DIALOG_DONATIONS,				// все пополнения
	DIALOG_DONATE_ENROLLMENT,		// зачисление донат-очков
	DIALOG_DONATE_BUY_CAR_NUMBER,	// покупка номера на ТС
	DIALOG_DONATE_ACCEPT_CAR_NUM,	// подтверждение номера
	DIALOG_DONATE_CHANGE_NAME,		// смена имени в донате
	DIALOG_DONATE_BUY_NUMBER,		// смена номера телефона на 4-хзначный
	DIALOG_DONATE_SKILLS,			// список скиллов для прокачки
	DIALOG_DONATE_SKILL_BUY,		// прокачка скилла
	DIALOG_DONATE_PREMIUM,          // подписка "SERVER_NAME"+
	DIALOG_DONATE_VIP_HELP,
	DIALOG_DONATE_CASE,             // CASE UP MOBILE
	DIALOG_DONATE_CASE_PRISE,       //Case prise
	DIALOG_DONATE_SKIN,
	// ---------------
	DIALOG_TEAM_CHANGE_SKIN,		// смена скина игрока
	DIALOG_TEAM_LEAVE,				// уволиться по собственному желанию

	DIALOG_FAMILY_LEAVE,			// уволиться по собственному желанию

	DIALOG_ADVISOR_MENU,			// Меню советника прав-ва
	DIALOG_ADVISOR_TEAM_STRUCTURE,	// Структура организации
	// ---------------
	DIALOG_ADMIN_PANEL,				// Панель управления сервером
	DIALOG_ADMIN_FIND,              // Список игроков во фракции (/afind)
	DIALOG_ADMINS,					// Список администраторов
	DIALOG_LEADERS,					// Список лидеров
	DIALOG_EDIT_ADMIN,				// Редактирование администратора
	DIALOG_EDIT_LEADER,				// Редактирование лидера
	DIALOG_EDIT_ADMIN_RANG,			// Повысить/понизить администратора
	DIALOG_EDIT_LEADER_FRAC,		// Сменить управляемую фракцию
	DIALOG_REMOVE_ADMIN,			// Разжаловать администратора
	DIALOG_REMOVE_LEADER,			// Разжаловать лидера
	DIALOG_BLOCK_ACCOUNT,			// Заблокировать аккаунт
	DIALOG_BLOCK_ACCOUNT_CONFIRM,	// Подтвердить блокировку
	// ---------------
	DIALOG_TELEPORT_LIST,			// Список мест для телепорта
	DIALOG_SET_DOUBLING,			// Включить удвоение
	// ---------------
	DIALOG_GANG_REPOSITORY,			// Положить/взять со склада банды
	DIALOG_GANG_REPOSITORY_USE,		// Использование склада банды
	// ---------------
	DIALOG_RADAR_SELECT,			// Выбор типа радара
	DIALOG_RADAR_OBJECT,			// Выбор объекта радара
	DIALOG_RADAR_REMOVE,			// Удаление радара
	// ---------------
	DIALOG_BOARD_OBJECT,			// Выбор объекта board
	DIALOG_BOARD_REMOVE,			// Удаление BOARD
	DIALOG_SELECT_BOARD,            // Выбор при просмотре
	DIALOG_TEXT_BOARD,              // Ввод текста для борда
	// ---------------
	DIALOG_ADVERT_EDIT,				// редактирование объявления
	// ---------------
	DIALOG_ARMORY,					// оружейный склад
	// ---------------
	DIALOG_BIZ_ORDERS,				// список заказов для бизнесов
	DIALOG_FS_ORDERS,				// список заказов для АЗС
	// ---------------
	DIALOG_PROMO_CREATE,			// создание промокода
	DIALOG_PROMO_ACTIVATE,			// активация промокода
	DIALOG_OFFER_TOPLAYER,			// предложение для игрока
	DIALOG_NAME_INIT,               // ввод ника при коннекте
	DIALOG_SELECT_SKIN,             // выбор скина в магазине одежды
	DIALOG_BUY_SKIN,                // выбор покупка или отмена
	DIALOG_CREATE_FAMILY,           // создание семьи
	DIALOG_FAMILY_MENU,             // меню семьи
	DIALOG_FAMILY_SETTINGS,         // настройки семьи
	DIALOG_FAMILY_RANG,             // смена рангов семьи
	DIALOG_FAMILY_RCHANGE,          // окончание смены ранга
	DIALOG_FAMILY_COLOR,            // смена цвета семьи
	DIALOG_FAMILY_NCHANGE,          // смена названия семьи
	DIALOG_SELL_FISH,               // продать рыбу
	DIALOG_PLAYER_BACKPACK,         // диалог рюкзака
	DIALOG_PLAYER_BACKPACK_USED,    // меню предмета
	DIALOG_PLAYER_BACKPACK_DAR,     // диалог рюкзака передача
	DIALOG_TRUCK_MENU,              // меню дальнобойщика
	DIALOG_TRUCK_PASS,              // паспорт дальнобойщика
	DIALOG_TRUCK_WAGE,              // зарплата дальнобойщика
	DIALOG_TRUCK_RENT,              // аренда грузовика
	DIALOG_MP_CREATE,               // создание МП
	DIALOG_MP_MENU,                 // панель МП
	DIALOG_MP_SKIN,                 // выдача скина на МП
//	DIALOG_SELL_GIFT,               // продажа потков
 	DIALOG_RETURN_MONEY,           // возврат денег
 	DIALOG_TYPE_GUN,
 	DIALOG_TYPE_BUYLIC,
 	DIALOG_CASINO_FORTUNA,          // Колесо фортуны в казино
 	DIALOG_CASINO_SELECT_NUMBER,    // Колесо фортуны в казино
    DIALOG_CASINO_SELECT_CASH,  	// Колесо фортуны в казино
    DIALOG_TYPE_SELECT_SPORTZAL,    // Спортзал
    DIALOG_TYPE_SELECT_FSTYLE,      // Спортзал
	DIALOG_TYPE_SET_HINT,            // Покупка мебели
	DIALOG_TYPE_GET_MED,             // Получение мед справки.
	DIALOG_TYPE_SELECT_SPAWN,	      // Выбор спавна
	DIALOG_CARM, 	// Развозка материалов ВМФ
	DIALOG_CARM_CARGOBOB, // Развозка материалов ВМФ - Каргобоб
	DIALOG_BUY_NARKO,       // пОКУПКА НАРКО
	DIALOG_RENT_BIKE,
	//--------------------------------------------------
	DIALOG_LEADER_MENU,                 //Лидерское меню
	DIALOG_LEADER_MENU_UNINVITE,        //Лидерское меню
	DIALOG_LEADER_MENU_CARSPAWN,		//Лидерское меню
	DIALOG_LEADER_MENU_JOBS,            //Лидерское меню
	//--------------------------------------------------
	DIALOG_NEWBEE,
};

// ------------------------------------------
enum // иды работ (официальные)
{
	JOB_BUS_DRIVER = 1, // водитель автобуса
	JOB_TAXI_DRIVER,	// таксист
	JOB_MECHANIC,		// механик
	JOB_TRUCKER			// дальнобойщик
};

// ------------------------------------------
enum // типы пикапов
{
	PICKUP_ACTION_TYPE_TELEPORT = 1, 	// Телепорт (входы/выходы)
	PICKUP_ACTION_TYPE_ATM,				// банкомат
	PICKUP_ACTION_TYPE_BANK, 			// банк
	PICKUP_ACTION_TYPE_TEMP_JOB, 		// временная работа
	PICKUP_ACTION_TYPE_INFO_PICKUP, 	// инфо пикап
	PICKUP_ACTION_TYPE_MINER_SELL_M, 	// покупка металла на шахте
	PICKUP_ACTION_TYPE_FACTORY_MET,		// брать металл (завод)
	PICKUP_ACTION_TYPE_FUEL_STATION,	// покупка канистры на азс
	PICKUP_ACTION_TYPE_BIZ_ENTER,		// вход в бизнес
	PICKUP_ACTION_TYPE_BIZ_EXIT,		// выход в бизнес
	PICKUP_ACTION_TYPE_BIZ_HEALTH,		// аптечка в бизнесе
	PICKUP_ACTION_TYPE_BIZ_SHOP_247,	// покупка в 24\7
	PICKUP_ACTION_TYPE_CELL_SALON,		// покупка в сотовом салоне
	PICKUP_ACTION_TYPE_BIZ_MC,	// закусочная
	PICKUP_ACTION_TYPE_BIZ_SHOP_GUN,	// магазин оружия
	PICKUP_ACTION_TYPE_BIZ_DRIVER, // автошкола
	PICKUP_ACTION_TYPE_HOUSE,			// вход в дом
	PICKUP_ACTION_TYPE_HOUSE_HEALTH,	// аптечка дома
	PICKUP_ACTION_TYPE_REALTOR_HOME,	// риелторское агенство
	PICKUP_ACTION_TYPE_BIZ_CLOTHING,	// магазин одежды
	PICKUP_ACTION_TYPE_HOTEL_ROOM,		// номер в отеле
	PICKUP_ACTION_TYPE_BIZ_CAR_MARK,	// покупка авто
	PICKUP_ACTION_TYPE_BIZ_CAR_ENT,		// телепорт ко входу в авторынок
	PICKUP_ACTION_TYPE_BIZ_CAR_EXI,		// телепорт к выходу из авторынка
	PICKUP_ACTION_TYPE_GET_CAR_NUM,		// получение номеров на ТС
	PICKUP_ACTION_TYPE_MINER_CARRI,		// пикап у вагонетки
	PICKUP_ACTION_TYPE_GANG_REPOSIT,	// склады для банд
	PICKUP_ACTION_TYPE_ARMORY,			// оружейный склад
	PICKUP_ACTION_TYPE_BIZ_CAR_TUN,		// тюнинг транспорта
	PICKUP_ACTION_TYPE_MAYOR_JOB,        // устройство на работу
	PICKUP_ACTION_TYPE_MAYOR_PASS,        // Получение паспорта
	PICKUP_ACTION_TYPE_GET_FAMILY,      // создание семьи
	PICKUP_ACTION_TYPE_PUT_PROD,        // класть продукты
	PICKUP_ACTION_TYPE_SELL_FISH,       // продажа рыбы
	PICKUP_ACTION_TYPE_CHANGESKIN,      // смена скина фракции
	PICKUP_ACTION_TYPE_RENT_TRUCK,      // аренда грузовика
//	PICKUP_ACTION_TYPE_GIFT,            // пикап подковы
//	PICKUP_ACTION_TYPE_SELL_GIFT,       // продажа подков
	PICKUP_ACTION_BUYLIC,               // Покупка лицензии на бизнес
	PICKUP_ACTION_RENT_BOARD,           // Аренда билборда.
	PICKUP_ACTION_TYPE_CASINO_FORT,  // Рулетка в казино
	PICKUP_ACTION_TYPE_SPORTZAL,        // Спортзал
	PICKUP_ACTION_TYPE_SET_HINT,        // покупка мебели
	PICKUP_ACTION_GET_MED,              // Получение мед справки
	PICKUP_ACTION_PASS_PHOTO,           // Фото паспорт
	PICKUP_ACTION_BUY_NARKO,            // Покупка наркотиков
	PICKUP_ACTION_RENT_BIKE,            // Аренда лясопед

};

enum // типы авто
{
	VEHICLE_ACTION_TYPE_DRIVING_SCH = 1, // Учебный транспорт (для сдачи на права)
	VEHICLE_ACTION_TYPE_OWNABLE_CAR,	// личный транспорт
	VEHICLE_ACTION_TYPE_FACTORY, 		// завод (служба доставки)
	VEHICLE_ACTION_TYPE_BUS_DRIVER,		// Водитель автобуса
	VEHICLE_ACTION_TYPE_TAXI_DRIVER,	// Таксист
	VEHICLE_ACTION_TYPE_MECHANIC,		// Автомеханик
	VEHICLE_ACTION_TYPE_TRUCKER,		// Дальнобойщик (продукты)
	VEHICLE_ACTION_TYPE_RENT_CAR,		// Транспорт для аренды
	VEHICLE_ACTION_TYPE_GOV_CAR,		// Автомобили правительства
	VEHICLE_ACTION_TYPE_ARMY_CAR,		// Автомобили воинской части
	VEHICLE_ACTION_TYPE_MED_CAR,		// Автомобили больницы
	VEHICLE_ACTION_TYPE_RADIO_CAR,		// Автомобили радиоцентра
	VEHICLE_ACTION_TYPE_LSPD_CAR,		// Автомобили LSPD
	VEHICLE_ACTION_TYPE_FBI_CAR,		// Автомобили FBI
	VEHICLE_ACTION_TYPE_GROVE_CAR,		// Автомобили Grove
	VEHICLE_ACTION_TYPE_VAGOS_CAR,		// Автомобили Vagos
	VEHICLE_ACTION_TYPE_BALLAS_CAR,		// Автомобили Ballas
	VEHICLE_ACTION_TYPE_AZTECAS_CAR,    // Автомобили Aztecov
	VEHICLE_ACTION_TYPE_ADMIN_CAR,		// Транспорт, созданный администратором
	VEHICLE_ACTION_TYPE_COMBAIN,        // Комбайны для подработки
	VEHICLE_ACTION_TYPE_TRUCK,    		// Дальнобойщик (контракты)
	VEHICLE_ACTION_TYPE_TRUCK_TRAIL,    // Прицеп дальнобойщика
	VEHICLE_ACTION_TYPE_PIZZABOY,   	// Развозчик пиццы
	VEHICLE_ACTION_TYPE_RENT_BIKE,
};

enum // типы cp
{
	CP_ACTION_TYPE_LOADER_JOB_TAKE = 1,	// строителя (брать груз)
	CP_ACTION_TYPE_LOADER_JOB_PUT, 		// строителя (класть груз)
	// -------
	CP_ACTION_TYPE_MINER_JOB_TAKE, 		// шахтер (брать руду)
	CP_ACTION_TYPE_MINER_JOB_PUT, 		// шахтер (класть руду)
	// -------
	CP_ACTION_TYPE_LUMBERJACK_TAKE,		// лесоруб (брать дрова)
	CP_ACTION_TYPE_LUMBERJACK_PUT,		// лесоруб (брать дрова)
	// -------
	CP_ACTION_TYPE_FACTORY_PUT,		// класть продукт
	// -------
	CP_ACTION_TYPE_FARM_ROUTE,      // фермер
	// -------
	CP_ACTION_TYPE_LOADERA_JOB_TAKE,	// строителя (брать груз)
	CP_ACTION_TYPE_LOADERA_JOB_PUT, 		// строителя (класть груз)
	// -------
    CP_ACTION_TYPE_PIZZA,
    CP_ACTION_TYPE_PIZZA_GET,
    // ------
	CP_ACTION_TYPE_LOADED_CARM, // Загрузка материалов ВМФ
	CP_ACTION_TYPE_UNLOAD_CARM_POL, // Разгрузка материалов LSPD
	CP_ACTION_TYPE_UNLOAD_CARM_VMF, // Разгрузка материалов ВМФ
	CP_ACTION_TYPE_LOAD_CARGO // Загрузка материалов на карго
};

enum // типы race_cp
{
	RCP_ACTION_TYPE_DRIVING_EXAM = 1, // сдача на права (практика)
	RCP_ACTION_TYPE_BUS_ROUTE,	// водитель автобуса
	RCP_ACTION_TYPE_COMBAINER_ROUT,	// работа комбайнера
	RCP_ACTION_TYPE_LOAD,           // загрузка дальнобой
	RCP_ACTION_TYPE_UNLOAD,         // разгрузка дальнобой
	RCP_ACTION_TYPE_ARMY_PATROL
};

// ------------------------------------------
enum // типы анимок
{
	USE_ANIM_TYPE_NONE,
	USE_ANIM_TYPE_CHAT, // анимка чата
};

// ------------------------------------------
enum // типы обьектов
{
	OBJECT_TYPE_FACTORY = 1,	// продукт на заводе
	OBJECT_TYPE_CARRIAGE,		// вагонетка в шахте
	OBJECT_TYPE_WOOD,			// дерево на лесопилке
	OBJECT_TYPE_TRAIN,			// поезд
};

// ------------------------------------------
enum E_PLAYER_OFFER_STURCT
{
	O_OUTCOMIG_PLAYER,  // отправленое предложение игроку
	O_INCOMING_PLAYER, 	// входящее предложение от игрока
	O_INCOMING_TYPE, 	// входящее предложение
	O_INCOMING_VALUE[2] // значение входящего предложения
};

enum // типы предложений
{
	OFFER_TYPE_NONE = -1,
	OFFER_TYPE_HANDSHAKE, 		// приветствие
	OFFER_TYPE_SELL_FUEL_ST, 	// продажа АЗС
	OFFER_TYPE_FILL_CAR,		// заправка авто (механик)
	OFFER_TYPE_REPAIR_CAR,		// починка авто (механик)
	OFFER_TYPE_SELL_BUSINESS,	// продажа бизнеса
	OFFER_TYPE_BUSINESS_MANAGER,// пригласить сотрудника себе на предприятие
	OFFER_TYPE_SELL_HOME,		// продать дом игроку
	OFFER_TYPE_HOME_RENT_ROOM,	// предложить поселиться в комнате своего дома
	OFFER_TYPE_SELL_OWNABLE_CAR,// продать личный ТС
	OFFER_TYPE_INVITE,			// предложить вступить в организацию
	OFFER_TYPE_FINVITE,         // предложение вступить в семью
	OFFER_TYPE_MEDHELP,			// лечение
	OFFER_TYPE_HEAL,			// лечение в машине скорой помощи
	OFFER_TYPE_CHANGE_SEX,		// смена пола
	OFFER_TYPE_SHOW_SKILL,		// просмотр навыков владения оружием
	OFFER_TYPE_GIVE_CAR_KEY,	// дать ключи от личного транспорта
	OFFER_TYPE_CASINO_DICE,		// бросить кости в казино
	OFFER_TYPE_GETHERE,			// телепорт к себе админа выше рангом
	OFFER_TYPE_GIVE_MIC,		// доступ в радиоэфир
	OFFER_TYPE_GIVE_LIC,		// продажа лицензий
	OFFER_TYPE_JAIL_FREE,		// выпустить из тюрьмы (для адвокатов)
	OFFER_TYPE_SELL_SKIN,       // Продать скин игроку
	OFFER_TYPE_SELL_DRUGS,      //Продать нарко игроку
};

// автосалон
enum
	E_RENT_CARS
{
	rent_car_modelid,
	Float: rent_car_pos_x,
	Float: rent_car_pos_y,
	Float: rent_car_pos_z,
	Float: rent_car_angle,
	rent_car_tenant_id,
};

new first_rent_car_id;

new
	rent_cars_data[][E_RENT_CARS] =
{
	// --- Мото-Вело рынок
	{463,2137.9690,-1146.9135,24.1576,71.8622}, // 0
	{461,2137.6345,-1144.1554,24.4980,73.5045}, // 1
	{462,2137.7373,-1141.9939,24.7540,77.3733}, // 2
	{471,2137.7192,-1139.5887,24.8958,76.9429}, // 3
	{521,2137.2000,-1137.1089,25.2444,79.7461}, // 4
	{522,2137.3020,-1134.7637,25.2711,74.3613}, // 5
	{468,2137.6724,-1132.2318,25.3612,76.9749}, // 6
	{586,2137.4219,-1129.5270,25.1518,77.4676}, // 7
	// --- Премиум класс
	{503,2103.9802,1397.7971,10.7150,180.3416}, // 8
	{541,2110.3562,1398.1956,10.4459,179.8471}, // 9
	{560,2116.7793,1397.7709,10.5728,180.6296}, // 10
	{451,2123.1157,1398.0100,10.5207,178.3302}, // 11
	{429,2129.5991,1398.1621,10.4927,179.2894}, // 12
	{415,2135.9685,1398.4258,10.5925,177.9890}, // 13
	{411,2142.3242,1398.0519,10.5398,180.3680}, // 14
	{562,2148.7883,1397.8608,10.6448,180.9903}, // 15
	{603,2103.9705,1408.8560,10.6583,359.8300}, // 16
	{495,2110.3989,1408.8073,11.1684,359.6475}, // 17
	{559,2116.7610,1408.8683,10.4728,358.9369}, // 18
	{587,2123.1714,1409.2218,10.5407,359.6553}, // 20
	{477,2129.4878,1409.1265,10.5740,359.8589}, // 21
	{480,2135.9268,1409.0417,10.5931,359.6765}, // 22
	{565,2142.3726,1408.5397,10.4436,359.6930}, // 23
	{402,2148.8406,1409.0056,10.6520,0.2859}, // 24
	// --- Эконом класс
	{545,549.7795,-1264.7161,17.0543,213.6504}, // 25
	{549,546.6562,-1267.2832,16.9396,214.4407}, // 26
	{436,543.4642,-1269.4695,17.0153,218.4760}, // 27
	{526,540.6047,-1271.4697,17.0088,220.6330}, // 28
	{527,537.8823,-1273.6788,16.9577,220.2743}, // 29
	{546,535.1443,-1276.5668,16.9664,218.0680}, // 30
	{547,532.3423,-1278.7964,16.9758,218.6706}, // 31
	{542,566.0008,-1284.8237,16.9917,102.1107}, // 32
	{517,565.1301,-1280.9377,17.0999,102.1539}, // 33
	{543,564.0071,-1277.1331,17.0602,102.7706}, // 34
	{518,563.5018,-1272.7621,16.9131,101.6187}, // 35
	{478,561.9523,-1268.7733,17.2346,104.7465}, // 36
	// --- Cредний класс
	{400,-1970.1222,255.5920,35.2647,90.6739}, // 37
	{489,-1970.5918,259.7994,35.3159,90.7789}, // 38
	{579,-1970.8107,264.4905,35.1056,91.1933}, // 39
	{533,-1989.6973,255.4864,34.8815,268.6945}, // 40
	{439,-1989.4181,259.5403,35.0753,269.4647}, // 41
	{567,-1989.4308,263.6658,35.0504,269.0298}, // 42
	{536,-1988.9423,267.7376,34.9154,269.9416}, // 43
	{534,-1989.0679,271.8958,34.9007,269.3509}, // 44
	{412,-1988.4159,276.1014,35.0139,270.9420}, // 45
	{589,-1993.0831,241.4341,34.8299,268.6819}, // 46
	{550,-1991.9586,245.3562,34.9861,266.1760}, // 47
	{445,-1990.4352,250.0515,35.0468,265.3871}, // 48
	{535,-1970.6036,268.5725,34.9348,91.6254}, // 49
	{496,-1970.5455,306.6758,34.8887,179.1261}, // 50
	{475,-1974.3011,306.0171,34.9729,180.7916}, // 51
	// --- Воздушный салон
	{469,1885.5718,-2287.2258,13.5571,267.1949}, // 53
	{487,1885.4126,-2300.7212,13.7247,269.7627}, // 54
	{511,1922.3044,-2246.5369,14.9194,180.1947}, // 55
	{512,1998.5641,-2249.2881,13.8291,89.7934}, // 56
	{513,1998.6318,-2315.6531,14.0926,89.5702}, // 57
	{519,1993.5334,-2382.6477,14.4689,89.9992}, // 58
	// --- Водныйй салон
	{446,2940.4023,-2043.0157,-0.4306,359.4248}, // 59
	{452,2932.8794,-2042.3052,-0.5677,0.6090}, // 60
	{454,2940.5200,-2061.9861,0.1415,179.3920}, // 61
	{473,2931.7703,-2060.6357,-0.0392,180.1232} // 62
	// --- Дома на колесах
};

new buy_car_select_car[MAX_PLAYERS] = {-1, ...};
new buy_car_select_color[MAX_PLAYERS][2];
new buy_car_select_color_type[MAX_PLAYERS] = {0, ...};

// автосалон
enum
	E_DRIVING_CARS
{
	driving_car_modelid,
	Float: driving_car_pos_x,
	Float: driving_car_pos_y,
	Float: driving_car_pos_z,
	Float: driving_car_angle,
	driving_car_tenant_id,
};


new car_market_data[4][32][2] =
{
	{ // --- Мото-Вело рынок
		{509, 0},
		{510, 0},
		{481, 0},
		{462, 0},
		{468, 0},
		{586, 0},
		{463, 0},
		{581, 0},
		{461, 0},
		{521, 0},
		{471, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0}
	},
	{ // --- Премиум класс
		{400, 0},
		{402, 0},
		{409, 0},
		{415, 0},
		{421, 0},
		{429, 0},
		{436, 0},
		{451, 0},
		{466, 0},
		{489, 0},
		{490, 0},
		{502, 0},
		{505, 0},
		{533, 0},
		{541, 0},
		{543, 0},
		{579, 0},
		{602, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0}
	},
	{ // --- Эконом класс
		{401, 0},
		{404, 0},
		{412, 0},
		{419, 0},
		{422, 0},
		{424, 0},
		{439, 0},
		{458, 0},
		{467, 0},
		{474, 0},
		{478, 0},
		{482, 0},
		{492, 0},
		{496, 0},
		{508, 0},
		{516, 0},
		{518, 0},
		{526, 0},
		{529, 0},
		{542, 0},
		{545, 0},
		{546, 0},
		{547, 0},
		{549, 0},
		{550, 0},
		{552, 0},
		{555, 0},
		{561, 0},
		{565, 0},
		{576, 0},
		{585, 0},
		{600, 0}
	},
	{ // --- Cредний класс
		{405, 0},
		{410, 0},
		{411, 0},
		{426, 0},
		{434, 0},
		{445, 0},
		{475, 0},
		{477, 0},
		{479, 0},
		{480, 0},
		{491, 0},
		// {495, 0},
		{506, 0},
		{507, 0},
		{527, 0},
		{534, 0},
		{540, 0},
		{551, 0},
		{558, 0},
		{559, 0},
		{560, 0},
		{562, 0},
		{566, 0},
		{587, 0},
		{589, 0},
		{603, 0},
		// {604, 0},
		{0, 0}, // 495
		{0, 0}, // 604
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0},
		{0, 0}
	}
};

new cars_after_purchase_count[6];
new
	Float: cars_pos_after_purchase[6][4][4] =
{
	{ // --- Мото-Вело рынок
		{2117.6257,-1139.9430,24.6104,281.7160},
		{2117.5552,-1136.3719,24.7420,289.6715},
		{2118.0764,-1132.7388,24.8178,289.6559},
		{2117.9138,-1129.8402,24.8340,298.4918}
	},
	{ // --- Премиум класс
		{2165.2930,1385.0197,10.7147,270.0719},
		{2156.0034,1385.0077,10.7149,270.0719},
		{2143.4136,1384.9929,10.7149,270.0716},
		{2130.9001,1384.9896,10.7151,269.7438}
	},
	{ // --- Эконом класс
		{536.8071,-1290.7352,16.9693,359.6367},
		{542.0447,-1291.1581,16.9693,1.0816},
		{547.9411,-1291.1254,16.9753,0.7181},
		{554.3663,-1291.2100,16.9753,1.0041}
	},
	{ // --- Cредний класс
		{-1986.5316,302.1619,35.0122,269.9251},
		{-1986.6569,307.2630,35.0128,270.1869},
		{-1977.4807,305.6521,35.0092,179.4892},
		{-1974.1847,305.7120,35.0097,180.5305}
	},
	{ // --- Воздушный класс
		{1941.0793,-2396.3765,14.4659,178.3872},
		{1941.0793,-2396.3765,14.4659,178.3872},
		{1941.0793,-2396.3765,14.4659,178.3872},
		{1941.0793,-2396.3765,14.4659,178.3872}
	},
	{ // --- Водный класс
		{2954.1438,-2051.6790,-1.1863,269.8569},
		{2954.1438,-2051.6790,-1.1863,269.8569},
		{2954.1438,-2051.6790,-1.1863,269.8569},
		{2954.1438,-2051.6790,-1.1863,269.8569}
	}
};

stock GetVehicleCarMarketID(vehicleid)
{
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_RENT_CAR) return -1;
	else return GetVehicleData(vehicleid, V_ACTION_ID);
}

// ------------------------------------------
enum E_ANTI_FLOOD_STRUCT
{
	AF_LAST_TICK,
	AF_RATE
}

// ------------------------------------------
enum E_TEMP_JOB_STRUCT // временные работы
{
	TJ_NAME[32],
	Float: TJ_POS_X,
	Float: TJ_POS_Y,
	Float: TJ_POS_Z,
	TJ_PAY_FOR_LOAD, // плата за 1 продукт (ящик/кг руды)
	TJ_SKIN[2]		// скин игрока (0 - мужской, 1 - женский)
};

// ------------------------------------------
enum E_RADAR_STRUCT
{
	R_ID,
	R_CREATOR[21],
	R_LIMIT,
	Float: R_POS_X,
	Float: R_POS_Y,
	Float: R_POS_Z,
	R_OBJECT,
	R_ZONE,
	Text3D: R_LABEL
}
new g_radar[MAX_RADARS][E_RADAR_STRUCT]; // радары для LSPD
new player_radar_object[MAX_PLAYERS] = INVALID_OBJECT_ID; // ид объекта во время создания
//new Float: player_radar_position[MAX_PLAYERS][9]; // позиция радара
new g_radars_created;
// -------------------------------------------
enum E_BOARD_STRUCT
{
	B_ID,
	B_OWNER,
	Float: B_POS_X,
	Float: B_POS_Y,
	Float: B_POS_Z,
	Float: B_TEXT_X,
	Float: B_TEXT_Y,
	Float: B_TEXT_Z,
	B_OBJECT,
	B_TEXT[128],
	Text3D: B_LABEL
}
new g_board[MAX_BOARD][E_BOARD_STRUCT];
new g_board_created;
new player_board_object[MAX_PLAYERS] = INVALID_OBJECT_ID;
//new Float: player_board_position[MAX_PLAYERS][9];

new g_board_default_values[E_BOARD_STRUCT] =
{
	-1,
	-1,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	0.0,
	INVALID_OBJECT_ID,
	-1,
	Text3D: -1,
};
// -------------------------------------------
new const
	g_weather[5][E_WEATHER_STRUCT] =
{
	{"ясная погода", 18, 	22},
	{"солнечная погода", 		 18, 	15},
	{"летняя погода", 		 18, 	17},
	{"ясная погода", 11, 	21},
	{"ясная погода", 12, 	23}
};

new g_radar_default_values[E_RADAR_STRUCT] =
{
	-1,
	"",
	0,
	0.0,
	0.0,
	0.0,
	INVALID_OBJECT_ID,
	-1,
	Text3D: -1,
};

new Float: vehicle_temp_position[MAX_PLAYERS][4]; // позиция автомобиля при въезде в тюнинг

// ------------------------------------------
enum E_ADVERT_STRUCT
{
	A_CREATOR,
	bool: A_EDIT,
	A_TEXT[128]
}

new g_advert[MAX_ADVERTS][E_ADVERT_STRUCT]; // объявления

// ------------------------------------------
enum // иды временных работ
{
	TEMP_JOB_NONE = -1,
	// ----------------
	TEMP_JOB_LOADER = 0, 		// строителя
	TEMP_JOB_MINER, 			// шахтер
	TEMP_JOB_FACTORY_TRUCKER,	// завод (служба доставки)
	TEMP_JOB_FACTORY,			// завод
	TEMP_JOB_LUMBERJACK,		// лесоруб
	TEMP_JOB_FARM,				// фермер
	TEMP_JOB_COMBAIN,				// комбайнер
	TEMP_JOB_LOADERA, 		// строителя
	TEMP_JOB_PIZZA,
};

enum //
{
	TEMP_JOB_STATE_NONE,
	// --------
	TEMP_JOB_STATE_LOADER_LOAD, 	// брать груз
	TEMP_JOB_STATE_LOADER_UNLOAD, 	// класть груз
	// --------
	TEMP_JOB_STATE_MINER_LOAD, 		// добывать руду
	TEMP_JOB_STATE_MINER_UNLOAD, 	// нести на склад
	TEMP_JOB_STATE_MINER_DROP_LOAD, // уронил руду
	// --------
	TEMP_JOB_STATE_FACTORY_TAKE_MET, // брать металл
	TEMP_JOB_STATE_FACTORY_CREATE_P, // делать продукт
	TEMP_JOB_STATE_FACTORY_CREATED,  // делает продукт
	TEMP_JOB_STATE_FACTORY_PUT_PROD, // нести продукт на склад
	TEMP_JOB_STATE_FACTORY_DROP_P,	 // уронил продукт
	// --------
	TEMP_JOB_STATE_LUMBERJACK_CHOP,	 //$ить дрова
	TEMP_JOB_STATE_LUMBERJACK_PUT,	 // нести на склад
	// --------
	TEMP_JOB_STATE_FARM_CHOP,	 	// собирать пшеницу
	TEMP_JOB_STATE_FARM_PUT,	 		// нести на склад
	// --------
	TEMP_JOB_STATE_COMBAIN_CHOP,	 // собирать пшеницу
	TEMP_JOB_STATE_COMBAIN_PUT,	 	// нести на склад
	// --------
	TEMP_JOB_STATE_LOADERARMY_LOAD, 	// брать груз
	TEMP_JOB_STATE_LOADERA_UNLOAD, 	// класть груз
	// --------
	TEMP_JOB_STATE_PIZZA_K_DOMY, 	// устроился на  пиzzу
	TEMP_JOB_STATE_PIZZA_OT_DOMA, 	// класть pizza
};

// ------------------------------------------
// attached object (TODO)
enum
{
	A_OBJECT_SLOT_SPINE = 0, 		// Торс
	A_OBJECT_SLOT_HEAD, 			// Голова
	A_OBJECT_SLOT_ARM, 				// Плечи
	A_OBJECT_SLOT_HAND, 			// Руки
	A_OBJECT_SLOT_THIGH, 			// Бедра
	A_OBJECT_SLOT_FOOT, 			// Ноги
	A_OBJECT_SLOT_CALF, 			// Голень
	A_OBJECT_SLOT_FOREARM, 			// Предплечье
	A_OBJECT_SLOT_CLAVICLE,			// Ключица
	A_OBJECT_SLOT_NECK, 			// Шея
	//A_OBJECT_SLOT_JAW				// Челюсть
};

enum
{
	A_OBJECT_BONE_SPINE = 1, 		// Торс
	A_OBJECT_BONE_HEAD, 			// Голова
	A_OBJECT_BONE_LEFT_ARM, 		// Левое плечо
	A_OBJECT_BONE_RIGHT_ARM, 		// Правое плечо
	A_OBJECT_BONE_LEFT_HAND, 		// Левая рука
	A_OBJECT_BONE_RIGHT_HAND, 		// Правая рука
	A_OBJECT_BONE_LEFT_THIGH, 		// Левое бедро
 	A_OBJECT_BONE_RIGHT_THIGH,		// Правое бедро
	A_OBJECT_BONE_LEFT_FOOT, 		// Левая нога
	A_OBJECT_BONE_RIGHT_FOOT, 		// Правая нога
	A_OBJECT_BONE_RIGHT_CALF, 		// Правая голень
	A_OBJECT_BONE_LEFT_CALF, 		// Левая голень
	A_OBJECT_BONE_LEFT_FOREARM, 	// Левое предплечье
	A_OBJECT_BONE_RIGHT_FOREARM,	// Правое предплечье
	A_OBJECT_BONE_LEFT_CLAVICLE,	// Левая ключица (плечо)
	A_OBJECT_BONE_RIGHT_CLAVICLE,	// Правая ключица (плечо)
	A_OBJECT_BONE_NECK, 			// Шея
	A_OBJECT_BONE_JAW				// Челюсть
};

// ------------------------------------------
enum // шаги регистрации
{
	REGISTER_STATE_PASSWORD = 1, // ввод пароля
	REGISTER_STATE_EMAIL, 		// ввод емайла
	REGISTER_STATE_REFER, 		// ввод ника пригласившего игрока
	REGISTER_STATE_SEX, 		// выбор пола
	REGISTER_STATE_RULES, 		// правила сервера
	REGISTER_STATE_CREATE_ACC 	// создание аккаунта
};

enum // шаги авторизации
{
	LOGIN_STATE_CHECK_BAN = 0,	// проверка бана
	LOGIN_STATE_PASSWORD, 		// ввод пароля
	LOGIN_STATE_MAIL,           // ввод части email адреса (больше 3 дн не заходил)
	LOGIN_STATE_PHONE,			// ввод 5 послед. цифр телефона
	LOGIN_STATE_PIN_CODE,		// ввод пин кода
	//LOGIN_STATE_GOOGLE_CODE,	// ввод кода от гугла
	LOGIN_STATE_LOAD_ACC	 	// Загрузка аккаунта
};
// ------------------------------------------
new mysql; // ид соединения

new pin_code_state[MAX_PLAYERS] = {PIN_CODE_STATE_NONE, ...};
new pin_code_input[MAX_PLAYERS][5];

enum E_FAMILY_STRUCT // структура семьи
{
	F_SQL_ID, 		// ид аккаунта
	F_NAME[63 + 1],	// название семьи
	F_USER_ID, 		// создатель семьи
	F_TIME,         // время создания
	F_COLOR,        // цвет семьи
	F_LEVEL,        // уровень семьи
	F_EXP,          // опыт семьи
	F_RANK1[32],    // ранг 1
	F_RANK2[32],    // ранг 2
	F_RANK3[32],    // ранг 3
	F_RANK4[32],    // ранг 4
	F_RANK5[32],    // ранг 5
	F_RANK6[32],    // ранг 6
	F_RANK7[32],    // ранг 7
	F_RANK8[32],    // ранг 8
	F_RANK9[32],    // ранг 9
	F_RANK10[32],   // ранг 10
	F_MONEY,       	// общак: деньги
	F_DRUGS,        // общак: наркотики
	F_TREE,        	// общак: дерево
	F_METAL,        // общак: металл
	F_AMMO,        	// общак: патроны
	F_HOUSE_ID    	// номер дома
};

new g_family[MAX_FAMILY][E_FAMILY_STRUCT];

new g_family_loaded;

new Menu: admin_spec_menu;

// ------------------------------------------
new g_player[MAX_PLAYERS][E_PLAYER_STRUCT];
new
	g_player_default_values[E_PLAYER_STRUCT] =
{
	0,		// ид аккаунта
	0,		// рефер
	0,		// пол игрока
	"",		// пароль игрока
	"None",	// емайл игрока
	false, 	// подтвержден ли емайл
	0,		// скин игрока
	0,      // Паспорт
	0,		// деньги игрока
	0,		// деньги в банке
	ADMIN_TYPE_NONE, // уровень админки
	false,	// лицензия на управление мото
	false,	// лицензия на управление авто
	false,	// лицензия на управление грузовиком
	false,	// лицензия на управление автобусом
	false,	// лицензия на полеты
	false,	// лицензия на плавание
	false,	// лицензия на бизнес
	false,	// лицензия на оружие
	-1,     // Exam car
	0,		// время регистрации
	"255.255.255.255",	// ип при регистрации
	"255.255.255.255",	// ип при последнем входе
	1,		// уровень игрока
	0,		// очки опыта игрока
	0,		// уровень розыска
	0,		// номер телефона
	0,		// на счету телефона
	0,		// цвет телефона
	0,		// законопослушность
	0, 		// улучшения
	0,		// наркотики
	0,		// патроны
	0,		// металл
	0,		// жена
	0,		// организация
	0,		// скин организации
	0,		// подразделение
	0,		// зарплата
	0,		// работа / должность(ранг)
	HOUSE_TYPE_NONE, // тип жилья (дом/отель/в гостях)
	-1,		// комната в доме
	-1,		// дом
	-1,		// бизнес
	-1,	 	// заправка
	"None", // реальный телефон игрока
	"None", // пин код
	REQUEST_TYPE_OFF, // запрос телефона при авторизации
	REQUEST_TYPE_OFF, // запрос пин кода при авторизации
	// -------------------------
	0,					// время последнего входа\выхода
	// -------------------------
	0,					// время игры за час
	0,					// время игры за день
	0,					// время игры за вчерашний день
	// -------------------------
	0xFFFFFF11,			// цвет игрока
	-1,					// выбраный скин
	0,					// тип чата
	0,					// время афк
	INVALID_VEHICLE_ID, // ид последнего авто в котором сидел
	INVALID_DIALOG_ID,	// ид последнего диалога
	USE_ANIM_TYPE_NONE,	// тип анимки который использует
	ENTER_PASSWORD_ATTEMPS,// кол-во попыток на авторизацию
	INVALID_PLAYER_ID,	// нацелен на игрока
	100.0,				// хп игрока
	0,
	// -------------------------
	TEMP_JOB_NONE,		// временная работа
	TEMP_JOB_STATE_NONE,// действие что надо делать
	false,				// проверка анимки
	// ---------------------------------
	"",					// название службы
	0,					// тариф
	0,					// Зарплата
	0,					// загружено/перенесено (груза/руды)
	INVALID_VEHICLE_ID,	// рабочий транспорт
	-1,					// таймер окончания работы
	-1,					// Какой стол использует на заводе
	0, 					// маршрут автобуса
	0,					// шаг маршрута
	0,					// шаг маршрута
	0,					// шаг маршрута
	0,					// заправлено на N
	0,					// отремонтировано на N$
	false,				// на работе ли
	// -------------------------
	false,				// статус авторизации
	false,				// использует ли анимку (/anim)
	false,				// заблокировать вызов OnPlayerLeaveDynamicArea
	false,				// прогружены ли анимки при спавне
	false,				// прогружен ли анимлист
	false,				// есть ли у игрока закуска
	Text3D: -1,			// бейджик советника
	false,				// отключение чата организации
	// -------------------------
	-1, 				// время на авторизаци
	-1, 				// в какой бизнес вошел
	-1, 				// в какой дом вошел
	-1,					// ид пикапа на которым стоял последний раз
	-1,					// в каком номере в отеле
	0,					// на каком этаже в отеле
	0,					// аптечка
	0,					// маска
	0,					// лотерейный билет
	0,					// кол-во использование напитка
	REALTOR_TYPE_NONE,	// риелторка
	INVALID_VEHICLE_ID,	// ид личного ТС
	INVALID_VEHICLE_ID,	// ид авто используемого багажника
	// -------------------------
	"255.255.255.255", 	// ип игрока
	"", 				// имя игрока
	"—", 				// имя жены/мужа
	// -------------------------
	ACCOUNT_STATE_NONE, // статус аккаунта (авторизаци/регистрация)
	0, 					// шаг (регистрации/авторизации)
	// -------------------------
	0,             		// варны
	0,                  // Admin warn
	0,        			// время варнов
	0,             		// время мута
	// -------------------------
	0, 					// сила
	0,     				// скилл кольт
	0,   				// скилл пистолет с глушителем
	0,     				// скилл дигл
	0,    				// скилл дробовик
	0,        			// скилл мп5
	0,	    			// скилл ак47
	0,         			// скилл м4
	0,					// скилл снайперская винтовка
	0,    				// скилл обрез
	0,  				// скилл тактический дробовик
 	0,  				// скилл микро-узи
 	// -------------------------
 	0,                   // место спавна
	// -------------------------
	0,					// текущий баланс донат-очков
	0,					// всего пополнений донат-очков
	// -------------------------
	false,				// лежит ли в больнице
	-1,					// номер койки
	// -------------------------
	false,				// перезаряжает ли оружие
	0,					// количество перезарядок
	0,					// наручники на игроке (0 - нет, 1 - наручники, 2 - веревка)
	INVALID_PLAYER_ID,	// кто ведёт за собой
	// -------------------------
	INVALID_VEHICLE_ID,	// покупает ли авто
	INVALID_VEHICLE_ID,	// арендованное авто
	INVALID_VEHICLE_ID,	// доверенное авто
	1,					// количество слотов для авто
	// -------------------------
	0,					// время заключения
	// -------------------------
	0,					// раскраски оружия
	// -------------------------
	0,					// уровень премиум аккаунта
	0,                  // Date premium
	1,                  // preimum chat
	// -------------------------
	0,       			// скилл грузчика
	0,    				// скилл лесоруба
	0,          		// депозит
	-1,           		// id семьи
	0,      			// ранг в семье
	0,        			// ловит ли рыбу
	0,         			// сколько киллограмм рыбы
	// ------------------------
	0,          		// пользователь PC версии
	-1,                 // ID остановки
	0,                  // Шаг поездки
	100,                // Нужда: Голод
	100,                // Нужда: Жажда
	// ------------------------
	0.0,     			// позиция выхода
	0.0,     			// позиция выхода
	0.0,    			// позиция выхода
	0.0,     			// позиция выхода
	0,    				// вирт. мир выхода
	0,          		// интерьер выхода
	0,                  // имущество в котором находился
	0,                  // вышел ли на работу (ATWORK)
	// ------------------------
	0,                  // деньги заработанные на дальнобойщиках
	0,     				// уровень дальнобойщика
	0.0, 				// сколько проехал киллометров на фуре
	INVALID_VEHICLE_ID,	// ид грузовика который арендовал
	INVALID_VEHICLE_ID,	// ид прицепа который взял
	0,       			// номер заказа который взял
	0,                  // начал работу дальнобойшика
	0,                  // на мп или нет
	-1,                 // стоит ли за лавкой
	0,                  // подковы
	-1,					// таймер ускорения авто
	0,            // Бонусы
	0,            // Бонусы
	0,   // СПОРТЗАЛ
	0,   // СПОРТЗАЛ
	0, // СПОРТЗАЛ
	0, // СПОРТЗАЛ
	0,    // СПОРТЗАЛ
	//----------------------- (( Дополнения SAMP Mobile + ))
	0,
	0,
	//----------------------- (( pass system ))
	0,
	0,
	0,
	//----------------------- (( Last position of crash ))
	0.0,
	0.0,
	0.0,
};

new mysql_race[MAX_PLAYERS];

new Float: g_taxi_mileage[MAX_PLAYERS] = {0.0, ...};

new following_timer[MAX_PLAYERS] = {-1, ...};
new bool: vehicle_nitro[MAX_VEHICLES] = {false, ...};

// ------------------------------------------
new g_ownable_car[MAX_OWNABLE_CARS][E_OWNABLE_CAR_STRUCT];
new g_ownable_car_loaded;

// ------------------------------------------
new g_vehicle_trunk[MAX_VEHICLES][MAX_VEHICLE_TRUNK_SLOTS][E_VEHICLE_TRUNK_STRUCT];

// ------------------------------------------
new g_hotel[MAX_HOTELS][MAX_HOTEL_ROOMS][E_HOTEL_STRUCT];
new g_hotel_rooms_loaded[MAX_HOTELS];
new g_hotel_loaded;

new g_hotel_lift_CP[2];

new const
	Float: g_hotel_room_exit_pos[12][3] =
{
	{2242.3513,-1159.8019,1029.7969},
	{2240.0862,-1159.7626,1029.7969},
	{2242.5247,-1170.7637,1029.7969},
	{2240.1406,-1170.6523,1029.7969},
	{2225.5435,-1189.9569,1029.7969},
	{2225.5857,-1187.4805,1029.7969},
	{2209.6172,-1189.8206,1029.7969},
	{2209.6619,-1187.3679,1029.7969},
	{2191.8906,-1173.0023,1029.7969},
	{2194.4626,-1173.0237,1029.7969},
	{2192.0291,-1156.9556,1029.7969},
	{2194.1711,-1157.0397,1029.7969}
};

new const
	Float: g_hotel_room_pos[12][3] =
{
	{2242.3513,-1159.8019,1029.7969},
	{2240.0862,-1159.7626,1029.7969},
	{2242.5247,-1170.7637,1029.7969},
	{2240.1406,-1170.6523,1029.7969},
	{2225.5435,-1189.9569,1029.7969},
	{2225.5857,-1187.4805,1029.7969},
	{2209.6172,-1189.8206,1029.7969},
	{2209.6619,-1187.3679,1029.7969},
	{2191.8906,-1173.0023,1029.7969},
	{2194.4626,-1173.0237,1029.7969},
	{2192.0291,-1156.9556,1029.7969},
	{2194.1711,-1157.0397,1029.7969}
};

new const // позиции авто (парковка отеля / подогнать тс к отелю)
	g_hotel_car_park_pos[1][14][E_HOTEL_CAR_PARK_STRUCT] =
{
	{
		{298.4476, -1536.1466, 24.2045, 54.0000,	INVALID_VEHICLE_ID},
		{295.2194, -1540.5282, 24.2045, 54.0000,	INVALID_VEHICLE_ID},
		{292.1540, -1544.8007, 24.2045, 54.0000,	INVALID_VEHICLE_ID},
		{285.5447, -1526.9191, 24.2045, -126.0000,	INVALID_VEHICLE_ID},
		{282.4468, -1531.1227, 24.2045, -126.0000,	INVALID_VEHICLE_ID},
		{279.0356, -1535.5916, 24.2045, -126.0000,	INVALID_VEHICLE_ID},
		{288.8474, -1522.5402, 24.2045, -126.0000,	INVALID_VEHICLE_ID},
		{291.7460, -1518.4275, 24.2045, -126.0000,	INVALID_VEHICLE_ID},
		{294.6456, -1513.8093, 24.2045, -126.0000,	INVALID_VEHICLE_ID},
		{297.5783, -1509.5223, 24.2045, -126.0000,	INVALID_VEHICLE_ID},
		{300.9886, -1505.1801, 24.2045, -126.0000,	INVALID_VEHICLE_ID},
		{300.9312, -1491.5731, 24.2045, -126.0000,	INVALID_VEHICLE_ID},
		{303.7037, -1487.1732, 24.2045, -126.0000,	INVALID_VEHICLE_ID},
		{306.9706, -1482.5419, 24.2045, -126.0000,	INVALID_VEHICLE_ID}
	}
};

// ------------------------------------------
new g_house[MAX_HOUSES][E_HOUSE_STRUCT];
new g_house_loaded;

new g_house_renters[MAX_HOUSES][MAX_HOUSE_ROOMS][E_HOUSE_ROOM_STRUCT];
new g_house_renters_count[MAX_HOUSES];


new g_house_type[4][E_HOUSE_TYPE_STRUCT] =
{
	{
		"Низкий класс", 						// название / тип
		244.8121, 312.1073, 999.7489,270.0, 	// после входа
		248.8069, 308.8801, 999.0327, 			// аптечка
		248.7947, 311.4595, 998.1266,			// шкаф
		1,										// интерьер
		1,										// комнат
		30000                                   // цена инты // GO
	},
	{
		"Средний класс", 						// название / тип
		2470.6851, -1721.0758, 1012.3456,-270.0, 	// после входа
		2454.2522, -1717.1226, 1011.3062, 		// аптечка
		2465.9817, -1720.0570, 1011.5906,			// шкаф
		2,										// интерьер
		5,										// комнат
		400000                                   // цена инты
	},
	{
		"Высокий класс",						// название / тип
		2324.9543, -1167.2716, 1051.1747, 360.0,	// после входа
		2333.3572, -1163.9586, 1050.5059, 		// аптечка
		2339.8215, -1160.2651, 1053.2734,			// шкаф
		12,										// интерьер
		5,										// комнат
		700000                                   // цена инты
	},
	{
		"Особняк семьи",						// название / тип
		2324.8735, -1166.0735, 1051.3937,360.0,	// после входа
		000.000,000.000,000.000,			// аптечка
		2339.8169, -1160.3372, 1053.2734,			// шкаф
		5,										// интерьер
		5,										// комнат
		5000000,                               	// цена инты
	}
};
new const
	g_house_improvements[6][E_IMPROVEMENTS_STRUCT] =
{
	{"Автоматические двери", 	8_000, 	0},
	{"Домашняя аптечка", 		14_500, 0},
	{"Совместное проживание",	20_000, 0},
	{"Оформление субсидии",		55_000, 0},
	{"Шкаф для вещей",			60_000, 0},
	{"Чердак и гараж",			75_000, 0}
/*	{"Сигнализация",			90_000, 0}
	*/
};

// ------------------------------------------
new g_business[MAX_BUSINESS][E_BUSINESS_STRUCT];
new g_business_loaded;

new const
	g_business_improvements[6][E_IMPROVEMENTS_STRUCT] =
{
	{"Дополнительные продукты", 			15_000,		0},
	{"Медицинское обслуживание", 			30_000,		0},
	{"Пониженное налогообложение",			80_000,		0},
	{"Звуковые эффекты при входе",			150_000,	0},
	{"Дополн. склад для продуктов",			300_000,	0},
	{"Рекламная кампания",					450_000,	0}
};

enum // иды интерьеров
{
	BUSINESS_INTERIOR_SHOP_24_7 = 0,	// магазин 24/7
	BUSINESS_INTERIOR_CLUB = 1,			// клуб
	BUSINESS_INTERIOR_REALTOR_BIZ = 2,	// управление статистики (бизнесы)
	BUSINESS_INTERIOR_REALTOR_HOME = 3,	// риелторское агенство (дома)
	BUSINESS_INTERIOR_CLOTHING_SHOP = 4,// магазин одежды
	BUSINESS_INTERIOR_HOTEL = 5,		// отель
	BUSINESS_INTERIOR_CAR_MARKET = 6,	// авторынок
	BUSINESS_INTERIOR_CASINO = 7,		// казино
	BUSINESS_INTERIOR_CELL_SALON = 8,	// сотовый салон
	BUSINESS_INTERIOR_CAR_TUNING = 9,	// тюнинг транспорта
	BUSINESS_INTERIOR_MCDONALDS = 10,	// закусочная // UPDATE
	BUSINESS_INTERIOR_SHOP_GUN = 11,	// магазин оружия
	BUSINESS_INTERIOR_SPORTZAL = 12,		// Спортзал
	BUSINESS_INTERIOR_AUTOSCHOOL = 13,  // автошкола
	BUSINESS_INTERIOR_MEBEL = 14,  // автошкола
};
new const
	g_business_interiors[15][E_BUSINESS_INTERIOR_STRUCT] =
{
	{ // магазин 27/7
  		"Магазин 24/7",
		-25.9371,-188.2592,1003.5469, 		// позиции пикапа (выход)
		-25.9524,-186.6187,1003.5469,1.4451,// позиции входа
		17, 									// интерьер
		-33.7884,-185.7547,1003.5469, 		// позиции аптечки
		-29.1443,-185.1296,1003.5469, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // клуб (алхамбра)
     	"Клуб",
		493.2951,-24.7983,1000.6797, 		// позиции пикапа (выход)
		493.6265,-21.1117,1000.6797,4.0968, // позиции входа
		17, 								// интерьер
		495.9453,-23.3068,1000.6797, 		// позиции аптечки
		499.6656,-20.6832,1000.6797, 		// позиции покупки
		499.6656,-20.6832,1000.9797, 		// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // управление статистики
     	"Управление статистики",
		436.1514,-179.4724,1001.8047,	// позиции пикапа (выход)
		437.2594,-177.0415,1001.8047,360.0,	// позиции входа
		0,									// интерьер
		434.7048,-173.4740,1001.8047,	// позиции аптечки
		437.2419,-171.2702,1001.8047,	// позиции покупки
		437.2419,-171.2702,1002.8047,	// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // риелторское агенство
     	"Риелторское агенство",
		408.8105, -84.5317, 1001.9286,		// позиции пикапа (выход)
		408.7068, -81.2302, 1001.4456, 339.92,// позиции входа
		0,									// интерьер
		4412.1579, -75.9168, 1001.6330,		// позиции аптечки
		412.1579, -78.0568, 1001.6330,		// позиции покупки
		4412.1579, -75.9168, 1001.6330,		// позиции 3д текста
		-1
	},
	{ // магазин одежды
     	"Магазин одежды",
		204.2994,-168.8603,1000.5234,		// позиции пикапа (выход)
		204.3320,-167.2944,1000.5234,0.0,// позиции входа
		14,									// интерьер
		200.1923,-165.4327,1000.5234,		// позиции аптечки
		204.4419,-159.3553,1000.5234,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // отель
     	"Отель",
		2214.3845,-1150.4509,1025.7969,		// позиции пикапа (выход)
		2216.5420,-1150.5630,1025.7969,269.3008,// позиции входа
		15,									// интерьер
		2224.1628,-1153.3560,1025.7969,		// позиции аптечки
		2217.4019,-1146.8101,1025.7969,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // авторынок
     	"Автосалон",
		5.6404, -31.8285, 1080.9968,		// позиции пикапа (выход)
		5.6428, -28.8609, 1080.9968, 360.0, // позиции входа
		5,									// интерьер
		1.9981, -25.4102, 1080.9968,		// позиции аптечки
		5.6207, -29.6107, 1085.9291,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // казино
     	"Казино",
		1164.5709, 14.5277, 1000.5926,		// позиции пикапа (выход)
		1164.5709, 13.0877, 1000.9926,-180.0,// позиции входа
		12,									// интерьер
		1158.0045, 1.5719, 1000.1829,		// позиции аптечки
		1178.1469, 0.7374, 1000.2018,	// позиции покупки
		0.0, 0.0, 0.0, 	// позиции 3д текста
		-1
	},
	{ // сотовый салон
  		"Сотовый салон",
		-100.4209,-25.0371,1000.7188, 		// позиции пикапа (выход)
		-100.3696,-23.5074,1000.7188, 356.6983, // позиции входа
		3, 									// интерьер
		-99.3793,-11.6177,1000.7188, 		// позиции аптечки
		-103.9910,-22.6793,1000.7188, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	},
	{ // тюнинг салон
     	"СТО",
		874.2732, 1329.8386, 1008.2256, 	// позиции пикапа (выход)
		873.0318, 1329.8650, 1008.2256, 0.0, // позиции входа
		7, 									// интерьер
		871.2307, 1328.5104, 1008.2359, 	// позиции аптечки
		868.7779, 1329.4622, 1008.2256, 	// позиции покупки
		868.7568, 1328.4609, 1008.9873,		// позиции 3д текста
		-1
	},
	{ // закусочная
     	"Закусочная",
		362.8546, -75.1480, 1001.5078, 	// позиции пикапа (выход)
		364.5301, -73.7523, 1001.5078, 313.2956, // позиции входа
		10, 								// интерьер
		379.6237,-72.1472,1001.5078, 		// позиции аптечки
		377.3607, -67.4345,  1001.5078, 	// позиции покупки
		377.3607, -67.4345,  1001.5178,		// позиции 3д текста
		-1
	},
	{ // магазин оружия
     	"Магазин оружия",
		286.1131, -41.8053, 1001.5156, 	// позиции пикапа (выход)
		286.1779, -39.0687, 1001.5156, 0.0, // позиции входа
		1, 									// интерьер
		299.5606, -36.1376, 1001.5156, 		// позиции аптечки
		294.4244, -38.5143, 1001.5156, 	// позиции покупки
		294.4244, -38.5143, 1001.5156,		// позиции 3д текста
		-1
	},
	{ //  Cпортзал
     	"Спортзал",
		773.9446, -78.7487, 1000.4986, 	// позиции пикапа (выход)
		774.1448, -76.2511, 1001.5065,91.1170, // позиции входа
		7, 									// интерьер
		767.6977, -78.2218, 1000.1836, 		// позиции аптечки
		771.1188, -77.9981, 1000.3781, 	// позиции покупки
		858.0543,-38.3527,1004.1796,		// позиции 3д текста
		-1
	},
	{ // автошкола
     	"Центр лицензирования",
		1436.6238, 292.9343, 1038.6507, 	// позиции пикапа (выход)
		1434.8527, 291.6736, 1038.8708, 180.0, // позиции входа
		3, 									// интерьер
		000.000, 000.000, 000.000, 		// позиции аптечки
		1432.1708, 280.5318, 1038.0863, 	// позиции покупки
		1432.1708, 280.5318, 1038.0863,		// позиции 3д текста
		-1
	},
	{ // Смена интерьера
     	"Магазин мебели",
		356.5504, -130.5593, 1000.5577, 	// позиции пикапа (выход)
		357.1385, -128.6191, 1000.1963, -180.0, // позиции входа
		3, 									// интерьер
		356.9642, -120.6924, 1000.1108, 		// позиции аптечки
		360.2738, -124.1754, 1000.1155, 	// позиции покупки
		-2033.0344,-115.7137,1035.1719,		// позиции 3д текста
		-1
	}
};
// Управление статистики
new Text3D: g_business_realtor_label;

new g_business_realtor_list[2048];
new g_business_realtor_list_idx[MAX_BUSINESS];
// --------------------

// Риелторское агенство
new Text3D: g_house_realtor_label;
new g_house_realtor_list[2048];
// --------------------

// магазин одежды
new const
	g_business_clothing_skins[2][27][2] =
{
	{// М,Скины
		{2, 3000},
		{4, 5000},
		{5, 5000},
		{6, 5000},
		{29, 12000},
		{30, 12000},
		{45, 30000},
		{46, 200000},
		{48, 12000},
		{83, 80000},
		{82, 80000},
		{84, 80000},
		{98, 45000},
		{100, 50000},
		{142, 50000},
		{155, 5000},
		{167, 150000},
		{185, 120000},
		{221, 120000},
		{223, 80000},
 		{249, 200000},
		{293, 150000},
		{292, 120000},
		{294, 200000},
  		{296, 180000},
		{297, 150000},
		{299, 200000}
	},
	{// Ж,Скины
		{11, 15000},
		{12, 10000},
		{13, 10000},
		{40, 20000},
		{41, 12000},
		{55, 15000},
		{56, 12000},
		{69, 5000},
		{90, 7000},
		{141, 35000},
		{190, 20000},
		{193, 20000},
		{214, 100000},
		{216, 25000},
		{219, 50000},
		{225, 25000},
		{298, 200000},
 		{69, 5000},
		{90, 7000},
		{141, 35000},
		{190, 20000},
		{193, 20000},
		{214, 100000},
		{216, 25000},
		{219, 50000},
		{225, 25000},
		{298, 200000}
	}
};

new const
	g_business_sound[5] =
{
	17001,
	4203,
	21000,
	1135,
	1137
};


new g_business_gps[MAX_BUSINESS_GPS][E_BUSINESS_GPS_STRUCT];
new g_business_gps_count;
new bool: g_business_gps_init;

// ------------------------------------------
new g_fuel_station[MAX_FUEL_STATIONS][E_FUEL_STATION_STRUCT];
new g_fuel_station_loaded;

new const
	g_fuel_station_improvements[4][E_IMPROVEMENTS_STRUCT] =
{
	{"Емкость хранилища топлива I", 	9_500, 	0},
	{"Емкость хранилища топлива II", 	24_000, 0},
	{"Емкость хранилища топлива III",	58_000, 0},
	{"Отмена акцизного сбора", 			74_000, 0}
};

// ------------------------------------------

new
	Float: g_med_bed_pos[][] = // позиции коек
{
	{1359.8037, -163.4237, 967.1835},
	{1356.9530, -163.4237, 967.1835},
	{1362.8330, -163.4237, 967.1835},
	{1365.7419, -163.4237, 967.1835},
	{1365.8535, -168.6035, 967.2159},
	{1363.1021, -168.6035, 967.2159},
	{1360.0428, -168.6035, 967.2159},
	{1357.1910, -168.6035, 967.2159},
	//Палата 2
	{1374.4012, -163.4934, 967.1776},
	{1377.1169, -163.4934, 967.1776},
	{1380.0460, -163.4934, 967.1776},
	{1382.9620, -163.4934, 967.1776},
	{1382.9429, -168.5469, 967.1418},
	{1380.2760, -168.5469, 967.1418},
	{1377.2500, -168.5469, 967.1418},
	{1374.4980, -168.5469, 967.1418}
};
new g_med_bed_used[sizeof g_med_bed_pos] = {false, ...}; // занята ли койка
new Text3D: g_med_bed_label[sizeof g_med_bed_pos]; // текст койки

// ------------------------------------------
new
	Float: g_casino_table_pos[][] = // позиции столиков в казино
{
	{2010.8601, 1375.3765, 1652.5056},
	{2010.7396, 1382.5850, 1652.5557},
	{2023.5537, 1382.5275, 1652.5557},
	{2023.0997, 1375.3451, 1652.5056}
};
new g_casino_area[sizeof g_casino_table_pos]; // зона для использования /dice

new
	Float: g_fish_pos[][] = // позиции удочек для ловни рыбы
{
	{403.8271,-2088.7661,7.8359},
	{398.6392,-2088.7983,7.8359},
	{396.0097,-2088.7983,7.8359},
	{390.8767,-2088.7983,7.8359},
	{383.3826,-2088.7983,7.8359},
	{374.8746,-2088.7983,7.8359},
	{369.6624,-2088.7983,7.8359},
	{367.1048,-2088.7983,7.8359},
	{361.9530,-2088.7983,7.8359},
	{354.3242,-2088.7983,7.8359},
	{349.9569,-2072.4993,7.8359},
	{349.9331,-2067.2891,7.8359},
	{349.9213,-2064.7644,7.8359},
	{349.8980,-2059.6990,7.8359},
	{349.8622,-2052.0127,7.8359},
	{2289.1492,522.6550,1.7944},
	{2291.8176,522.5594,1.7944},
	{2294.6221,522.5795,1.7944},
	{2298.1353,522.5930,1.7944},
	{2349.3804,522.7755,1.7969},
	{2352.1196,522.6920,1.7969},
	{2355.4001,522.6862,1.7969},
	{2358.5774,522.7169,1.7969},
	{2361.5107,522.7343,1.7969},
	{2364.8538,522.7422,1.7969},
	{2367.3679,522.7539,1.7969},
	{2370.2314,522.7975,1.7969}
};
new g_fish_pos_used[sizeof g_fish_pos] = {false, ...}; // занята ли место для ловли рыбы
new Text3D: g_fish_pos_label[sizeof g_fish_pos]; // текст удочки
new g_fish_area[sizeof g_fish_pos]; // зона удочек
new price_fish;


// ------------------------------------------
enum
{
	ARMORY_TYPE_ARMOR = 0,
	ARMORY_TYPE_POLICE,
	ARMORY_TYPE_SECURITY
}

enum E_ARMORY_STRUCT
{
	A_DESCRIPTION[21],
	A_TYPE,
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z
}

new g_armory[5][E_ARMORY_STRUCT] =
{
	{"ВМФ", ARMORY_TYPE_ARMOR, 1227.9379, -382.9861, 4.0076},
	{"Охрана правительства", ARMORY_TYPE_SECURITY, 244.2405, 188.1487, 1007.8881},
	{"LSPD", ARMORY_TYPE_POLICE, 254.0156,79.5851,1003.6406},
	{"FBI", ARMORY_TYPE_POLICE, 1926.6577, 2196.3027, 2069.4800},
	{"ФСБ", ARMORY_TYPE_POLICE, 204.1425, -447.3391, 1006.4179}
};

// ------------------------------------------
new g_player_setting[MAX_PLAYERS][E_PLAYER_SETTINGS_STRUCT];
new
	g_settings_default_values[E_PLAYER_SETTINGS_STRUCT] =
{
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_OFF,
};

// ------------------------------------------
new g_player_gps[MAX_PLAYERS][E_PLAYER_GPS_STRUCT];
new
	g_gps_default_values[E_PLAYER_GPS_STRUCT] =
{
	GPS_STATUS_OFF,
	0.0,
	0.0,
	0.0
};

// ------------------------------------------
new const
	gps_public_places[9][E_GPS_STURCT] = // общественные места
{
	{1498.1770, -1583.8309, 12.5449, 36}, // gps Автошкола
	{556.185,-1293.93,17.2482, 55}, // авторынок "батырево"
	{-1965.86,293.829,35.4688, 55}, // авторынок "анашан"
	{2200.85,1394.81,11.0625,55}, // авторынок "арзамас"
	{2131.84,-1151.34,24.0603, 55}, // Мото-Вело рынок
	{333.7647, -1797.5499, 3.7115, 55}, // БУ рынок
	{1962.2814,-2278.9417,13.5469, 55}, // Покупка воздешного транспорта
	{331.2557,-40.1697,2.2255, 19}, // Военкомат
	{1411.5688,-1699.5140,13.5395,52}
};


new const
	gps_state_organizations[6][E_GPS_STURCT] = // государственные организации
{
	{1481.0066,-1772.3138,18.7958, 	19}, // gps Мэрия г.Los-Santos
	{1555.4983,-1675.6654,16.1953, 	30}, // gps LSPD
	{1317.0298,-1184.4017,23.5908, 	30}, // gps ФСБ
	{1186.3344,-1324.5762,13.5593, 	22}, // gps Больница г.Los-Santos
	{1778.2361,-1661.6642,14.4365, 	42}, // gps ТРК "Ритм"
	{2731.2380,-2451.3320,17.5937, 	18}  // gps ВМФ
};

new const
	gps_gangs[4][E_GPS_STURCT] = // Базы банд и мафий
{
	{2493.5757,-1667.4480,13.3857, 	62}, // Grove Gang
	{2781.8296,-1612.5983,11.0517, 	61}, // gps Vagos Gang
	{1936.6746,-1136.2821,25.3514, 	60},  // gps Ballas Gang
	{2173.4517,-1797.6415,13.4982, 	60}  // gps Ballas Gang
};

new const
	gps_jobs[15][E_GPS_STURCT] = // по работе
{
	{2175.9924, -2259.3906, 14.7734, 11}, // gps грузчика
	{-552.5621, -184.5505, 78.4063, 11}, // gps лесоруб
	{1227.7173,181.6112,20.4101, 11}, // gps завод
	{1227.7173,181.6112,20.4101, 11}, // gps завод
	{-80.5188,82.8398,3.1096, 11}, // gps ферма
	{-1877.4658,-1645.0375,21.7500, 11}, // gps шахта
	{-111.4576,-10.7540,3.1094, 11}, // gps работа комбайнера
	{-1882.0281,-1692.5793,21.7454, 11}, // gps шахта загрузка
	{2445.4480,-2121.2275,13.5469, 19}, // gps база дальнобойщиков
	{2105.3774, -1806.4456, 13.6034, 19}, // gps развозчик пиццы
	{1098.7078,-1775.6199,13.1581, 	42}, // gps Ж/Д Вокзал Арзамаса
	{1241.7930,-1831.1121,13.3998, 	42}, // gps Автовокзал Арзамаса
	{1100.0493,-1237.5815,15.8203, 	42}, // gps Автомеханик
	{381.6746,-2077.4885,7.8359, 19}, // Пирс ЛС
	{2326.3708,546.3826,7.7813, 19} // Пирс ЛВ
};


new const
	gps_entertainment[11][E_GPS_STURCT] = // развлечения
{
	{-2462.2595,1663.9941,52.2873, 	37}, // gps Кремль
	{2336.4331,962.5314,15.9075, 	37}, // gps Густой лес
	{-2154.9751,-619.4980,41.4841, 	37}, // gps Охотничий лес
	{-171.7977,461.1872,12.4508, 	37}, // gps Стадион Арзамаса
	{1722.2754,-983.1115,9.2233, 	37}, // gps Старый наркопритон
	{-13.4604,-2898.7205,32.9300, 	37}, // gps Маяк на берегу моря
	{-2478.4509,2515.4011,46.0109, 	37}, // gps Центральное кладбище
	{495.0134,-2400.3999,34.8739, 	37}, // gps Закрытая электростанция
	{-256.6781,509.1857,12.5414, 	37}, // gps Нора в метро
	{1419.8693,1685.7460,15.3943, 	37}, // gps Бомбоубежище в аэропорту
	{2475.5024,-736.0927,12.1080, 	37}  // gps Заброшенный торговый центр
};

// ------------------------------------------
new help_info[14][E_HELP_INFO_STRUCT] =
{
	{
		"О проекте",
		""SERVER_NAME" - один из самых популярных проектов\n"\
		"многопользовательской GTA San Andreas Multiplayer.\n\n"\
		"Мы постарались объединить лучшие элементы ролевой игры SA-MP с\n"\
		"новыми идеями и возможностями. Вы сможете выбрать любимую\n"\
		"работу, или даже открыть свой собственный бизнес, зарабатывая\n"\
		"неплохие деньги. Может Вам захочется вступить в одну из организаций\n"\
		"и начать карьерный рост. Или же можно просто приятно провести\n"\
		"время, приняв участие в гонках, или сыграв с друзьями в морской бой.\n\n"\
		"Мы уверены, что "SERVER_NAME" поможет Вам приятно провести пару\n"\
		"свободных часов за онлайн-игрой!"
	},
	{
		"Безопасность",
		"Ваш аккаунт - это ваша собственность. Никому не давайте свой пароль,\n"\
		"иначе Вы рискуете утратить все свои достижения. Не скачивайте\n"\
		"дополнительные программы - моды, читы, трейнеры. Все они\n"\
		"создаются злоумышленниками только с одной целью - заполучить\n"\
		"доступ к Вашему аккаунту.\n\n"\
		"Игроки "SERVER_NAME" могут использовать расширенные настройки\n"\
		"безопасности,  которые практически исключает возможность взлома.\n"\
		"Подробнее: команда {66CCFF}/menu > Настройки безопасности."
	},
	{
		"Основы игры",
		"Играя на сервере, Вы получаете очки опыта. При накоплении их\n"\
		"определенного количества происходит переход на следующий уровень.\n"\
		"С каждым новым уровнем открываются новые возможности и\n"\
		"становятся доступны более интересные функции.\n\n"\
		"Для просмотра статистики воспользуйтесь командой /menu. В игровом\n"\
		"процессе постоянно нужно будет пользоваться подобными командами.\n"\
		"Они вводятся в игровой чат через косую черту, например /anim\n"\
		"/help и т. п. Введите /menu, далее выберите пункт \"Список команд\". Там\n"\
		"расположен полный перечень команд, а также их пояснение"
	},
	{
		"RolePlay",
		"RP - это такой вид игры, в котором у каждого есть своя роль. Будь\n"\
		"то таксист, водитель автобуса или шахтер, полицейский или мафиози,\n"\
		"член банды или военный. Каждый игрок определяет, кем он хочет быть.\n\n"\
		"RolePlay (RP) режим подразумевает знание некоторых правил и\n"\
		"понятий, несоблюдение которых влечет за собой наказания. С этой\n"\
		"информацией можно ознакомиться на нашем форуме, там же можно\n"\
		"задать все интересующие Вас вопросы по игровому процессу."
	},
	{
		"Первые шаги",
		"Первым делом необходимо заработать деньги. В государстве есть\n"\
		"предприятия, куда Вы сможете устроиться на первое время. Это шахта,\n"\
		"завод и городской склад. Работая там, Вы не только получите прибыль,\n"\
		"но и поддержите экономическую цепочку государства. А еще Вы\n"\
		"найдете новых друзей и получите немало удовольствия.\n\n"\
		"Все эти места можно найти, используя команду /gps. Добраться до\n"\
		"нужного объекта Вам поможет автобусный  транспорт. Прямо с ЖД\n"\
		"вокзала ходит автобус до шахты, а  до склада может подбросить любой\n"\
		"городской маршрут. Чтобы узнать подробнее о автобусных схемах,\n"\
		"введите команду /bushelp.\n\n"\
		"После того, как Вы заработаете деньги, отправляйтесь в автошколу и\n"\
		"сдавайте экзамен на права. Они позволят купить или арендовать\n"\
		"автомобиль, устроиться на более высокооплачиваемую и интересную\n"\
		"работу. Сдача на права стоит 600$, перед поездкой в автошколу\n"\
		"убедитесь, что имеете такую сумму."
	},
	{
		"Общение",
		"Во время игры вам постоянно придется взаимодействовать с людьми. Существует 2\n"\
		"вида чатов:\n\n"\
		"\t1. IC (In Character) - общение внутри игры и только для внутренних игровых\n"\
		"\tситуаций. Чат вызывается клавишей F6.\n"\
		"\t2. OOC (Out Of Character) - все, что касается реального, не игрового мира.\n"\
		"\tНажмите F6, далее введите команду /n и свое сообщение. Оно выделится в\n"\
		"\tдвойные скобки.\n\n"\
		"Помимо этого, существуют много других способов общения. Вы можете звонить по\n"\
		"телефону или отправлять SMS сообщения. Вступив в организацию, появится\n"\
		"возможность связываться с сотрудниками по рации, а также масса других\n"\
		"интересных функций.\n\n"\
		"Информацию о командах общения можете узнать в соответствующем разделе меню:\n"\
		"/menu > Список команд"
	},
	{
		"Транспорт",
		"Транспортная система - одна из важнейших в стране. С ее помощью возможна\n"\
		"стабильная работа большинства предприятий и организаций.\n\n"\
		"Основной вид транспорта - это автобус. Маршруты проложены по всему\n"\
		"государству и связывают все населенные пункты и предприятия.\n"\
		"Такси - наиболее удобный вид транспорта. Вы сможете добраться до любого места,\n"\
		"однако такая поездка будет стоить значительно дороже, чем на автобусе.\n"\
		"Поезд - быстрый и недорогой вид транспорта. Вы за несколько минут сможете\n"\
		"добраться до любой станции, но составы курсируют не так часто.\n\n"\
		"Государственной транспортной компании всегда требуются новые работники. О\n"\
		"вакансиях и требованиях можно узнать в ближайшей мэрии (/gps)."
	},
	{
		"Государственная система",
		"Вся игровая жизнь проходит под контролем правительства -\n"\
		"основной организации в государстве. В ее состав входят мэрии трех\n"\
		"городов и администрация Президента. Раз в месяц проходят\n"\
		"выборы, где каждый имеет право голоса. А перед этим проводится не\n"\
		"менее интересная избирательная кампания, где кандидаты на пост\n"\
		"Президента устраивают дебаты, концерты и митинги, завоевывая\n"\
		"своих новых избирателей…\n\n"\
		"Государственную систему и ее значение не опишешь несколькими\n"\
		"предложениями. Политическая жизнь необычайно насыщенная, и Вы\n"\
		"сами убедитесь в этом с первых дней жизни у нас!"
	},
	{
		"Жилье",
		"По всему государству расположены жилые дома, которые можно купить.\n"\
		"Каждый дом имеет свою стоимость, которую определяют множество\n"\
		"факторов. Можно купить вагончик за небольшие деньги, или отдать\n"\
		"миллионы за роскошный особняк в элитном районе.\n\n"\
		"Если у Вас есть дом, то вы сможете приобрести машину, или купить\n"\
		"дополнительные улучшения, такие как шкаф для хранения вещей или\n"\
		"автоматические двери. И это только некоторые возможности жилья.\n\n"\
		"В зависимости от престижности дома, с Вас будет взиматься ежедневная\n"\
		"квартплата. Если долгое время на счету будет сохраняться отрицательный\n"\
		"баланс, есть вероятность, что работники мэрии выселят Вас."
	},
	{
		"Бизнес и АЗС",
		"Вы можете открыть собственный бизнес, и зарабатывать неплохие\n"\
		"деньги. Это может быть небольшая пекарня, магазин одежды или\n"\
		"развлекательный центр, столовая, парикмахерская, либо обычная\n"\
		"продуктовая лавка. Или вы захотите стать совладельцем крупной сети\n"\
		"супермаркетов, ресторанов или театров. В нашей стране существует\n"\
		"огромное количество разнообразных предприятий.\n\n"\
		"Имея бизнес, перед Вами откроются большие возможности для\n"\
		"привлечения новых клиентов, что будет постоянно повышать Ваши\n"\
		"доходы. Вы сможете регулировать цены, улучшать различные\n"\
		"характеристики своего предприятия, одновременно проводя борьбу с\n"\
		"конкурентами.\n\n"\
		"АЗС (автозаправочные станции) - особый тип бизнеса, доходы от\n"\
		"которого значительно выше, чем от обычных предприятий. Для\n"\
		"нормальной работы АЗС нужно постоянно заключать контракты со\n"\
		"службой доставки топлива. Бизнесмен может владеть обычным\n"\
		"предприятием и АЗС одновременно."
	},
	{
		"Банки, хранение средств",
		"Каждый игрок получает свой счет в банке. На него перечисляется\n"\
		"зарплата и прочие доходы. Этот счет называется основным, и доступен в\n"\
		"любом банкомате.\n\n"\
		"Помимо этого, Вы можете воспользоваться услугами профессиональных\n"\
		"банков, найти которые поможет GPS. Там можно открыть до 8\n"\
		"дополнительных счетов. Каждый из них имеет свой номер, который\n"\
		"выдается банком при создании счета. Зная его, любой игрок может\n"\
		"перечислить вам деньги, даже если вы оффлайн. Например, можно\n"\
		"создать счет с названием \"Благотворительность\", написать об открытии\n"\
		"благотворительной организации через San News, сообщить номер счета, и\n"\
		"любой сможет перечислить на него деньги в отделении банка или через\n"\
		"банкомат.\n\n"\
		"Дополнительные счета можно настраивать, устанавливать защиту\n"\
		"PIN-кодом, изменять названия а также просматривать подробную\n"\
		"историю операций."
	},
	{
		"Организации",
		"В нашей стране работает большое количество организаций. Они могут\n"\
		"быть как официальными (Мэрия г. Лос-Сантос, Полицейский департамент, Мин. Обороны, мин.\n"\
		"Здравоохранения, ТВ и радио), так и неофициальными (банды и мафии).\n\n"\
		"При достижении определенного уровня, Вы можете вступить в любую из\n"\
		"организаций. Руководство некоторых может выдвигать и дополнительные\n"\
		"требования для вступления. Например, если Вы хотите попасть в банду,\n"\
		"то Вам придется продемонстрировать свое умение владеть оружием. А\n"\
		"если Вы видите себя в роли редактора объявлений, то нужно красиво и\n"\
		"грамотно писать. О дополнительных требованиях сообщит руководство\n"\
		"организации во время набора сотрудников.\n\n"\
		"После вступления, Вам будет доступно продвижение по карьерной\n"\
		"лестнице, постепенно откроются новые возможности. С каждым повышением\n"\
		"будет увеличиваться Ваша зарплата и статус в обществе. Вы найдете\n"\
		"новых друзей, а со временем сможете занять одну из руководящих\n"\
		"должностей. Жизнь в организации необычайно интересная и разнообразная!"
	},
	{
		"Работы",
		"В мэрии вашего города работает отдел занятости, где Вы можете\n"\
		"устроиться на любую работу. Следует обратить внимание, что некоторые\n"\
		"работы доступны при достижении определенного уровня. Вы не можете\n"\
		"одновременно быть оформленным на работу в мэрии и состоять в\n"\
		"организации.\n\n"\
		"Помимо основных работ существуют и дополнительные. К ним относятся\n"\
		"работы на шахте, заводе и складе. Такие работы можно совмещать с\n"\
		"основными и зарабатывать больше денег. Используйте команду /gps для\n"\
		"того, чтобы найти места расположения различных работ. На месте вы\n"\
		"получите подробные инструкции, как и что следует делать."
	},
	{
		"Развлечения",
		"Если у вас появилось свободное время и желание, то рекомендуем вам\n"\
		"посетить одно из развлекательных мероприятий. Каждые 3 часа\n"\
		"проводятся гонки, поучаствовать в которых может любой желающий.\n"\
		"Сейчас команда разработчиков проекта готовит и другие, не менее\n"\
		"интересные развлечения!\n\n"\
		"Помимо событий по расписанию, администраторы сервера очень часто\n"\
		"проводят разного рода мероприятия, участвовать в которых не только\n"\
		"интересно, но и выгодно - победители получают ценные подарки.\n\n"\
		"О проведении того или иного развлекательного мероприятия вы узнаете\n"\
		"заранее из информационных сообщений в общем чате."
	}
};
new help_info_items[35 * (sizeof help_info) + 1];
new help_info_CP;

// ------------------------------------------
new info_pickup[8][E_INFO_PICKUP_STRUCT] =
{
	{
		"Шахта",
		"Тут Вы можете устроиться на работу шахтером.\n"\
		"Для этого найдите служебное помещение на заднем дворе шахты,\n"\
		"там Вам выдадут спецодежду и необходимый инструмент, а также\n"\
		"расскажут что делать дальше.\n\n"\
		"Шахта специализируется на добыче железной руды, из которой\n"\
		"потом в кузнице получают металл. Он широко применяется на\n"\
		"других предприятиях, поэтому регулярная добыча руды очень важна\n"\
		"для экономики государства.",
		"О шахте",
		0x66CCFFFF,
		2385.3167, 1766.6891, -1.7170
	},
	{
		"О подземной добыче",
		"Ученые выяснили что руда, которая находится в подземных залежах\n"\
		"намного качественнее той,  которую добывают на поверхности.\n"\
		"Именно поэтому было принято решение построить шахтовый\n"\
		"подъемник для подземной добычи.\n\n"\
		"В связи со сложностью подземных работ шахтерам полагается\n"\
		"премия за каждую партию руды, которая была добыта под землей.",
		"Подземная\nдобыча",
		0xffff00FF,
		2376.9819, 1729.6956, -2.1078
	},
	{
		"О применении металла",
		"Полученный на шахте металл достаточно широко применяется\n"\
		"различными организациями, однако основной потребитель - это\n"\
		"завод по производству продуктов. Более подробно о назначении\n"\
		"этого предприятия можно узнать, приехав туда (/gps).\n\n"\
		"Для нормальной работы заводу постоянно требуется металл,\n"\
		"транспортировкой которого занимается его служба доставки. На\n"\
		"этом складе развозчики закупают металл для предприятия.",
		"Развозчики\nметалла",
		0xffff00FF,
		2327.0488, 1741.1315, 0.9221
	},
	// -------------------------------
	{
		"Завод по производству продуктов",
		"Здесь находится одно из важнейших предприятий в государстве - завод\n"\
		"по производству продуктов. От его регулярной работы зависит\n"\
		"деятельность всего частного бизнеса.\n\n"\
		"В данный момент можно устроиться на одну из двух специальностей -\n"\
		"работник производственного цеха или службы доставки. На месте Вы\n"\
		"найдете более подробную информацию о каждой из них.",
		"О заводе\nпо производству\nпродуктов",
		0xffff00FF,
		-1055.7217, 2142.2402, 38.0322
	},
	{
		"Завод - Склад исходных материалов",
		"На заводе хранятся материалы, которые используются работниками цеха\n"\
		"для изготовления продуктов, а также готовые продукты. Исходные\n"\
		"материалы доставляются на завод его службой доставки. Чтобы\n"\
		"устроиться туда на работу, пройдите в раздевалку рядом, далее\n"\
		"на территории завода подойдите и выберите транспорт в зависимости\n"\
		"от того, что именно Вы хотите привезти на завод.\n\n"\
		"Материалы покупаются за свой личный счёт, а Ваша выручка - это\n"\
		"разница, которая выходит при продаже материалов заводу.",
		"Работа в\nслужбе доставки",
		0xffff00FF,
		1230.6871,146.1543,20.4573
	},
	{
		"Завод - Производственный цех",
		"Чтобы начать рабочий день пройдите к любой раздевалке. Там же\n"\
		"можно закончить его и получить выручку. Далее пройдите к\n"\
		"раздаточному столу (отмечены желтыми маркерами), возьмите\n"\
		"металл, после чего отправляйтесь на любое свободное место в центре\n"\
		"цеха. Топливо, необходимое для изготовления продукта, автоматически\n"\
		"подается к каждому столу, и Вам не нужно брать его дополнительно.\n\n"\
		"Чем больше Вы работаете в цеху, тем выше ваши навыки производства,\n"\
		"и тем меньше шанс создать бракованный продукт. Навык будет\n"\
		"увеличиваться по мере создания новых продуктов.",
		"Работа в\nпроизводственном цеху",
		0xffff00FF,
		317.1251, -210.3592, 1006.5694
	},
	// -------------------------------
	{
		"Нефтезавод",
		"На нефтезаводе можно приобрести топливо для завода по производству\n"\
		"продуктов или для развоза его по заправочным станциям. Работают 2\n"\
		"линии, выбрать нужную Вам помогут указатели.\n\n"\
		"Запасы хранилища нефтезавода постоянно пополняются по мере\n"\
		"добычи и очистки нефти.",
		"Нефтезавод",
		0xffff00FF,
		1023.0947, 637.6918, 12.0272
	},
	// -------------------------------
	{
		"Гостиницы и отели",
		"{FFFFFF}В гостиницах можно снять один из номеров. Вам будет выделено\n"\
		"место для парковки автомобиля, который можно купить на любом\n"\
		"авторынке или подержанный с рук. Сутки в номере обойдутся в 1000$\n\n"\
		"Информацию о свободных номерах можно узнать в окошке рядом с Вами.",
		"",
		0x32a44bFF,
		722.0862, 602.2735, 1002.9598
	}
};

enum E_QUEST_INFO_STRUCT
{
	Q_NAME[64],
	Q_INFO[1024],
	Q_AMOUNT
};

new quest_info[3][E_QUEST_INFO_STRUCT] =
{
	{
		"INVALID_QUEST_ID",
		"no information",
		0
	},
	{
		"Шабашка",
		"Салам, харе задротить, пора работать.\n\
		Отправляйся на работу грузчика и перенеси там 5 ящиков",
		5
	},
	{
		"Секс на сеновале",
		"Салам, харе задротить, пора работать.\n\
		Отправляйся на работу грузчика и перенеси там 5 ящиков",
		15
	}
};
// ------------------------------------------
new g_server_radio[7][E_SERVER_RADIO_STRUCT] =
{
	{
		"Радио Мелодия",
		"http://online-radiomelodia.tavrmedia.ua/RadioMelodia.m3u"
	},
	{
		"Kiss FM (UA)",
		"http://kissfm.ua/v3/kiss-2.m3u"
	},
	{
		"Радио Шансон",
		"http://radio02-cn03.akadostream.ru:8108/shanson128.mp3"
	},
	{
		"Радио Рекорд",
		"http://online.radiorecord.ru:8101/rr_128"
	},
	{
		"Sky Radio",
		"http://stream05.akaver.com/skyradio_hi.mp3"
	},
	{
		"DFM Radio",
		"http://striiming.trio.ee/dfm64.mp3.m3u"
	},
	{
		"Rock Online",
		"http://skycast.su:2007/rock-online.m3u"
	}
};
new g_server_radio_items[37 * (sizeof g_server_radio) + 1];

new
	Float: g_jail_positions[3][4] =
{
	{264.2326,77.5008,1001.0391,273.5190},
	{264.2326,77.5008,1001.0391,273.5190},
	{264.2326,77.5008,1001.0391,273.5190}
}; // 23.4808, 280.7559, 12.0264, 69.2843 - позиция выхода

new
	Float: g_med_position[2][4] =
{
	{1380.1154, -166.1714, 967.4898,180.0},
	{1359.6864, -166.1644, 967.4898,-180.0}
};

new copwarning;
new Float:copgangzone[2];

// ------------------------------------------
new anim_list[74][E_ANIM_LIST_STRUCT] =
{
	{"Танец 1",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 2",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 3",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 4", 						"",					"",						0.0, false, 0, 0, 0, 0},
	{"Танец 5",							"DANCING",			"DAN_Left_A",			4.0, true,  0, 0, 0, 0},
	{"Танец 6",							"DANCING",			"dnce_M_a",				4.0, true,  0, 0, 0, 0},
	{"Махать рукой",					"ON_LOOKERS",		"wave_loop",			4.0, true,  0, 0, 0, 0},
	{"Лечь на землю",					"BEACH",			"bather",				4.0, true,  0, 0, 0, 0},
	{"Походка пьяного",					"PED",				"WALK_DRUNK",			4.0, true,  1, 1, 1, 0},
	{"Кувыркаться",						"ped",				"Crouch_Roll_L",		4.0, true,  1, 1, 1, 1},
	{"Попрощаться",						"ped",				"endchat_03",			4.0, true,  1, 1, 1, 0},
	{"Читать рэп",						"benchpress",		"gym_bp_celebrate",		4.0, true,  0, 1, 1, 0},
	{"Укрыться",						"ped",				"cower", 				3.0, true,  0, 0, 0, 0},
	{"Подложить бомбу",					"BOMBER",			"BOM_Plant",			4.0, false, 0, 0, 0, 0},
	{"Надеть маску",					"SHOP",				"ROB_Shifty",			4.0, false, 0, 0, 0, 0},
	{"Вытянуть руку перед собой",		"SHOP",				"ROB_Loop_Threat",		4.0, true,  0, 0, 0, 0},
	{"Сложить руки вместе",				"COP_AMBIENT",		"Coplook_loop",			4.0, true,  0, 1, 1, 0},
	{"Съел что-то не то...",			"FOOD",				"EAT_Vomit_P", 			3.0, false, 0, 0, 0, 0},
	{"Перекусить",						"FOOD",				"EAT_Burger", 			3.0, false, 0, 0, 0, 0},
	{"Шлепнуть кому-то по заднице",		"SWEET",			"sweet_ass_slap",		4.0, false, 0, 0, 0, 0},
	{"Предложить наркотики",			"DEALER",			"DEALER_DEAL",			4.0, false, 0, 0, 0, 0},
	{"Эффект электрошокера",			"CRACK",			"crckdeth2",			4.0, true,  0, 0, 0, 0},
	{"Мужское курение",					"SMOKING",			"M_smklean_loop",		4.0, true,  0, 0, 0, 0},
	{"Женское курение",					"SMOKING",			"F_smklean_loop",		4.0, true,  0, 0, 0, 0},
	{"Присесть",						"BEACH",			"ParkSit_M_loop",		4.0, true,  0, 0, 0, 0},
	{"Восточное единоборство",			"PARK",				"Tai_Chi_Loop",			4.0, true,  0, 0, 0, 0},
	{"Выпить напиток",					"BAR",				"dnk_stndF_loop",		4.0, true,  0, 0, 0, 0},
	{"Расслаблено сесть",				"BLOWJOBZ",			"BJ_COUCH_LOOP_P",		4.0, true,  0, 0, 0, 0},
	{"Поза вратаря",					"BSKTBALL",			"BBALL_def_loop",		4.0, true,  0, 0, 0, 0},
	{"Facepalm",						"MISC",				"plyr_shkhead",			4.0, false, 0, 0, 0, 0},
	{"Элемент восточного танца",		"BSKTBALL",			"BBALL_idle",			4.0, true,  0, 0, 0, 0},
	{"Позвать кого-то",					"CAMERA",			"camstnd_cmon",			4.0, true,  0, 0, 0, 0},
	{"Руки вверх!",						"PED",				"HANDSUP",				4.0, 2, 1, 0, 1, 0},
	{"Спать на боку",					"CRACK",			"crckidle2",			4.0, true,  0, 0, 0, 0},
	{"Спать на спине",					"CRACK",			"crckidle4",			4.0, true,  0, 0, 0, 0},
	{"Смотреть по сторонам",			"DEALER",			"DEALER_IDLE",			4.0, true,  0, 0, 0, 0},
	{"Облокотиться на бок",				"GANGS",			"leanIDLE",				4.0, true,  0, 0, 0, 0},
	{"Толкнуть боком",					"GANGS",			"shake_carSH",			4.0, false, 0, 0, 0, 0},
	{"Раздумье",						"GANGS",			"smkcig_prtl",			4.0, false, 0, 0, 0, 0},
	{"Лечь, оперевшись на ладонь",		"BEACH",			"ParkSit_W_loop",		4.0, true,  0, 0, 0, 0},
	{"Сесть на стул",					"INT_HOUSE",		"LOU_Loop",				4.0, true,  0, 0, 0, 0},
	{"Сидеть уставшим за компьютером",	"INT_OFFICE",		"OFF_Sit_Bored_Loop",	4.0, true,  0, 0, 0, 0},
	{"Сидеть за столом",				"INT_OFFICE",		"OFF_Sit_Idle_Loop",	4.0, true,  0, 0, 0, 0},
	{"Сидеть и печатать",				"INT_OFFICE",		"OFF_Sit_Type_Loop",	4.0, true,  0, 0, 0, 0},
	{"Взять что-то и рассмотреть",		"INT_SHOP",			"shop_shelf",			4.0, false, 0, 0, 0, 0},
	{"Сесть, закинув ногу на ногу",		"JST_BUISNESS",		"girl_02",				4.0, true,  0, 0, 0, 0},
	{"Отказаться от чего-либо",			"KISSING",			"GF_StreetArgue_02",	4.0, false, 0, 0, 0, 0},
	{"Поцелуй 1",						"KISSING",			"Grlfrd_Kiss_01",		4.0, false, 0, 0, 0, 0},
	{"Поцелуй 2",						"KISSING",			"Grlfrd_Kiss_02",		4.0, false, 0, 0, 0, 0},
	{"Поцелуй 3",						"KISSING",			"Grlfrd_Kiss_03",		4.0, false, 0, 0, 0, 0},
	{"Размахивать руками на месте",		"LOWRIDER",			"RAP_B_Loop",			4.0, true,  0, 0, 0, 0},
	{"Искуственное дыхание",			"MEDIC",			"CPR",					4.0, false, 0, 0, 0, 0},
	{"Пощечины для лежачего",			"MISC",				"bitchslap",			4.0, true,  0, 0, 0, 0},
	{"Подглядывать через что-то",		"MISC",				"bng_wndw",				4.0, false, 0, 0, 0, 0},
	{"Движения тореодора",				"MISC",				"KAT_Throw_K",			4.0, false, 0, 0, 0, 0},
	{"Сесть на стул (2)",				"MISC",				"SEAT_LR",				4.0, true,  0, 0, 0, 0},
	{"Сесть на стул (3)",				"ped",				"SEAT_idle",			4.0, true,  0, 0, 0, 0},
	{"Смотреть наверх",					"ON_LOOKERS",		"lkup_loop",			4.0, true,  0, 0, 0, 0},
	{"Указать рукой наверх",			"ON_LOOKERS",		"Pointup_loop",			4.0, true,  0, 0, 0, 0},
	{"Быть в страхе",					"ON_LOOKERS",		"panic_loop",			4.0, true,  0, 0, 0, 0},
	{"Призывать к чему-либо",			"ON_LOOKERS",		"shout_02",				4.0, true,  0, 0, 0, 0},
	{"Сходить по-маленькому",			"PAULNMAC",			"Piss_loop",			4.0, true,  0, 0, 0, 0},
	{"Гангстерский жест",				"GHANDS",			"gsign1LH", 			3.0, true,  0, 0, 0, 0},
	{"Голосовать на остановке",			"ped",				"IDLE_taxi", 			3.0, true,  0, 0, 0, 0},
	{"Удар ногой",						"POLICE",			"Door_Kick",			4.0, false, 0, 0, 0, 0},
	{"Стучаться в дверь",				"POLICE",			"CopTraf_Stop",			4.0, true,  0, 0, 0, 0},
	{"Устроить бунт",					"RIOT",				"RIOT_ANGRY_B",			4.0, true,  0, 0, 0, 0},
	{"Пританцовывать",					"RAPPING",			"RAP_C_Loop",			4.0, true,  0, 0, 0, 0},
	{"Лечь на землю (2)",				"SWAT",				"gnstwall_injurd",		4.0, true,  0, 0, 0, 0},
	{"Плохое самочувствие",				"SWEET",			"Sweet_injuredloop",	4.0, true,  0, 0, 0, 0},
	{"Приветствие 1",					"RIOT",				"RIOT_ANGRY",			4.0, false, 0, 0, 0, 0},
	{"Приветствие 2",					"GHANDS",			"gsign2",				4.0, false, 0, 0, 0, 0},
	{"Приветствие 3",					"GHANDS",			"gsign5",				4.0, false, 0, 0, 0, 0},
	{"Приветствие 4",					"GHANDS",			"gsign4",				4.0, false, 0, 0, 0, 0}
};
new anim_list_items[34 * (sizeof(anim_list)+1) + 1];
new
	g_anim_libs[38][13] =
{
	"BAR",
	"BASEBALL",
	"BEACH",
	"BENCHPRESS",
	"BLOWJOBZ",
	"BOMBER",
	"BSKTBALL",
	"CAMERA",
	"CARRY",
	"COP_AMBIENT",
	"CRACK",
	"CRIB",
	"DANCING",
	"DEALER",
	"FOOD",
	"GANGS",
	"GHANDS",
	"GRAVEYARD",
	"INT_HOUSE",
	"INT_OFFICE",
	"INT_SHOP",
	"JST_BUISNESS",
	"KISSING",
	"LOWRIDER",
	"MEDIC",
	"MISC",
	"ON_LOOKERS",
	"OTB",
	"PARK",
	"PAULNMAC",
	"PED",
	"POLICE",
	"RAPPING",
	"RIOT",
	"SHOP",
	"SMOKING",
	"SWAT",
	"SWEET"
};

// ------------------------------------------
new map_icons[10][E_MAP_ICONS_STRUCT] =
{
	{2175.9924, -2259.3906, 14.7734, 	11},	// грузчик
	{-552.5621, -184.5505, 78.4063, 	11}, 	// лесопилка
	{1411.5688, -1699.5140, 13.5395, 	52}, 	// Центральный банк арзамаса
	{1172.7354, -1325.3636, 15.4014, 	22}, 	// больница Арзамаса
	{1555.4983,-1675.6654,16.1953, 	30},	// LSPD
	{-402.3015, 928.0378, 	12.5063, 	30},	// ФБР
	{1317.0298,-1184.4017,23.5908, 	19}, 	// Мэрия г.Los-Santos
	{1227.7173,181.6112,20.4101, 	51}, 	// завод
	{-80.5188,82.8398,3.1096, 	11},	// ферма
	{-111.4576,-10.7540,3.1094, 	11}		// работа комбайнера
};

new g_teleport[27][E_TELEPORT_STRUCT] =
{
	{"Мэрия г.Los-Santos", 1318, 1481.0066,-1772.3138,18.7958, 0, 789.5038, -18.5918, 1015.9083,89.4691, 3, 0},
	{"Выход", 1318, 792.2039, -18.5682, 1015.7883, 0, 1480.9507,-1769.9111,18.7958,2.0010, 0, 0},
	// -------------------------------------------------------------------------------
	{"Банк LS", 1318, 1411.5688,-1699.5140,13.5395, 0, -2170.3025,636.9439,1052.3750,359.4948, 1, 0},
	{"Выход", 1318, -2170.3323,635.3901,1052.3750, 0, 1413.0817,-1700.9026,13.5395,232.0833, 0, 0},
	// -------------------------------------------------------------------------------
	{"LSPD", 1318,1555.4983,-1675.6654,16.1953, 0,246.8141,64.0577,1003.6406,0.0, 6, 0}, // LSPD вход
	{"Выход", 1318,246.8328,62.3248,1003.6406, 0, 1553.6035,-1675.6744,16.1953,91.4032, 0, 0}, // LSPD выход
	// -------------------------------------------------------------------------------
	{"СМИ г.Los-Santos", 1318,1778.2361,-1661.6642,14.4365, 0,1573.5153, -30.4888, 1136.3385,-90.0, 18, 0}, // СМИ вход
	{"Выход", 1318,1576.2390, -28.6668, 1135.2266, 0, 1773.3303,-1665.1117,14.4249,90.0, 0, 0}, // СМИ выход
	// -------------------------------------------------------------------------------
	{"FBI", 1318,1317.0298,-1184.4017,23.5908, 0,246.4902,109.6693,1003.2257,0.0, 10, 0}, // FBI вход
	{"Выход", 1318,246.3736,107.3018,1003.2188, 0, 1318.4712,-1182.6892,23.5998,318.3023, 0, 0}, // FBI выход
	// -------------------------------------------------------------------------------
	{"Завод", 1318,1227.7173,181.6112,20.4101, 0,2568.1853,-1301.9689,1044.1250,90.0, 2, 0}, // Завод вход
	{"Выход", 1318,2570.7031,-1301.9629,1044.1250, 0, 1228.6726,183.5415,20.1346,0.0, 0, 0}, // Завод выход
	// -------------------------------------------------------------------------------
	{"Военкомат", 1318,331.2557,-40.1697,2.2255, 0,315.7303,400.5058,999.0391,360.0, 2, 0}, // Военкомат вход
	{"Выход", 1318,315.6834,398.7650,999.0391, 0, 331.0992,-43.3806,1.4907,180.0, 0, 0}, // Военкомат выход
	// -------------------------------------------------------------------------------
	{"Склад ВМФ", 1318,2729.3269,-2451.5876,17.5937, 0,316.2778,-168.3362,999.5938,0.8184, 6, 0}, // Склад ВМФ вход
	{"Выход", 1318,316.3784,-170.2975,999.5938, 0, 2730.8066,-2451.4524,17.5937,271.1782, 0, 0}, // Склад ВМФ выход
	// -------------------------------------------------------------------------------
	{"Больница", 1318, 1172.7354,-1325.3636,15.4014, 0, 1385.4302, -146.3537, 967.5286,271.8540, 6, 0},
	{"Выход", 1318, 1388.3585, -146.4899, 967.5286, 0, 1177.7682,-1325.1173,14.0870, 0.0, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	// -------------------------------------------------------------------------------
	{"Служебный выход", 1318,246.4003,87.8282,1003.6406, -1,1568.8531,-1693.8925,5.8906,180.0, 0, 0}, // сТОЯНКА lspd
	{"LSPD", 1318,1568.6483,-1689.9716,6.2188, 0,246.1619,85.9128,1003.6406,184.2184, 6, 0}, // LSPD со стоянки
	// -------------------------------------------------------------------------------
	{"Фотостудия", 1318,768.0697, -3.3144, 1015.7181, 0,767.9432, -1.4459, 1015.9581,180.0, 0, 0, T_ACTION_TYPE_ENTER_PHOTO},
	// -------------------------------------------------------------------------------
    {"Казарма", 1318,2729.2747, -2472.5703, 17.6969, 0,2327.6355, 441.4758, 1130.2094,180.0, 0, 0},
	{"Выход", 1318,2330.8838, 441.6274, 1130.2094, 0,2732.0039, -2474.7271, 17.6969,180.0, 0, 0},
	// -------------------------------------------------------------------------------
    {"Притон", 1318,2165.9656,-1671.1733,15.0732, 0,318.564971,1118.209960,1083.882812	,-180.0, 5, 0},
    {"Выход", 1318,318.6508, 1114.4594, 1083.8120, 0,2167.9956,-1673.6328,15.0824,225.8694, 0, 0},
    // -------------------------------------------------------------------------------
    {"Шахта", 1318,-1898.5001, -1638.5758, 25.0240, 0,-1905.0126, -1634.5991, 2.2237,225.8694, 0, 0},
    {"Выход", 1318,-1905.1873,-1637.0641,1.8157, 0,-1895.4868, -1638.5376, 25.7040,90.0, 0, 0}
};
new g_teleport_object[MAX_PLAYERS][2];

// ------------------------------------------
enum
	E_TELEPORT_LIST
{
	TL_NAME[30],
	Float: TL_POS_X,
	Float: TL_POS_Y,
	Float: TL_POS_Z
};

new
	g_teleport_list[][E_TELEPORT_LIST] =
{
	{"El Quebrados",			-1510.0269,2658.6221,55.8359},
	{"Las Payanados",           -222.5741,2664.1470,62.6005},
	{"Las Barrancas",           -860.6229,1559.9474,24.2750},
	{"Fort Carson",           	-142.7191,1129.7825,19.7500},
	{"Причал SF",         		-2465.7380,2238.8030,4.7939},
	{"Корабль (МП)",     		-1469.1405,1488.8525,8.2501}
	// {"Подьезд",					630.4014, -176.7587, 997.6467}
};

// ------------------------------------------
new driving_tutorial[4][E_DRIVING_TUTORIAL_STRUCT] =
{
	{
		"Управление системами автомобиля",
		"{669900}Ниже приведен перечень клавиш управления транспортом и их описание:\n\n"\
		"{E90FF1}Левый Ctrl\t{FFFFFF}завести или заглушить двигатель\n"\
		"{1E90FF}Левый Alt\t{FFFFFF}включить или выключить фары\n"\
		"{1E90FF}Правый Ctrl\t{FFFFFF}открыть или закрыть машину {9966FF}(только для домашней машины)\n"\
		"{1E90FF}Num 4\t\t{FFFFFF}включить или выключить ограничитель скорости\n"\
		"{1E90FF}Num 8\t\t{FFFFFF}управление капотом и багажником {9966FF}(если они имеются у данной модели)\n"\
		"{1E90FF}Num 2\t\t{FFFFFF}заправить транспорт {9966FF}(подробнее в следующих разделах)\n\n"\
		"{FFFF00}Постарайтесь запомнить назначения клавиш управления\n"\
		"Когда будете готовы нажмите \"Далее\""
	},
	{
		"Панель индикаторов",
		"{FFFFFF}Панель индикаторов появляется в правом нижнем углу экрана как только вы заходите в любой транспорт\n"\
		"Она информирует водителя о его текущем состоянии. Итак, рассмотрим основные элементы этой панели:\n\n"\
		"\t{3366FF}25 km/h  {00CCFF}Fuel: 45  {006699}1000\n"\
		"\t{32a44b}Open  {FF3300}max  {FFFFFF}E {009933}S   M {FFFFFF}L B\n\n"\
		"{FFFF00}На первой строчке панели находятся числовые индикаторы:\n"\
		"{3366FF}25 km/h\t{FFFFFF}показывает текущую скорость транспорта\n"\
		"{00CCFF}Fuel: 45\t{FFFFFF}показывает количество бензина в баке\n"\
		"{006699}1000\t\t{FFFFFF}показывает \"здоровье\" транспорта. Если у него нет повреждений, то оно будет равно 1000\n\n"\
		"{FFFF00}На второй строчке находятся цветовые индикаторы:\n"\
		"Open\t\t{FFFFFF}(или {FF3300}Close{FFFFFF}) показывают открыт или закрыт транспорт\n"\
		"{FF3300}max\t\t{FFFFFF}загорается красным при включенном ограничителе скорости\n"\
		"E\t\tзагорается красным при низком уровне бензина в баке\n"\
		"{CC99CC}S\t\t{FFFFFF}загорается пурпурным при включенной сигнализации\n"\
		"{009933}M\t\t{FFFFFF}индикатор включенного двигателя\n"\
		"L\t\tиндикатор включенного света фар\n"\
		"B\t\tзагорается красным при открытом багажнике или капоте\n\n"\
		"Примечания:\n"\
		"1. Панель индикаторов обновляется раз в секунду\n"\
		"2. Выключенные индикаторы во втором ряду {FFFFFF}белого {9966FF}цвета"
	},
	{
		"Заправка и ремонт",
		"{FFFFFF}Транспорт время от времени необходимо заправлять. Сделать это можно двумя способами:\n\n"\
		"{FFFF00}1. На заправочной станции\n"\
		"{FFFFFF}Для этого подъедьте к ней и нажмите {3366FF}Num 2{FFFFFF}. Каждое нажатие заправляет ваш транспорт на 10 литров\n\n"\
		"{FFFF00}2. Заправка с канистры\n"\
		"{FFFFFF}Такой способ подойдет если автомобиль не может ездить из-за отсутствия бензина\n"\
		"Найдите ближайшую заправку и напишите {3366FF}/buyfuel{FFFFFF}. Вы получите канистру емкостью 15 литров\n"\
		"После этого просто подойдите к транспорту, который хотите заправить. 15 литров вполне хватит чтобы доехать до ближайшей заправки\n\n"\
		"{66CCCC}Полезные советы:\n"\
		"1. Бензобак может вместить максимум 150 литров бензина. Это хватит на 50 минут беспрерывной работы двигателя\n"\
		"2. Всегда выключайте двигатель когда выходите из машины или долго стоите на месте! Этим вы намного уменьшите расход бензина\n"\
		"3. Чтобы не бежать за канистрой бензина если бензобак опустел можно вызвать механика (/c)\n\n"\
		"{99CC66}Починить транспорт можно в любом покрасочном салоне либо вызвав механика (/c)\n"\
		"Обратите внимание, что если купленный или арендованный вами транспорт взорвется, то придется покупать или арендовать его заново!"
	},
	{
		"Правила дорожного движения",
		"{32a44b}1. Общие положения\n"\
		"{FFFFFF}Обгон транспортных средств разрешен только с левой стороны\n"\
		"При этом водитель должен убедиться что встречная полоса свободна на достаточном для обгона расстоянии\n"\
		"При ДТП водителям рекомендуется вызвать полицию (/c) и дождаться приезда LSPD\n"\
		"{32a44b}2. Скорость движения\n"\
		"{FFFFFF}Ограничение скорости движения в пределах городов и поселков 50 км/ч\n"\
		"За пределами населенных пунктов ограничений скорости нет\n"\
		"Для соблюдения скоростного режима рекомендуется пользоваться ограничителем скорости, который включается клавишей {3366FF}Num 4\n"\
		"{32a44b}3. Остановка и стоянка\n"\
		"{FFFFFF}Остановка и стоянка транспортных средств разрешается только на обочине дороги или в специально отведенных для этого местах\n"\
		"За нарушение этого правила ваш автомобиль может быть отправлен на штрафстоянку\n"\
		"{32a44b}4. LSPD\n"\
		"{FFFFFF}При виде автомобиля с включенной сиреной водитель обязан снизить скорость и прижаться к обочине\n"\
		"Водитель обязан предъявить работнику LSPD документы, которые он попросит"
	}
};

new driving_exam[12][E_DRIVING_EXAM_STRUCT] =
{
	{
		"Что означает зеленая буква \"M\" на панели индикаторов?",
		"Включенные фары\n"\
		"Выключенные фары\n"\
		"Включенный двигатель\n"\
		"Выключенные двигатель\n"\
		"Открытый багажник\n"\
		"Закрытый багажник\n"\
		"Включенная сигнализация\n"\
		"Открытый капот",
		3
	},
	{
		"Какой клавишей вкл. и откл. фары?",
		"Левый Ctrl\n"\
		"Левый Alt\n"\
		"Правый Ctrl\n"\
		"Num 2\n"\
		"Num 4",
		2
	},
	{
		"Ограничение скорости движения по городу:",
		"50 км/ч\n"\
		"60 км/ч\n"\
		"70 км/ч\n"\
		"80 км/ч\n"\
		"90 км/ч",
		1
	},
	{
		"Чтобы заправиться на заправочной станции надо:",
		"Вызвать механика\n"\
		"Нажать {0099CC}правый Ctrl\n"\
		"Ввести команду {0099CC}/fill\n"\
		"Нажать {0099CC}левый Alt\n"\
		"Нажать {0099CC}Num 2\n"\
		"Ни один из вариантов не подходит",
		5
	},
	{
		"Как включить или выключить двигатель?",
		"Ввести команду {0099CC}/buyfuel\n"\
		"Нажать {0099CC}левый Ctrl\n"\
		"Нажать {0099CC}левый Alt\n"\
		"Ввести команду {0099CC}/start\n"\
		"Нажать {0099CC}Num 2\n"\
		"Все ответы неверны",
		2
	},
	{
		"Что означает \"Fuel: 45\" на панели индикаторов?",
		"Текущая скорость {0099CC}45 км/ч\n"\
		"Уровень повреждений авто {0099CC}45 единиц\n"\
		"Цвет транспорта {0099CC}45\n"\
		"В бензобаке осталось {0099CC}45 литров\n"\
		"Нет правильного ответа",
		4
	},
	{
		"Что можно сделать, чтобы сократить расход бензина?",
		"Выйти из машины\n"\
		"Выключить двигатель\n"\
		"Отключить фары / сигнализацию\n"\
		"Включить ограничитеть скорости\n"\
		"Закрыть машину\n"\
		"Отремонтировать транспорт",
		2
	},
	{
		"Как открыть или закрыть домашнюю машину?",
		"Нажать {0099CC}Num 8\n"\
		"Нажать {0099CC}левый Ctrl\n"\
		"Нажать {0099CC}правый Ctrl\n"\
		"Нажать {0099CC}Num 2\n"\
		"Ввести команду {0099CC}/fill\n"\
		"Ввести команду {0099CC}/buyfuel\n"\
		"Все ответы неверны",
		3
	},
	{
		"При полном бензобаке время работы двигателя?",
		"20 минут\n"\
		"30 минут\n"\
		"40 минут\n"\
		"50 минут\n"\
		"1 час\n"\
		"более 1 часа",
		4
	},
	{
		"Как включить или выключить ограничитель скорости?",
		"Клавишей {0099CC}Num 2\n"\
		"Клавишей {0099CC}Num 4\n"\
		"Клавишей {0099CC}H\n"\
		"Клавишей {0099CC}левый Ctrl\n"\
		"Нет правильных ответов",
		2
	},
	{
		"На панели индикаторов загорелась \"Е\". Что это значит?",
		"Был включен ограничитель скорости\n"\
		"Был открыт капот или багажник\n"\
		"Была включена сигнализация\n"\
		"Низкий уровень бензина в баке\n"\
		"Низкий уровень \"здоровья\" авто\n"\
		"Включены фары",
		4
	},
	{
		"При виде автомобиля с включенной сиреной вы:",
		"Продолжите движение с нормальной скоростью\n"\
		"Продолжите движение снизив скорость\n"\
		"Увеличите скорость\n"\
		"Попытаетесь скрыться\n"\
		"Среди предложенных вариантов нет правильного",
		5
	}
};
new driving_exam_CP; // чепоинт сдачи на права
new driving_tech; // чепоинт правил

new g_player_driving_exam[MAX_PLAYERS][E_PLAYER_DRIVING_EXAM_STRUCT];
new g_driving_exam_default_values[E_PLAYER_DRIVING_EXAM_STRUCT] = {-1, ...};

// ------------------------------------------
new const
	g_atm[MAX_ATM][E_ATM_STRUCT] =
{
	{1457.9301,-1753.2662,13.2469,272.5793},
	{1551.96118, -1650.54883, 13.23940,0.00000},
	{1143.7766, -1765.9496, 13.1878,180.00000},
	{1751.51147, -1899.25720, 13.07320,90.00000},
	{2433.73730, -1741.86133, 13.16750,180.00000},
	{387.75140, -1866.33240, 7.47910,-90.00000},
	{1172.78723, -1328.59021, 15.05730,180.00000},
	{461.74890, -1507.12524, 30.53580,265.20001},
	{530.92151, -1293.97546, 16.85720, 180.00000},
	{1017.92072, -1122.00537, 23.52880,5.12000}
};
new const
	atm_item_sum[7] = {100, 200, 500, 1000, 2000, 5000, 10000};

// ------------------------------------------
enum
{
	GATE_ID_DRIVING_SCHOOL = 0, // автошкола
	GATE_ID_DPS,				// LSPD
	GATE_ID_PPS,				// FBI
	GATE_ID_ARMY,				// ВМФ
}
new
	g_gate[MAX_GATES][E_GATE_STRUCT] =
{
	{"АШ", GATE_TYPE_BARRIER, 1906.5250, 2248.1470, 14.6375, 90.0, 0.0, 0.0, 0.0, 0.0, GATE_STATUS_CLOSE, {966, 968}},
	{"LSPD", GATE_TYPE_BARRIER_BUTTON, 1544.70630, -1630.98145, 13.03640, 0.0, 1544.70630, -1630.98145, 15.93640, -90.0, GATE_STATUS_CLOSE, {0, 0}},
	{"ВМФ", GATE_TYPE_NORMAL, 2720.62256, -2405.12280, 14.13132, 0.0, 0.0, 0.0, 0.0, 0.0, GATE_STATUS_CLOSE, {975, 0}},
	{"ВМФ", GATE_TYPE_NORMAL, 2720.50098, -2503.74854, 14.13132, 0.0, 0.0, 0.0, 0.0, 0.0, GATE_STATUS_CLOSE, {975, 0}}
};
new g_gate_button[MAX_GATES][2];
new g_gate_buttons_count;

// ------------------------------------------
new g_bank_account[MAX_PLAYERS][MAX_BANK_ACCOUNTS][E_BANK_ACCOUNT_STRUCT];
new g_player_bank_transfer[MAX_PLAYERS][E_BANK_TRANSFER_STRUCT];

// ------------------------------------------
new g_player_listitem[MAX_PLAYERS][32];
new g_listitem_values[sizeof(g_player_listitem[])] = {0, ...};

new g_player_listitem_use[MAX_PLAYERS] = {-1, ...};
// ------------------------------------------
new g_player_offer[MAX_PLAYERS][E_PLAYER_OFFER_STURCT];
new const
	g_offer_default_values[E_PLAYER_OFFER_STURCT] =
{
	INVALID_PLAYER_ID,	// отправленое предложение игроку
	INVALID_PLAYER_ID, 	// входящее предложение от игрока
	OFFER_TYPE_NONE, 	// входящее предложение
	{-1, -1} 			// значение входящего предложения
};

// ------------------------------------------
new g_player_phone_call[MAX_PLAYERS][E_PHONE_CALL_STRUCT];
new
	g_phone_call_default_values[E_PHONE_CALL_STRUCT] =
{
	INVALID_PLAYER_ID,
	INVALID_PLAYER_ID,
	-1,
	true
};

// ------------------------------------------
new g_player_phone_book[MAX_PLAYERS][MAX_PHONE_BOOK_CONTACTS][E_PHONE_BOOK_STRUCT];

new g_player_phone_book_contacts[MAX_PLAYERS] = {0, ...};
new g_player_phone_book_select_cont[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};

new bool: g_player_phone_book_init[MAX_PLAYERS] = {false, ...};

new bool: g_admin_ears,
	bool: g_admin_pay_log;

new bool: server_restart;

// ------------------------------------------
new g_player_flood[MAX_PLAYERS][E_ANTI_FLOOD_STRUCT];
new const
	g_flood_default_values[E_ANTI_FLOOD_STRUCT] =
{
	0,
	0
};


//==========================================
new Float:g_army_patrol[8][3] =
{
	{2786.4160,-2279.7800,0.0904},
	{2917.5774,-2354.1941,0.5172},
	{2773.0227,-2622.2524,0.4685},
	{2637.6563,-2552.8457,-0.2812},
	{2396.5967,-2736.6423,-0.4271},
	{2402.0952,-2392.8833,-0.3233},
	{2554.1812,-2306.8813,-0.5114},
	{2670.2593,-2302.9507,-0.3753}
};
// ------------------------------------------
new g_bus_routes[2][E_BUS_ROUTE_STRUCT] =
{
	{"Автовокзал - Грузчики",			0, 0},
	{"Междугородный",					0, 0}
};
new g_bus_routes_list[40 * (sizeof g_bus_routes) + 1];


new g_bus_route[sizeof g_bus_routes][128][E_BUS_ROUTE_STEP_STRUCT] =
{
	{ // Арзамас — Завод
		{1227.3136,-1835.0421,13.4888, false},
		{1181.7836,-1760.7540,13.4990, false},
		{1171.5107,-1763.4908,13.4918, true},
		{1171.6538,-1827.3875,13.4916, false},
		{1206.5931,-1855.3152,13.4760, false},
		{1298.3599,-1855.3826,13.4773, false},
		{1433.1542,-1875.3650,13.4776, false},
		{1566.9718,-1875.6619,13.4763, false},
		{1655.4911,-1875.6129,13.4760, false},
		{1692.7893,-1823.9293,13.4760, false},
		{1782.3804,-1832.9976,13.4760, false},
		{1818.3196,-1873.1294,13.5080, false},
		{1818.1400,-1928.4028,13.4685, true},
		{1897.0455,-1935.5177,13.4775, false},
		{1958.3923,-1947.4045,13.6984, false},
		{1958.4515,-2062.4587,13.4772, false},
		{1958.7476,-2148.9907,13.4777, false},
		{2026.9777,-2169.5696,13.4777, false},
		{2129.8774,-2214.2007,13.4761, false},
		{2188.9526,-2179.8386,13.4668, false},
		{2248.1870,-2219.6194,13.4051, true},
		{2281.0127,-2252.3867,13.4614, false},
		{2254.0471,-2295.7891,13.4699, false},
		{2200.3457,-2350.0403,13.4699, false},
		{2147.1809,-2332.5178,13.4456, false},
		{2116.9319,-2252.2539,13.4759, false},
		{2067.8699,-2166.6729,13.4761, false},
		{1985.9835,-2163.5454,13.4777, false},
		{1775.5326,-2163.4126,13.4778, false},
		{1568.2587,-2109.1956,33.2316, false},
		{1533.2290,-1939.8405,17.9940, false},
		{1533.2278,-1885.8839,13.6188, false},
		{1406.6672,-1869.1757,13.4763, false},
/*		{1193.0830,-1849.0280,13.4918, false},
		{1183.2554,-1757.8281,13.4916, true},
		{1178.0330,-1709.5468,13.6370, false},
		{1171.7981,-1728.0767,13.6708, false},
		{1121.1692,-1737.8295,13.6142, false},
		{1080.5051,-1746.5634,13.5352, false},*/
        {0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, true},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // Междугородный
		{1080.8208,-1742.7388,13.5682, false},
		{1157.8967,-1743.2428,13.4932, false},
		{1172.1505,-1764.6315,13.4915, true},
		{1172.0383,-1838.8318,13.4974, false},
		{1094.3855,-1849.2777,13.4759, false},
		{1051.2085,-1814.8146,13.7431, false},
		{958.8980,-1776.4930,14.2083, false},
		{832.5600,-1766.5245,13.4890, false},
		{646.1448,-1730.5269,13.8338, false},
		{453.6845,-1702.3195,10.8121, false},
		{214.3657,-1628.7896,14.0528, false},
		{61.8866,-1523.2783,5.0978, false},
		{-146.0135,-1397.1967,2.7883, true},
		{-106.7197,-1161.1937,2.3923, false},
		{-76.1639,-1066.5302,15.0915, false},
		{-117.0078,-989.4345,25.3450, false},
		{-72.4296,-893.9918,15.9894, false},
		{-1.3923,-742.1150,7.3861, false},
		{34.3409,-513.1874,10.0781, false},
		{-44.0665,-446.0582,1.2570, false},
		{-148.1234,-370.4847,1.1730, false},
		{-228.1380,-284.8753,1.1730, false},
		{-336.6750,-268.3437,11.7269, false},
		{-554.0484,-252.3370,60.5572, false},
		{-752.7469,-242.8329,53.7801, false},
		{-930.9913,-234.1233,38.9410, false},
		{-920.0192,-160.8669,51.8560, false},
		{-835.8745,-153.0388,64.3124, false},
		{-591.9419,-189.2655,79.3852, false},
		{-548.1476,-191.5157,78.4995, true},
		{-510.8210,-157.1895,74.4293, false},
		{-498.1801,3.1984,53.3625, false},
		{-458.0462,77.3801,29.2079, false},
		{-238.1636,207.4679,11.4950, false},
		{-203.5493,224.3800,12.0241, false},
		{30.7065,136.7025,2.1730, false},
		{221.0102,45.6939,2.4604, false},
		{230.4219,-57.6775,1.5257, false},
		{328.2051,-77.0246,1.5228, false},
		{329.7011,-131.3266,1.5201, false},
		{447.5814,-143.6891,20.1617, false},
		{576.7524,-149.9747,34.1013, false},
		{738.6991,-164.6279,19.3924, false},
		{923.7458,-178.9992,10.5993, false},
		{1235.6812,-132.8325,39.2361, false},
		{1295.8468,-87.2242,36.6360, false},
		{1255.0704,0.1973,27.6972, false},
		{1254.1428,159.5415,19.5746, false},
		{1238.1132,198.6774,19.4995, true},
		{1236.2924,246.6742,19.5019, false},
		{1275.3057,252.3496,19.4991, false},
		{1262.9354,195.3841,19.5057, false},
		{1288.2843,-67.6508,35.5437, false},
		{1202.8582,-148.4239,40.2303, false},
		{1231.9952,-289.0798,14.4859, false},
		{1227.0198,-561.3141,42.7130, false},
		{1177.4941,-683.1096,62.0315, false},
		{1156.6747,-928.5073,43.1325, false},
		{1160.4299,-1020.1103,33.6165, false},
		{1160.4104,-1117.2068,24.2763, false},
		{1198.6255,-1150.9108,23.7430, false},
		{1214.2035,-1241.4993,15.7184, false},
		{1198.0750,-1337.3450,13.4932, false},
		{1194.0612,-1484.7225,13.4777, false},
		{1194.0747,-1557.6329,13.4776, false},
		{1284.1909,-1574.3730,13.4760, false},
		{1294.3536,-1634.3789,13.4777, false},
		{1294.4692,-1698.7910,13.4761, false},
		{1214.5499,-1709.5049,13.4776, false},
		{1177.6836,-1709.4723,13.6420, false},
		{1172.0516,-1732.7319,13.6123, false},
		{1119.4181,-1738.3215,13.5957, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	}
};

new jobzone[3];

new Float:jobzones[3][] = {
	{120.0,-203.0,160.0,136.0,-233.0,241.0,-353.0,-137.0,120.0,-203.0},
	{2208.0,-2174.0,2280.0,-2268.0,2184.0,-2358.0,2094.0,-2273.0,2208.0,-2174.0},
	{-707.0,-12.0,-674.0,-278.0,-321.0,-277.0,-305.0,4.0,-707.0,-12.0}
};

new const Float: driving_exam_route[26][3] = // маршрут практики
{
		{-1657.3328, -101.2755, -0.0216}, // 1
		{-1657.3328, -101.2755, -0.0216},
		{-1692.2537, -136.2060, -0.0216},
		{-1692.2537, -136.2060, -0.0216},
		{-1724.6707, -170.7469, -0.0216},
		{-1741.1179, -189.0035, -0.0216},
		{-1759.7367, -207.9185, -0.0216},
		{-1763.3529, -251.3597, -0.0216},
		{-1764.8018, -298.5589, -0.0380},
		{-1763.5513, -364.2469, -0.0380}, //10
		{-1763.4840, -405.9525, -0.0380},
		{-1763.9668, -433.8655, -0.0380},
		{-1765.2062, -471.8002, -0.0380},
		{-1754.6130, -512.0724, -0.0380},
		{-1744.7145, -481.6495, -0.0380},
		{-1747.3467, -414.5382, -0.0380},
		{-1746.8838, -378.1835, -0.0380},
		{-1746.5530, -348.3915, -0.0380},
		{-1745.4817, -306.4326, -0.0380},
		{-1741.1464, -236.5716, -0.0172}, // 20
		{-1722.2124, -191.3628, -0.0172},
		{-1699.6537, -158.7481, -0.0172},
		{-1665.4595, -124.4170, -0.0172},
		{-1645.1687, -104.3076, -0.0172},
		{-1645.1687, -104.3076, -0.0172},
		{-1645.1687, -104.3076, -0.0172}
};

new const Float: driving_exam_new[32][3] = // маршрут практики
{
		{-2045.0743, -132.0030, 34.3270}, // 1
		{-2045.0743, -132.0030, 34.3270},
		{-2044.9551, -166.3055, 34.3270},
		{-2058.8352, -186.4877, 34.3249},
		{-2082.4199, -188.0937, 34.3913},
		{-2088.7256, -211.0987, 34.3913},
		{-2083.8137, -229.8140, 34.3913},
		{-2088.4094, -250.5186, 34.3913},
		{-2088.6982, -267.4729, 34.3913},
		{-2054.5542, -272.7528, 34.8312},
		{-2026.4819, -259.6496, 35.1158},
		{-2023.8789, -248.1642, 34.3098},
		{-2032.7333, -233.9659, 34.3134},
		{-2033.0869, -222.3791, 34.3134},
		{-2050.2607, -234.8964, 34.3145},
		{-2029.9034, -234.4941, 34.3145},
		{-2023.9100, -246.9983, 34.3145},
		{-2026.6945, -262.6889, 34.4879},
		{-2031.8888, -268.1790, 34.4879},
		{-2049.5195, -267.7273, 34.4879},
		{-2049.5195, -267.7273, 34.4879},
		{-2083.2117, -257.0947, 34.4879},
		{-2089.0024, -235.0948, 34.4879},
		{-2083.5623, -215.2790, 34.4879},
		{-2082.0532, -196.8194, 34.4879},
		{-2066.1245, -192.8612, 34.4879},
		{-2039.9803, -192.7481, 34.4879},
		{-2039.9323, -166.9829, 34.4879},
		{-2044.1337, -150.1027, 34.4879},
		{-2040.2501, -134.5591, 34.4879},
		{-2039.9419, -119.0181, 34.4879},
		{-2039.9419, -119.0181, 34.4877}
};

new const Float: driving_exam_fly[23][3] = // маршрут практики
{
	{-1533.743652,-151.512710,14.228607},
	{-1576.749023,-194.906066,14.380821},
	{-1627.483886,-245.182891,14.280244},
	{-1689.022216,-251.877288,14.223743},
	{-1677.814697,-186.207916,14.224389},
	{-1619.309936,-127.054214,14.450322},
	{-1568.388427,-76.523635,16.947563},
	{-1477.957519,13.216287,28.767314},
	{-1363.170043,127.122474,48.130355},
	{-1142.461914,346.153198,89.643585},
	{-1004.974365,482.634582,109.086715},
	{-865.070495,575.952148,127.839813},
	{-693.258239,578.108520,145.287200},
	{-591.490966,451.586822,155.229156},
	{-700.933959,319.327972,143.947692},
	{-850.717529,333.821746,134.107940},
	{-1043.696899,335.717834,86.746376},
	{-1426.352294,61.809688,16.230800},
	{-1510.097290,-22.341602,14.350330},
	{-1616.809082,-125.059074,14.373082},
	{-1660.083984,-260.863891,14.224264},
	{-1601.338867,-218.564773,14.293485},
	{-1465.790527,-83.303070,14.226310}
};

// ------------------------------------------
new g_temp_jobs[9][E_TEMP_JOB_STRUCT] =
{
	{"Работа грузчика", 2175.9924, -2259.3906, 14.7734, 	50, {27, 157}},  	// грузчик
	{"Работа шахтера", -1901.6218, -1621.6592, 2.2324, 		1,	{16, 157}},  	// шахтер
	{"Служба доставки", 1229.8433,144.0356,20.4525, 		0,	{16, 157}}, 	// завод (служба доставки)
	{"Работа на заводе", 2570.1919,-1298.2909,1044.1250, 	60,	{258, 157}},  	// завод
	{"Работа лесоруба", -552.5621, -184.5505, 78.4063, 	55, {161, 157}},	// лесоруб
	{"Работа фермера", -80.5188, 82.8398, 3.1096, 	200, {133, 131}},	// ферма
	{"Работа комбайнера", -111.4576, -10.7540, 3.1094, 	1250, {133, 131}},	// работа комбайнера
	{"ВМФ", 2797.2000,-2442.5977,13.6314, 	100, {73, 157}},  	// грузчик ВМФ
	{"Развозчик пиццы", 2105.3774, -1806.4456, 13.6034, 	50, {155, 155}} 	// развозчик pizzy
};
//--------------------------------------------
new
	Float: rent_bike[12][3] =
{
	{1142.5251,-1752.4128,13.5918},
	{1779.9015,-1887.0909,13.3892},
	{2197.1509,-2242.8159,13.5469},
	{2101.1345,-1783.7786,13.3943},
	{2101.1345,-1783.7786,13.3943},
	{2101.1345,-1783.7786,13.3943},
	{2101.1345,-1783.7786,13.3943},
	{1213.1389,-1331.2544,13.5687},
	{-535.3770,-180.7575,78.4047},
	{1214.9303,195.3169,19.6302},
	{-71.0332,101.2304,3.1172},
	{-1884.1702,-1645.4760,21.7500}
};
// ---------------------------------------

new g_farm_route[14][E_FARM_ROUTE_STEP_STRUCT] =
{
	{-118.5779,98.2909,3.1172, false},
	{-114.4746,110.0049,3.1172, false},
	{-110.9495,120.3355,3.1172, false},
	{-108.0102,130.1393,3.1172, false},
	{-104.4914,141.6124,3.1146, false},
	{-102.0168,149.9719,3.1575, false},
	{-106.0389,151.5016,3.2897, false},
	{-108.7126,142.8145,3.1145, false},
	{-111.4389,133.4907,3.1172, false},
	{-114.6302,123.5588,3.1172, false},
	{-117.9458,113.6053,3.1172, false},
	{-121.6541,102.6988,3.1172, false},
	{-127.2380,99.5804,3.1172, false},
	{-78.7266,90.5157,3.1172, true}
};

// ---------------------------------------

new g_combain_route[36][E_COMBAIN_ROUTE_STEP_STRUCT] =
{
	{-124.8877,56.3755,2.8591, false}, // 1
	{-137.6471,22.9301,2.8591, false},
	{-149.5889,-8.1032,2.8591, false},
	{-162.4845,-41.0140,2.8591, false},
	{-185.5867,-73.7970,2.8591, false},
	{-171.1453,-33.9132,2.8591, false},
	{-157.9000,-0.1830,2.8591, false},
	{-142.4664,42.9176,2.8591, false},
	{-147.4386,63.7879,2.8591, false},
	{-158.5772,30.9725,2.8564, false}, // 10
	{-175.0107,-13.3593,2.8591, false},
	{-191.3178,-56.4231,2.8591, false},
	{-198.7843,-81.9217,2.8591, false},
	{-209.4538,-81.2069,2.8589, false},
	{-201.1407,-51.6889,2.8590, false},
	{-186.7603,-12.6650,2.8549, false},
	{-173.3069,27.3212,2.8589, false},
	{-160.0307,65.8583,2.8591, false},
	{-169.4137,75.6004,2.8590, false},
	{-183.0492,33.8081,2.8591, false}, // 20
	{-198.4649,-11.0302,2.8518, false},
	{-216.6986,-66.3065,2.8591, false},
	{-240.7543,-73.9025,2.6908, false},
	{-230.3162,-42.3940,2.6818, false},
	{-219.2692,-8.7341,2.6788, false},
	{-203.7366,38.5933,2.6818, false},
	{-188.4806,85.0779,2.6817, false},
	{-210.2417,94.3675,2.2956, false},
	{-226.2563,47.4144,2.4228, false},
	{-237.8997,13.0415,2.4312, false}, // 30
	{-248.8152,-22.9875,2.6805, false},
	{-256.9633,-46.4471,2.6803, false},
	{-263.3137,-63.6958,2.6740, false},
	{-274.2299,-52.0065,2.6898, false},
	{-260.7248,-7.0887,1.8637, false},
	{-78.7266,90.5157,3.1172, true} // 36
};

// ---------------------------------------
new const
	Float: loader_job_unload_cp[2][3] = // позиции загрузки (грузчик)
{
	{2230.5879, -2285.8284, 14.3751},
	{2227.6626, -2279.2266, 14.7647}
};

// ---------------------------------------
new const
	Float: loaderarmy_job_unload_cp[2][3] = // позиции загрузки (грузчик ВМФ)
{
	{2825.9873,-2439.1738,12.0897},
	{2825.4988,-2430.4941,12.0876}
};

// ---------------------------------------
new const
	Float: miner_job_chop_cp[7][3] = // позиции загрузки (шахтер)
{
	{-1885.5135, -1621.1293, 1.3221},
	{-1883.0874, -1619.1539, 1.4075},
	{-1884.2164, -1614.3893, 1.4996},
	{-1875.3024, -1621.6245, 1.3852},
	{-1875.2080, -1625.9874, 1.5876},
	{-1872.0933, -1627.1680, 1.4188},
	{-1874.6906, -1616.1409, 1.4797}
};
//new miner_job_chop_cp[9];
new miner_carriage[1][E_MINER_CARRIAGE_STRUCT] =
{
	{-2375.1228, 294.7194, -15.4815, -2548.1228, 294.7194, -15.4815, false, 0, -1}
};

// ---------------------------------------
new Text3D: factory_store_label[2];

new
	Float: factory_take_metall_pos[6][3] =
{
	{2559.1204,-1287.2177,1044.1250},
	{2551.0713,-1287.2174,1044.1250},
	{2559.0310,-1300.0948,1044.1250},
	{2551.0637,-1300.0941,1044.1250},
	{2543.0313,-1300.0933,1044.1250},
	{2543.2258,-1287.2186,1044.1250}
};
new factory_desk[6][E_FACTORY_DESK_STRUCT];

// ---------------------------------------
new const
	Float: lumberjack_job_chop_cp[5][3] =
{
	{-570.5251,-200.3108,78.6309},
	{-581.2657,-213.0325,76.8421},
	{-561.7732,-210.2897,78.5141},
	{-609.5381,-164.1601,74.6752},
	{-611.3243,-150.0459,73.2058}
};

// ------------------------------------------
new Cache: charity_cache_data; 	// кэш пожертвований
new g_last_lottery_time; 		// время последнего розыгрыша лотереи

// ------------------------------------------
new const
	numeric_name[7][11] =
{
	"первого",
	"второго",
	"третьего",
	"четвертого",
	"пятого",
	"шестого",
	"седьмого"
};

new const
	job_name[5][18] =
{
	"Безработный",
	"Водитель автобуса",
	"Таксист",
	"Автомеханик",
	"Дальнобойщик"
};

new const
	month_name[12][8 + 1] =
{
	"января",
	"февраля",
	"марта",
	"апреля",
	"мая",
	"июня",
	"июля",
	"августа",
	"сентября",
	"октября",
	"ноября",
	"декабря"
};

new const
	day_name[7][12] =
{
	"Понедельник",
	"Вторник",
	"Среда",
	"Четверг",
	"Пятница",
	"Суббота",
	"Воскресенье"
};


new army_ammo_CP; // взятие патронов со склада воинской части
// ------------------------------------------
new const
	g_item_type[7][E_ITEM_STRUCT] =
{
	{"Error",		"ххх", 	false},
	{"Деньги", 		"$", 	true},
	{"Канистра", 	"л", 	false},
	{"Аптечка", 	"шт", 	true},
	{"Металл", 		"кг", 	true},
	{"Патроны", 	"шт", 	true},
	{"Наркотики", 	"г", 	true}
};

enum // типы предметов
{
	ITEM_TYPE_NONE = 0,	// пустой слот
	ITEM_TYPE_MONEY = 1, // деньги
	ITEM_TYPE_JERRICAN, // канистра
	ITEM_TYPE_MED, // аптечка
	ITEM_TYPE_METALL, // металл
	ITEM_TYPE_AMMO,	// патроны
	ITEM_TYPE_DRUGS, // наркотики
}

// ------------------------------------------
new const
	g_player_improvements[5][E_IMPROVEMENTS_STRUCT] =
{
	{"Выносливость", 	50_000, 	5},
	{"Решительность", 	75_000, 	8},
	{"Рюкзак", 			100_000, 	11},
	{"Мастер вождения", 125_000, 	15},
	{"Полная экипировка",150_000, 	17}
};

new chat_message[5][128 + 1];

new const
	Float: spawn_pos_data[3][4] = // позиции спавнов
{
	{1756.5946, -1903.2595, 14.0014,-90.0},
	{1756.4708, -1888.9425, 14.0014,-90.0},
	{1153.7477, -1770.4323, 17.4317,-180.0}
};

stock GetSkillBar(amount)
{
	new tmp_bar[101];
	if(!amount) return tmp_bar;
 	for(new i = 0; i < amount; i++)
		strcat(tmp_bar, "|");

 	return tmp_bar;
}

stock ShowPlayerSkills(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;

	new tmp_skills[1560];
	format
	(
	    tmp_skills,
	    sizeof(tmp_skills),
	    "Сила\t\t%d%s\t%s\n\
	    {99ff66}\
		Colt 45\t\t%d%s\t%s\n\
		SD Pistol\t%d%s\t%s\n\
	    Desert Eagle\t%d%s\t%s\n\
	    Shotgun\t%d%s\t%s\n\
	    MP5\t\t%d%s\t%s\n\
	    AK47\t\t%d%s\t%s\n\
	    M4\t\t%d%s\t%s\n\
	    Sniper Rifle\t%d%s\t%s\n\
		Sawnoff\t%d%s\t%s\n\
		Combat SG\t%d%s\t%s\n\
		Micro Uzi\t%d%s\t%s\
	    ",
	    GetPlayerData(playerid, P_POWER), "%",
	    GetSkillBar(GetPlayerData(playerid, P_POWER)),
	    GetPlayerData(playerid, P_SKILL_COLT), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COLT)),
		GetPlayerData(playerid, P_SKILL_SDPISTOL), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SDPISTOL)),
		GetPlayerData(playerid, P_SKILL_DEAGLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_DEAGLE)),
		GetPlayerData(playerid, P_SKILL_SHOTGUN), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SHOTGUN)),
		GetPlayerData(playerid, P_SKILL_MP5), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MP5)),
		GetPlayerData(playerid, P_SKILL_AK47), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_AK47)),
		GetPlayerData(playerid, P_SKILL_M4), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_M4)),
		GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE)),
		GetPlayerData(playerid, P_SKILL_SAWNOFF), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SAWNOFF)),
		GetPlayerData(playerid, P_SKILL_COMBAT_SG), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COMBAT_SG)),
		GetPlayerData(playerid, P_SKILL_MICRO_UZI), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MICRO_UZI))
	);
	Dialog(to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Навыки владения оружием", tmp_skills, "Закрыть", "");

	return 1;
}

stock GetPlayerSkillAmount(playerid, skill_index)
{
	new amount;

	switch(skill_index)
	{
		case 0: amount = GetPlayerData(playerid, P_POWER);
		case 1: amount = GetPlayerData(playerid, P_SKILL_COLT);
		case 2: amount = GetPlayerData(playerid, P_SKILL_SDPISTOL);
		case 3: amount = GetPlayerData(playerid, P_SKILL_DEAGLE);
		case 4: amount = GetPlayerData(playerid, P_SKILL_SHOTGUN);
		case 5: amount = GetPlayerData(playerid, P_SKILL_MP5);
		case 6: amount = GetPlayerData(playerid, P_SKILL_AK47);
		case 7: amount = GetPlayerData(playerid, P_SKILL_M4);
		case 8: amount = GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE);
		case 9: amount = GetPlayerData(playerid, P_SKILL_SAWNOFF);
		case 10: amount = GetPlayerData(playerid, P_SKILL_COMBAT_SG);
		case 11: amount = GetPlayerData(playerid, P_SKILL_MICRO_UZI);
	}

	return amount;
}

stock SetPlayerSkillAmount(playerid, skill_index, amount)
{
	switch(skill_index)
	{
		case 0: SetPlayerData(playerid, P_POWER, amount);
		case 1: SetPlayerData(playerid, P_SKILL_COLT, amount);
		case 2: SetPlayerData(playerid, P_SKILL_SDPISTOL, amount);
		case 3: SetPlayerData(playerid, P_SKILL_DEAGLE, amount);
		case 4: SetPlayerData(playerid, P_SKILL_SHOTGUN, amount);
		case 5: SetPlayerData(playerid, P_SKILL_MP5, amount);
		case 6: SetPlayerData(playerid, P_SKILL_AK47, amount);
		case 7: SetPlayerData(playerid, P_SKILL_M4, amount);
		case 8: SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, amount);
		case 9: SetPlayerData(playerid, P_SKILL_SAWNOFF, amount);
		case 10: SetPlayerData(playerid, P_SKILL_COMBAT_SG, amount);
		case 11: SetPlayerData(playerid, P_SKILL_MICRO_UZI, amount);
	}

	return 1;
}

stock ShowPlayerNeed(playerid)
{
	new tmp_need[1560];
	format
	(
	    tmp_need,
	    sizeof(tmp_need),
	    "\n\n{FFFFFF}Голод\t\t%d%s\t%s\n\
		{FFFFFF}Жажда\t\t%d%s\t%s\n\n",
	    GetPlayerData(playerid, P_NEED_EAT), "%",
	    GetSkillBar(GetPlayerData(playerid, P_NEED_EAT)),
	    GetPlayerData(playerid, P_NEED_WATER), "%",
		GetSkillBar(GetPlayerData(playerid, P_NEED_WATER))
	);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Нужды", tmp_need, "Закрыть", "");

	return 1;
}

stock ShowTeleportList(playerid)
{
	new list_text[34 * (sizeof g_teleport_list)];
	new dest[36];

	for(new i; i < sizeof g_teleport_list; i ++)
	{
		format(dest, sizeof dest, "%s\n", GetTeleportListData(i, TL_NAME));
		strcat(list_text, dest);
	}

	Dialog(playerid, DIALOG_TELEPORT_LIST, DIALOG_STYLE_LIST, "Телепорт", list_text, "Выбрать", "Выход");
	return 1;
}

stock CreateTicket(playerid, amount, issuer[], description[])
{
	new query[190];

	mysql_format(mysql, query, sizeof query, "INSERT INTO tickets (uid, amount, issuer, description) VALUES (%d, %d, '%s', '%s')",
	GetPlayerAccountID(playerid), amount, issuer, description);
	mysql_query(mysql, query, false);
	return 1;
}

stock PayTicket(playerid, ticketid)
{
	new query[90],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE id=%d LIMIT 1", ticketid);
 	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	new uid = cache_get_field_content_int(0, "uid"),
		amount = cache_get_field_content_int(0, "amount"),
		status = cache_get_field_content_int(0, "status"),
		desc[64];

	cache_get_field_content(0, "description", desc);

	cache_delete(result);

	if(!rows)
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф не найден");

	if(uid != GetPlayerAccountID(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф выписан не Вам");

	if(status)
		return SendClientMessage(playerid, 0xCECECEFF, "Данный штраф уже оплачен");

	if(GetPlayerBankMoney(playerid) < amount)
		return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно средств на основном банковском счету для оплаты штрафа");

	GivePlayerMoneyEx(playerid, -amount, "Оплата штрафа", true, true);

	mysql_format(mysql, query, sizeof query, "UPDATE tickets SET status=1 WHERE id=%d", ticketid);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "Вы оплатили штраф №%d (%s)", ticketid, desc);
	SendClientMessage(playerid, 0x66CC33FF, query);

	return 1;
}

stock CreateBoard(playerid, Float:x, Float:y, Float:z, Float:x_angle, Float:y_angle, Float:z_angle, Float:label_x, Float:label_y, Float:label_z, modelid)
{
	new board_id = g_board_created;
	new fmt_text[110];
	format(fmt_text, sizeof fmt_text, "- Щит № %d свободен -\n{FFFFFF}Вы можете занять его в здании Los-Santos Radio \n{888888}Установил: %s", board_id,GetPlayerNameEx(playerid));
	SetBoardData(board_id, B_OBJECT, CreateDynamicObject(modelid,x,y,z,x_angle,y_angle,z_angle));
	SetBoardData(board_id, B_LABEL, CreateDynamic3DTextLabel(fmt_text, 0x1E90FFFF, x, y, z+5.7153, 50.0));
	SetBoardData(board_id, B_OWNER, -1);
	SetBoardData(board_id, B_POS_X, x);
	SetBoardData(board_id, B_POS_Y, y);
	SetBoardData(board_id, B_POS_Z, z);
    new query[510];

	mysql_format(mysql, query, sizeof query, "INSERT INTO board (`x`, `y`, `z`, `x_angle`, `y_angle`, `z_angle`, `view_x`, `view_y`, `view_z`,`model`) VALUES ('%f', '%f', '%f','%f', '%f', '%f', '%f', '%f', '%f', '%d')",x,y,z,x_angle,y_angle,z_angle,label_x,label_y,label_z,modelid);
	mysql_query(mysql, query, false);

	g_board_created ++;
	return 1;
}

stock CreateRadar(playerid, Float:x, Float:y, Float:z, limit)
{
	new radar_id = g_radars_created;
	SetRadarData(radar_id, R_ZONE, CreateDynamicSphere(x, y, z, 40.0));
	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "- Регистратор скорости №%d -\n\n{FFFFFF}Ограничение: %d км/ч\n{888888}Установил: %s", radar_id, limit, GetPlayerNameEx(playerid));
	SetRadarData(radar_id, R_LABEL, CreateDynamic3DTextLabel(fmt_text, 0x1E90FFFF, x, y, z + 3.0, 50.0));

	SetRadarData(radar_id, R_POS_X, x);
	SetRadarData(radar_id, R_POS_Y, y);
	SetRadarData(radar_id, R_POS_Z, z);

	SetRadarData(radar_id, R_LIMIT, limit);
	g_radars_created ++;

    new query[250];
   	mysql_format(mysql, query, sizeof(query), "INSERT INTO radar (`x`, `y`, `z`, `limit`) VALUES ('%f', '%f', '%f', '%i')",x,y,z,limit);

	mysql_function_query(mysql, query, true, "", "");
	SendClientMessage(playerid,-1,query);
	return 1;
}

stock RemoveBoard(board_id)
{
	DestroyDynamic3DTextLabel(GetBoardData(board_id, B_LABEL));

	DestroyDynamicObject(GetBoardData(board_id, B_OBJECT));

	g_board[board_id] = g_board_default_values;

	if(board_id == g_board_created - 1 && board_id != 0)
		g_board_created --;

	return 1;
}

stock RemoveRadar(radar_id)
{
	DestroyDynamic3DTextLabel(GetRadarData(radar_id, R_LABEL));

	DestroyDynamicArea(GetRadarData(radar_id, R_ZONE));

	// DestroyDynamicObject(GetRadarData(radar_id, R_OBJECT));

	g_radar[radar_id] = g_radar_default_values;

	if(radar_id == g_radars_created - 1 && radar_id != 0)
		g_radars_created --;

	return 1;
}

stock SendAdvert(playerid, message[])
{
	new ad_id = -1;

	for(new idx; idx < sizeof g_advert; idx ++)
	{
	    if(GetAdvertData(idx, A_CREATOR) != INVALID_PLAYER_ID)
	        continue;

		ad_id = idx;
		break;
	}

	if(ad_id != -1)
	{
		SetAdvertData(ad_id, A_CREATOR, 	playerid);
		SetAdvertData(ad_id, A_EDIT, 		false);

		format(g_advert[ad_id][A_TEXT], 128, message);

		SendMessageToTeam(4, "[R] [Для утверждения]: Пришло новое объявление в редакцию (/edit)", 0x99cc00FF);

		return 1;
	}

	return 0;
}

stock DeleteAdvert(ad_id)
{
	if(!(0 <= ad_id <= sizeof g_advert - 1)) return 0;

	SetAdvertData(ad_id, A_CREATOR, 	INVALID_PLAYER_ID);
	SetAdvertData(ad_id, A_EDIT, 		false);

	format(g_advert[ad_id][A_TEXT], 128, "");

	return 1;
}
stock UpdateReporterText()
{
	new count;

	for(new idx; idx < sizeof g_advert; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		count ++;
	}
}

stock GetAdvertIndexInQueue(ad_id)
{
	new index;

	for(new idx; idx < sizeof g_advert; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		index ++;

		if(idx != ad_id) continue;
	}

	return index;
}

stock SendLog(playerid = INVALID_PLAYER_ID, type, desc[])
{
	new fmt_log[512];

	mysql_format(mysql, fmt_log, sizeof fmt_log, "INSERT INTO action_log (acc_id, uip, type, description, time) VALUES (%d, '%s', %d, '%s', %d)",
	GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), type, desc, gettime());

	mysql_query(mysql, fmt_log, false);

	return 1;
}

stock GetTruckIndex(vehicleid)
{
	if(GetVehicleModel(vehicleid) == 609)
		return 0;

	else if(GetVehicleModel(vehicleid) == 514 || GetVehicleModel(vehicleid) == 584)
		return 1;

	else if(GetVehicleModel(vehicleid) == 515 || GetVehicleModel(vehicleid) == 403)
	    return 2;

	else
		return -1;
}

stock StartSpectate(playerid, for_player)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	SetPlayerSpectateData(playerid, S_PLAYER, for_player);

	SetPlayerInterior(playerid, GetPlayerInterior(for_player));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(for_player));

	TogglePlayerSpectating(playerid, true);

	if(IsPlayerInAnyVehicle(for_player))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(for_player));
	}
	else PlayerSpectatePlayer(playerid, for_player);

	return 1;
}

stock StopSpectate(playerid)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return 1;

	TogglePlayerSpectating(playerid, false);

	SetPlayerSpectateData(playerid, S_PLAYER, -1);

	SetPlayerPosEx
	(
		playerid,
		GetPlayerSpectateData(playerid, S_START_POS_X),
		GetPlayerSpectateData(playerid, S_START_POS_Y),
		GetPlayerSpectateData(playerid, S_START_POS_Z),
		GetPlayerSpectateData(playerid, S_START_ANGLE),
		GetPlayerSpectateData(playerid, S_START_INTERIOR),
		GetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD)
	);

	return 1;
}

stock UpdateSpectate(playerid, disconnect)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerAdminEx(i) < 1) continue;
		else if(GetPlayerSpectateData(i, S_PLAYER) != playerid) continue;

		if(disconnect)
		{
			StopSpectate(i);
			GameTextForPlayer(i, "~r~~h~player disconnect", 4000, 4);
		}
		else if(IsPlayerInAnyVehicle(playerid))
		{
			PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}
		else
		{
			PlayerSpectatePlayer(i, playerid);
		}
	}
	return 1;
}

// ---------------------------------------------------------------
enum E_TRAIN_OBJECTS_INFO
{
	T_OBJECT,
	Float: T_POS_X,
	Float: T_POS_Y,
	Float: T_POS_Z,
	Float: T_ROT_X,
	Float: T_ROT_Y,
	Float: T_ROT_Z,
	T_OBJECT_ID
}

new train_objects[15][E_TRAIN_OBJECTS_INFO] =
{
	{1769, 558.75458, 1771.26550, 12.45800,   0.00000, 0.00000, -4.26000, INVALID_OBJECT_ID},
	{1769, 557.51489, 1754.38770, 12.45800,   0.00000, 0.00000, -4.26000, INVALID_OBJECT_ID},
	{2934, 557.27173, 1752.08313, 14.36110,   0.00000, 0.00000, -5.10000, INVALID_OBJECT_ID},
	{2935, 559.06830, 1774.86462, 14.36110,   0.00000, 0.00000, -3.18000, INVALID_OBJECT_ID},
	{1370, 557.60419, 1770.64502, 13.48950,   0.00000, 0.00000, 0.00000, INVALID_OBJECT_ID},
	{1370, 558.73236, 1770.93896, 13.48950,   0.00000, 0.00000, 56.04002, INVALID_OBJECT_ID},
	{1370, 559.54633, 1770.07764, 13.26950,   0.00000, 90.00000, -36.30000, INVALID_OBJECT_ID},
	{2912, 558.38721, 1769.75452, 12.93200,   0.00000, 0.00000, 19.38000, INVALID_OBJECT_ID},
	{2912, 559.55310, 1769.51257, 13.29200,   90.00000, 0.00000, -1.86000, INVALID_OBJECT_ID},
	{1370, 559.12701, 1761.32288, 13.48950,   0.00000, 0.00000, 0.00000, INVALID_OBJECT_ID},
	{1370, 559.42535, 1760.47961, 13.48950,   0.00000, 0.00000, 77.16001, INVALID_OBJECT_ID},
	{1370, 556.47595, 1756.37244, 13.48950,   0.00000, 0.00000, 172.44000, INVALID_OBJECT_ID},
	{2912, 558.76776, 1756.21375, 12.93200,   0.00000, 0.00000, -24.48000, INVALID_OBJECT_ID},
	{2912, 558.87836, 1757.43701, 12.93200,   0.00000, 0.00000, 40.14000, INVALID_OBJECT_ID},
	{2912, 558.30292, 1761.36475, 12.93200,   0.00000, 0.00000, 40.14000, INVALID_OBJECT_ID}
};

new bool: train_objects_status;

const Float: TRAIN_MOVE_SPEED = 3.5;

// ---------------------------------------------------------------

new const
	weapon_names[47][30] =
{
	"Пусто",
	"Кастет",
	"Клюшка для гольфа",
	"Дубинка",
	"Нож",
	"Бита",
	"Лопата",
	"Кий",
	"Катана",
	"Бензопила",
	"Фиолетовый дилдо",
	"Дилдо",
	"Вибратор",
	"Серебряный вибратор",
	"Цветы",
	"Топор",
	"Граната",
	"Дымовая граната",
	"Коктейль молотова",
	"Пусто",
	"Пусто",
	"Пусто",
	"Пистолет",
	"Пистолет с глушителем",
	"Пустынный орёл",
	"Дробовик",
	"Обрез",
	"Тактический дробовик",
	"Micro-Uzi",
	"MP5",
	"AK-47",
	"M4",
	"TEC-9",
	"Винтовка",
	"Снайперская винтовка",
	"РПГ",
	"Самонаводящаяся установка",
	"Огнемет",
	"Миниган",
	"C4",
	"Кнопка детонатора",
	"Баллончик",
	"Огнетушитель",
	"Фотоаппарат",
	"Очки ночного видения",
	"Очки с тепловизором",
	"Парашют"
};

new const
	weapon_dialog_tabulation[47][7] =
{
	"\t\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t"
};

// ---------------------------------------------------------------
new const
	skill_name[12][16] =
{
	"Сила",
	"Colt 45",
	"SD Pistol",
	"Desert Eagle",
	"Shotgun",
	"MP5",
	"AK47",
	"M4",
	"Sniper Rifle",
	"Sawnoff",
	"Combat SG",
	"Micro Uzi"
};

// ---------------------------------------------------------------
enum
{
	LOG_TYPE_ADMIN_CHAT = 1,
	LOG_TYPE_ADMIN_ANSWER,
	LOG_TYPE_ADMIN_ACTION,
	LOG_TYPE_SET_ADMIN,
	LOG_TYPE_SET_LEADER,
	LOG_TYPE_SMS_CHAT,
	LOG_TYPE_OOC_CHAT,
	LOG_TYPE_REPORT,
	LOG_TYPE_FRACTION,
	LOG_TYPE_SUPERADMIN_ACTION,
	LOG_TYPE_CLEAR_BOARD
}

// ---------------------------------------------------------------
new
	g_donate_prices[] =
{
	2000, 49, 59, 5, 20, 249, 1, 299, 99, 199, 1990, 250,49,400,800,1199,239
}; // цены на товары в меню Дополнительно

enum
{
	DONATE_PRICE_MONEY = 0,
	DONATE_PRICE_NAME,
	DONATE_PRICE_WARNS,
	DONATE_PRICE_DRUGS,
	DONATE_PRICE_LAW_ABIDING,
	DONATE_PRICE_PHONE_NUMBER,
	DONATE_PRICE_SKILLS,
	DONATE_PRICE_CAR_NUMBER,
	DONATE_PRICE_CAR_SLOT,
	DONATE_PRICE_LIC_PACK,
	DONATE_PRICE_LEVEL,
	DONATE_PRICE_GIFT,
	DONATE_PRICE_CASE,
	DONATE_PRICE_BRONSE,
	DONATE_PRICE_SILVER,
	DONATE_PRICE_GOLD,
	DONATE_PRICE_SKIN,
}
//================================================================
new
	g_gun_prices[] =
{
	10000, 5000, 5000, 10000
};
enum
{
	Chainsaw_GUN,
	Shovel_GUN,
	Knife_GUN,
	Katana_GUN,
}
// ---------------------------------------------------------------
new
	g_doubling[3] = {1, ...};

enum
{
	DOUBLING_DONATE = 0,
	DOUBLING_EXP,
	DOUBLING_WAGE,
}
// ---------------------------------------------------------------
enum
	E_SHLAK_DATA
{
	S_OBJ,
	STATUS,
	S_MODEL,
	S_NAME[32],
	Float: S_CLOSED[6],
	Float: S_OPEN[6],
	S_FRAC,
	S_FRAC2,
};

new
	g_shlak[4][E_SHLAK_DATA] =
{
	{-1,1,968,"LSPD",	{1544.67554, -1630.98621, 13.08280,   0.00000, 90.00000, 90.00000}, 		{1544.67554, -1630.98621, 13.08280,   0.00000, 0.00000, 90.00000}, 				5,2},
    {-1,1,980,"ВМФ Ворота №1\n\t",	{2720.04541, -2405.28052, 13.43060,   0.00000, 0.00000, 90.00000}, 		{ 2720.04541, -2405.28052, 9.67060,   0.00000, 0.00000, 90.00000}, 				2,2},
    {-1,1,980,"ВМФ Ворота №2\n\t",	{2720.12305, -2504.05688, 13.30580,   0.00000, 0.00000, 90.00000}, 		{ 2720.12305, -2504.05688, 9.67060,   0.00000, 0.00000, 90.00000}, 				2,2},
    {-1,1,968,"FBI",	{1326.07202, -1160.19775, 23.50650,   0.00000, -90.00000, 0.00000}, 		{ 1326.07202, -1160.19775, 23.50650,   0.00000, 0.00000, 0.00000}, 				6,6}


};
// ---------------------------------------------------------------
// иды фрак
enum
{
	TEAM_NONE = 0,
	// ----
	TEAM_GOVERNMENT, // Мэрия г.Los-Santos
	// ----
	TEAM_ARMY, // ВМФ
	// ----
	TEAM_HOSPITAL, // Больница г.Los-Santos
	// ----
	TEAM_RADIO, // СМИ г.Los-Santos
	// ----
	TEAM_LSPD, // LSPD
	TEAM_FBI, // FBI
	// ----
	TEAM_GANG_GROVE = 7, // Grove Gang
	TEAM_GANG_VAGOS = 8, // Vagos Gang
	TEAM_GANG_BALLAS = 9, // Ballas Gang
	TEAM_GANG_AZTECAS = 10 // Aztecas Gang
};

new const
	team_names[11][28] =
{
	"Нет",
	"Мэрия г.Los-Santos",
	"ВМФ",
	"Больница г.Los-Santos",
	"СМИ г.Los-Santos",
	"LSPD",
	"FBI",
	"Grove Gang",
	"Vagos Gang",
	"Ballas Gang",
	"Aztecas Gang"
};

new const
	team_colors[11] = // цвета
{
	0xFFFFFF11, // Гражданин / безработный
	0xCCFF00FF, // Мэрия г.Los-Santos
	0x996633FF, // ВМФ
	0xFF6666FF, // Больница г.Los-Santos
	0xFF6600FF, // СМИ г.Los-Santos
	0x0000FFFF, // LSPD
	0x0000FFFF, // FBI
	0x00D900C8, // Grove Gang
	0xFFC801C8, // Vagos Gang
	0xD900D3C8,  // Ballas Gang
	0x01FCFFC8  // Aztecas Gang
};

enum
	E_ORG_DATA
{
	O_NAME[32],
	O_SKINS[4],
	O_WOMEN_SKIN,
	Float: O_SPAWN[4],
	Float: O_REPOSITORY_POS[3],
	O_SPAWN_INT,
	O_SPAWN_VW,
	Float: O_CHANGESKIN[3]
};

new
	g_organization[10][E_ORG_DATA] =
{
	{"Мэрия г.Los-Santos",		{57, 59, 98, 147}, 		141, 	{772.1945, -4.2421, 1015.8779}, 		{0.0, 0.0, 0.0}, 				3, 0, {774.7686, -10.2980, 1015.3385}},
	{"ВМФ",					{61, 73, 255, 287}, 	191, 	{2317.8862, 433.7280, 1130.5709}, 	{308.7905,-159.7432,999.5938}, 	0, 0, {2321.3389, 435.7401, 1129.7317}},
	{"Больница г.Los-Santos",		{276, 275, 274, 70},	150, 	{1358.7417,-172.2363,967.5167,264.6008}, 		{0.0, 0.0, 0.0}, 				0, 0, {1360.4996,-176.7981,967.5167}},
	{"CМИ г. Los-Santos",			{170, 188, 186, 187},	219, 	{1576.2813, -30.9647, 1140.9844,0.6500}, 		{0.0, 0.0, 0.0}, 				18, 0, {1564.0284, -26.1542, 1140.3926}},
	{"LSPD",				{280, 281, 282, 283},	76, 	{254.2016,77.9034,1003.6406,181.4450}, 		{0.0, 0.0, 0.0}, 				6, 0, {258.3816, 77.4567, 1003.6545}},
	{"FBI", 				{164, 165, 166, 286}, 	211, 	{237.6155,111.0096,1003.2188,0.0}, 			{0.0, 0.0, 0.0}, 				10, 0, {237.2828,121.6623,1003.2188}},
	{"Grove Gang",			{105, 106, 107, 269},	205, 	{2495.3467,-1687.6287,13.5160,0.0933}, 		{2495.3164,-1690.4539,14.7656}, 0, 0, {0.0, 0.0, 0.0}},
	{"Vagos Gang",			{108, 109, 110, 30},	193, 	{2795.3745,-1619.2363,10.9219,254.8820}, 	{2787.2869,-1625.6548,10.9219},	0, 0, {0.0, 0.0, 0.0}},
	{"Ballas Gang",			{102, 103, 104, 293},	13, 	{1939.3114,-1117.7666,26.4455,181.0567}, 	{1939.0710,-1114.4825,27.4523},	0, 0, {0.0, 0.0, 0.0}},
	{"Aztecas Gang",		{114, 115, 116, 292},	12, 	{-2332.8608,68.6851,21.3155,74.1536}, 		{2326.1282, 405.3908, 2824.9443},	0, 0, {0.0, 0.0, 0.0}}
};

new const
	rank_names[10][10][50] =
{
	// Мэрия г.Los-Santos
	{"Водитель", "Охранник", "Начальник Охраны", "Секретарь", "Советник", "Лицензер", "Адвокат", "Депутат", "Вице-губернатор", "Губернатор"},

	// ВМФ
	{"Рядовой", "Ефрейтор", "Сержант", "Старшина", "Прапорщик", "Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник"},

	// Больница г.Los-Santos
	{"Интерн", "Парамедик", "Фельдшер", "Нарколог", "Педиатр", "Терапевт", "Травматолог", "Хирург", "Заведующий", "Глав. врач"},

	// СМИ г.Los-Santos
	{"Практикант", "Фотограф", "Журналист", "Корреспондент", "Ведущий", "Редактор", "Маркетолог", "Менеджер", "Продюсер", "Директор"},

	// LSPD
	{"Курсант", "Офицер", "Ст. офицер", "Детектив", "Сержант I", "Сержант II", "Лейтенант ", "Капитан", "Заместитель шерифа", "Шериф"},

	// FBI
	{"Стажер", "Агент", "Агент CID", "Агент DEA", "Ст. Агент", "Глава CID", "Глава DEA", "Инспектор", "Зам. директора", "Директор"},

	// Grove Gang
	{"Плэйя", "Хастла", "Килла", "Юонг Г", "Гангста", "О.Г.", "Мобста", "Де Кинг", "Легенда", "Мэд Дог"},

	// Vagos Gang
	{"Новито", "Ордианиро", "Локал", "Верификадо", "Бандито", "O.E.G.", "Ассесино", "Лидер V. E. G.", "Падрино", "Падре"},

	// Ballas Gang
	{"Блайд", "Бастер", "Крэкер", "Гун бро", "Ап бро", "Гангстер", "Федерал блок", "Фолкс", "Райч нигга", "Биг Вилли"},

	// Aztecas Gang
	{"Перро", "Тиррадор", "Геттор", "Лас Геррас", "Мириндо", "Сабино", "Инвасор", "Тесореро", "Нестро", "Падре"}
};

new const
	rank_wages[6][10] =
{
	{450, 680, 1010, 1440, 2070, 3000, 3030, 3060, 10000, 20000}, // Мэрия г.Los-Santos
	{300,  530, 960, 1090, 2020, 2500, 2800, 3100, 8000, 16000}, // ВМФ
	{630,  960, 1290, 1620, 2150, 2380, 2810, 3440, 12000, 24000}, // Больница г.Los-Santos
	{430,  860, 1290, 2020, 2500, 2800, 3100, 3400, 10000, 20000}, // СМИ г.Los-Santos
	{2500,  2800, 3100, 3400, 3700, 4000, 4300, 4600, 15000, 30000}, // LSPD
	{3000,  3300, 3600, 3900, 4200, 4500, 4800, 5100, 20000, 30000} // FBI
};

// ------------------------------------------

public OnGameModeInit()
{

	new hour;
	gettime(hour);
	SetWorldTime(hour);
	AddPlayerClass(0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);

	SendRconCommand("weburl "SERVER_SITE"");
	SendRconCommand("language Russian");

	ShowNameTags(true);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	SetNameTagDrawDistance(30.0);


	// streamer

	//Streamer_SetMaxItems(STREAMER_TYPE_MAP_ICON, 98);
	//Streamer_SetVisibleItems(STREAMER_TYPE_MAP_ICON, 98);
	//Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 500); // Default: 500

	/*Streamer_SetTypePriority
	(
		{
			STREAMER_TYPE_OBJECT,
			STREAMER_TYPE_CP,
			STREAMER_TYPE_AREA,
			STREAMER_TYPE_3D_TEXT_LABEL,
			STREAMER_TYPE_MAP_ICON,
			STREAMER_TYPE_RACE_CP,
			STREAMER_TYPE_PICKUP
		}
	);
	Streamer_ToggleErrorCallback(true);
	Streamer_SetTickRate(40); // Default: 50*/


	CreateDynamic3DTextLabel("Прием на работу", 0x1E90FFFF, 763.0641, -19.2329, 1015.7368 + 0.3, 5.0);
	CreatePickup(1239, 23, 763.4641, -19.2329, 1015.7368, -1, PICKUP_ACTION_TYPE_MAYOR_JOB);

	CreateDynamic3DTextLabel("Получение паспорта", 0x1E90FFFF, 759.7368,-25.4594,1015.7368 + 0.3, 5.0);
	CreatePickup(1581, 23, 759.7368,-25.4594,1015.7368, -1, PICKUP_ACTION_TYPE_MAYOR_PASS);

	CreateDynamic3DTextLabel("Раздевалка", 0x1E90FFFF,771.1188, -77.9981, 1000.3781 + 0.3, 5.0);

//	CreateDynamic3DTextLabel("Обмен подков", 0x1E90FFFF, 1112.1709,-1434.6298,15.7969 + 0.3, 5.0);
//	CreatePickup(1239, 23, 1112.1709,-1434.6298,15.7969, -1, PICKUP_ACTION_TYPE_SELL_GIFT);

	CreateDynamic3DTextLabel("- Получение -\n{FFFFFF}номеров на личное ТС", 0x1E90FFFF, 249.7649,67.8581,1003.6406 + 1.8, 10.0);
	CreatePickup(1239, 23, 249.7649,67.8581,1003.6406, -1, PICKUP_ACTION_TYPE_GET_CAR_NUM);

	CreateDynamic3DTextLabel("- Рыбалка -\n{FFFFFF}продажа рыбы", 0x1E90FFFF, 154.1984,-1946.6228,5.3903 + 1.5, 10.0);
	CreatePickup(1239, 23, 154.1984,-1946.6228,5.3903, -1, PICKUP_ACTION_TYPE_SELL_FISH);

	CreateDynamic3DTextLabel("- Создание -\n{FFFFFF}собственной семьи", 0x1E90FFFF, 759.3879, -31.3562, 1015.7368 + 1.8, 10.0);
	CreatePickup(1239, 23, 759.5879, -31.3562, 1015.7368, -1, PICKUP_ACTION_TYPE_GET_FAMILY);

	CreateDynamic3DTextLabel("Аренда рекламного щита", 0x1E90FFFF, 1565.0228, -28.8129, 1134.8964 + 1.8, 10.0);
	CreatePickup(1239, 23, 1565.0228, -28.8129, 1134.8964, -1, PICKUP_ACTION_RENT_BOARD);

	army_ammo_CP = CreateDynamicCP(311.9849,-166.1416,999.6010, 1.5, -1, -1, _, 7.0);
	CreatePickup(1239, 23, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2], -1);

	CreatePickup(1239, 23, 2445.4480,-2121.2275,13.5469, -1, PICKUP_ACTION_TYPE_RENT_TRUCK);
	CreateDynamic3DTextLabel("Дальнобойщик", 0xFFFFFFFF, 2445.4480,-2121.2275,13.5469 + 0.5, 10.0);

	CreatePickup(1239, 23, 760.0395, -11.5345, 1015.7368, -1, PICKUP_ACTION_BUYLIC);
	CreateDynamic3DTextLabel("Покупка лицензии на бизнес", 0x1E90FFFF, 760.0395, -11.5345, 1015.7368, 10.0);
	CreatePickup(1239, 23,1359.6337,-146.7619,967.5118, -1, PICKUP_ACTION_GET_MED);

	CreatePickup(1239, 23, 768.6865, 1.5101, 1015.3284, -1, PICKUP_ACTION_PASS_PHOTO);

	CreatePickup(1239, 23, 323.6002,1119.4686,1083.8828, -1, PICKUP_ACTION_BUY_NARKO);


	CreateVehicles();

	CreateMedBeds();
	CreateCasinoTables();
	CreateArmories();
	CreateTextDraws();
	//CreateBusStops();

	CreateRentBike();

	CreateGreenZones();

	HelpInfoInit();
	ServerRadioInit();
	AnimListInit();
	BusRoutesInit();
	BanksInit();
	TempJobsInit();
	MapIconsInit();

	DynamicAreaInit();

	CreateFish();

	LoadShlak();
	// CreateShop();
	// InfoPickupsInit();
	TeleportPickupsInit();
	AtmsInit();

	#if defined _GANG_ZONES_INC
	CreateGangZonesCR();
	#endif

	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML);

/*	new bind[64];

	GetServerVarAsString("bind", bind, sizeof bind);

	if(!strcmp(bind, MAIN_IP))
	{
		mysql = mysql_connect(M_MYSQL_HOST, M_MYSQL_USER, M_MYSQL_BASE, M_MYSQL_PASS, 3306, true, 2);
		SendRconCommand("hostname "SERVER_NAME" | SA:MP | Новое оружие?! ");
		return 1;
	}
	else
	{
	    mysql = mysql_connect(T_MYSQL_HOST, T_MYSQL_USER, T_MYSQL_BASE, T_MYSQL_PASS, 3306, true, 2);
	    SendRconCommand("hostname "SERVER_NAME" | SA:MP | Тестовый сервер ");
	    SendRconCommand("password 13374619");
	}
*/
    mysql = mysql_connect(T_MYSQL_HOST, T_MYSQL_USER, T_MYSQL_BASE, T_MYSQL_PASS, 3306, true, 2);
    SendRconCommand("hostname "SERVER_NAME" | SA:MP | Тестовый сервер ");
    SendRconCommand("password 13374619");

	mysql_set_charset("cp1251");

	if(mysql_errno() != 0)
		return print("Не удалось подключится к базе данных!");

	//UpdateCharity();
	RepositoriesLoad();

	LoadHouses();
	LoadHousesRenters();
	LoadFamily();
	//LoadGift();

	LoadHotels();

	LoadFuelStations();
	LoadBusinesses();

  	LoadGangZones();
	LoadGangRepositories();

	LoadRadar();
	LoadBoard();


	SetTimer("SetRandomWeather", (random(60) + 60) * 5000, false);

	SetTimer("rekljobs", (random(120) + 120) * 3000, false);
	SetTimer("RandomText", (random(120) + 120) * 3000, false);

	SetTimer("ClearBanList", 15_000, false);
	SetTimer_("OnSecondTimer", 1000, 0, -1);
	SetTimer_("SpeedBooster", 200, 0, -1);
	SetTimer_("OnMinuteTimer", 60000,0,-1);

	// SetTimer_("SpeedBooster", 100, 0, -1);

	CallLocalFunction("HospitalTreatment", "");

	SetGameModeText(""SERVER_VERSION" | Android");

	UP_CreateObject();

	DrivingSchoolInit();

	return 1;
}

public OnGameModeExit()
{
	SaveRepository();

	mysql_close(mysql);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);

	if(IsPlayerLogged(playerid))
	{
		SetPlayerSpawnInit(playerid);
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);

	if(!IsPlayerLogged(playerid))
	{
		new a_state = GetPlayerData(playerid, P_ACCOUNT_STATE);
		if(a_state != ACCOUNT_STATE_REG_SKIN)
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Для игры на сервере Вы должны %s", a_state == ACCOUNT_STATE_REGISTER ? ("пройти регистрацию") : ("авторизироваться"));

			Dialog
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"Ошибка",
				fmt_str,
				"Закрыть", ""
			);
			Kick:(playerid);
			SendClientMessage(playerid, 0xCECECEFF, fmt_str[8]);
		}
	}
	else if(IsPlayerLogged(playerid))
	{
		//SetPlayerSpawnInit(playerid);
		//SpawnPlayer(playerid);

		SendClientMessage(playerid, 0xFFFF00FF, "Для смены внешности посетите любой магазин одежды");
	}

	return 1;
}

public OnPlayerConnect(playerid)
{
	new hour, minute;
	gettime(hour, minute);

	SetPlayerTime(playerid, hour, minute);

	SetPlayerColor(playerid, 0xCECECEFF);

	SetPlayerVirtualWorld(playerid, playerid + 0xFF);
	ClearPlayerInfo(playerid);

	GetPlayerName(playerid, g_player[playerid][P_NAME], 20 + 1);
	GetPlayerIp(playerid, g_player[playerid][P_IP], 16);
	foreach(new idx : Player)
	{
	    if(!IsPlayerLogged(idx)) continue;
	    if(!strcmp(g_player[idx][P_NAME], g_player[playerid][P_NAME], true))
		{
		    Kick:(playerid);

		    break;
		}
	}

/*	foreach(new idx : Player)
	{
	    if(!IsPlayerLogged(idx)) continue;
	    if(!strcmp(g_player[idx][P_IP], g_player[playerid][P_IP], true))
		{
		    Kick:(playerid);

		    break;
		}
	}
*/
	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "[A] Подключился %s [%d] IP: %s", g_player[playerid][P_NAME], playerid, g_player[playerid][P_IP]);

	foreach(new admin : Player)
	{
		if(!IsPlayerLogged(admin)) continue;
		if(GetPlayerAdminEx(admin) < 1) continue;
		if(!GetPVarInt(admin, "admin_connect")) continue;

		SendClientMessage(admin, 0xCECECEFF, fmt_text);
	}

	if(IsPlayerUseForbiddenSoftware(playerid))
	{
		KickForSoft(playerid);

		return 1;
	}

	new player_key[64 + 1],
		bind[64];

	gpci(playerid, player_key, sizeof(player_key));

	GetServerVarAsString("bind", bind, sizeof bind);

	if(!strcmp(bind, TEST_IP))
		printf("%s[%d] GPCI: %s", g_player[playerid][P_NAME], playerid, player_key);
	if(strcmp(player_key, "5A4D574253415337304A5A593654444A32584A30"))
	{
		if(strcmp(player_key, "5638413348335738345A4536524D4A524539334B")) // (0.1) // 5A4D574253415337304A5A593654444A32584A30 - universal
		{
			SetPlayerData(playerid, P_USER_PC, 1);
		}
	}
	else
	{
	    if(strcmp(bind, TEST_IP))
	    {
			Dialog
			(
			    playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			    "Неправильный клиент",
			    "{FFFFFF}Для игры на проекте требуется игровой клиент {ffff00}SAMP Mobile\n\n"\
				"{FFFFFF}Загрузить его можно по ссылке: {ffff00}"SERVER_SITE"",
			    "Закрыть",
			    ""
			);

		//	Kick:(playerid);
		}
	}

	if(GetPlayerData(playerid, P_USER_PC))
	{
		for(new idx; idx < sizeof server_logo_TD; idx ++)
			TextDrawShowForPlayer(playerid, server_logo_TD[idx]);
	}

	ShowGangZonesForPlayer(playerid);

	SendClientMessage(playerid, 0xffff00FF, "{ffffff}Подключение к {ffff00}"SERVER_NAME"{ffffff} успешно установлено!");

	InitFly(playerid);

	SetPlayerData(playerid, P_USED_FISH, -1);

	SetTimerEx("CheckPlayerAccount", 1000, false, "ii", playerid, mysql_race[playerid]);

	RemoveBuildingForPlayer(playerid, 3744, 2193.2578, -2286.2891, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2193.2578, -2286.2891, 14.8125, 0.25);

	online++;
	return 1;
}

public: CheckPlayerAccount(playerid, race)
{
	if(race == mysql_race[playerid])
	{
		new query[75];
		new Cache: result, is_account_exist;

		mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", GetPlayerNameEx(playerid));
		result = mysql_query(mysql, query);

		if(!mysql_errno())
		{
			is_account_exist = bool: cache_num_rows();
			SetPlayerData(playerid, P_ACCOUNT_STATE, is_account_exist + 1);

			if(is_account_exist)
			{

				SetPlayerData(playerid, P_ACCOUNT_ID, cache_get_field_content_int(0, "id"));

				SetPlayerSettingData(playerid, S_CHANGE_NAME, 	cache_get_field_content_int(0, "setting6"));

				cache_get_field_content(0, "last_ip", g_player[playerid][P_LAST_IP], mysql, 16);
				cache_get_field_content(0, "email", g_player[playerid][P_EMAIL], mysql, 61);

				SetPlayerData(playerid, P_REQUEST_PHONE, cache_get_field_content_int(0, "request_phone"));
				SetPlayerData(playerid, P_REQUEST_PIN, cache_get_field_content_int(0, "request_pin"));

				SetPlayerData(playerid, P_LAST_LOGIN_TIME, cache_get_field_content_int(0, "last_login"));

				if(GetPVarInt(playerid, "change_name") == 0)
				{
					if(g_player_setting[playerid][S_CHANGE_NAME] == 1)
					{
                        Dialog(playerid, DIALOG_NAME_INIT, DIALOG_STYLE_INPUT, "Ввод ника", "Введите ник Вашего игрока", "Ввести", "");
					}
					else
					{
						SetPlayerData(playerid, P_AUTH_TIME, 0);
						ShowPlayerLoginDialog(playerid, LOGIN_STATE_CHECK_BAN, false);
					}
				}
				else
				{
					SetPlayerData(playerid, P_AUTH_TIME, 0);
					ShowPlayerLoginDialog(playerid, LOGIN_STATE_CHECK_BAN, false);
				}
			}
			else ShowPlayerRegDialog(playerid, REGISTER_STATE_PASSWORD);
		}
		else
		{
			Dialog
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"Критическая ошибка",
				"{FFFFFF}Невозможно подключиться к серверу из-за сбоя системных настроек\n"\
				"Если проблема не решится в течение нескольких минут обратитесь к администрации",
				"Выход", ""
			);
			Kick:(playerid, "Ошибка соединения. Введите /q (/quit) чтобы выйти", 3000);
		}
		cache_delete(result);
	}
}

public OnPlayerDisconnect(playerid, reason)
{
	new query[140];
    mysql_format(mysql, query, sizeof query, "UPDATE accounts SET online = '0' WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	mysql_query(mysql, query);
	player_weapon_slot[playerid] = -1;
	click_status[playerid] = 0;
	if(!reason)
	{
        new Float:POS[4];
    	GetPlayerPos(playerid, POS[0], POS[1], POS[2]);
    	GetPlayerFacingAngle(playerid, POS[3]);

	    mysql_format(mysql, query, sizeof query, "UPDATE accounts SET last_x = '%f' , last_y = '%f',last_z = '%f', last_fa = '%f' WHERE id=%d LIMIT 1", POS[0],POS[1],POS[2],POS[3]);
		mysql_query(mysql, query);

		printf("PLAYER: %s DISSCONNECT COORD: X:%f Y:%f Z:%f",GetPlayerNameEx(playerid), POS[0],POS[1],POS[2]);
	}
	if(g_player[playerid][P_STATUS][2] == 1) g_player[playerid][P_STATUS][2] = 0;
    if(g_player[playerid][P_STATUS][3] == 1) g_player[playerid][P_STATUS][3] = 0;
    if(g_player[playerid][P_STATUS][0] == 1) g_player[playerid][P_STATUS][0] = 0;
    if(g_player[playerid][P_STATUS][1] == 1) g_player[playerid][P_STATUS][1] = 0;
    DisablePlayerCheckpoint(playerid);
    DisablePlayerRaceCheckpoint(playerid);
    SetPlayerDataDisconnect(playerid);

	new buffer = GetPlayerLastVehicle(playerid);

	if(buffer != INVALID_VEHICLE_ID)
	{
		if(GetVehicleData(buffer, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
		{
			if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
			{
				SetVehicleToRespawn(buffer);
			}
		}
	}

    if(GetPlayerData(playerid, P_RENT_BIKE) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_RENT_BIKE));
		SetPlayerData(playerid,  P_RENT_BIKE, INVALID_VEHICLE_ID);
	}

    if(GetPlayerData(playerid, P_USED_FISH) != -1)
	{
	 	ClearFish(playerid, GetPlayerData(playerid, P_USED_FISH));
	}
	if(IsPlayerInJob(playerid))
	{
	    buffer = GetPlayerJobCar(playerid);

	    if(GetVehicleData(buffer, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCK_TRAIL) return 1;

		if(buffer != INVALID_VEHICLE_ID)
		{
			//SetVehicleToRespawn(buffer);
		}
	}
	KillEndJobTimer(playerid);

	buffer = GetPlayerData(playerid, P_FACTORY_USE_DESK);
	SetPlayerFactoryDeskUse(playerid, buffer, false);

	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
	}

	if(GetPlayerTeamEx(playerid) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL)))
	{
		DestroyDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL));
		SetPlayerData(playerid, P_ADVISOR_LABEL, Text3D: -1);
	}

	if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
	{
		if(SaveOwnableCar(GetPlayerOwnableCar(playerid)) != -1)
			UnloadPlayerOwnableCar(playerid, true);
	}

	if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID)
	{
	    if(GetVehicleData(GetPlayerRentCar(playerid), V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCK_TRAIL) return 1;

		SetVehicleToRespawn(GetPlayerRentCar(playerid));
	}

	new fmt_text[95];

	if((GetPlayerData(playerid, P_CUFFED) == 1) && reason != 2 && !server_restart)
	{
		new jail_time = (GetPlayerSuspect(playerid) * 5 + 30) * 60;

		SetPlayerData(playerid, P_JAIL, jail_time);
		UpdatePlayerDatabaseInt(playerid, "jail", jail_time);

		SetPlayerData(playerid, P_SUSPECT, 0);
		UpdatePlayerDatabaseInt(playerid, "suspect", 0);

		format(fmt_text, sizeof fmt_text, "%s выходит при аресте (+30 минут заключения)", GetPlayerNameEx(playerid));
		SendClientMessageToAll(0xFF5533FF, fmt_text);
	}

	for(new idx; idx < sizeof g_advert; idx ++)
	{
		if(GetAdvertData(idx, A_CREATOR) != playerid) continue;

		DeleteAdvert(idx);
	}

	if(!server_restart)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] отключился от сервера (%s). IP: %s", GetPlayerNameEx(playerid), playerid, reason == 0 ?  "вылет" : (reason == 1 ? "выход" : "кик/бан"), GetPlayerIpEx(playerid));

		foreach(new admin : Player)
		{
			if(!IsPlayerLogged(admin)) continue;
			if(GetPlayerAdminEx(admin) < 1) continue;
			if(!GetPVarInt(admin, "admin_connect")) continue;

			SendClientMessage(admin, 0xCECECEFF, fmt_text);
		}
	}

	SavePlayerAccount(playerid);
	ClearPlayerInfo(playerid);

	if(following_timer[playerid] != -1)
	{
		KillTimer(following_timer[playerid]);

		following_timer[playerid] = -1;
	}

	UpdateSpectate(playerid, true);

	online--;
	return 1;
}

public: SavePlayerAccount(playerid)
{
	new query[360];

	mysql_format
	(
		mysql, query, sizeof query,
		"UPDATE accounts SET last_login=%d,game_for_hour=%d,game_for_day=%d,game_for_day_prev=%d,\
		health=%f,hospital=%d,mute=%d,jail=%d WHERE id=%d LIMIT 1",
		GetPlayerData(playerid, P_LAST_LOGIN_TIME),
		GetPlayerData(playerid, P_GAME_FOR_HOUR),
		GetPlayerData(playerid, P_GAME_FOR_DAY),
		GetPlayerData(playerid, P_GAME_FOR_DAY_PREV),
		GetPlayerData(playerid, P_HEALTH),
		GetPlayerData(playerid, P_HOSPITAL),
		GetPlayerData(playerid, P_MUTE),
		GetPlayerData(playerid, P_JAIL),
		GetPlayerAccountID(playerid)
	);

	mysql_query(mysql, query, false);

	return 1;
}

public OnPlayerSpawn(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	SetPlayerData(playerid, P_IN_HOUSE, 		-1);
	SetPlayerData(playerid, P_IN_BUSINESS, 		-1);
	SetPlayerData(playerid, P_IN_HOTEL_FLOOR, 	-1);
	SetPlayerData(playerid, P_IN_HOTEL_ROOM, 	-1);

	SetPlayerSkillsInit(playerid);

	if(!IsPlayerLogged(playerid))
	{
		if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
		{
			//new sex = bool: GetPlayerSex(playerid);

			if(!IsPlayerLogged(playerid))
			{
				if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
				{
					new sex = GetPlayerSex(playerid);

					switch(sex)
					{
						case 0: SetPlayerData(playerid, P_SKIN, 230);
						default: SetPlayerData(playerid, P_SKIN, 13);
					}

					new query[90];
					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET skin=%d,last_login=%d WHERE id=%d LIMIT 1", GetPlayerSkinEx(playerid), gettime(), GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);

					if(!mysql_errno())
					{
						SetPlayerData(playerid, P_MONEY, 250);

						SetPlayerSpawnInit(playerid);
						SpawnPlayer(playerid);

						SetPlayerInit(playerid);

						return 1;
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 01)");
				}
			}
		}
	}
	else
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SetPlayerSpawnPos(playerid);

		if(GetPlayerData(playerid, P_HOSPITAL)) SetPlayerHealthEx(playerid, 15.0);

		if(!GetPlayerData(playerid, P_ANIMS_INIT))
		{
			PreLoadPlayerAnims(playerid);
			SetPlayerData(playerid, P_ANIMS_INIT, true);
		}

		if(GetPlayerData(playerid, P_MASK) >= 2)
		{
			SetPlayerColorInit(playerid);
			SetPlayerData(playerid, P_MASK, 0);
		}
	}

	SetPlayerData(playerid, P_LAST_MP, 0);

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(!IsPlayerLogged(playerid))
	{
		return Kick:(playerid, " ");
	}
	if(GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
	{
	    EndPlayerTempJob(playerid, TEMP_JOB_LOADER);
		EndPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK);
		EndPlayerTempJob(playerid, TEMP_JOB_FACTORY);
		EndPlayerTempJob(playerid, TEMP_JOB_FARM);
		EndPlayerTempJob(playerid, TEMP_JOB_COMBAIN);
		EndPlayerTempJob(playerid, TEMP_JOB_MINER);
		EndPlayerTempJob(playerid, TEMP_JOB_LOADERA);
		EndPlayerTempJob(playerid, TEMP_JOB_PIZZA);
		SendClientMessage(playerid,-1,"Вы попали в больницу и автоматически закончили рабочий день!");
	}
	if(IsPlayerInJob(playerid))
	{
		EndPlayerJob(playerid);
	}
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		TogglePlayerDynamicCP(playerid, help_info_CP, true);
	}
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
	}
	if(GetPlayerData(playerid, P_USED_FISH) != -1)
	{
		ClearFish(playerid, GetPlayerData(playerid, P_USED_FISH));
	}
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);

	SetPlayerDrivingExamInfo(playerid, DE_POINTS, 0);
	SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);

	SetPlayerData(playerid, P_IN_HOUSE, 		-1);
	SetPlayerData(playerid, P_IN_BUSINESS, 		-1);
	SetPlayerData(playerid, P_IN_HOTEL_FLOOR, 	-1);
	SetPlayerData(playerid, P_IN_HOTEL_ROOM, 	-1);

    SetPlayerData(playerid, P_LAST_MP, 0);
	SetPlayerData(playerid, P_HOSPITAL, 		true);

	new fmt_text[120];

	if(killerid == INVALID_PLAYER_ID || reason >= 47 || !reason)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] убил себя", GetPlayerNameEx(playerid), playerid);
	//	SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}
	else
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] убил %s[%d] (%s)", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid, GetWeaponName(reason));
	//	SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

    new gang_id = GetPlayerTeamEx(playerid);

	if(TEAM_GANG_GROVE <= gang_id <= TEAM_GANG_AZTECAS)
	{
	    new area_id = GetGangZoneData(g_capture[C_GANG_ZONE], GZ_AREA);

		gang_id -= (TEAM_GANG_GROVE - 1);

		if(IsPlayerInDynamicArea(playerid, area_id))
		{
			if(gang_id == g_capture[C_PROTECT_TEAM])
                g_capture[C_ATTACKER_KILLS] ++;

			else if(gang_id == g_capture[C_ATTACK_TEAM])
			    g_capture[C_PROTECTOR_KILLS] ++;
		}
	}

	if(killerid != INVALID_PLAYER_ID)
	{
		if(GetPlayerSuspect(playerid) && IsPlayerInPoliceTeam(killerid))
		{
			format(fmt_text, sizeof fmt_text, "[Всем постам] %s %s нейтрализовал преступника %s", GetPlayerJobAndRankName(killerid), GetPlayerNameEx(killerid), GetPlayerNameEx(playerid));
			SendMessageToPoliceTeam(fmt_text, 0x00CCFFFF);

			JailPlayer(playerid, GetPlayerSuspect(playerid) * 5);

			SetPlayerData(playerid, P_SUSPECT, 0);
			UpdatePlayerDatabaseInt(playerid, "suspect", 0);

			SetPlayerSuspectInit(playerid);

			SendClientMessage(playerid, 0x66CC33FF, "Вы были нейтрализованы сотрудником правоохранительных органов");
			SendClientMessage(playerid, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");
		}
/*
		if(g_capture[C_STATUS])
		{

			if(TEAM_GANG_GROVE <= GetPlayerTeamEx(killerid) <= TEAM_GANG_AZTECAS)
			{
				new area_id = GetGangZoneData(g_capture[C_GANG_ZONE], GZ_AREA);

				if(IsPlayerInDynamicArea(killerid, area_id) && IsPlayerInDynamicArea(playerid, area_id))
				{
					new gang_id[2];

					gang_id[0] = (GetPlayerTeamEx(killerid) - TEAM_GANG_GROVE) + 1;
					gang_id[1] = (GetPlayerTeamEx(playerid) - TEAM_GANG_GROVE) + 1;

					if(gang_id[0] == g_capture[C_ATTACK_TEAM] && gang_id[1] == g_capture[C_PROTECT_TEAM])
						g_capture[C_ATTACKER_KILLS] ++;

					else if(gang_id[0] == g_capture[C_PROTECT_TEAM] && gang_id[1] == g_capture[C_ATTACK_TEAM])
						g_capture[C_PROTECTOR_KILLS] ++;
				}
			}

		}
*/
	}

	if(GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);
	}

	if(GetPlayerData(playerid, P_TRUCK_ID) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_TRUCK_ID));
		SetPlayerData(playerid, P_TRUCK_ID, INVALID_VEHICLE_ID);
	}

	if(GetPlayerData(playerid, P_TRAILER_ID) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_TRAILER_ID));
		SetPlayerData(playerid, P_TRAILER_ID, INVALID_VEHICLE_ID);
	}

	if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID)
	{
		new vehicleid = GetPlayerRentCar(playerid);

		rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = INVALID_PLAYER_ID;

		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCK_TRAIL) return 1;

		SetVehicleToRespawn(vehicleid);

		SendClientMessage(playerid, 0xFF5533FF, "Арендованный транспорт уничтожен. Договор аренды расторгнут");

		SetPlayerData(playerid, P_RENT_CAR, INVALID_VEHICLE_ID);
	}

	SetPlayerJobLoadItems(playerid, 0);
	SetPlayerTempJob(playerid, TEMP_JOB_NONE);

	SetPlayerSpawnInit(playerid);

	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	new Float: health;

	/*

	if(IsPlayerFly(playerid))
	{
		GetPlayerHealth(playerid, health);
		SetPlayerHealth(playerid, health + amount);
	}

	*/

	if(issuerid == INVALID_PLAYER_ID) return 1;

	if(GetPVarInt(playerid, "player_in_green_zone"))
	{
		new green_zone_id = GetPVarInt(playerid, "player_in_green_zone") - 1;

		if(!(TEAM_LSPD <= GetPlayerTeamEx(issuerid) <= TEAM_FBI))
		{
			ClearPlayerAnim(issuerid);

			new fmt_text[220];

			format
			(
				fmt_text, sizeof fmt_text,
				"{FFFFFF}"\
				"Предупреждение:\n\n"\
				"Игрок находится в зеленой зоне '{66CC33}%s{FFFFFF}'\n"\
				"Нанесение урона запрещено. При повторных попытках Вы будете кикнуты.",
				g_green_zones[green_zone_id][GZ_NAME]
			);

			ShowPlayerDialog(issuerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Зеленая зона", fmt_text, "Закрыть", "");

	//		format(fmt_text, sizeof fmt_text, "[A] %s[%d] попытался ударить %s[%d] в зеленой зоне %s", GetPlayerNameEx(issuerid), issuerid, GetPlayerNameEx(playerid), playerid, g_green_zones[green_zone_id][GZ_NAME]);
	//		SendMessageToAdmins(fmt_text, 0xFF5533FF);

			return 0;
		}
	}

	if(TEAM_LSPD <= GetPlayerTeamEx(issuerid) <= TEAM_FBI)
	{
		if(weaponid == WEAPON_NITESTICK)
		{
			SetPlayerAnimation(playerid, 21);
			TogglePlayerControllable(playerid, false);

			SetTimerEx("UnfreezePlayer", 15000, false, "i", playerid);

			new fmt_text[90];

			format(fmt_text, sizeof fmt_text, "Вы оглушили %s на 15 секунд", GetPlayerNameEx(playerid));
			SendClientMessage(issuerid, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "%s оглушил Вас на 15 секунд", GetPlayerNameEx(issuerid));
			SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

			CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
		}
	}

	if(GetPlayerData(issuerid, P_POWER))
	{
		if(!weaponid)
		{
			new Float: armour,
				Float: taken_health;

			GetPlayerHealth(playerid, health);
			GetPlayerArmour(playerid, armour);

			taken_health = GetPlayerData(issuerid, P_POWER) * 0.05;

			if(armour) SetPlayerArmour(playerid, armour - taken_health);
			else SetPlayerHealth(playerid, health - taken_health);
		}
	}

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCK_TRAIL) return 1;

    vehicle_nitro[vehicleid] = false;

	SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);

	if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ADMIN_CAR)
	    return DestroyVehicle(vehicleid);

    if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCK)
	    return DestroyVehicle(vehicleid);

    if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCK_TRAIL)
	    return DestroyVehicle(vehicleid);

	if(IsAOwnableCar(vehicleid))
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		SetVehiclePos
		(
			vehicleid,
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z)
		);
		SetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));
		LinkVehicleToInterior(vehicleid, GetOwnableCarData(index, OC_Int));
		SetVehicleVirtualWorld(vehicleid, GetOwnableCarData(index, OC_World));

		SetVehicleData(vehicleid, V_FUEL, GetOwnableCarData(index, OC_FUEL));
		SetVehicleParam(vehicleid, V_ENGINE, false);
		return 1;
	}
	else
	{
		DestroyVehicleLabel(vehicleid);
		SetVehicleData(vehicleid, V_FUEL, 42.0);
	}
	SetVehicleData(vehicleid, V_LIMIT, true);
	SetVehicleParamsEx(vehicleid, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF);

	switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
	{
		case
			VEHICLE_ACTION_TYPE_FACTORY,
			VEHICLE_ACTION_TYPE_BUS_DRIVER,
			VEHICLE_ACTION_TYPE_TAXI_DRIVER,
			VEHICLE_ACTION_TYPE_MECHANIC,
			VEHICLE_ACTION_TYPE_TRUCKER,
			VEHICLE_ACTION_TYPE_TRUCK:
		{
			SetVehicleData(vehicleid, V_ACTION_ID, VEHICLE_ACTION_ID_NONE);
			DestroyVehicleLabel(vehicleid);

			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
				if(GetPlayerJobCar(i) != vehicleid) continue;

				SetPlayerData(i, P_JOB_CAR, INVALID_VEHICLE_ID);
				SetPlayerData(i, P_TRUCK_ID, INVALID_VEHICLE_ID);
				SetPlayerData(i, P_TRAILER_ID, INVALID_VEHICLE_ID);
				SetPlayerData(i,  P_RENT_BIKE, 0);
			}
		}
		case VEHICLE_ACTION_TYPE_RENT_BIKE:
		{
 			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i) || !IsPlayerLogged(i)) continue;
				if(GetPlayerData(i, P_RENT_BIKE) != vehicleid) continue;
				DestroyVehicle(vehicleid);
				SetPlayerData(i,  P_RENT_BIKE, 0);
				SendClientMessage(i,-1,"Арендованный Т/С был возвращен на стоянку, договор аренды расторгнут!");
			}
		}
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{


	vehicle_nitro[vehicleid] = false;

	if(GetVehicleCarMarketID(vehicleid) != -1)
		rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = INVALID_PLAYER_ID;

	if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 300.0);

	return 1;
}

public OnPlayerText(playerid, text[])
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

	if(!IsPlayerLogged(playerid)) return 0;

	if(GetPlayerData(playerid, P_MUTE))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать чат во время мута");

		SetPlayerChatBubble(playerid, "(( MUTED ))", 0xFF5533FF, 10.5, 2000);

		return 0;
	}

	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");

		return 0;
	}
	if(strlen(text) > 90) return 0;

	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
	{
		new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
		new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

		new fmt_str[128];
		format(fmt_str, sizeof fmt_str, "[Тел] %s: %s", GetPlayerNameEx(playerid), text);

		if(call_to != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER))
		{
			SendClientMessage(call_to, 0xFFFF00FF, fmt_str);
		}
		else if(caller != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER))
		{
			SendClientMessage(caller, 0xFFFF00FF, fmt_str);
		}
		SendMessageInLocal(playerid, fmt_str, 0xCECECEFF, 25.0);

		return 0;
	}
	else if(!strcmp(text, "(", true))
	{
		Action(playerid, "расстроился", _, false);
	}
	else if(!strcmp(text, "((", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
			ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.1, false, 0, 0, 0, 0, 1);

		Action(playerid, "сильно расстроился", _, false);
	}
	else if(!strcmp(text, ")", true))
	{
		Action(playerid, "улыбается", _, false);
	}
	else if(!strcmp(text, "))", true))
	{
		Action(playerid, "смеётся", _, false);
	}
	else if(!strcmp(text, "=0", true))
	{
		Action(playerid, "удивился", _, false);
	}
	else SendMessageInChat(playerid, text);

	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK))
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "При продолжении Вы будете отключены от сервера");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");
		return 0;
	}
	if(GetPlayerData(playerid, P_TEMP_JOB) == 0)
	{
		if(!GetVehicleParam(vehicleid, V_LOCK))
		{
			if(!ispassenger)
			{
				if(GetPlayerData(playerid, P_CUFFED))
				{
					ClearAnimations(playerid);

					new Float: x, Float: y, Float: z;
					GetPlayerPos(playerid, x, y, z);
					SetPlayerPos(playerid, x, y, z);

					return SendClientMessage(playerid, 0xCECECEFF, "Вы связаны/закованы в наручники");
				}

				if(IsPlayerInVehicle(GetVehicleData(vehicleid, V_DRIVER_ID), vehicleid) && GetPlayerState(GetVehicleData(vehicleid, V_DRIVER_ID)) == PLAYER_STATE_DRIVER)
				{
					ClearAnimations(playerid);

					new Float: x, Float: y, Float: z;
					GetPlayerPos(playerid, x, y, z);
					SetPlayerPos(playerid, x, y, z);

					return 1;
				}
			}
		}
		else return ClearAnimations(playerid);
	}
	else
	{
	    if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
		{
			if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER && GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
			{
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
				SetPlayerMinerJobLoadCP(playerid);
				SetPlayerChatBubble(playerid, "Сломал тележку", 0x32a44bFF, 10.0, 2000);
				RemovePlayerAttachedObjects(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);


				SendClientMessage(playerid, 0xCECECEFF, "Вы сломали тележку");
			}
		}
        if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
		{
		    if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_PUT)
			{
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);

				SendClientMessage(playerid, 0xCECECEFF, "Вы уронили дрова");

				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);

				ApplyAnimation(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 1, 1);

				SetPlayerLumberJackChopCP(playerid);
			}
		}
		if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
		{
			if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_UNLOAD)
			{
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_LOAD);

				RemovePlayerAttachedObject(playerid, A_OBJECT_BONE_SPINE);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1);

				SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

				DisablePlayerCheckpoint(playerid);
				SetTimerEx("SetPlayerLoaderJobLoadCP", 1000, false, "i", playerid);

				SendClientMessage(playerid, 0xCECECEFF, "Вы уронили ящик");
			}
		}
		if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADERA)
		{
			if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADERA_UNLOAD)
			{
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADERARMY_LOAD);

				RemovePlayerAttachedObject(playerid, A_OBJECT_BONE_SPINE);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1);

				SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

				DisablePlayerCheckpoint(playerid);
				SetTimerEx("SetPlayerLoaderArmyJobLoadCP", 1000, false, "i", playerid);

				SendClientMessage(playerid, 0xCECECEFF, "Вы уронили ящик");
			}
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(vehicleid)
			OnPlayerEnterVehicleEx(playerid, vehicleid, !(newstate % 2));
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerLastVehicle(playerid);

		if(vehicleid != INVALID_VEHICLE_ID)
			OnPlayerExitVehicleEx(playerid, vehicleid, !(oldstate % 2));
	}

	UpdateSpectate(playerid, false);
	return 1;
}
public: OnPlayerEnterVehicleEx(playerid, vehicleid, is_driver)
{
	SetPlayerData(playerid, P_LAST_VEHICLE, vehicleid);

	new vehicle_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
	new modelid = GetVehicleModel(vehicleid) - 400;
	new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

	if(is_driver)
	{
	    if(!IsABike(vehicleid) && GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_OFF)
		{
			SendClientMessage(playerid,0x32a44bFF,"Чтобы завести двигатель введите /en");
		}
		SetVehicleData(vehicleid, V_DRIVER_ID, playerid);

		if(!GetVehicleParam(vehicleid, V_LOCK))
		{
		    new lic_id = GetVehicleInfo(modelid, VT_LIC),
				lic_if,
				message[144];

			switch(lic_id)
			{
				case 1:
				{
				    lic_if = GetPlayerData(playerid, P_DRIVING_A);

					if(lic_if == 0)
						lic_if = GetPVarInt(playerid, "driving_a");

					format(message, sizeof message, "У Вас нет прав категории A");
				}
   				case 2:
				{
				    lic_if = GetPlayerData(playerid, P_DRIVING_B);

                    if(lic_if == 0)
						lic_if = GetPVarInt(playerid, "driving_b");

					format(message, sizeof message, "У Вас нет прав категории B");
				}
   				case 3:
				{
				    lic_if = GetPlayerData(playerid, P_DRIVING_C);

				    if(lic_if == 0)
						lic_if = GetPVarInt(playerid, "driving_c");

					format(message, sizeof message, "У Вас нет прав категории C");
				}
   				case 4:
				{
				    lic_if = GetPlayerData(playerid, P_DRIVING_D);

				    if(lic_if == 0)
						lic_if = GetPVarInt(playerid, "driving_d");

					format(message, sizeof message, "У Вас нет прав категории D");
				}
   				case 5:
				{
				    lic_if = GetPlayerData(playerid, P_LIC_FLY);
				    if(lic_if == 0)
						lic_if = GetPVarInt(playerid, "fly_lic");
					format(message, sizeof message, "У Вас нет лицензии на полеты");
				}
      			case 6:
				{
				    lic_if = GetPlayerData(playerid, P_LIC_WATER);
				    if(lic_if == 0)
						lic_if = GetPVarInt(playerid, "water_lic");
					format(message, sizeof message, "У Вас нет лицензии на управление водного транспорта");
				}
			}
            if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_UNLOAD)
				{
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_LOAD);

					RemovePlayerAttachedObject(playerid, A_OBJECT_BONE_SPINE);
					ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1);

					SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

					DisablePlayerCheckpoint(playerid);
					SetTimerEx("SetPlayerLoaderJobLoadCP", 1000, false, "i", playerid);

					SendClientMessage(playerid, 0xCECECEFF, "Вы уронили ящик");
				}
			}
			if(lic_if)
			{
				switch(vehicle_type)
				{
					case VEHICLE_ACTION_TYPE_DRIVING_SCH:
					{
						if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
						{
							SendClientMessage(playerid, 0x32a44bFF, "[Инструктор] Проедьтесь по полигону");
							SendClientMessage(playerid, 0xFFFF00FF, "Внимание! Если Вы попадете в аварию или выйдите из машины, экзамен будет завершен");

							SetPVarFloat(playerid, "car_damage", 1000.0);

							SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_ON);
							NextDrivingExamRouteCP(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Транспорт принадлежит автошколе");
						}
					}
					case VEHICLE_ACTION_TYPE_FACTORY:
					{
						if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(job_car == INVALID_VEHICLE_ID && action_id == VEHICLE_ACTION_ID_NONE)
							{
								new bool: take_car = true;
								switch(GetVehicleData(vehicleid, V_MODELID))
								{
									case 514:
									{
										CreateVehicleLabel(vehicleid, "Доставка топлива\n{FFFFFF}Загрузка 0 / 8000 л", 0xCECECEFF, 0.0, 2.1, 2.1, 20.0);

										SendClientMessage(playerid, 0x32a44bFF, "Прицепите цистерну и отправляйтесь на нефтезавод для закупки топлива");
										SendClientMessage(playerid, 0xFFFFFFFF, "Убедитесь, что склад не полон и заводу действительно необходимо топливо");
									}
									case 414:
									{
										CreateVehicleLabel(vehicleid, "Доставка металла\n{FFFFFF}Загрузка 0 / 500 кг", 0x1E90FFFF, 0.0, 0.0, 1.8, 20.0);

										SendClientMessage(playerid, 0x32a44bFF, "Отправляйтесь на шахту, чтобы закупить металл для завода {ffff00}(/gps 4-8)");
										SendClientMessage(playerid, 0xFFFFFFFF, "Убедитесь, что склад не полон и заводу действительно нужен металл");
									}
									default: take_car = false;
								}
								if(take_car)
								{
									SetVehicleData(vehicleid, V_ACTION_ID, true);
									SetPlayerData(playerid, P_JOB_CAR, vehicleid);
								}
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не работник службы доставки завода (устроиться можно на заводе)");
						}
					}
					case VEHICLE_ACTION_TYPE_BUS_DRIVER: // Водитель автобуса
					{
						if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_BUS_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"Автобусный парк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 100$\n"\
									"Вы действительно хотите взять автобус в аренду?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не водитель автобуса (устроиться можно в мэрии г.Лос-Сантос /gps 3 > 1)");
						}
					}
					case VEHICLE_ACTION_TYPE_COMBAIN:
					{
					    if(GetPlayerTempJob(playerid) == TEMP_JOB_COMBAIN)
						{
						    SetPlayerData(playerid, P_JOB_CAR, GetPlayerVehicleID(playerid));
						    SendClientMessage(playerid,-1,"Вы можете закрыть комбайн (/lock 3)");
						    SendClientMessage(playerid,-1,"При выходе из комбайна рабочий день будет автоматически {ffff00} завершен!");
						    NextCombainRouteCP(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не водитель комбайна (устроиться можно на ферме)");
						}
					}
					case VEHICLE_ACTION_TYPE_TAXI_DRIVER: // Таксист
					{
						if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TAXI_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"Таксопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому таксопарку 200$\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не таксист (устроиться можно в мэрии г.Лос-Сантос /gps 3 > 1)");
						}
					}
 	  				case VEHICLE_ACTION_TYPE_PIZZABOY:
					{
					    if(GetPlayerTempJob(playerid) == TEMP_JOB_PIZZA && GetPlayerData(playerid, P_CHECK) == 1)
					    {
					        KillEndJobTimer(playerid);
						}
						if(GetPlayerTempJob(playerid) == TEMP_JOB_PIZZA && GetPlayerData(playerid, P_CHECK) == 0)
							{
                                new h_id = random(100),fmt_text[120];
								h_id += 125;
								SetPlayerCheckpoint(playerid,
								GetHouseData(h_id, H_POS_X),
								GetHouseData(h_id, H_POS_Y),
								GetHouseData(h_id, H_POS_Z),
								4.0,
								CP_ACTION_TYPE_PIZZA);

								RemovePlayerAttachedObject(playerid,1);
						    	SetPlayerData(playerid, P_CHECK,1);

						    	SetVehicleParam(vehicleid, V_LOCK, true);
						    	SetPlayerData(playerid, P_JOB_CAR, vehicleid);
								format(fmt_text, sizeof(fmt_text), "[Диспетчер]: {00FF7F} Отправляйтесь к дому № %d (он отмечен красным маркером на карте)",h_id);
								SendClientMessage(playerid, 0xFFFFFFFF, fmt_text);
							}
						if(GetPlayerTempJob(playerid) != TEMP_JOB_PIZZA)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не развозчик пиццы");
							}
					}
					case VEHICLE_ACTION_TYPE_MECHANIC: // Автомеханик
					{
						if(GetPlayerJob(playerid) == JOB_MECHANIC)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_MECHANIC_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"Автопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 180$\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик (устроиться можно в мэрии г.Лос-Сантос /gps 3 > 1)");
						}
					}
					case VEHICLE_ACTION_TYPE_TRUCKER: // Дальнобойщик
					{
						if(GetPlayerJob(playerid) == JOB_TRUCKER)
						{
							new job_car = GetPlayerJobCar(playerid);

							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TRUCKER_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"Автопарк",
									"{FFFFFF}Чтобы взять машину, необходимо заплатить городскому автопарку 180$\n"\
									"Вы действительно хотите заключить договор аренды?",
									"Да", "Нет"
								);
							}
							else if(vehicleid != job_car)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не дальнобойщик (устроиться можно в мэрии г.Лос-Сантос /gps 3 > 1)");
						}
					}
					case VEHICLE_ACTION_TYPE_TRUCK: // Дальнобойщик (контракты)
					{
						if(GetPlayerJob(playerid) == JOB_TRUCKER)
						{
							if(GetPlayerData(playerid, P_TRUCK_ID) != vehicleid)
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вы не арендовали данный грузовик");
							}
							else
							{
								if(GetPVarInt(playerid, "stap_truck") == 1)
								{
								    SendClientMessage(playerid, 0xd8284cFF, "Отправляйтесь на разгрузку!");

									SetPlayerRaceCheckpoint
									(
										playerid,
										2,
										649.7244,
										-564.9355,
										16.2738,
										0.0,
										0.0,
										0.0,
										4.0,
										RCP_ACTION_TYPE_UNLOAD
									);
								}
								else
								{

									SendClientMessage(playerid, 0x3399FFFF, "Вы залезли в грузовик, не забудьте забрать прицеп!");
								    SendClientMessage(playerid, 0xd8284cFF, "Отправляйтесь на загрузку!");

									SetPlayerRaceCheckpoint
									(
										playerid,
										2,
										271.4422,
										1411.5006,
										10.4552,
										0.0,
										0.0,
										0.0,
										4.0,
										RCP_ACTION_TYPE_LOAD
									);
								}
							}
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вы не дальнобойщик (устроиться можно в мэрии г.Лос-Сантос /gps 3 > 1)");
						}
					}
					case VEHICLE_ACTION_TYPE_GOV_CAR..VEHICLE_ACTION_TYPE_AZTECAS_CAR:
					{
						if(GetPlayerTeamEx(playerid) != vehicle_type - 8)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
						}
						else if GetPlayerTeamEx(playerid) == 2 && vehicle_type == VEHICLE_ACTION_TYPE_ARMY_CAR && modelid == 33 *then
						{
							if GetPlayerJob(playerid) < 2 *then
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "[Полковник]: Матовоз не доступен для рядовых! Вылезай");
							}
							else
							{
								SendClientMessage(playerid,0x32a44bFF,"Матовоз загружен: 0/3000");
								SendClientMessage(playerid,0x32a44bFF,"Для того чтобы начать доставку патронов введите /carm");
							}
						}
					}
					case VEHICLE_ACTION_TYPE_RENT_CAR:
					{
						if(!(playerid == rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] && GetPlayerRentCar(playerid) == vehicleid))
						{
							TogglePlayerControllable(playerid, false);
							CallLocalFunction("ShowBuyCarInfo", "ii", playerid, vehicleid);
						}
					}
					case VEHICLE_ACTION_TYPE_ADMIN_CAR:
					{
						if(action_id != 1)
						{
							if(!GetPlayerAdminEx(playerid))
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Вам недоступен данный транспорт");
							}
						}
					}
				}

			}
			else
			{
				if(!IsABike(vehicleid))
				{
					SendClientMessage(playerid, 0xCECECEFF, message);
					RemovePlayerFromVehicle(playerid);
				}
			}
		}
		else
		{
			RemovePlayerFromVehicle(playerid);
			SendClientMessage(playerid, 0xCECECEFF, "Данный транспорт закрыт!");
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, false);

		switch(vehicle_type)
		{
			case VEHICLE_ACTION_TYPE_BUS_DRIVER, VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				new driver = GetVehicleData(vehicleid, V_DRIVER_ID);
				if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
				{
					if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
					{
						new tariff = GetPlayerData(driver, P_JOB_TARIFF);

						if(vehicle_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
						{
							if(GetPlayerMoneyEx(playerid) >= tariff) //Мне сюда
							{
								new fmt_str[90];
								g_taxi_mileage[playerid] = 0.0;

								format(fmt_str, sizeof fmt_str, "%s сел в ваше такси. Счетчик включен", GetPlayerNameEx(playerid));
								SendClientMessage(driver, 0x1E90FFFF, fmt_str);

								format(fmt_str, sizeof fmt_str, "Вы сели в такси %s. Тариф: $%d (оплата за каждые 100 м поездки)", GetPlayerNameEx(driver), tariff);
								SendClientMessage(playerid, 0x1E90FFFF, fmt_str);

								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для оплаты тарифа");
							}
						}
						else
						{
							if(GetPlayerMoneyEx(playerid) >= tariff)
							{
								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
								GivePlayerMoneyEx(driver, tariff, "+ Оплата проезда в автобусе", true, true);
								GivePlayerMoneyEx(playerid, -tariff, "Оплата проездного", true, true);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для оплаты проезда");
							}
						}
					}
				}
			}
		}
	}

	return 1;
}

public: OnPlayerExitVehicleEx(playerid, vehicleid, is_driver)
{
	SetPlayerData(playerid, P_LAST_VEHICLE, INVALID_VEHICLE_ID);

	if(is_driver)
	{
	    if(IsAOwnableCar(vehicleid))
		{
		    new index = GetVehicleData(vehicleid, V_ACTION_ID);
	    	new query[256];
			mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET fuel=%f WHERE id=%d", GetVehicleData(vehicleid, V_FUEL),GetOwnableCarData(index, OC_SQL_ID));
     		mysql_query(mysql, query);
		}
		SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);

		if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
		{
			DisablePlayerRaceCheckpoint(playerid);

			if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
			{
				SetVehicleToRespawn(vehicleid);
			}

			ClearPlayerDrivingExamInfo(playerid);

			DeletePVar(playerid, "driving_a");
			DeletePVar(playerid, "driving_b");
			DeletePVar(playerid, "driving_c");
			DeletePVar(playerid, "driving_d");

			DeletePVar(playerid, "de_route_id");

			SendClientMessage(playerid, 0xCECECEFF, "Вы покинули учебный автомобиль");
			SendClientMessage(playerid, 0xFF0000FF, "Экзамен провален!");

			DeletePVar(playerid, "car_damage");
			DestroyVehicle(GetPlayerData(playerid, P_EXAM_CAR));
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid, 0);
			SetPlayerInBiz(playerid, -1);
			SetPlayerPos(playerid,1498.4559, -1586.5024, 13.8595);
		}
		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
		    case VEHICLE_ACTION_TYPE_RENT_BIKE:
			{
			    if(GetPlayerData(playerid, P_RENT_BIKE) != vehicleid) return 1;
				SendClientMessage(playerid, 0xCECECEFF, "У Вас есть 40 сек чтобы вернуться в транспорт , после чего он будет удален");
			}
			case VEHICLE_ACTION_TYPE_FACTORY:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER)
				{
					if(GetPlayerJobCar(playerid) == vehicleid)
					{
						StartEndJobTimer(playerid);
						SendClientMessage(playerid, 0xCECECEFF, "У Вас есть 1 минута чтобы вернуться в транспорт");
					}
				}
			}
			case VEHICLE_ACTION_TYPE_PIZZABOY:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_PIZZA)
				{
				    if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_PIZZA_K_DOMY)
				    {
	 	  				SetPlayerAttachedObject(playerid, 1 , 2814, 1,0.11,0.36,0.0,0.0,90.0);
	 	  				ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
					}
		  			SetVehicleParam(vehicleid, V_LOCK, false);

					if(GetPlayerJobCar(playerid) == vehicleid)
					{
						StartEndJobTimer(playerid);
						SendClientMessage(playerid, 0xCECECEFF, "У Вас есть 1 минута чтобы вернуться в транспорт");
					}
				}
			}
			case VEHICLE_ACTION_TYPE_COMBAIN:
			{
   				if(GetPlayerTempJob(playerid) == TEMP_JOB_COMBAIN)
				{
    				EndPlayerTempJob(playerid, TEMP_JOB_COMBAIN);
				}
			}
			case VEHICLE_ACTION_TYPE_BUS_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "У Вас есть 1 минута чтобы вернуться в автобус");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "У Вас есть 1 минута чтобы вернуться в транспорт");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_MECHANIC:
			{
				if(GetPlayerJob(playerid) == JOB_MECHANIC)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "У Вас есть 1 минута чтобы вернуться в транспорт");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_TRUCKER:
			{
				if(GetPlayerJob(playerid) == JOB_TRUCKER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "У Вас есть 1 минута чтобы вернуться в транспорт");
						}
					}
				}
			}
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, true);
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	new Float:healveh;
 	GetVehicleHealth(vehicleid, healveh);
  	if(healveh < 300)
	{
		SetVehicleHealth(vehicleid,300);
	}
	if(GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON && GetPlayerData(playerid, P_IMPROVEMENTS) < 4)
	{
 		SetVehicleParam(vehicleid, V_ENGINE, VEHICLE_PARAM_OFF);
 		GameTextForPlayer(playerid, "~r~~h~engine off", 4000, 6);

		new Float: veh_health;

		GetVehicleHealth(vehicleid, veh_health);

		if(IsAOwnableCar(vehicleid))
		{
			SetVehicleData(vehicleid, V_HEALTH, veh_health);

			if(veh_health < 300.0)
			{
				SetVehicleData(vehicleid, V_HEALTH, 300.0);
			}
		}

		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
			case VEHICLE_ACTION_TYPE_DRIVING_SCH, VEHICLE_ACTION_TYPE_BUS_DRIVER:
			{
				new Float: health = GetPVarFloat(playerid, "car_damage");

				health -= floatabs((health - veh_health));

				SetPVarFloat(playerid, "car_damage", health);
			}
		}
	}
    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new action_type = GetPlayerCPInfo(playerid, CP_ACTION_TYPE);
	if(copwarning == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	}
	if(click_status[playerid] != 0)
	{
	    DisablePlayerCheckpoint(playerid);
	}
	if(IsPlayerInCheckpoint(playerid))
	{
		switch(action_type)
		{
			case CP_ACTION_TYPE_LOADER_JOB_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_LOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);

							ClearAnimations(playerid);
							ApplyAnimationEx(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0, 1, USE_ANIM_TYPE_NONE - 1);
							SetTimerEx("SetPlayerLoaderJobLoad", 1000, false, "i", playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_LOADER_JOB_PUT:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_UNLOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

							RemovePlayerAttachedObject(playerid, A_OBJECT_BONE_SPINE);
							ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 1);

							SetPlayerLoaderJobLoadCP(playerid);

							new fmt_str[256];
							format(fmt_str, sizeof fmt_str, "Материал доставлен на склад! Всего перенесено материалов: {FF9900}%d шт.", GetPlayerJobLoadItems(playerid));
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);
						/*
							AddPlayerData(playerid, P_LOAD_SKILL, +, 1);

							if(GetPlayerData(playerid, P_LOAD_SKILL) >= 30)
							{
							    SendClientMessage(playerid, 0x32a44bAA, "Ваш рабочий навык был повышен");
							}

							UpdatePlayerDatabaseInt(playerid, "load_skill", GetPlayerData(playerid, P_LOAD_SKILL));
						*/

						}
					}
				}
			}
			case CP_ACTION_TYPE_LOADERA_JOB_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADERA)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADERARMY_LOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);

							ClearAnimations(playerid);
							ApplyAnimationEx(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0, 1, USE_ANIM_TYPE_NONE - 1);
							SetTimerEx("SetPlayerLoaderArmyJobLoad", 1000, false, "i", playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_LOADERA_JOB_PUT:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADERA)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADERA_UNLOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

							RemovePlayerAttachedObject(playerid, A_OBJECT_BONE_SPINE);
							ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 1);

							SetPlayerLoaderArmyJobLoadCP(playerid);

							new fmt_str[256];
							format(fmt_str, sizeof fmt_str, "Материал доставлен на склад! Всего перенесено материалов: {FF9900}%d шт.", GetPlayerJobLoadItems(playerid));
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);

							new army_ammo = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT);

							SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT, army_ammo + 50);
							UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);

/*							AddPlayerData(playerid, P_LOAD_SKILL, +, 1);

							if(GetPlayerData(playerid, P_LOAD_SKILL) >= 30)
							{
							    SendClientMessage(playerid, 0x32a44bAA, "Ваш рабочий навык был повышен");
							}

							UpdatePlayerDatabaseInt(playerid, "load_skill", GetPlayerData(playerid, P_LOAD_SKILL));
*/
						}
					}
				}
			}
			case CP_ACTION_TYPE_MINER_JOB_PUT:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER && GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
					{
							new fmt_str[64],
								itemss = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);

							new rand = random(10) + 16;
							new items = GetPlayerJobLoadItems(playerid) + rand;

							RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_SPINE, A_OBJECT_SLOT_HAND + 1);


							RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_SPINE + 1, A_OBJECT_BONE_SPINE);

							ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 1);
							SetPlayerJobLoadItems(playerid, items);

							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);

							format(fmt_str, sizeof fmt_str, "Вы доставили {FF9900}%d кг {32a44b}руды", rand);
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);

							format(fmt_str, sizeof fmt_str, "Общее количество добытого сырья: {FF9900}%d кг", items);
							SendClientMessage(playerid, 0x1E90FFFF, fmt_str);

							format(fmt_str, sizeof fmt_str, "+ %d кг", rand);
							SetPlayerChatBubble(playerid, fmt_str, 0x32a44bFF, 10.0, 2000);

							SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, itemss + rand);
							UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);

							SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

							SetPlayerMinerJobLoadCP(playerid);
					}
			}
			case CP_ACTION_TYPE_MINER_JOB_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_LOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
							SetTimerEx("SetPlayerMinerJobTakeOre", 15_000, false, "ii", playerid, 1);
						}
					}
				}
			}


			case CP_ACTION_TYPE_LUMBERJACK_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_CHOP)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{

							ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 1, USE_ANIM_TYPE_NONE - 1);

							SetTimerEx("SetPlayerLumberJackTakeWood", (random(5) + 10) * 1000, false, "i", playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_FACTORY_PUT:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_PUT_PROD)
					{
						new objectid;
						new items = GetPlayerJobLoadItems(playerid);
						new Float: x, Float: y, Float: z, Float: angle;

						ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0, 0, 1, USE_ANIM_TYPE_NONE);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

						TogglePlayerFactoryCP(playerid, true);
						SetPlayerJobLoadItems(playerid, items + 1);

						AddPlayerData(playerid, P_JOB_WAGE, +, random(15)+15);
						SendClientMessage(playerid, 0xFFFF00FF, "Продукт доставлен на склад");

						RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);

						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);

						//objectid = CreateDynamicObject(1279, x, -200.81883, 1006.51978, 0.9, 0.0, angle);
					//	MoveDynamicObject(objectid, 263.8, -200.81880, 1006.51978, 2.0, 0.9, 0.0, angle);

						Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, OBJECT_TYPE_FACTORY);
					}
				}
			}
			case CP_ACTION_TYPE_LUMBERJACK_PUT:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_PUT)
					{

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 1, 0, 1, 0, 800, 1);

						RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
						//SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);

						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);


						new fmt_str[65];

						format(fmt_str, sizeof fmt_str, "Дрова доставлены на склад! Всего перенесено дров: {FF9900}%d шт", GetPlayerJobLoadItems(playerid));
						SendClientMessage(playerid, 0x32a44bFF, fmt_str);

/*						AddPlayerData(playerid, P_LUMBERG_SKILL, +, 1);

						if(GetPlayerData(playerid, P_LUMBERG_SKILL) >= 30)
						{
						    SendClientMessage(playerid, 0x32a44bAA, "Ваш рабочий навык был повышен");
						}

						UpdatePlayerDatabaseInt(playerid, "lumberg_skill", GetPlayerData(playerid, P_LUMBERG_SKILL));
*/
						SetPlayerLumberJackChopCP(playerid);

						new type = GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT);

						SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT, type + 1);
						UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);
					}
				}
			}
			case CP_ACTION_TYPE_PIZZA_GET:
			{
			    if(!IsPlayerInAnyVehicle(playerid))
				{
				    SetPlayerTempJobState(playerid, TEMP_JOB_STATE_PIZZA_K_DOMY);
				    SetPlayerData(playerid, P_CHECK,0);
				    SendClientMessage(playerid,-1,"[Диспетчер]: {00FF7F} Вы взяли новый заказ! Садитесь на скутер, я продиктую адрес");
				    SetPlayerAttachedObject(playerid, 1 , 2814, 1,0.11,0.36,0.0,0.0,90.0);
				    DisablePlayerCheckpoint(playerid);
				}
			}

			case CP_ACTION_TYPE_PIZZA:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_PIZZA)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_PIZZA_K_DOMY)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 1);
							RemovePlayerAttachedObject(playerid,1);

							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_PIZZA_OT_DOMA);

							SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

							new fmt_str[256];
							format(fmt_str, sizeof fmt_str, "Вы заработали : $%d", GetPlayerJobLoadItems(playerid)*50);
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);

							SetPlayerCheckpoint(playerid,
									2105.3774,
								 	-1806.4456,
								  	13.6034,
									6.0,
									CP_ACTION_TYPE_PIZZA_GET);
							SendClientMessage(playerid,-1,"[Диспетчер]: {00FF7F} Возвращайтесь в пиццерию, у нас новый заказ");
						}
					}
				}
			}
			case CP_ACTION_TYPE_LOADED_CARM, CP_ACTION_TYPE_LOAD_CARGO:
			{
				SendClientMessage(playerid,-1,"{ffff00}[Информация]{FFFFFF} Теперь вам необходимо загрузить ящики со склада в автомобиль/вертолёт.");
				SendClientMessage(playerid,-1,"{ffff00}[Подсказка]{FFFFFF} Для этого возьмите ящик со склада, и подойдите к автомобилю/вертолёту и нажмите H у багажника");
				DisablePlayerCheckpoint(playerid);
			}
			case CP_ACTION_TYPE_UNLOAD_CARM_POL, CP_ACTION_TYPE_UNLOAD_CARM_VMF:
			{
				if GetPlayerVehicleID(playerid) == 0 *then return true;
				SetVehicleData(GetPlayerVehicleID(playerid),V_BAGAGE_AMOUNT_GUN,0);
				SendClientMessage(playerid,-1,"Материалы были успешно разгружены!");
				DisablePlayerCheckpoint(playerid);
			}
			case CP_ACTION_TYPE_FARM_ROUTE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FARM)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FARM_CHOP)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							new route_step = GetPlayerData(playerid, P_FARM_ROUTE_STEP);

							if(g_farm_route[route_step][FRS_POS_X] == 0.0)
							{
								SetPlayerData(playerid, P_FARM_ROUTE_STEP, 0);
							}

							ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 0, 0, 0, 1);
							SetTimerEx("FarmStog", 2500, 0, "d", playerid);

						}
					}
					else if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FARM_PUT)
					{
						SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

						RemovePlayerAttachedObject(playerid, 1);
						ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 1);

						SetPlayerData(playerid, P_FARM_ROUTE_STEP, 0);

						NextFarmRouteCP(playerid);

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FARM_CHOP);

						new fmt_str[256];
						format(fmt_str, sizeof fmt_str, "Стог пшеницы доставлен на склад! Всего перенесено: {FF9900}%d шт.", GetPlayerJobLoadItems(playerid));
						SendClientMessage(playerid, 0x32a44bFF, fmt_str);

						new type = GetRepositoryData(REPOSITORY_TYPE_FARM, REPOSITORY_ACTION_FARM_WOOD, R_AMOUNT);

						SetRepositoryData(REPOSITORY_TYPE_FARM, REPOSITORY_ACTION_FARM_WOOD, R_AMOUNT, type + 13);
						UpdateRepository(REPOSITORY_TYPE_FARM, REPOSITORY_ACTION_FARM_WOOD);

						NextFarmRouteCP(playerid);
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new action_type = GetPlayerRaceCPInfo(playerid, RCP_ACTION_TYPE);
	new vehicleid = GetPlayerVehicleID(playerid);
	new fmt_str[512];


	if(IsPlayerInRaceCheckpoint(playerid))
	{
		switch(action_type)
		{
   		case RCP_ACTION_TYPE_DRIVING_EXAM:
			{
			    new shizik;
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
				{
					new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);
					if(GetPVarInt(playerid, "water_lic"))
					{
					    shizik = 32;
					}
					if(GetPVarInt(playerid, "fly_lic"))
					{
					    shizik = 31;
					}
					else shizik = 26;

					if(step >= shizik - 1)
					{
						ClearPlayerDrivingExamInfo(playerid);
						DisablePlayerRaceCheckpoint(playerid);

						new Float: health = GetPVarFloat(playerid, "car_damage");
						SetPlayerPos(playerid,1438.2700,280.5914,1038.4336);
						DestroyVehicle(GetPlayerData(playerid,P_EXAM_CAR));

						if(health < 900.0)
						{
							SetPlayerData(playerid, P_DRIVING_B, 0);

							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"Экзамен провален",
								"{FFFFFF}К сожалению, Вам не удалось справиться с практической частью экзамена.\n"\
								"Уровень повреждений машины слишком высокий.\n\n"\
								"В сдедующий раз постарайтесь ехать аккуратнее, соблюдая ПДД.\n"\
								"Ждем Вас на пересдаче!",
								"Ок", ""
							);
						}
						else
						{
							new string[380];
						    new query[80];
          					if(GetPVarInt(playerid, "driving_a"))
						    {
						        format(string,sizeof(string),"{FFFFFF}Вы успешно сдали практическую часть экзамена по вождению\n\
									и получаете права категории А!\n\
									{9999FF}На Вашем транспортном средстве не обнаружено никаких повреждений, либо\n\
									они незначительны.\n\
									{FFFFFF}Не забывайте клавиши управления транспортом, а также\n\
									правила дорожного движения. Они будут постоянно нужны\n\
									Вам на дороге. Обучающий раздел в автошколе будет все\n\
									время доступен если понадобится какая-либо помощь.");
								SetPlayerData(playerid, P_DRIVING_A, 1);
						        format(query, sizeof query, "UPDATE accounts SET driving_a=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
						    }
						    else if(GetPVarInt(playerid, "driving_b"))
						    {
						        format(string,sizeof(string),"{FFFFFF}Вы успешно сдали практическую часть экзамена по вождению\n\
									и получаете права категории Б!\n\
									{9999FF}На Вашем транспортном средстве не обнаружено никаких повреждений, либо\n\
									они незначительны.\n\
									{FFFFFF}Не забывайте клавиши управления транспортом, а также\n\
									правила дорожного движения. Они будут постоянно нужны\n\
									Вам на дороге. Обучающий раздел в автошколе будет все\n\
									время доступен если понадобится какая-либо помощь.");
						        SetPlayerData(playerid, P_DRIVING_B, 1);
						        format(query, sizeof query, "UPDATE accounts SET driving_b=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
						    }
      						else if(GetPVarInt(playerid, "driving_c"))
						    {
						        format(string,sizeof(string),"{FFFFFF}Вы успешно сдали практическую часть экзамена по вождению\n\
									и получаете права категории С!\n\
									{9999FF}На Вашем транспортном средстве не обнаружено никаких повреждений, либо\n\
									они незначительны.\n\
									{FFFFFF}Не забывайте клавиши управления транспортом, а также\n\
									правила дорожного движения. Они будут постоянно нужны\n\
									Вам на дороге. Обучающий раздел в автошколе будет все\n\
									время доступен если понадобится какая-либо помощь.");
						        SetPlayerData(playerid, P_DRIVING_C, 1);
                                format(query, sizeof query, "UPDATE accounts SET driving_c=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
						    }
						    else if(GetPVarInt(playerid, "driving_d"))
						    {
						        format(string,sizeof(string),"{FFFFFF}Вы успешно сдали практическую часть экзамена по вождению\n\
									и получаете права категории Д!\n\
									{9999FF}На Вашем транспортном средстве не обнаружено никаких повреждений, либо\n\
									они незначительны.\n\
									{FFFFFF}Не забывайте клавиши управления транспортом, а также\n\
									правила дорожного движения. Они будут постоянно нужны\n\
									Вам на дороге. Обучающий раздел в автошколе будет все\n\
									время доступен если понадобится какая-либо помощь.");
						        SetPlayerData(playerid, P_DRIVING_D, 1);
                                format(query, sizeof query, "UPDATE accounts SET driving_d=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
						    }
						    else if(GetPVarInt(playerid, "water_lic"))
						    {
						        format(string,sizeof(string),"{FFFFFF}Вы успешно сдали практическую часть экзамена\n\
									и получаете права на водный транспорт!\n\
									{9999FF}На Вашем транспортном средстве не обнаружено никаких повреждений, либо\n\
									они незначительны.\n\
									{FFFFFF}Не забывайте клавиши управления транспортом, а также\n\
									правила движения на водном транспорте.");
		        				SetPlayerData(playerid, P_LIC_WATER, 1);
                                format(query, sizeof query, "UPDATE accounts SET lic_water=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
		    				}
		    				else if(GetPVarInt(playerid, "fly_lic"))
						    {
						        format(string,sizeof(string),"{FFFFFF}Вы успешно сдали практическую часть экзамен\n\
									и получаете права на летный транспорт!\n\
									{9999FF}На Вашем транспортном средстве не обнаружено никаких повреждений, либо\n\
									они незначительны.\n\
									{FFFFFF}Не забывайте клавиши управления транспортом, а также\n\
									правила движения на водном транспорте.");
		        				SetPlayerData(playerid, P_LIC_WATER, 1);
                                format(query, sizeof query, "UPDATE accounts SET lic_fly=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
		    				}
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								Dialog
								(
									playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
									"{32a44b}Экзамен пройден успешно",
									string,
									"Ок", ""
								);
							}
							else
							{
								SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, обратитесь к администрации {FF0000}(equ-code 07)");
							}
						}

						DeletePVar(playerid, "driving_a");
						DeletePVar(playerid, "driving_b");
						DeletePVar(playerid, "driving_c");
						DeletePVar(playerid, "driving_d");
						DeletePVar(playerid, "water_lic");
						DeletePVar(playerid, "fly_lic");
						DeletePVar(playerid, "de_route_id");
					}
					else if(step >= 0)
					{
						NextDrivingExamRouteCP(playerid);
					}
				}
			}
			case RCP_ACTION_TYPE_BUS_ROUTE:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
						new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);

						if(g_bus_route[route_id][route_step][BRS_POS_X] == 0.0)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
						}

						if(g_bus_route[route_id][route_step - 1][BRS_STOP])
						{
							DisablePlayerRaceCheckpoint(playerid);

							GameTextForPlayer(playerid, "~r~Stop", 4000, 1);
							SendClientMessage(playerid, 0x32a44bFF, "Остановка. Ждите пассажиров");

							format(fmt_str, sizeof fmt_str, "Автобус по маршруту %s отправляется через 15 секунд", g_bus_routes[route_id][BR_NAME]);
							SendMessageInLocal(playerid, fmt_str, 0x669999FF, 45.0);

							SetTimerEx("NextBusRouteCP", 15_000, false, "i", playerid);
						}
						else
						{
							AddPlayerData(playerid, P_JOB_WAGE, +, random(10) + 5);
							NextBusRouteCP(playerid);

						}
					}
				}
			}
			case RCP_ACTION_TYPE_COMBAINER_ROUT:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_COMBAIN)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_COMBAIN)
					{
						if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_COMBAIN_CHOP)
						{
							new route_step = GetPlayerData(playerid, P_COMBAIN_ROUTE_STEP);

							if(g_combain_route[route_step][CRS_POS_X] == 0.0)
							{
								SetPlayerData(playerid, P_COMBAIN_ROUTE_STEP, 0);
							}

							NextCombainRouteCP(playerid);
						}
						else if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_COMBAIN_PUT)
						{
							SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);

							SetPlayerData(playerid, P_COMBAIN_ROUTE_STEP, 0);

							NextCombainRouteCP(playerid);

							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_COMBAIN_CHOP);

							format(fmt_str, sizeof fmt_str, "Вы разгрузили комбайн с пшеницей! Всего разгружено: {FF9900}%d раз", GetPlayerJobLoadItems(playerid));
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);

							new type = GetRepositoryData(REPOSITORY_TYPE_FARM, REPOSITORY_ACTION_FARM_WOOD, R_AMOUNT);

							SetRepositoryData(REPOSITORY_TYPE_FARM, REPOSITORY_ACTION_FARM_WOOD, R_AMOUNT, type + 1000);
							UpdateRepository(REPOSITORY_TYPE_FARM, REPOSITORY_ACTION_FARM_WOOD);

						}
					}
				}
			}

			case RCP_ACTION_TYPE_LOAD:
			{
				if(vehicleid == GetPlayerData(playerid, P_TRUCK_ID))
				{
				    /*new vehicle_id = GetPlayerData(playerid, P_TRAILER_ID);

					new Float: x, Float: y, Float: z;
					GetVehiclePos(vehicle_id, x, y, z);

					if(IsPlayerInRangeOfPoint(playerid, 20, x, y, z))
					{*/
					SendClientMessage(playerid, 0x3399FFFF, "Вы загрузились, отправляйтесь на разгрузку");

					SetPVarInt(playerid, "stap_truck", 1);

					new rand = random(sizeof g_unload_truck_pos);

					SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						g_unload_truck_pos[rand][0],
						g_unload_truck_pos[rand][1],
						g_unload_truck_pos[rand][2],
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_UNLOAD
					);
					//}
				//	else SendClientMessage(playerid, 0xCECECEFF, "Вы приехали без прицепа, отправляйтесь на его поиски!");
                }
				else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находится в грузовике");
			}

			case RCP_ACTION_TYPE_UNLOAD:
			{
				if(vehicleid == GetPlayerData(playerid, P_TRUCK_ID))
				{
				   /*new vehicle_id = GetPlayerData(playerid, P_TRAILER_ID);

					new Float: x, Float: y, Float: z;
					GetVehiclePos(vehicle_id, x, y, z);

					if(IsPlayerInRangeOfPoint(playerid, 20, x, y, z))
					{*/
					SendClientMessage(playerid, 0x3399FFFF, "Вы разгрузились, отправляйтесь на загрузку.");

					SetPVarInt(playerid, "stap_truck", 0);

					new wage = 7500 + (GetPlayerData(playerid, P_TRUCK_ROAD)*20);

					SetPlayerRaceCheckpoint
					(
						playerid,
						2,
						271.4422,
						1411.5006,
						10.4552,
						0.0,
						0.0,
						0.0,
						4.0,
						RCP_ACTION_TYPE_LOAD
					);

					AddPlayerData(playerid, P_TRUCK_WAGE, +, wage);
					AddPlayerData(playerid, P_TRUCK_ROAD, +, 1);

					format(fmt_str, sizeof fmt_str, "Ваш заработок за данный рейс: {FFFFFF}$7500 + премия: $%d", wage - 7500);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					new query[90];

					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET truck_wage=%d, truck_road=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_TRUCK_WAGE), GetPlayerData(playerid, P_TRUCK_ROAD), GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);
					//}
					//else SendClientMessage(playerid, 0xCECECEFF, "Вы приехали без прицепа, отправляйтесь на его поиски!");
                }
				else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находится в грузовике");
			}

			default:
			{

			}
		}
	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

stock ClearMedBed(playerid, bedid)
{
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		SetPlayerData(playerid, P_OCCUPIED_BED, -1);
	}

	g_med_bed_used[bedid] = false;
	UpdateMedBed(bedid);

	return 1;
}

stock UpdateMedBed(bedid) // обновить койку
{
	new fmt_text[85];

	format(fmt_text, sizeof fmt_text, "Койка №%d\n{32a44b}Свободна\n\n{AAAAAA}Используйте /medbed\nчтобы занять ее", bedid + 1);
	UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFFF, fmt_text);

	return 1;
}

public: HospitalTreatment()
{
	for(new playerid; playerid < MAX_PLAYERS; playerid ++)
	{
		if(!IsPlayerConnected(playerid)) continue;
		else if(!IsPlayerLogged(playerid)) continue;
		else if(GetPlayerData(playerid, P_OCCUPIED_BED) == -1) continue;
		SendClientMessage(playerid, -1, "До проверки на радиус");
		if(!IsPlayerInRangeOfPoint(playerid, 170.0, 1362.7057,-166.8792,967.5167)) return ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
		if(GetPlayerPremium(playerid) <= 0)
		{
		    SendClientMessage(playerid, -1, "Если випки нет, то даем 1 хп");
			GameTextForPlayer(playerid, "~g~~h~~h~+ 1 HP", 1000, 4);
			SetPlayerChatBubble(playerid, "+1 hp", 0x33CC33FF, 5.0, 1000);
			new Float:gethp;
			GetPlayerHealth(playerid, gethp);
			SetPlayerHealth(playerid, gethp +1);
		}
        if(GetPlayerPremium(playerid) > 1)
		{
		    SendClientMessage(playerid, -1, "Если випка есть, то даем 2 хп");
			GameTextForPlayer(playerid, "~g~~h~~h~+ 2 HP", 1000, 4);
			SetPlayerChatBubble(playerid, "+2 hp", 0x33CC33FF, 5.0, 1000);
			new Float:gethp;
			GetPlayerHealth(playerid, gethp);
			SetPlayerHealthEx(playerid, gethp +2);
		}
		new Float:heal;
		GetPlayerHealth(playerid, heal);
		if(heal >= 95.0)
		{

			SendClientMessage(playerid, 0x32a44bFF, "Курс лечения пройден");
			SendClientMessage(playerid, -1, "Вы были выписаны из больницы");
			ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			SetPlayerChatBubble(playerid, "Выписан", 0x32a44bFF, 10.0, 2000);
			new query[90];
			SetPlayerData(playerid, P_HOSPITAL, false);
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET hospital=0 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
			mysql_query(mysql, query, false);
		    return 1;
		}
	}
	SetTimer("HospitalTreatment", (random(5) + 1) * 1000, false);
	return 1;
}

stock UpdateFish(fishid) // обновить место для ловои рыбы
{
	new fmt_text[167];

	format(fmt_text, sizeof fmt_text, "Удочка {ffff00}№%d\n{FFFFFF}Аренда: {32a44b}$250\n{ffff00}Свободна\n /fish", fishid + 1);
	UpdateDynamic3DTextLabelText(g_fish_pos_label[fishid], 0xFFFFFFFF, fmt_text);

	return 1;
}


stock ClearFish(playerid, fish)
{
	if(GetPlayerData(playerid, P_USED_FISH) != -1)
	{
		SetPlayerData(playerid, P_USED_FISH, -1);
	}

	g_fish_pos_used[fish] = false;
	UpdateFish(fish);

	return 1;
}

stock UpdateShop(shopid) // обновить место для продажи товаров (лавка)
{
	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "Лавка {ffff00}№%d\n{ffff00}Свободна\n\n{FFFFFF}введите: {32a44b}/shop\n{FFFFFF}чтобы занять её ($1000)", shopid + 1);
	UpdateDynamic3DTextLabelText(g_shop_pos_label[shopid], 0xFFFFFFFF, fmt_text);

	return 1;
}


stock ClearShop(playerid, shop)
{
	if(GetPlayerData(playerid, P_USED_SHOP) != -1)
	{
		SetPlayerData(playerid, P_USED_SHOP, -1);
	}

	g_shop_pos_used[shop] = false;
	UpdateShop(shop);

	return 1;
}

public: OnPlayerShoot(playerid)
{
	if(GetPVarInt(playerid, "shoot_sleep"))
	return 0;

	new Float: range = 100.0;

	new slot_id = player_weapon_slot[playerid];

	if(slot_id == -1)
		return -1;

	new Float: player_x,
		Float: player_y,
		Float: player_z,
		Float: player_a,
		Float: target_x,
		Float: target_y,
		Float: target_z,
		p_zI,
		p_aI;

	GetPlayerPos(playerid, player_x, player_y, player_z);
	GetPlayerFacingAngle(playerid, player_a);

	foreach(new i : Player)
	{
		if(i == playerid) continue;

		if(!IsPlayerConnected(i)) continue;

		if(!IsPlayerLogged(i)) continue;

		if(!IsPlayerInRangeOfPoint(i, range, player_x, player_y, player_z)) continue;

		GetPlayerPos(i, target_x, target_y, target_z);

		player_z = 180-atan2(player_x-target_x, player_y-target_y);
		p_zI=floatround(player_z, floatround_round);
		p_aI=floatround(player_a, floatround_round);
		printf("a: %d z: %d z-a: %d", p_aI, p_zI, p_zI - p_aI);

		if(p_zI != p_aI && (p_zI - p_aI > 3 || p_zI - p_aI < -3)) continue;

		SetPVarInt(playerid, "shoot_sleep", 1);

		if(player_weapon[playerid][slot_id][PW_WEAPON] != 200)
			player_weapon[playerid][slot_id][PW_CHARGED]--;

		new weapon_index = GetWeaponIndex(player_weapon[playerid][slot_id][PW_WEAPON]);

		if(player_weapon[playerid][slot_id][PW_CHARGED] == 0)
		{
			new c_ammo = (player_weapon[playerid][slot_id][PW_AMMO] >= weapon_info[weapon_index][WI_MAX_AMMO]) ? (weapon_info[weapon_index][WI_MAX_AMMO]) : (player_weapon[playerid][slot_id][PW_AMMO]);

			player_weapon[playerid][slot_id][PW_CHARGED] = c_ammo;
			player_weapon[playerid][slot_id][PW_AMMO] -= c_ammo;

			SetTimerEx("ShootingSleep", weapon_info[GetWeaponIndex(player_weapon[playerid][slot_id][PW_WEAPON])][WI_RELOAD_TIME], false, "d", playerid);
			GameTextForPlayer(playerid, "~r~reloading...", weapon_info[weapon_index][WI_RELOAD_TIME], 4);
		}
		else SetTimerEx("ShootingSleep", weapon_info[GetWeaponIndex(player_weapon[playerid][slot_id][PW_WEAPON])][WI_SHOT_INTERVAL], false, "d", playerid);

		ApplyAnimation(playerid, "PED", "GUN_STAND", 6.0, 1, 1, 1, 1, 0, 1);

		GetPlayerFacingAngle(playerid, player_a);
		//player_weapon_object[playerid] = CreateDynamicObject(weapon_info[GetWeaponIndex(player_weapon[playerid][slot_id][PW_WEAPON])][WI_OBJECT], player_x - 0.256 * -floatsin(player_a, degrees), player_y + 0.284 * floatcos(player_a, degrees), player_z + 0.203, 0.0, 0.0, player_a - 90.0);

		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		PlayerPlaySound(i, 1136, 0.0, 0.0, 0.0);

		SetPlayerFacingAngle(playerid, GetAngleToPoint(player_x, player_y, target_x, target_y) + 180.0);

		if(player_weapon[playerid][slot_id][PW_WEAPON] != 200)
		{
			//if(-1.2 <= dist <= 1.2)
			//if(GetPlayerDistanceFromPoint(playerid,x,y,z))
			//{
			new Float: target_health;

			GetPlayerHealth(i, target_health);

			SetPlayerHealthEx(i, target_health - weapon_info[weapon_index][WI_DAMAGE]);

			break;
			//}
		}
		else
		{
			SetPlayerAnimation(playerid, 21);
			TogglePlayerControllable(playerid, false);

			SetTimerEx("UnfreezePlayer", 15000, false, "i", playerid);

			new fmt_text[90];

			format(fmt_text, sizeof fmt_text, "?? ???????? %s ?? 15 ??????", GetPlayerNameEx(i));
			SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "%s ??????? ??? ?? 15 ??????", GetPlayerNameEx(playerid));
			SendClientMessage(i, 0x1E90FFFF, fmt_text);

			break;
		}

		// else printf("[bullet vector] long distance: %.1f m", dist);
	}

	return 1;
}

public: ShootingSleep(playerid)
{
	DeletePVar(playerid, "shoot_sleep");

	//DestroyDynamicObject(player_weapon_object[playerid]);

	ClearAnimations(playerid);

	return 1;
}

public: UnfreezePlayer(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);

	return 1;
}

public: OnPlayerChangeWeapon(playerid, weaponid)
{
	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_NECK);

	new player_tint = GetPlayerData(playerid, P_WEAPON_TINT)[ GetTintIDByWeapon(weaponid) ];

	if(player_tint)
		SetPlayerWeaponTint(playerid, weaponid, player_tint);
}

stock SetPlayerWeaponTint(playerid, weaponid, player_tint)
{
	new tintid = GetTintIDByWeapon(weaponid);

	SetPlayerAttachedObject
	(
		playerid,
		A_OBJECT_SLOT_NECK,
		GetWeaponTintData(tintid, WT_OBJECT),
		A_OBJECT_BONE_RIGHT_HAND,
		GetWeaponTintData(tintid, WT_X),
		GetWeaponTintData(tintid, WT_Y),
		GetWeaponTintData(tintid, WT_Z),
		GetWeaponTintData(tintid, WT_RX),
		GetWeaponTintData(tintid, WT_RY),
		GetWeaponTintData(tintid, WT_RZ),
		GetWeaponTintData(tintid, WT_SCALE_X),
		GetWeaponTintData(tintid, WT_SCALE_Y),
		GetWeaponTintData(tintid, WT_SCALE_Z),
		GetWeaponTint(player_tint)
	);

	return 1;
}

stock GetTintIDByWeapon(weaponid)
{
	new tint;

	switch(weaponid)
	{
		case 22: tint = 0;
		case 23: tint = 1;
		case 24: tint = 2;
		case 25: tint = 3;
		case 27: tint = 4;
		case 28: tint = 5;
		case 29: tint = 6;
		case 30: tint = 7;
		case 31: tint = 8;
		case 32: tint = 9;
		case 33: tint = 10;
		case 35: tint = 11;
		case 36: tint = 12;
		case 38: tint = 13;
	}

	return tint;
}

stock GetWeaponIDByTint(tintid)
{
	new weapon;

	switch(tintid)
	{
		case 0: weapon = 22;
		case 1: weapon = 23;
		case 2: weapon = 24;
		case 3: weapon = 25;
		case 4: weapon = 27;
		case 5: weapon = 28;
		case 6: weapon = 29;
		case 7: weapon = 30;
		case 8: weapon = 31;
		case 9: weapon = 32;
		case 10: weapon = 33;
		case 11: weapon = 35;
		case 12: weapon = 36;
		case 13: weapon = 38;
	}

	return weapon;
}

public: ShowBuyCarInfo(playerid, vehicleid)
{
	new text[275];

	//static const vehicle_class_name[][] = {"Мото-вело", "Эконом", "Средний", "Премиум"};

	new modelid = GetVehicleModel(vehicleid) - 400;
	format
	(
		text, sizeof text,
		"{FFFFFF}Название:\t\t%s\n\
		Номер модели:\t%d\n\
		Стоимость аренды:\t{FFFF00}$%d\n\
		{FFFFFF}Стоимость покупки:\t{32a44b}$%d\n\n\
		{FFFFFF}Для покупки этой модели нажмите \"Купить\"\n\
		Чтобы взять авто в аренду используйте /rentcar",
		GetVehicleInfo(modelid, VI_NAME),
		modelid + 400,
		GetVehicleInfo(modelid, VI_PRICE) / 10,
		GetVehicleInfo(modelid, VI_PRICE) * 3
	);

	Dialog(playerid, DIALOG_BIZ_CAR_MARKET_CAR_INFO, DIALOG_STYLE_MSGBOX, "Рынок", text, "Купить", "Выйти");

	SetPVarInt(playerid, "buycar_dialog", 1);

	return 1;
}

stock ExitPlayerBuyCarMarket(playerid)
{
	if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return -1;

	DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
	SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);

	new biz_id = GetPlayerInBiz(playerid);

	TogglePlayerControllable(playerid, true);

	SetPlayerPosEx(playerid, 9.6948, -28.2245, 1086.0945, 88.0005, 5, biz_id + 6000);

	return 1;
}

stock CarMarketShowNextCar(playerid, next = '+')
{
	new biz_id = GetPlayerInBiz(playerid);
	new car_market_id = biz_id - 33;

	if(biz_id == -1 || GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET) return 1;

	new max_car_index = GetCarMarketMaxIndex(car_market_id);

	if(next == '+')
	{
		if(++buy_car_select_car[playerid] > max_car_index)
			buy_car_select_car[playerid] = 0;
	}
	else
	{
		if(--buy_car_select_car[playerid] < 0)
			buy_car_select_car[playerid] = max_car_index;
	}

	new select_car = buy_car_select_car[playerid];
	new color_1 = buy_car_select_color[playerid][0];
	new color_2 = buy_car_select_color[playerid][1];

	DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
	SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(car_market_data[car_market_id][select_car][0], 147.7250, -82.9883, 1001.8265, 180.0, color_1, color_2, 5));
	SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
	LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 5);

	CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	return 1;
}

stock GetCarMarketMaxIndex(market_id)
{
	new max_index;

	for(new idx; idx < 31; idx ++)
	{
		if(car_market_data[market_id][idx][0] == 0)
			break;

		++ max_index;
	}

	return max_index - 1;
}

public: ChangeColorPTDUpdate(playerid)
{
	return 1;
}

public OnPlayerPickUpPickupEx(playerid, pickupid, action_type, action_id)
{
	if(action_type != PICKUP_ACTION_TYPE_TELEPORT && GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		return 0;
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
	{
		SetPlayerData(playerid, P_LAST_PICKUP, pickupid);

		switch(action_type)
		{
			case PICKUP_ACTION_TYPE_TELEPORT:
			{
				if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
				{
					switch(GetTeleportData(action_id, T_ACTION_TYPE))
					{
						case T_ACTION_TYPE_BLOCK_LEAVE_AREA:
						{
							SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, true);
						}
						case T_ACTION_TYPE_END_JOB:
						{
							EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
						}
						case T_ACTION_TYPE_LEAVE_HOSPITAL:
						{
							if(GetPlayerData(playerid, P_HOSPITAL))
							{
							    new Float:heal;
							    GetPlayerHealth(playerid, heal);
								if(heal < 70) return SendClientMessage(playerid, -1, "Медперсонал не может отпустить Вас в таком состоянии. Отправляйтесь на лечение");
								else if(GetPlayerData(playerid, P_OCCUPIED_BED) == -1)
								{
									SendClientMessage(playerid, 0x32a44bFF, "Вы выписались из больницы");
									ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
								}
								SetPlayerData(playerid, P_HOSPITAL, false);
							}
						}
						case T_ACTION_TYPE_LEAVE_PPS:
						{
							if(GetPlayerData(playerid, P_JAIL))
							{
								SendClientMessage(playerid, 0xCECECEFF, "Время заключения не истекло");

								SetPlayerSpawnPos(playerid);

								return 1;
							}
						}
						case T_ACTION_TYPE_ENTER_PHOTO:
						{
                            if(GetPlayerData(playerid, P_PASS_PHOTO) == 1 || GetPlayerData(playerid, P_PASS) == 1)
                            {
			        			return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} У вас уже есть фотографии!");
							}
						}
					}

					SetPlayerPosEx
					(
						playerid,
						GetTeleportData(action_id, T_POS_X),
						GetTeleportData(action_id, T_POS_Y),
						GetTeleportData(action_id, T_POS_Z),
						GetTeleportData(action_id, T_ANGLE),
						GetTeleportData(action_id, T_INTERIOR),
						GetTeleportData(action_id, T_VIRTUAL_WORLD)
					);
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_ENTER:
			{
				if(GetPlayerInBiz(playerid) == -1)
				{
					if(IsBusinessNoEnter(action_id)) return SendClientMessage(playerid, 0xCECECEFF, "В данный тип бизнеса нельзя зайти.");
					new i_paid_biz = GetPlayerUseListitem(playerid);

					if(GetBusinessData(action_id, B_EXIT_POS_X) == 0.0)
						return GameTextForPlayer(playerid, "~w~business~n~~r~closed", 4000, 1);

					if(IsBusinessOwned(action_id))
					{
						if(GetBusinessData(action_id, B_OWNER_ID) != GetPlayerAccountID(playerid))
						{
							if(GetBusinessData(action_id, B_LOCK_STATUS))
								return GameTextForPlayer(playerid, "~w~business~n~~r~closed", 4000, 1),SendClientMessage(playerid, -1,"Закрыт");

							if(GetBusinessData(action_id, B_ENTER_PRICE) > 0 && i_paid_biz != action_id)
							{
								new fmt_str[128];
								SetPVarInt(playerid, "biz_enter", action_id + 1);

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Вход платный и составляет {FF9900}$%d\n"\
									"{99FF00}Вы уверены что хотите войти сюда?",
									GetBusinessData(action_id, B_ENTER_PRICE)
								);
								return Dialog(playerid, DIALOG_BIZ_ENTER, DIALOG_STYLE_MSGBOX, GetBusinessInteriorInfo(GetBusinessData(action_id, B_INTERIOR), BT_NAME), fmt_str, "Да", "Нет");
							}
						}
					}
					EnterPlayerToBiz(playerid, action_id);
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_EXIT:
			{
			    SendClientMessage(playerid, -1,"Пикап выхода из биз");
				new in_biz = GetPlayerInBiz(playerid);
				if(in_biz != -1)
				{
				    SendClientMessage(playerid, -1,"В бизнесе");
					new type = GetBusinessData(in_biz, B_INTERIOR);
					if(action_id == type)
					{
						SetPlayerPosEx
						(
							playerid,
							GetBusinessData(in_biz, B_EXIT_POS_X),
							GetBusinessData(in_biz, B_EXIT_POS_Y),
							GetBusinessData(in_biz, B_EXIT_POS_Z),
							GetBusinessData(in_biz, B_EXIT_ANGLE),
							0,
							0
						);
						SetPlayerInBiz(playerid, -1);
						SendClientMessage(playerid, -1,"Выход....");
					}
				}
			}
			case PICKUP_ACTION_BUY_NARKO:
			{
			    Dialog(playerid,DIALOG_BUY_NARKO,DIALOG_STYLE_INPUT,
				"Нарко",
				"-Барыга: ты за товаром?\n\
				-Ты: Да , а чё по чем?\n\
				-Барыга: 10$ за грамм\n\
				-Ты: шмаль нормальная?\n\
				-Барыга: Обижаешь! Сколько тебе?\n\n\
				Введите количество грамм которое хотите купить"
				,"Далее","Отмена");
			}
			case PICKUP_ACTION_RENT_BOARD:
			{
			    if(GetPlayerLevel(playerid) < 2)
			        return SendClientMessage(playerid,-1,"{6699FF} Арендовать рекламный щит можно с {1E90FF}3 уровня");

				new count = 0;
    			g_business_realtor_list = "";
				for(new idx; idx < g_board_created; idx ++)
				{
    				if(GetBoardData(idx, B_OWNER) != -1) continue;
					g_business_realtor_list_idx[count ++] = idx;

					format(s_string, sizeof s_string, "{ffffff}Рекламный щит №{ffff00}%d\n", idx);
					strcat(g_business_realtor_list, s_string);
				}
    			strcat(g_business_realtor_list, "\n Внимание! Просмотр рекламного щита стоит {ffff00}250$");
			    Dialog(playerid,DIALOG_SELECT_BOARD,DIALOG_STYLE_LIST,"{1E90FF}Выбор",g_business_realtor_list,"Далее","Отмена");
			}
			case PICKUP_ACTION_TYPE_ATM:
			{
				ShowPlayerATMDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_BANK:
			{
				if(action_id)
				{
					cmd::bank(playerid, "");
				}
				else ShowPlayerPayForRentDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_TEMP_JOB:
			{
				new job = GetPlayerTempJob(playerid);
				if(job != action_id && IsPlayerInJob(playerid) || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE)
				{
					job = TEMP_JOB_NONE - 1;
				}
				if(GetPlayerTeamEx(playerid) != 0) return SendClientMessage(playerid, -1, "Вы состоите в организации!");
				switch(action_id)
				{
					case TEMP_JOB_LOADER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LOADER_START, DIALOG_STYLE_MSGBOX,
								"Работа грузчика",
								"{FFFFFF}Вы хотите устроиться на работу грузчиком?",
								"Да", "Нет"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LOADER_END, DIALOG_STYLE_MSGBOX,
								"Работа грузчика",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
					}
					case TEMP_JOB_LOADERA:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LOADERA_START, DIALOG_STYLE_MSGBOX,
								"Работа грузчика",
								"{FFFFFF}Вы хотите устроиться на работу грузчиком?",
								"Да", "Нет"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LOADERA_END, DIALOG_STYLE_MSGBOX,
								"Работа грузчика",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
					}
					case TEMP_JOB_MINER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_MINER_START, DIALOG_STYLE_MSGBOX,
								"Работа шахтера",
								"{FFFFFF}Вы хотите устроиться на работу шахтера?",
								"Да", "Нет"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_MINER_END, DIALOG_STYLE_MSGBOX,
								"Работа шахтера",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
					}
					case TEMP_JOB_FACTORY_TRUCKER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
								"Завод",
								"{FFFFFF}Вы хотите начать работу в отделе доставки исходных материалов?",
								"Да", "Нет"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
								"Завод",
								"{FFFFFF}Закончить работу в отделе доставки исходных материалов?",
								"Да", "Нет"
							);
						}
					}
					case TEMP_JOB_FACTORY:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
								"Завод",
								"{FFFFFF}Вы хотите начать работу в производственном цеху?",
								"Да", "Нет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
								"Завод",
								"{FFFFFF}Закончить работу в производственном цеху?",
								"Да", "Нет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В данный момент устроиться на эту работу нельзя");
					}
					case TEMP_JOB_LUMBERJACK:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LUMBERJACK_ST, DIALOG_STYLE_MSGBOX,
								"Работа лесоруба",
								"{FFFFFF}Вы хотите устроиться на работу лесоруба?",
								"Да", "Нет"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LUMBERJACK_END, DIALOG_STYLE_MSGBOX,
								"Работа лесоруба",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
					}
					case TEMP_JOB_FARM:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FARM_ST, DIALOG_STYLE_MSGBOX,
								"Работа фермера",
								"{FFFFFF}Вы хотите устроиться на работу фермера?",
								"Да", "Нет"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FARM_END, DIALOG_STYLE_MSGBOX,
								"Работа фермера",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
					}
					case TEMP_JOB_COMBAIN:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_COMBAIN_ST, DIALOG_STYLE_MSGBOX,
								"Работа комбайнера",
								"{FFFFFF}Вы хотите устроиться на работу комбайнера?\nВам потребуется - {ffff00}3-ий игровой уровень.",
								"Да", "Нет"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_COMBAIN_END, DIALOG_STYLE_MSGBOX,
								"Работа комбайнера",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}
					}
				case TEMP_JOB_PIZZA:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_PIZZA_ST, DIALOG_STYLE_MSGBOX,
								"Развозчик пиццы",
								"{FFFFFF}Вы хотите устроиться на работу развозчика пиццы?",
								"Да", "Нет"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_PIZZA_END, DIALOG_STYLE_MSGBOX,
								"Развозчик пиццы",
								"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
								"Да", "Нет"
							);
						}

				}
				}
			}
			case PICKUP_ACTION_TYPE_INFO_PICKUP:
			{
				Dialog
				(
					playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
					GetInfoPickupData(action_id, IP_TITLE),
					GetInfoPickupData(action_id, IP_INFO),
					"Ок", ""
				);
			}
			case PICKUP_ACTION_TYPE_MINER_SELL_M:
			{
				ShowPlayerBuyMetalDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_FACTORY_MET:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
				{
					new j_state = GetPlayerTempJobState(playerid);
					switch(j_state)
					{
						case TEMP_JOB_STATE_FACTORY_TAKE_MET:
						{
							new factory_metal = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT);
							new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

							new take_metall = random(2) + 1;
							if(factory_metal > take_metall && factory_fuel > (take_metall * 2))
							{
								SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, factory_metal - take_metall);
								UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);

								new fmt_str[16];
								SetPVarInt(playerid, "factory_take_metall", take_metall);

								format(fmt_str, sizeof fmt_str, "~b~~h~+%d kg", take_metall);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);

								SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATE_P);
							}
							else GameTextForPlayer(playerid, "~r~no fuel or metal", 4000, 1);
						}
						case TEMP_JOB_STATE_FACTORY_CREATE_P:
						{
							SendClientMessage(playerid, 0xCECECEFF, "Вы уже взяли металл");
						}
					}
				}
			}
			case PICKUP_ACTION_TYPE_PUT_PROD:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_PUT_PROD)
					{
						new objectid;
						new items = GetPlayerJobLoadItems(playerid);
						new Float: x, Float: y, Float: z, Float: angle;

						ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0, 0, 1, USE_ANIM_TYPE_NONE);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

						TogglePlayerFactoryCP(playerid, true);
						SetPlayerJobLoadItems(playerid, items + 1);

						AddPlayerData(playerid, P_JOB_WAGE, +, random(15)+15);
						SendClientMessage(playerid, 0xFFFF00FF, "Продукт доставлен на склад");

						RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);

						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);

						//objectid = CreateDynamicObject(1279, x, -200.81883, 1006.51978, 0.9, 0.0, angle);
					//	MoveDynamicObject(objectid, 263.8, -200.81880, 1006.51978, 2.0, 0.9, 0.0, angle);

						Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, OBJECT_TYPE_FACTORY);
					}
				}
			}
			case PICKUP_ACTION_TYPE_FUEL_STATION:
			{
				ShowPlayerBuyJerricanDialog(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_BIZ_HEALTH:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(businessid == action_id)
					{
    					if(GetPlayerHealthEx(playerid) >= 75.0)
						{
							return SendClientMessage(playerid, 0xCECECEFF, "Вы не нуждаетесь в лечении");
						}
						new time = gettime();
						if(GetPVarInt(playerid, "biz_health_use") <= time)
						{
							new price = BIZ_HEALTH_SERVICE_PRICE;
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								new query[155];

								format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS) > 0 ? GetBusinessData(businessid, B_PRODS)-1 : 0, GetBusinessData(businessid, B_PRODS) > 0 ? GetBusinessData(businessid, B_BALANCE)+price : 0, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -price, "Использование аптечки в бизнесе", false, true);

									if(GetBusinessData(businessid, B_PRODS) >= 1)
									{
										AddBusinessData(businessid, B_PRODS, -, 1);
										AddBusinessData(businessid, B_BALANCE, +, price);
										AddBusinessData(businessid, B_BALANCE_DAY, +, price);
									}
									SetPlayerHealthEx(playerid, 99.0);
									SetPVarInt(playerid, "biz_health_use", time + 300); // 300 сек (5 минут)

									mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), time, price, IsBusinessOwned(businessid));
									mysql_query(mysql, query, false);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 24)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Услуги медпункта стоят 150$");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Недавно Вы уже пользовались услугами медпункта");

						// SetPlayerHealthEx(playerid, 95.0);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_SHOP_247:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_SHOP_24_7)
					{
						cmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_MC:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_MCDONALDS)
					{
						cmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_SHOP_GUN:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_SHOP_GUN)
					{
						cmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_DRIVER:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_AUTOSCHOOL)
					{
						cmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_SPORTZAL:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_SPORTZAL)
					{
						cmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_SET_HINT:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_MEBEL)
					{
						cmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_CELL_SALON:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_CELL_SALON)
					{
						cmd::buy(playerid, "");
					}
				}
			}
			case PICKUP_ACTION_TYPE_HOUSE:
			{
				ShowPlayerHouseInfo(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_HOUSE_HEALTH:
			{
				new houseid = GetPlayerInHouse(playerid);
				if(houseid != -1)
				{
					new type = GetHouseData(houseid, H_TYPE);

					if(IsPlayerInRangeOfPoint(playerid, 4.0, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z)))
					{
						SetPlayerHealthEx(playerid, 100.0);
						GameTextForPlayer(playerid, "~b~~h~100 hp", 3000, 1);
					}
				}
			}
			case PICKUP_ACTION_TYPE_REALTOR_HOME:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_REALTOR_HOME)
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"Номера свободных домов",
							g_house_realtor_list,
							"Закрыть", ""
						);
					}
				}
			}
			case PICKUP_ACTION_TYPE_RENT_TRUCK:
			{
			    if(!GetPlayerData(playerid, P_TRUCK_ATWORK)) return SendClientMessage(playerid, 0xCECECE, "Вы не дальнобойщик! Или не начали рабочий день! ( устроиться можно в мэрии )") , SendClientMessage(playerid, -1, "Начать рабочий день /job");

			    if(GetPlayerData(playerid, P_TRUCK_ID) != INVALID_VEHICLE_ID) return SendClientMessage(playerid, 0xCECECE, "Вы уже арендовали грузовик");

				Dialog
				(
					playerid, DIALOG_TRUCK_RENT, DIALOG_STYLE_LIST,
					"Аренда грузовика",
					"{ffff00}1. {FFFFFF}Boxville - 1 уровень ($5000)\n"\
					"{ffff00}2. {FFFFFF}Yanki - 5 уровень ($10000)\n"\
					"{ffff00}3. {FFFFFF}Truck - 10 уровень ($25000)",
					"Выбрать", "Закрыть"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_CLOTHING:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_CLOTHING_SHOP)
					{
						ShowPlayerClothingShopPanel(playerid);
					}
				}
			}
			case PICKUP_ACTION_TYPE_CASINO_FORT:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_CASINO)
					{
						Dialog(playerid,DIALOG_CASINO_FORTUNA,DIALOG_STYLE_MSGBOX,
						"Колесо фортуны",
						"Простые правила, удача и везенье — это то что нужно для мгновенной победы!\n\
						Не удивительно, что игра \"Колесо фортуны\" столь популярна среди наших посетителей.\n\
						Мы предлагаем тебе проверить удачу - получить моментальные бонус-призы, либо стать обладателем ценных подарков\n\
					 	Которые мы разыгрываем и отдаем прямо в руки нашим победителям!","Далее",""
					);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_MARK:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_CAR_MARKET, DIALOG_STYLE_MSGBOX,
					"Покупка транспорта",
					"{FFFFFF}На территории авторынка могут находиться не все модели транспорта, которые\n\
					можно приобрести (некоторые отсутствуют из-за того, что их взяли на прокат)\n\
					Нажмите кнопку \"Далее\" чтобы посмотреть весь доступный для покупки транспорт",
					"Далее", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_ENT:
			{
				SetPlayerPosEx(playerid, 5.4881, -27.7033, 1085.9291, 180.0, _, _, false);
				SetCameraBehindPlayer(playerid);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_EXI:
			{
				SetPlayerPosEx(playerid, 5.4975, -26.3967, 1080.9968, 180.0, _, _, false);
				SetCameraBehindPlayer(playerid);
			}
			case PICKUP_ACTION_TYPE_GET_FAMILY:
			{
				if(!(g_family_loaded >= MAX_FAMILY))
				{
		    		Dialog
					(
						playerid, DIALOG_CREATE_FAMILY, DIALOG_STYLE_INPUT,
						"Создание семьи",
						"{FFFFFF}Решил создать семью?\nВот что тебе требуется:\n{32a44b}- $2.500.000\n- 10 уровень\n\
						{FFFFFF}Введите название семьи, и нажмите 'Создать'",
						"Создать", "Отмена"
					);
				}
			}
			case PICKUP_ACTION_TYPE_GET_CAR_NUM:
			{
				if(GetPlayerOwnableCar(playerid) == INVALID_VEHICLE_ID)
				{
					if(GetPlayerOwnableCars(playerid) == 0)
						SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного транспорта");
					else
						SendClientMessage(playerid, 0xCECECEFF, "Ваш личный транспорт не загружен на сервер");
				}
				else
				{
					new vehicleid = GetPlayerOwnableCar(playerid),
						index = GetVehicleData(vehicleid, V_ACTION_ID);

					if(!strcmp(g_ownable_car[index][OC_NUMBER], "------"))
					{
						Dialog
						(
							playerid, DIALOG_OWNABLE_CAR_NUMBER, DIALOG_STYLE_MSGBOX,
							"Получение номеров",
							"{FFFFFF}Стоимость покупки номеров для Вашего ТС составит 5000$",
							"Купить", "Выйти"
						);
					}
					else
						SendClientMessage(playerid, 0xCECECEFF, "На Вашем ТС уже есть номерные знаки");
				}
			}
			case PICKUP_ACTION_BUYLIC:
			{
			    if(!GetPlayerData(playerid, P_PASS))
	    			return SendClientMessage(playerid, 0xCECECEFF, "У вас нет паспорта,получите его в мэрии");

				Dialog(playerid,DIALOG_TYPE_BUYLIC,DIALOG_STYLE_MSGBOX,
				"{FF9900}Подтверждение",
				"Вы действительно хотите купить лицензию на бизнес?\n\
			 	{FF9900}Необходим 5-ый уровень и 800.000$ на руках.",
				"Купить","Отказаться");
				return 1;
			}
			case PICKUP_ACTION_GET_MED:
			{
				Dialog(playerid,DIALOG_TYPE_GET_MED,DIALOG_STYLE_MSGBOX,
				"{FF9900}Больница",
				"Получение медецинской справки\n\
			 	Для получения медецинской справки вы должно быть {ffff00}здоровы!",
				"Взять","");
				return 1;
			}
			case PICKUP_ACTION_PASS_PHOTO:
			{
			    if(GetPlayerData(playerid, P_PASS_PHOTO))
			        return SendClientMessage(playerid,-1,"У вас уже есть фото!");
				SetPlayerFacingAngle(playerid, 90.0);
				SetPlayerCameraPos(playerid, 763.7852, 1.3839, 1016.6224);
				SetPlayerCameraLookAt(playerid, 764.7839, 1.3985, 1016.4139);
				SetTimerEx("PassPhoto", 2000, false, "i", playerid);
				return 1;
			}
			case PICKUP_ACTION_TYPE_GANG_REPOSIT:
			{
				if(GetPlayerTeamEx(playerid) != (action_id + TEAM_GANG_GROVE - 1))
					return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа к этому складу");

				Dialog
				(
					playerid, DIALOG_GANG_REPOSITORY, DIALOG_STYLE_LIST,
					"Склад банды",
					"\
					{32a44b}1. Положить наркотики\n\
					{32a44b}2. Положить патроны\n\
					{32a44b}3. Положить металл\n\
					{32a44b}4. Положить деньги\n\
					5. Взять наркотики\n\
					6. Взять патроны\n\
					7. Взять металл\n\
					8. Взять деньги\n\
					",
					"Выбрать", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_ARMORY:
			{
				switch(action_id)
				{
					case ARMORY_TYPE_ARMOR:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_ARMY)
							return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа к этому");

						new Float: armour;

						GetPlayerArmour(playerid, armour);

						if(armour > 20.0)
							return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть бронежилет");

						SetPlayerArmour(playerid, 100.0);
					}
					case ARMORY_TYPE_SECURITY:
					{
						if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT)
							return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа к этому");

						if(!(1 <= GetPlayerJob(playerid) <= 3))
							return SendClientMessage(playerid, 0xCECECEFF, "Оружейный склад доступен только сотрудникам службы охраны");

						Dialog
						(
							playerid, DIALOG_ARMORY, DIALOG_STYLE_LIST,
							"Оружейный склад",
							"1. Взять дубинку\n"\
							"2. Взять маску\n"\
							"3. Взять бронежилет\n"\
							"4. Взять пистолет с глушителем\n"\
							"5. Взять Desert Eagle\n"\
							"6. Взять MP5\n"\
							"7. Взять дробовик",
							"Взять", "Отмена"
						);
					}
					case ARMORY_TYPE_POLICE:
					{
						new armory_index;

						switch(GetPlayerVirtualWorld(playerid))
						{
							case 5: armory_index = 0;
							case 6: armory_index = 1;
							case 17: armory_index = 2;
						}

						if(GetPlayerTeamEx(playerid) != (TEAM_LSPD + armory_index))
							return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа к этому");

						Dialog
						(
							playerid, DIALOG_ARMORY, DIALOG_STYLE_LIST,
							"Оружейный склад",
							"1. Взять дубинку\n"\
							"2. Взять маску\n"\
							"3. Взять бронежилет\n"\
							"4. Взять пистолет с глушителем\n"\
							"5. Взять Desert Eagle\n"\
							"6. Взять MP5\n"\
							"7. Взять дробовик\n"\
							"8. Взять AK47\n"\
							"9. Взять винтовку",
							"Взять", "Отмена"
						);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_TUN:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_CAR_TUNING, DIALOG_STYLE_LIST,
					"Станция тех.обслуживания",
					"1. Перекраска транспорта\t{32a44b}25000$\n"\
					"2. Смена дисков\t\t\t{32a44b}50000$",
					"Выбрать", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_MAYOR_JOB:
			{
			    if(!GetPlayerData(playerid, P_PASS))
	    			return SendClientMessage(playerid, 0xCECECEFF, "У вас нет паспорта,получите его в мэрии");
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
				return SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вы не можете устроиться на работу");

				Dialog
				(
					playerid, DIALOG_VIEV_JOBS_LIST, DIALOG_STYLE_MSGBOX,
					"Прием на работу",
					"{FFFFFF}Вы хотите просмотреть список доступных работ?",
					"Да", "Нет"
				);
			}
			case PICKUP_ACTION_TYPE_MAYOR_PASS:
			{
				if(GetPlayerData(playerid, P_PASS))
					return SendClientMessage(playerid, 0xCECECEFF, "У вас есть паспорт!");
				new fmt_text[338];

				format(fmt_text, sizeof(fmt_text),
				"Для получение паспорта вам необходимо иметь:\n\
				{ffffff}Медсправка о здоровье: %s\n\
				{ffffff}Фотография 3x4 3 штуки: %s\n\
				{ffffff}Оплата гос.пошлины: %s\n"
				,GetPlayerData(playerid, P_MED_REFERENCE) ? ("{6EF83C}Есть") : ("{F81414}Отсутствует"),
				GetPlayerData(playerid, P_PASS_PHOTO) ? ("{6EF83C}Есть") : ("{F81414}Отсутствует"),
				GetPlayerData(playerid, P_PASS_CASH) ? ("{6EF83C}Оплачено") : ("{F81414}Не оплачено"));

				SendClientMessage(playerid,-1,"{C3C3C3}*Подсказка: Чтобы получить медсправку, обратитесь в городскую больницу.");
				SendClientMessage(playerid,-1,"{C3C3C3}*Подсказка: фотографии 3х4 штуки вы можете сделать в здание мерии.");
				SendClientMessage(playerid,-1,"{C3C3C3}*Подсказка: оплатить гос.пошлину вы можете в банке.");

				Dialog
				(
					playerid, DIALOG_MAYOR_PASS, DIALOG_STYLE_MSGBOX,
					"Паспорт",
					fmt_text,
					"Получить", "Отмена"
				);
			}
			case PICKUP_ACTION_TYPE_SELL_FISH:
			{
				if(GetPlayerData(playerid, P_FISH_MAS) == 0) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет рыбы");

				new fmt_text[346];
				format(fmt_text, sizeof fmt_text, "{FFFFFF}Вы хотите продать {ffff00}%d кг. {FFFFFF}рыбы за {ffff00}$%d{FFFFFF}?", GetPlayerData(playerid, P_FISH_MAS), GetPlayerData(playerid, P_FISH_MAS) * price_fish);
			    Dialog
				(
					playerid, DIALOG_SELL_FISH, DIALOG_STYLE_MSGBOX,
					"Продажа рыбы",
					fmt_text,
					"Да", "Нет"
				);
			}
			case PICKUP_ACTION_TYPE_CHANGESKIN:
			{
				if(GetPlayerTeamEx(playerid) == action_id)
			    {
				    if(GetPlayerData(playerid, P_ATWORK))
				    {
						SetPlayerData(playerid, P_ATWORK, 0);
						SendClientMessage(playerid, 0x32a44bFF, "Вы закончили рабочий день!");
				    }
					else
					{
					    SetPlayerData(playerid, P_ATWORK, 1);
						SendClientMessage(playerid, 0x32a44bFF, "Вы начали рабочий день!");
					}
					SetPlayerSkinInit(playerid);
					SetPlayerColorInit(playerid);
				}
			}
			/*case PICKUP_ACTION_TYPE_GIFT:
			{
				if(GetPlayerData(playerid, P_LEVEL) > 2)
				{
					new query[256],
						Cache: result,
						rows;

					mysql_format(mysql, query, sizeof query, "SELECT * FROM gift_lose WHERE uid='%d' AND gift_id='%d'", GetPlayerAccountID(playerid), action_id);
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();

					if(rows)
					{
						SendClientMessage(playerid, 0xCECECEFF, "Вы уже собрали эту подкову!");

						cache_delete(result);

						return 1;
					}

					cache_delete(result);

					mysql_format(mysql, query, sizeof query, "INSERT INTO gift_lose (uid, gift_id) VALUES (%d, %d)", GetPlayerAccountID(playerid), action_id);
					mysql_query(mysql, query, false);

					new fmt_str[144];

					mysql_format(mysql, query, sizeof query, "SELECT * FROM gift_lose WHERE uid='%d'", GetPlayerAccountID(playerid));
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();


					AddPlayerData(playerid, P_GIFTS, +, 1);

					format(fmt_str, sizeof fmt_str, "Вы собрали подкову! У Вас подков %d шт.", GetPlayerData(playerid, P_GIFTS));

					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Всего собрано подков %d из %d", rows, g_gift_loaded);

					SendClientMessage(playerid, 0xffff00FF, fmt_str);

                    SendClientMessage(playerid, 0xffff00FF, "Подковы можно обменять на рынке");

					cache_delete(result);


					format(query, sizeof query, "UPDATE accounts SET gifts=%d WHERE id=%d", GetPlayerData(playerid, P_GIFTS), GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Собирать подковы можно с 3-х лет проживания в штате");
			}*/
			case PICKUP_ACTION_RENT_BIKE:
			{
				if(GetPlayerLevel(playerid) == 1)
				{
					format(d_string,sizeof(d_string), "{FFFFFF}Вы действительно хотите взять в аренду велосипед?\nТак как Вы только прибыли в наш штат, для вас аренда {FF8040}бесплатна.\nВнимание!{FFFFFF} Транспорт пропадет, если в него не садиться 40 секунд!");
				}
				else
				{
				    new cashrent = GetPlayerLevel(playerid)*100;
				    format(d_string,sizeof(d_string),"{FFFFFF}Вы действительно хотите взять в аренду велосипед?\nЦена: {FF8040}%d{FFFFFF}$\n- Транспорт пропадет, если в него не садиться 40 секунд!",cashrent);
				}
				Dialog(playerid, DIALOG_RENT_BIKE, DIALOG_STYLE_MSGBOX,"Аренда велосипеда",d_string,"Да","Нет");
			}
		/*	case PICKUP_ACTION_TYPE_SELL_GIFT:
			{
				if(!GetPlayerData(playerid, P_GIFTS)) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет подков");

				Dialog(playerid, DIALOG_SELL_GIFT, DIALOG_STYLE_MSGBOX, "Обмен", "{FFFFFF}Вы действительно хотите обменять одну подкову?\n\n\
				Вам может выпасть:\n\
				{ffff00}- Кредиты\n\
				{32a44b}- Деньги\n\
				{3399FF}- Патроны\n\
				{32a44b}- Металл\n\
				{CECECE}- Наркотики\n\
				{FF0000}- Автомобиль (редко)", "Да", "Нет");
			}*/
		}
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	KickForSoft(playerid);

	return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	KickForSoft(playerid);

	return 0;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	KickForSoft(playerid);

	return 0;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(GetPlayerMenu(playerid) == admin_spec_menu)
	{
		if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return HideMenuForPlayer(admin_spec_menu, playerid);

		new fmt_text[100],
			spec_player = GetPlayerSpectateData(playerid, S_PLAYER);

		switch(row)
		{
			case 0, 8: StopSpectate(playerid);
			case 1:
			{
				StartSpectate(playerid, spec_player);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 2:
			{
				ShowPlayerStats(spec_player, playerid);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 3:
			{
				cmd::skick(playerid, IntToString(spec_player));
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 4:
			{
				format(fmt_text, sizeof fmt_text, "%d 5", spec_player);
				cmd::mute(playerid, fmt_text);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 5:
			{
				cmd::slap(playerid, IntToString(spec_player));
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 6:
			{
				// cmd::test(playerid, IntToString(spec_player));
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 7:
			{
				format(fmt_text, sizeof fmt_text, "[SP] %s[%d]  |  PING %d  |  IP  %s  |  R-IP  %s",
				GetPlayerNameEx(spec_player), spec_player, GetPlayerPing(spec_player), GetPlayerIpEx(spec_player), GetPlayerData(spec_player, P_REG_IP));
				SendClientMessage(playerid, 0x00CC66FF, fmt_text);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
		}
	}
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	if(GetPlayerMenu(playerid) == admin_spec_menu)
	{
		if(GetPlayerSpectateData(playerid, S_PLAYER) != -1)
		{
			ShowMenuForPlayer(admin_spec_menu, playerid);
		}
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
/*	if(newkeys == KEY_JUMP)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 10.0,532.0135,-234.5101,763.2584))
	    {
	        SetPlayerInHouse(playerid, -1);
	        EnterPlayerToHouse(playerid,GetPlayerData (playerid, P_HOUSE));
		}
	    return 1;
	}*/
    if(newkeys == 65536 && !IsPlayerInAnyVehicle(playerid) && IsPlayerInRangeOfPoint(playerid, 10.0, -2618.7800, 1420.1532, 909.2742))
    {
        new vehicleid = GetPlayerOwnableCar(playerid);
        SetVehiclePos
						(
							vehicleid,
							GetHouseData(GetPlayerData(playerid,P_HOUSE), H_CAR_POS_X),
							GetHouseData(GetPlayerData(playerid,P_HOUSE), H_CAR_POS_Y),
							GetHouseData(GetPlayerData(playerid,P_HOUSE), H_CAR_POS_Z)
						);
        SetVehicleZAngle(vehicleid, GetHouseData(GetPlayerData(playerid,P_HOUSE), H_CAR_ANGLE));
		SetVehicleVirtualWorld(vehicleid,GetPlayerData(playerid,P_HOUSE));
		LinkVehicleToInterior (vehicleid,GetPlayerData(playerid,P_HOUSE));
		SetVehicleParam(vehicleid, V_ENGINE, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF);
	}
	if(newkeys & KEY_YES)
	{
		if pTemp[playerid][USE_MATS_ON_HANDS] == true && GetNearestVehicleID(playerid, 3.0) != INVALID_VEHICLE_ID *then
		{
			new vehicleid = GetNearestVehicleID(playerid, 3.0); // Тратим 4 байта вместо 1000 циклов для действия с автомобилем.
			if GetVehicleData(vehicleid, V_BAGAGE_AMOUNT_GUN)+500 > 3000 *then SendClientMessage(playerid,-1,"Матовоз переполнен!");
			else
			{
				SetVehicleData(vehicleid,V_BAGAGE_AMOUNT_GUN,GetVehicleData(vehicleid, V_BAGAGE_AMOUNT_GUN)+500);
				format(l_string,26,"Матовоз загружен: 0/%d",GetVehicleData(vehicleid,V_BAGAGE_AMOUNT_GUN));
				SendClientMessage(playerid,0x32a44bFF,l_string);
			}
			RemovePlayerAttachedObject(playerid,1);
			ApplyAnimation(playerid,"CARRY","putdwn",1.0,0,1,1,0,0,1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			pTemp[playerid][USE_MATS_ON_HANDS] = false;

		}
	}
  	if(PRESSED(KEY_NO))
		cmd::no(playerid, "");

	if(PRESSED(KEY_YES))
		cmd::yes(playerid, "");

	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(PRESSED(KEY_HANDBRAKE | KEY_FIRE))
			{
				if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
				{
					cmd::lock(playerid, "1");
				}
			}
			if(PRESSED(KEY_ACTION))
			{
				cmd::en(playerid, "");
			}
			if(PRESSED(KEY_FIRE))
			{
				cmd::l(playerid, "");
			}
			if(PRESSED(KEY_ANALOG_UP))
			{
				cmd::b(playerid, "");
			}
			if(PRESSED(KEY_ANALOG_DOWN))
			{
				cmd::fuel(playerid, "");
			}
			if(PRESSED(KEY_ANALOG_LEFT))
			{
				cmd::sl(playerid, "");
			}
			if(PRESSED(KEY_SPRINT))
			{
				// g_player[playerid][P_TUNING_CAR] = SetTimerEx("SpeedCarGo", GetPVarInt(playerid, "timer"), true, "i", playerid);
			}

  			if(RELEASED(KEY_SPRINT))
			{
				// KillTimer(g_player[playerid][P_TUNING_CAR]);
			}

            if(newkeys == 4 || newkeys == 12 || newkeys == 33 && oldkeys != 4 || oldkeys != 12 || oldkeys != 33)
			{
				if(IsPlayerDriver(playerid))
				{
				    if(GetPlayerData(playerid, P_USER_PC))
				    {
				        new vehicleid = GetPlayerVehicleID(playerid);

				        if(vehicle_nitro[vehicleid])
				    		AddVehicleComponent(vehicleid, 1010);
				    }
				}
			}
            if(newkeys == KEY_CROUCH)
			{
			    if(IsPlayerDriver(playerid))
			    {
						new h = GetPlayerData(playerid, P_HOUSE);
     					if(IsPlayerInRangeOfPoint(playerid, 15.0, GetHouseData(h, H_CAR_POS_X), GetHouseData(h, H_CAR_POS_Y), GetHouseData(h, H_CAR_POS_Z)))
						{

						    Dialog(playerid,DIALOG_GARAGE_ENTER,DIALOG_STYLE_MSGBOX,
							"Гараж",
							"{ffff00}ВНИМАНИЕ!{ffffff}\n\
							При въезде в гараж в вашем авто не должно быть пассажиров!\n\
							Это может привести к системному сбою, попросите выйти пассажиров\n\
							Из вашего транспортного средства во время нажатия на кнопку 'Въезд'",
							"Въезд","Отмена"
							);
						}
						if(IsPlayerInRangeOfPoint(playerid, 15.0, 1697.1901, 1415.8605, 1415.6683))
						{
						    SetPlayerInHouse(playerid, -1);
							SetVehiclePos(GetPlayerVehicleID(playerid),GetHouseData(h, H_CAR_POS_X), GetHouseData(h, H_CAR_POS_Y), GetHouseData(h, H_CAR_POS_Z));
							SetVehicleZAngle(GetPlayerVehicleID(playerid),GetHouseData(h, H_CAR_ANGLE));

							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerInterior(playerid, 0);

							LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
							SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
						}
			        	for(new idx = 0; idx < 4; idx ++)
						{
						    if(IsPlayerInRangeOfPoint(playerid, 15.0,g_shlak[idx][S_CLOSED][0], g_shlak[idx][S_CLOSED][1], g_shlak[idx][S_CLOSED][2]) && (g_shlak[idx][S_FRAC] == GetPlayerTeamEx(playerid) || g_shlak[idx][S_FRAC2] == GetPlayerTeamEx(playerid)) && g_shlak[idx][STATUS] == 1)
							{
							    DestroyDynamicObject(g_shlak[idx][S_OBJ]);
							    g_shlak[idx][STATUS] = 0;
							    g_shlak[idx][S_OBJ] = CreateDynamicObject(g_shlak[idx][S_MODEL],g_shlak[idx][S_OPEN][0], g_shlak[idx][S_OPEN][1], g_shlak[idx][S_OPEN][2],g_shlak[idx][S_OPEN][3], g_shlak[idx][S_OPEN][4], g_shlak[idx][S_OPEN][5]);
						 	   	SendClientMessage(playerid,-1,"Шлагбаум открыт"),SetTimerEx("ClosedShlak", 10000, false, "i", idx);
							}
						}
				}
				else
				{
					if pTemp[playerid][USE_MATS_ON_HANDS] == true && GetNearestVehicleID(playerid, 3.0) != INVALID_VEHICLE_ID *then
					{
						new vehicleid = GetNearestVehicleID(playerid, 3.0); // Тратим 4 байта вместо 1000 циклов для действия с автомобилем.
						if GetVehicleData(vehicleid, V_BAGAGE_AMOUNT_GUN)+500 > 3000 *then SendClientMessage(playerid,-1,"Матовоз переполнен!");
						else
						{
							SetVehicleData(vehicleid,V_BAGAGE_AMOUNT_GUN,GetVehicleData(vehicleid, V_BAGAGE_AMOUNT_GUN)+500);
							format(l_string,26,"Матовоз загружен: 0/%d",GetVehicleData(vehicleid,V_BAGAGE_AMOUNT_GUN));
							SendClientMessage(playerid,0x32a44bFF,l_string);
						}
						RemovePlayerAttachedObject(playerid,1);
						ApplyAnimation(playerid,"CARRY","putdwn",1.0,0,1,1,0,0,1);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						pTemp[playerid][USE_MATS_ON_HANDS] = false;

					}
				}
			}
			if(PRESSED(KEY_SUBMISSION))
			{
				if(!IsPlayerInVehicle(playerid, GetPlayerOwnableCar(playerid)))
				{
					new job_car = GetPlayerJobCar(playerid);
					if(IsPlayerInVehicle(playerid, job_car))
					{
						new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
						new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1;

						new job_id = GetPlayerJob(playerid);
						if(job_id == car_type)
						{
							switch(job_id)
							{
								case JOB_BUS_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"Диспетчер автопарка",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT,
											"Стоимость проезда",
											"{FFFFFF}Сколько будет стоить проезд?\n"\
											"Укажите цену от 0 до 20$",
											"Далее", "Отмена"
										);
									}
								}
								case JOB_TAXI_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"Диспетчер таксопарка",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT,
											"Название такси",
											"{FFFFFF}Придумайте название для вашего такси\n"\
											"Максимальная длина 15 символов\n\n"\
											"Если вы не хотите как-то называться\n"\
											"нажмите кнопку \"Пропустить\"",
											"Далее", "Пропустить"
										);
									}
								}
								case JOB_MECHANIC:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"Автомеханик",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_MECHANIC_START_JOB, DIALOG_STYLE_MSGBOX,
											"Диспетчер",
											"{FFFFFF}Вы хотите начать работу автомеханика?",
											"Да", "Нет"
										);
									}
								}
								case JOB_TRUCKER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"Диспетчер автопарка",
											"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
											"Да", "Нет"
										);
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_TRUCKER_START_JOB, DIALOG_STYLE_MSGBOX,
											"Дальнобойщик",
											"{FFFFFF}Вы хотите начать работу дальнобойщика?",
											"Да", "Нет"
										);
									}
								}
							}
						}
					}
				}
				else cmd::car(playerid, "");
			}
		}
	}
	else
	{
	    if((newkeys & KEY_FIRE) && (player_weapon_slot[playerid] != -1))
	    {
	        // if(!player_weapon[playerid][player_weapon_slot[playerid]][PW_RELOAD])
        	OnPlayerShoot(playerid);
	    }
		if(newkeys == KEY_FIRE)
		{
		    if(GetPlayerInHouse(playerid) != -1)
			{
				new houseid = GetPlayerInHouse(playerid);
				if(GetHouseData(houseid, H_IMPROVEMENTS) >= 1)
				{
					ExitPlayerFromHouse(playerid, 2.1);
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 3.0,532.0135,-234.5101,763.2584)) // Выход из чердака
			{
			    ClearAnimations(playerid);
				SetPlayerInHouse(playerid, -1);
				EnterPlayerToHouse(playerid,GetPlayerData (playerid, P_HOUSE));
			}
			if(IsPlayerInRangeOfPoint(playerid, 3.0,1699.6826,1413.3649,1416.0548)) // из гаража
			{
			    ClearAnimations(playerid);
				SetPlayerInHouse(playerid, -1);
				EnterPlayerToHouse(playerid,GetPlayerData (playerid, P_HOUSE));
			}
		}
	    if(newkeys == KEY_JUMP || newkeys == KEY_FIRE)
	    {
	        if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
			{
			    if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LUMBERJACK_PUT)
				{
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);

					SendClientMessage(playerid, 0xCECECEFF, "Вы уронили дрова");

					RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);

					ApplyAnimation(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 1, 1);

					SetPlayerLumberJackChopCP(playerid);
				}
			}
			if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
				{
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
					SetPlayerMinerJobLoadCP(playerid);
					SetPlayerChatBubble(playerid, "Сломал тележку", 0x32a44bFF, 10.0, 2000);
					RemovePlayerAttachedObjects(playerid);
					ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1);

					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

					SendClientMessage(playerid, 0xCECECEFF, "Вы сломали тележку");
				}
			}
			if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_UNLOAD)
				{
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_LOAD);

					RemovePlayerAttachedObject(playerid, A_OBJECT_BONE_SPINE);
					ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1);

					SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

					DisablePlayerCheckpoint(playerid);
					SetTimerEx("SetPlayerLoaderJobLoadCP", 1000, false, "i", playerid);

					SendClientMessage(playerid, 0xCECECEFF, "Вы уронили ящик");
				}
			}
			if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADERA)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADERA_UNLOAD)
				{
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADERARMY_LOAD);

					RemovePlayerAttachedObject(playerid, A_OBJECT_BONE_SPINE);
					ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1);

					SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

					DisablePlayerCheckpoint(playerid);
					SetTimerEx("SetPlayerLoaderArmyJobLoadCP", 1000, false, "i", playerid);

					SendClientMessage(playerid, 0xCECECEFF, "Вы уронили ящик");
				}
			}
			if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
			{
				if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_DROP_P) return 1;

				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
				SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1, USE_ANIM_TYPE_NONE);
				SendClientMessage(playerid, 0xCECECEFF, "Вы уронили продукт");
			}
			if(GetPlayerTempJob(playerid) == TEMP_JOB_FARM)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FARM_PUT)
				{

					RemovePlayerAttachedObject(playerid, 1);

					ClearPlayerAnim(playerid);

					SetPlayerData(playerid, P_FARM_ROUTE_STEP, 0);

					NextFarmRouteCP(playerid);

					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FARM_CHOP);

					ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1, USE_ANIM_TYPE_NONE);
					SendClientMessage(playerid, 0xCECECEFF, "Вы уронили стог пшеницы");
				}
			}
	    }
		if(PRESSED(KEY_FIRE))
		{
			if(GetPlayerData(playerid, P_SNACK))
			{
				SetPlayerData(playerid, P_SNACK, false);

				SetPlayerHealthEx(playerid, 25.0, true);
				GameTextForPlayer(playerid, "~g~~h~+25 hp", 2500, 6);

				ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("T_RemovePlayerAttachedObject", 3000, false, "ii", playerid, A_OBJECT_SLOT_HAND);
			}
			if(GetPlayerData(playerid, P_DRINK_STEP) >= 1)
			{
				AddPlayerData(playerid, P_DRINK_STEP, -, 1);
				if(!GetPlayerData(playerid, P_DRINK_STEP))
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
		}
		if(PRESSED(KEY_SPRINT))
		{
			if(IsPlayerUseAnim(playerid))
			{
				ClearPlayerUseAnim(playerid);
			}

			if(GetPlayerData(playerid, P_REALTOR_TYPE) != REALTOR_TYPE_NONE)
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_INTERIOR);
					new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);

					TogglePlayerSpectating(playerid, false);

					if(GetPlayerData(playerid, P_REALTOR_TYPE) == REALTOR_TYPE_BIZ)
					{
						PlayerTeleportInit(playerid, 439.7533,-175.2797,1001.8047,0.0);
						SetPlayerPosEx(playerid,439.7533,-175.2797,1001.8047,0.0, interior, businessid + 255, false);
					}
					else
					{
						PlayerTeleportInit(playerid, 439.7533,-175.2797,1001.8047,0.0);
						SetPlayerPosEx(playerid, 439.7533,-175.2797,1001.8047,0.0, interior, businessid + 255, false);
					}
				}
				SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_NONE);
			}
		}
		if(PRESSED(KEY_WALK))
		{
			if(IsPlayerInRangeOfPoint(playerid, 100.0, 1370.0732, -173.6992, 968.5089))
			{
				new bedid = -1;

				for(new i; i < sizeof g_med_bed_pos; i++)
				{
					if(!IsPlayerInRangeOfPoint(playerid, 1.5, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2])) continue;
					bedid = i;
					break;
				}

				if(bedid == -1) return 1;
				else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже заняли койку");
				else if(GetPlayerHealthEx(playerid) >= 95.0)
				{
					return SendClientMessage(playerid, 0xCECECEFF, "Вы не нуждаетесь в лечении");
				}
				else if(g_med_bed_used[bedid]) return SendClientMessage(playerid, 0xCECECEFF, "Эта койка занята");

				else
				{
					SetPlayerData(playerid, P_OCCUPIED_BED, bedid);

					g_med_bed_used[bedid] = true;

					new fmt_msg[85];

					format(fmt_msg, sizeof fmt_msg, "Койка №%d\n\n{ffff00}Пациент:\n%s", bedid + 1, GetPlayerNameEx(playerid));
					UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFFF, fmt_msg);

					format(fmt_msg, sizeof fmt_msg, "Вы заняли койку №%d. В зависимости от состояния здоровья лечение может занять время", bedid + 1);
					SendClientMessage(playerid, 0x32a44bFF, fmt_msg);

					SendClientMessage(playerid, -1, "Чтобы выписаться подойдите к врачу или выйдите за пределы больницы");
				}
			}

			if(GetPlayerNearestATM(playerid) != -1)
			{
				ShowPlayerATMDialog(playerid);
			}
			if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1)
			{
				ExitPlayerFromHotelRoom(playerid);
			}
		}
		if(PRESSED(KEY_HANDBRAKE | KEY_WALK))
		{
			new targetid = GetPlayerTargetPlayer(playerid);
			//new targetid = playerid;

			if(targetid != INVALID_PLAYER_ID && !GetPlayerWeapon(playerid))
			{
				SetPlayerData(playerid, P_TARGET_ID, targetid);

				new fmt_str[64];
				format(fmt_str, sizeof fmt_str, "Действия (%s)", GetPlayerNameEx(targetid));

				Dialog
				(
					playerid, DIALOG_ACTION, DIALOG_STYLE_LIST,
					fmt_str,
					"1. Приветствие\n\
					2. Показать паспорт\n\
					3. Показать лицензии\n\
					4. Показать навыки",
					"Выбрать", "Закрыть"
				);
			}
		}
		/*
		if(PRESSED(KEY_FIRE))
		{
			new targetid = GetPlayerTargetPlayer(playerid),
				fmt_str[256];
			//new targetid = playerid;

			if(targetid != INVALID_PLAYER_ID)
			{
				SetPlayerData(playerid, P_TARGET_ID, targetid);

				format(fmt_str, sizeof fmt_str, "Ну нихуя ты баклажан! Нацелился и выстрелил в %s", GetPlayerNameEx(targetid));
				SendClientMessage(playerid, 0x32a44bFF, fmt_str);
			}
		}
		*/
		if(PRESSED(KEY_HANDBRAKE))
		{
			if(GetPVarInt(playerid, "have_jerrican") == 1 && GetPlayerSpeed(playerid) == 0.0)
			{
				new vehicleid = GetNearestVehicleID(playerid, 2.3);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					SetPVarInt(playerid, "jerrican_fill_car", vehicleid);

					Dialog
					(
						playerid, DIALOG_JERRICAN_FILL_CAR, DIALOG_STYLE_MSGBOX,
						"{6699FF}Канистра",
						"{FFFFFF}Вы хотите заправить этот транспорт с канистры?",
						"Да", "Нет"
					);
				}
			}
		}
		if(PRESSED(KEY_CTRL_BACK | KEY_HANDBRAKE))
		{
			if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
			{
				cmd::car(playerid, "");
			}
		}
		else if(PRESSED(KEY_CTRL_BACK))
		{
			CallLocalFunction("cmd_trunk", "i", playerid);
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	SetPlayerData(playerid, P_AFK_TIME, 0);

	if(IsPlayerDriver(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(GetVehicleParam(vehicleid, V_ENGINE) != VEHICLE_PARAM_ON)
			SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
	}

	if(GetPlayerTempJobCheckAnim(playerid))
	{
		new anim_index = GetPlayerAnimationIndex(playerid);

		switch(GetPlayerTempJob(playerid))
		{
			case TEMP_JOB_MINER:
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
				{
					if(!(anim_index == 616 || anim_index == 1189 || anim_index == 1224))
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_DROP_LOAD);
				}
			}
			case TEMP_JOB_FACTORY:
			{
				if(!GetPlayerSex(playerid))
				{
					if(!(anim_index == 259 || anim_index == 949 || anim_index == 1189 || anim_index == 1224 || anim_index == 1257 || anim_index == 1269))
					{
						anim_index = -1;
					}
				}
				else
				{
					if(!(anim_index == 259 || anim_index == 1196 || anim_index == 1275 || anim_index == 1276 || anim_index == 1269 || anim_index == 1283))
					{
						anim_index = -1;
					}
				}

				if(anim_index == -1)
				{
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_DROP_P);
				}
			}
			default:
			{

			}
		}
	}
	/*
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
		{
			new anim_idx = GetPlayerAnimationIndex(playerid);

			if(!(anim_idx == 616 || anim_idx == 1189 || anim_idx == 1224))
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_DROP_LOAD);
		}
	}
	*/

	if(GetPVarInt(playerid, "test") == 1)
	{
		new fmt_str[64];

		format(fmt_str, sizeof fmt_str, "a_index: %d", GetPlayerAnimationIndex(playerid));
		SendClientMessage(playerid, 0xCECECEFF, fmt_str);
	}

	if(GetPlayerWeaponState(playerid) == 2) SetPlayerData(playerid, P_WEAPON_RELOADING, false);
	if(GetPlayerWeaponState(playerid) == 3 && !GetPlayerData(playerid, P_WEAPON_RELOADING))
	{
		SetPlayerData(playerid, P_WEAPON_RELOADING, true);

		switch(GetPlayerWeapon(playerid))
		{
			case 22:
			{
				if(GetPlayerData(playerid, P_SKILL_COLT) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][0]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[0] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][0] = 0;

						AddPlayerData(playerid, P_SKILL_COLT, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_colt", GetPlayerData(playerid, P_SKILL_COLT));

						SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
					}
				}
			}
			case 23:
			{
				if(GetPlayerData(playerid, P_SKILL_SDPISTOL) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][1]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[1] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][1] = 0;

						AddPlayerData(playerid, P_SKILL_SDPISTOL, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sdpistol", GetPlayerData(playerid, P_SKILL_SDPISTOL));

						SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
					}
				}
			}
			case 24:
			{
				if(GetPlayerData(playerid, P_SKILL_DEAGLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][2]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[2] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][2] = 0;

						AddPlayerData(playerid, P_SKILL_DEAGLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_deagle", GetPlayerData(playerid, P_SKILL_DEAGLE));

						SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
					}
				}
			}
			case 25:
			{
				if(GetPlayerData(playerid, P_SKILL_SHOTGUN) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][3]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[3] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][3] = 0;

						AddPlayerData(playerid, P_SKILL_SHOTGUN, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_shotgun", GetPlayerData(playerid, P_SKILL_SHOTGUN));

						SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
					}
				}
			}
			case 29:
			{
				if(GetPlayerData(playerid, P_SKILL_MP5) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][4]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[4] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][4] = 0;

						AddPlayerData(playerid, P_SKILL_MP5, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_mp5", GetPlayerData(playerid, P_SKILL_MP5));

						SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
					}
				}
			}
			case 30:
			{
				if(GetPlayerData(playerid, P_SKILL_AK47) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][5]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[5] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][5] = 0;

						AddPlayerData(playerid, P_SKILL_AK47, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_ak47", GetPlayerData(playerid, P_SKILL_AK47));

						SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
					}
				}
			}
			case 31:
			{
				if(GetPlayerData(playerid, P_SKILL_M4) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][6]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[6] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][6] = 0;

						AddPlayerData(playerid, P_SKILL_M4, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_m4", GetPlayerData(playerid, P_SKILL_M4));

						SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
					}
				}
			}
			case 34:
			{
				if(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][7]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[7] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][7] = 0;

						AddPlayerData(playerid, P_SKILL_SNIPER_RIFLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sniper_rifle", GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE));

						SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);
					}
				}
			}
			case 26:
			{
				if(GetPlayerData(playerid, P_SKILL_SAWNOFF) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][8]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[8] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][8] = 0;

						AddPlayerData(playerid, P_SKILL_SAWNOFF, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sawnoff", GetPlayerData(playerid, P_SKILL_SAWNOFF));

						SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
					}
				}
			}
			case 27:
			{
				if(GetPlayerData(playerid, P_SKILL_COMBAT_SG) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][9]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[9] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][9] = 0;

						AddPlayerData(playerid, P_SKILL_COMBAT_SG, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_combat_sg", GetPlayerData(playerid, P_SKILL_COMBAT_SG));

						SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
					}
				}
			}
			case 28:
			{
				if(GetPlayerData(playerid, P_SKILL_MICRO_UZI) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][10]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[10] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][10] = 0;

						AddPlayerData(playerid, P_SKILL_MICRO_UZI, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_micro_uzi", GetPlayerData(playerid, P_SKILL_MICRO_UZI));

						SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	while(strfind(inputtext, "%", true) != -1)
		strdel(inputtext, strfind(inputtext,"%",true), strfind(inputtext,"%",true) + 1);

	while(strfind(inputtext, "%s", true) != -1)
		strdel(inputtext, strfind(inputtext,"%s",true), strfind(inputtext,"%s",true) + 2);

	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new last_dialog = GetPlayerData(playerid, P_LAST_DIALOG);
	SetPlayerData(playerid, P_LAST_DIALOG, INVALID_DIALOG_ID);

	new list_id;

	if(GetPlayerData(playerid, P_USER_PC))
	{
 		list_id = listitem + 1;
	}
	else
	{
 		list_id = strval(inputtext);
	}

	if(last_dialog == dialogid)
	{
		switch(dialogid)
		{
		    case DIALOG_LEADER_MENU:
		    {
		        if(!response) return 1;
		        switch(list_id)
		        {
		            case 1: Dialog(playerid, DIALOG_LEADER_MENU_UNINVITE, DIALOG_STYLE_INPUT,"Панель лидера","Введите имя сотрудника, которого хотите уволить!","Ввести","Закрыть");
					case 2:
					{
						new vehicles,vehicles_count;
					    switch(GetPlayerTeamEx(playerid))
					    {
					        case TEAM_LSPD: vehicles = VEHICLE_ACTION_TYPE_LSPD_CAR;
					        case TEAM_FBI: vehicles = VEHICLE_ACTION_TYPE_FBI_CAR;
					        case TEAM_GANG_GROVE: vehicles = VEHICLE_ACTION_TYPE_GROVE_CAR;
					        case TEAM_GANG_BALLAS: vehicles = VEHICLE_ACTION_TYPE_BALLAS_CAR;
					        case TEAM_HOSPITAL: vehicles = VEHICLE_ACTION_TYPE_MED_CAR;
					        case TEAM_GOVERNMENT: vehicles = VEHICLE_ACTION_TYPE_GOV_CAR;
					        case TEAM_RADIO: vehicles = VEHICLE_ACTION_TYPE_RADIO_CAR;
					        case TEAM_ARMY: vehicles = VEHICLE_ACTION_TYPE_ARMY_CAR;
					    }
					    for(new i = 1; i <MAX_VEHICLES;i++)
					    {
					        if(!IsValidVehicle(i)) continue;
					        else if(IsVehicleOccupied(i)) continue;
					        else if(IsTrailerAttachedToAnyVehicle(i)) continue;
					        else if(GetVehicleData(i, V_ACTION_TYPE) != vehicles) continue;
					        SetVehicleToRespawn(i);
					        vehicles_count++;
					    }
					    SendClientMessage(playerid,-1,"Вы успешно заспавнили фракционные автомобили!");
					}
					case 3: cmd::showall(playerid,"");
					case 4: Dialog(playerid, DIALOG_LEADER_MENU_JOBS,DIALOG_STYLE_LIST,"Панель лидера","1. Создать вакансию\n2. Удалить вакансию","Выбрать","Закрыть");
					case 5: cmd::goska(playerid);
				}
		    }
		    case DIALOG_LEADER_MENU_JOBS:
		    {
		        if(!response) return 1;
		        switch(list_id)
		        {
		            case 1: cmd::addjobs(playerid);
		            case 2: cmd::deljobs(playerid);
		        }
		    }
		    case DIALOG_LEADER_MENU_UNINVITE:
		    {
		        if(!response) return 1;
		        cmd::uninviteoff(playerid,inputtext);
		        return 1;
		    }
            case 31000:
		    {
				if(!response) return 1;
				switch(list_id)
				{
				    case 1:
					{
					   	Dialog(playerid, 31002, DIALOG_STYLE_LIST,"Государственная волна","1. Первая строка\n2. Вторая строка\n3. Третья строка","Выбрать","Назад");
					}
				    case 2: GoGoska(playerid);
				    //case 3: ClearGoska(playerid);
				}
		    }
			case 31002:
			{
			    new strings[100];
			    if(!response) return Dialog(playerid, 31000, DIALOG_STYLE_LIST,"Государственная волна","1. Посмотреть строчки\n2. Выпустить гос. волну","Выбрать","Закрыть");
			    switch(list_id)
			    {
			        case 1:
					{
					    switch(GetPlayerTeamEx(playerid))
					    {
						    case TEAM_ARMY: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_ARMY][text_one]);
						    case TEAM_LSPD: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_LSPD][text_one]);
						    case TEAM_RADIO: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_RADIO][text_one]);
						    case TEAM_HOSPITAL: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_HOSPITAL][text_one]);
						    case TEAM_FBI: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_FBI][text_one]);
						    case TEAM_GOVERNMENT: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_GOVERNMENT][text_one]);
						}
						Dialog(playerid, 31005, DIALOG_STYLE_MSGBOX,"Первая строка",strings,"Изменить","Закрыть");
					}
			        case 2:
			        {
						switch(GetPlayerTeamEx(playerid))
						{
          					case TEAM_ARMY: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_ARMY][text_two]);
						    case TEAM_LSPD: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_LSPD][text_two]);
						    case TEAM_RADIO: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_RADIO][text_two]);
						    case TEAM_HOSPITAL: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_HOSPITAL][text_two]);
						    case TEAM_FBI: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_FBI][text_two]);
						    case TEAM_GOVERNMENT: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_GOVERNMENT][text_two]);
						}
						Dialog(playerid, 31004, DIALOG_STYLE_MSGBOX,"Вторая строка",strings,"Изменить","Закрыть");
					}
			        case 3:
			        {
			            switch(GetPlayerTeamEx(playerid))
						{
						    case TEAM_ARMY: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_ARMY][text_three]);
						    case TEAM_LSPD: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_LSPD][text_three]);
						    case TEAM_RADIO: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_RADIO][text_three]);
						    case TEAM_HOSPITAL: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_HOSPITAL][text_three]);
						    case TEAM_FBI: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_FBI][text_three]);
						    case TEAM_GOVERNMENT: format(strings, 100, "{FF8040}Текст: {FFFFFF}%s",g_news[TEAM_GOVERNMENT][text_three]);
						}
						Dialog(playerid, 31003, DIALOG_STYLE_MSGBOX,"Третья строка",strings,"Изменить","Закрыть");
					}
				}
			}
			case 31003:
			{
			    if(!response) return Dialog(playerid, 31002, DIALOG_STYLE_LIST,"Государственная волна","1. Первая строка\n2. Вторая строка\n3. Третья строка","Выбрать","Назад");
			    Dialog(playerid, 31006, DIALOG_STYLE_INPUT,"Государственная волна","Введите текст для 3-й строки государственных новостей","Ввести","Назад");
			}
			case 31004:
			{
				if(!response) return Dialog(playerid, 31002, DIALOG_STYLE_LIST,"Государственная волна","1. Первая строка\n2. Вторая строка\n3. Третья строка","Выбрать","Назад");
			    Dialog(playerid, 31007, DIALOG_STYLE_INPUT,"Государственная волна","Введите текст для 2-й строки государственных новостей","Ввести","Назад");
			}
			case 31005:
			{
  				if(!response) return Dialog(playerid, 31002, DIALOG_STYLE_LIST,"Государственная волна","1. Первая строка\n2. Вторая строка\n3. Третья строка","Выбрать","Назад");
			    Dialog(playerid, 31008, DIALOG_STYLE_INPUT,"Государственная волна","Введите текст для 1-й строки государственных новостей","Ввести","Назад");
			}
			case 31006:
			{
			    new string[100];
			    if(!response) return Dialog(playerid, 31002, DIALOG_STYLE_LIST,"Государственная волна","1. Первая строка\n2. Вторая строка\n3. Строка","Выбрать","Назад");
				if(!(5 < strlen(inputtext) <= 100))
				{
					Dialog(playerid, 31006, DIALOG_STYLE_INPUT,"Государственная волна","Введите текст для 3-й строки государственных новостей\n\n{FF0000}Необходимо вводить более 5 и не более 100 строк!","Ввести","Назад");
				}
				switch(GetPlayerTeamEx(playerid))
				{
				   	case TEAM_ARMY: format(g_news[TEAM_ARMY][text_three], 100, "%s", inputtext);
			    	case TEAM_LSPD: format(g_news[TEAM_LSPD][text_three], 100, "%s", inputtext);
				    case TEAM_RADIO: format(g_news[TEAM_RADIO][text_three], 100, "%s", inputtext);
				    case TEAM_HOSPITAL: format(g_news[TEAM_HOSPITAL][text_three], 100, "%s", inputtext);
				    case TEAM_FBI: format(g_news[TEAM_FBI][text_three], 100, "%s", inputtext);
				    case TEAM_GOVERNMENT: format(g_news[TEAM_GOVERNMENT][text_three], 100, "%s", inputtext);
				}
				format(string,sizeof(string),"{FFFFFF}Вы успешно изменили текст третьей строки\n{FF8040}Текст: {FFFFFF}%s",inputtext);
			    Dialog(playerid, 31003, DIALOG_STYLE_MSGBOX,"Государственная волна",string,"Изменить","Закрыть");
			}
			case 31007:
			{
			    new string[100];
			    if(!response) return Dialog(playerid, 31002, DIALOG_STYLE_LIST,"Государственная волна","1. Первая строка\n2. Вторая строка\n3. Строка","Выбрать","Назад");
				if(!(5 < strlen(inputtext) <= 100))
				{
					Dialog(playerid, 31007, DIALOG_STYLE_INPUT,"Государственная волна","Введите текст для 2-й строки государственных новостей\n\n{FF0000}Необходимо вводить более 5 и не более 100 строк!","Ввести","Назад");
					return 1;
				}
				switch(GetPlayerTeamEx(playerid))
				{
				    case TEAM_ARMY: format(g_news[TEAM_ARMY][text_two], 100, "%s", inputtext);
			    	case TEAM_LSPD: format(g_news[TEAM_LSPD][text_two], 100, "%s", inputtext);
				    case TEAM_RADIO: format(g_news[TEAM_RADIO][text_two], 100, "%s", inputtext);
				    case TEAM_HOSPITAL: format(g_news[TEAM_HOSPITAL][text_two], 100, "%s", inputtext);
				    case TEAM_FBI: format(g_news[TEAM_FBI][text_two], 100, "%s", inputtext);
				    case TEAM_GOVERNMENT: format(g_news[TEAM_GOVERNMENT][text_two], 100, "%s", inputtext);
				}
			    format(string,sizeof(string),"{FFFFFF}Вы успешно изменили текст второй строки\n{FF8040}Текст: {FFFFFF}%s",inputtext);
			    Dialog(playerid, 31004, DIALOG_STYLE_MSGBOX,"Государственная волна",string,"Изменить","Закрыть");
			}
			case 31008:
			{
			    new string[100];
			    if(!response) return Dialog(playerid, 31002, DIALOG_STYLE_LIST,"Государственная волна","1. Первая строка\n2. Вторая строка\n3. Строка","Выбрать","Назад");
				if(!(5 < strlen(inputtext) <= 100))
				{
					Dialog(playerid, 31008, DIALOG_STYLE_INPUT,"Государственная волна","Введите текст для 1-й строки государственных новостей\n\n{FF0000}Необходимо вводить более 5 и не более 100 строк!","Ввести","Назад");
					return 1;
				}
				switch(GetPlayerTeamEx(playerid))
				{
				    case TEAM_ARMY: format(g_news[TEAM_ARMY][text_one], 100, "%s", inputtext);
			    	case TEAM_LSPD: format(g_news[TEAM_LSPD][text_one], 100, "%s", inputtext);
				    case TEAM_RADIO: format(g_news[TEAM_RADIO][text_one], 100, "%s", inputtext);
				    case TEAM_HOSPITAL: format(g_news[TEAM_HOSPITAL][text_one], 100, "%s", inputtext);
				    case TEAM_FBI: format(g_news[TEAM_FBI][text_one], 100, "%s", inputtext);
				    case TEAM_GOVERNMENT: format(g_news[TEAM_GOVERNMENT][text_one], 100, "%s", inputtext);
				}
			    format(string,sizeof(string),"{FFFFFF}Вы успешно изменили текст первой строки\n{FF8040}Текст: {FFFFFF}%s",inputtext);
			    Dialog(playerid, 31005, DIALOG_STYLE_MSGBOX,"Государственная волна",string,"Изменить","Закрыть");
			}
		    case 30000:
		    {
		        if(!response) return 1;
		        if(!(2 <= strlen(inputtext) <= 6))
				{
					Dialog(playerid, 30000,DIALOG_STYLE_INPUT,"Создать собеседование","Введите время, на которое вы хотите назначить собеседование\n\n{FF0000}Разрешено вводить время от 2-х до 6 символов!","Ввести","Закрыть");
					return 1;
				}
				for(new i = strlen(inputtext); i != 0; --i)
				{
		            switch(inputtext[i])
		            {
		                    case 'A'..'Z', 'А'..'Я','a'..'z', 'а'..'я' :
		                    return Dialog(playerid, 30000,DIALOG_STYLE_INPUT,"Создать собеседование","Введите время, на которое вы хотите назначить собеседование\n\n{FF0000}Разрешено вводить только цифры!","Ввести","Закрыть");
		            }
				}
				switch(GetPlayerTeamEx(playerid))
				{
					case TEAM_ARMY: format(interview[TEAM_ARMY][text_time],15,"%s",inputtext);
					case TEAM_GOVERNMENT: format(interview[TEAM_GOVERNMENT][text_time],15,"%s",inputtext);
					case TEAM_LSPD: format(interview[TEAM_LSPD][text_time],15,"%s",inputtext);
					case TEAM_RADIO: format(interview[TEAM_RADIO][text_time],15,"%s",inputtext);
					case TEAM_HOSPITAL: format(interview[TEAM_HOSPITAL][text_time],15,"%s",inputtext);
					case TEAM_FBI: format(interview[TEAM_FBI][text_time], 15,"%s",inputtext);
				}
				Dialog(playerid, 30001, DIALOG_STYLE_INPUT,"Создать собеседование","Введите критерии, которые вам необходимы","Ввести","Закрыть");
		    }
		    case 30001:
		    {
		        if(!response)
				{
				    switch(GetPlayerTeamEx(playerid))
				    {
				        case TEAM_LSPD: interview[TEAM_LSPD][text_time] = EOS;
				        case TEAM_FBI: interview[TEAM_FBI][text_time] = EOS;
				        case TEAM_ARMY: interview[TEAM_ARMY][text_time] = EOS;
				        case TEAM_HOSPITAL: interview[TEAM_HOSPITAL][text_time] = EOS;
				        case TEAM_GOVERNMENT: interview[TEAM_GOVERNMENT][text_time] = EOS;
				        case TEAM_RADIO: interview[TEAM_RADIO][text_time] = EOS;
				    }
					return 1;
				}
		        if(!(2 <= strlen(inputtext) <= 70))
				{
					Dialog(playerid, 30001, DIALOG_STYLE_INPUT,"Создать собеседование","Введите критерии, которые вам необходимы\n\n{FF0000}Разрешено вводить от 2-х до 70 символов!","Ввести","Закрыть");
					return 1;
				}
				switch(GetPlayerTeamEx(playerid))
				{
				    case TEAM_ARMY: format(interview[TEAM_ARMY][text_crit], 100,"%s",inputtext);
				    case TEAM_GOVERNMENT: format(interview[TEAM_GOVERNMENT][text_crit],100,"%s",inputtext);
				    case TEAM_LSPD: format(interview[TEAM_LSPD][text_crit], 100,"%s",inputtext);
				    case TEAM_HOSPITAL: format(interview[TEAM_HOSPITAL][text_crit],100,"%s", inputtext);
				    case TEAM_RADIO: format(interview[TEAM_HOSPITAL][text_crit],100,"%s",inputtext);
				    case TEAM_FBI: format(interview[TEAM_FBI][text_crit], 100,"%s",inputtext);
				}
				SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Собеседование успешно создано!");
				return 1;
		    }
		    case 29003:
		    {
		        if(!response)
				{
					return cmd::jobs(playerid);
				}
				Dialog
				(
					playerid, DIALOG_GPS_JOBS, DIALOG_STYLE_LIST,
					"По работе",
					"{ffff00}1. {FFFFFF}Работа грузчика\n\
					{ffff00}2. {FFFFFF}Работа лесоруба\n\
					{ffff00}3. {FFFFFF}Работа на заводе\n\
					{ffff00}4. {FFFFFF}Работа развозчиком\n\
					{ffff00}5. {FFFFFF}Работа фермера\n\
					{ffff00}6. {FFFFFF}Работа шахтёра\n\
					{ffff00}7. {FFFFFF}Работа комбайнера {1E90FF}(3 уровень)\n\
					{ffff00}8. {FFFFFF}Шахта {1E90FF}(Загрузка металла)\n\
					{ffff00}9. {FFFFFF}База дальнобойщиков\n\
					{ffff00}10. {FFFFFF}Развозчик пиццы",
					"Отметить", "Назад"
				);
				return 1;
		    }
			case 29001:
			{
			    if(!response)
			    {
			        return cmd::jobs(playerid);
			    }
				Dialog(playerid, 29003, DIALOG_STYLE_MSGBOX,"Государственные работы","\
				{FF8040}Фермер{FFFFFF}:\n\
				На данной работе, вам необходимо собирать кусты пшеницы и относить их на склад.\n\
				За один принесенный куст, вы будете получать от {FF8040}50{FFFFFF}$.\n\n\
				{FF8040}Шахтер{FFFFFF}:\n\
				В данной работе, вам необходимо добывать руду, для дальнейшей ее обработки и транспортировки.\n\
				За одну перенесенную тележку с рудой, вы будете получать от {FF8040}50{FFFFFF}$.\n\n\
				{FF8040}Развозчик пиццы{FFFFFF}:\n\
				В данной работе, вам необходимо развозить пиццы по адресам. Транспорт и пиццу вам выдаст пиццерия.\n\
				За одну перевезенную пиццу, вы будете получать от {FF8040}50{FFFFFF}$.\n\n\n\
				Для того, чтобы узнать местоположения каждой работы нажмите {FF8040}Далее{FFFFFF}\n\
				Все остальные государственные работы доступны в {FFFFFF}мэрии{FFFFFF}. \n\
				Для них вам необходим паспорт, который также можно получить в {FF8040}мэрии{FFFFFF}.","Далее","Назад");
				return 1;
			}
		    case 29000:
		    {
		        new ttext[30],string[200];
		        if(!response) return 1;
		        switch(list_id)
		        {
		            case 1:
					{
						Dialog(playerid, 29001,DIALOG_STYLE_MSGBOX,"Государственные работы","\
						{FFFFFF}\t\tДля всех новоприбывших в штат у нас открыты несколько вакансий:\n\
						{FF8040}Грузчик{FFFFFF}:\n\
						В данной работе, вам необходимо переносить мешки из склада в вагон, для дальнейшей транспортировки.\n\
						За один перенесенный мешок, вы будете получать от {FF8040}50{FFFFFF}$.\n\n\
						{FF8040}Лесоруб{FFFFFF}:\n\
						В данной работе, вам необходимо рубить деревья, после их относить на склад.\n\
						За одно распиленное дерево, вы будете получать от {FF8040}50{FFFFFF}$.\n\n\
						{FF8040}Рабочий на заводе{FFFFFF}:\n\
						В данной работе, вам необходимо изготавливать материалы, предварительно взяв их со стола.\n\
						Главное следите за тем, чтобы количество металла и топлива были не меньше 10, иначе работать у вас не получится\n\
						За одну изготовленную деталь, вы будете получать от {FF8040}50{FFFFFF}$.\
						","Далее","Назад");
						return 1;
					}
		            case 2:
		            {
		                if(strlen(interview[TEAM_ARMY][text_time]) == 0 && strlen(interview[TEAM_ARMY][text_crit]) == 0)
						{
						    format(interview[TEAM_ARMY][text_time],15, "Неизвестно");
						    format(interview[TEAM_ARMY][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение военкомата нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_ARMY][text_time],interview[TEAM_ARMY][text_crit]);
						ttext = "ВМФ";
						click_status[playerid] = 2;
					}
		            case 3:
					{
						if(strlen(interview[TEAM_GOVERNMENT][text_time]) == 0 && strlen(interview[TEAM_GOVERNMENT][text_crit]) == 0)
						{
						    format(interview[TEAM_GOVERNMENT][text_time],15, "Неизвестно");
						    format(interview[TEAM_GOVERNMENT][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение мэрии нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_GOVERNMENT][text_time],interview[TEAM_GOVERNMENT][text_crit]);
						ttext = "Мэрия";
						click_status[playerid] = 3;
					}
		            case 4:
					{
						if(strlen(interview[TEAM_LSPD][text_time]) == 0 && strlen(interview[TEAM_LSPD][text_crit]) == 0)
						{
							format(interview[TEAM_LSPD][text_time],15, "Неизвестно");
						    format(interview[TEAM_LSPD][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение полицейского департамента нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_LSPD][text_time],interview[TEAM_LSPD][text_crit]);
						ttext = "Полиция г. Los-Santos";
						click_status[playerid] = 4;
					}
		            case 5:
					{
						if(strlen(interview[TEAM_HOSPITAL][text_time]) == 0 && strlen(interview[TEAM_HOSPITAL][text_crit]) == 0)
						{
							format(interview[TEAM_HOSPITAL][text_time],15, "Неизвестно");
						    format(interview[TEAM_HOSPITAL][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение больницы г. Los-Santos нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_HOSPITAL][text_time],interview[TEAM_HOSPITAL][text_crit]);
						ttext = "Больница г. Los-Santos";
						click_status[playerid] = 5;
					}
		            case 6:
		            {
						if(strlen(interview[TEAM_RADIO][text_time]) == 0 && strlen(interview[TEAM_RADIO][text_crit]) == 0)
						{
							format(interview[TEAM_RADIO][text_time],15, "Неизвестно");
						    format(interview[TEAM_RADIO][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение СМИ г. Los-Santos нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_RADIO][text_time],interview[TEAM_RADIO][text_crit]);
						ttext = "СМИ г. Los-Santos";
						click_status[playerid] = 6;
					}
		            case 7:
					{
						if(strlen(interview[TEAM_FBI][text_time]) == 0 && strlen(interview[TEAM_FBI][text_crit]) == 0)
						{
							format(interview[TEAM_FBI][text_time],15, "Неизвестно");
						    format(interview[TEAM_FBI][text_crit], 70, "Неизвестно");
						}
						format(string,sizeof(string),"\
						{FFFFFF}Время: {FF8040}%s{FFFFFF}\n\
						Критерии: {FF8040}%s{FFFFFF}\n\n\
						Чтобы узнать местоположение FBI нажмите {FF8040}Далее{FFFFFF}",interview[TEAM_FBI][text_time],interview[TEAM_FBI][text_crit]);
						ttext = "FBI";
						click_status[playerid] = 7;
					}
		        }
		        Dialog(playerid, 29005, DIALOG_STYLE_MSGBOX,ttext,string,"Далее","Назад");
		    }
		    case 29005:
		    {
		        if(!response)
		        {
		            return cmd::jobs(playerid);
				}
				switch(click_status[playerid])
				{
				    case 2:
					{
						if(strlen(interview[TEAM_ARMY][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,2731.2380,-2451.3320,17.5937,5.0);
					}
				    case 3:
					{
					    if(strlen(interview[TEAM_GOVERNMENT][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,1481.0066,-1772.3138,18.7958,5.0);
					}
				    case 4:
					{
					    if(strlen(interview[TEAM_LSPD][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,1555.4983,-1675.6654,16.1953,5.0);
					}
				    case 5:
					{
					    if(strlen(interview[TEAM_HOSPITAL][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,1178.4281,-1338.8206,14.0241,5.0);
					}
				    case 6:
					{
					    if(strlen(interview[TEAM_RADIO][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,1778.2361,-1661.6642,14.4365,5.0);
					}
				    case 7:
					{
					    if(strlen(interview[TEAM_FBI][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} В данный момент собеседование не проводится!");
						SetPlayerCheckpoint(playerid,1317.0298,-1184.4017,23.5908,5.0);
					}
				}
				SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Местоположение организации отмечено у Вас на GPS");
				return 1;
		    }
			case DIALOG_LOGIN: // Авторизация
			{
				if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_LOGIN)
				{
					if(response)
					{
						new login_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
						new str_len = strlen(inputtext);
						new bool: wrong_password = false;

						switch(login_step)
						{
							case LOGIN_STATE_PASSWORD:
							{
								if(1 <= str_len <= 16)
								{
								    new query[256],
										rows;

								    mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%s' AND password=MD5('%s')", GetPlayerNameEx(playerid), inputtext);
									mysql_query(mysql, query, true);

									rows = cache_num_rows();

									if(rows == 0)
									{
										wrong_password = true;
										login_step --;
									}
								}
								else login_step --;
							}
							case LOGIN_STATE_MAIL:
							{
							    if(!str_len || strcmp(GetPlayerData(playerid, P_EMAIL), inputtext) != 0)
							    {
							        wrong_password = true;
							        login_step--;
							    }
							    else
								{
									SetPlayerData(playerid, P_LAST_LOGIN_TIME, gettime());

									new query[120];

									mysql_format
									(
										mysql, query, sizeof query,
										"UPDATE accounts SET last_login=%d WHERE id=%d LIMIT 1",
										GetPlayerData(playerid, P_LAST_LOGIN_TIME),
										GetPlayerAccountID(playerid)
									);

									mysql_query(mysql, query, false);

								}
							}
							case LOGIN_STATE_PHONE:
							{
								str_len = strlen(GetPlayerData(playerid, P_SETTING_PHONE));
								if(!str_len || strcmp(GetPlayerData(playerid, P_SETTING_PHONE)[str_len - 5], inputtext) != 0)
								{
									wrong_password = true;
									login_step--;
								}
							}
							default:
								return 1;
						}
						ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
					}
					else Kick:(playerid);
				}
			}
			case DIALOG_REGISTER: // Регистрация
			{
				if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REGISTER)
				{
					new reg_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
					new str_len = strlen(inputtext);

					switch(reg_step)
					{
						case REGISTER_STATE_PASSWORD: // ввод пароля
						{
							if(str_len)
							{
								if(!(6 <= str_len <= 15))
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"Ошибка",
										"{FFFFFF}Длина пароля должна быть от 6 до 15 символов\n"\
										"Рекомендуется использовать русские и латинские буквы, а также любые знаки",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else if(strfind(inputtext, "%") != -1 || strfind(inputtext, " ") != -1)
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"Ошибка",
										"{FFFFFF}Введенный Вами пароль содержит недопустимые символы или пробелы",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else if(IsNumeric(GetPlayerNameEx(playerid)))
								{
									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"Ошибка",
										"{FFFFFF}Ваш ник не должен содержать цифры. Измените его и повторите регистрацию",
										"Повтор", ""
									);
									return Kick:(playerid);
								}
								else
								{
									format(g_player[playerid][P_PASSWORD], 64, "%s", inputtext);
								}
							}
							else reg_step --;
						}
						case REGISTER_STATE_EMAIL: 		// ввод емайла
						{
							if(str_len)
							{
								if(!IsValidMail(inputtext, str_len))
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"Ошибка",
										"{FFFFFF}Адрес электронной почты введен неверно",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								new query[128];
								new Cache: result, is_email_exist;

								mysql_format(mysql, query, sizeof query, "SELECT email FROM accounts WHERE email='%e' LIMIT 1", inputtext);
								result = mysql_query(mysql, query);

								is_email_exist = cache_num_rows();
								cache_delete(result);

								if(is_email_exist)
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"Ошибка",
										"{FFFFFF}Этот адрес электронной почты уже привязан к другому аккаунту",
										"Повтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else
								{
									format(g_player[playerid][P_EMAIL], 61, "%s", inputtext);
								}
							}
							else reg_step --;
						}
						case REGISTER_STATE_REFER: 		// ввод ника пригласившего игрока
						{
							if(response)
							{
								if(2 <= str_len <= 20)
								{
									new query[75];
									new Cache: result;

									mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
									result = mysql_query(mysql, query);

									if(cache_num_rows())
										SetPlayerData(playerid, P_REFER, cache_get_row_int(0, 0));

									cache_delete(result);

									if(!GetPlayerData(playerid, P_REFER))
									{
										Dialog
										(
											playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
											"Ошибка",
											"{FFFFFF}Такого игрока не существует.\n"\
											"Если вы не знаете других игроков нажмите кнопку \"Пропустить\"",
											"Повтор", "Пропустить"
										);
										return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
									}
								}
								else reg_step --;
							}
						}
						case REGISTER_STATE_SEX:		// выбор пола
						{
							SetPlayerData(playerid, P_SEX, !response);
						}
					}
					ShowPlayerRegDialog(playerid, reg_step + 1);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PLAYER_MENU:
			{
				if(response)
				{
					switch(list_id)
					{
						case 1: ShowPlayerStats(playerid);
						case 2: ShowBackPackDialog(playerid, false);
						case 3: ShowPlayerCMDSDialog(playerid);
						case 4: ShowPlayerSettings(playerid);
						case 5: ShowPlayerSecuritySettings(playerid);
						case 6: ShowPlayerReportDialog(playerid);
						case 7: ShowPlayerImprovementsDialog(playerid);
						case 8: ShowServerRules(playerid);
						case 9: ShowPlayerChangeNameDialog(playerid);
						case 10: cmd::promo(playerid, "");
						case 11: ShowPlayerDonateDialog(playerid);
						default:
							return 1;
					}
				}
			}
			case DIALOG_PLAYER_STATS:
			{
				if(response)
				{
					cmd::menu(playerid, "");
				}
			}
			case DIALOG_PLAYER_CMDS:
			{
				if(response)
				{
				    if(!(1 <= list_id <= 10))
				        return ShowPlayerCMDSDialog(playerid);

				    ShowCommandDialog(playerid, list_id);
				}
				else cmd::menu(playerid, "");
			}
			case DIALOG_PLAYER_COMMAND:
			{
				if(response)
				{
					ShowPlayerCMDSDialog(playerid);
				}
			}
			case DIALOG_PLAYER_SETTINGS:
			{
				if(response)
				{
					new E_PLAYER_SETTINGS_STRUCT: setting_id = E_PLAYER_SETTINGS_STRUCT: (list_id-1);
					if(S_TEAM_CHAT <= setting_id <= S_CHANGE_NAME)
					{
						new setting_type = GetPlayerSettingData(playerid, setting_id);

						switch(setting_id)
						{
							case S_TEAM_CHAT..S_CHANGE_NAME:
							{
								setting_type ^= SETTING_TYPE_ON;
							}
						}
						if(setting_id == S_PLAYERS_NICK)
						{
							foreach(new idx : Player)
								ShowPlayerNameTagForPlayer(playerid, idx, setting_type);
						}

						SetPlayerSettingData(playerid, setting_id, setting_type);

						ShowPlayerSettings(playerid);
					}
					else
					{
						new query[148];

						format
						(
							query, sizeof query,
							"UPDATE accounts SET "\
							"setting1=%d,"\
							"setting2=%d"\
							" WHERE id=%d LIMIT 1",
							GetPlayerSettingData(playerid, S_TEAM_CHAT),
							GetPlayerSettingData(playerid, S_CHANGE_NAME),
							GetPlayerAccountID(playerid)
						);
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"Сохранено",
								"{FFFFFF}Новые настройки будут автоматически устанавливаться после каждой авторизации",
								"Ок", ""
							);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 02)");
							ShowPlayerSettings(playerid);
						}
					}
				}
				else cmd::menu(playerid, "");
			}
			case DIALOG_PLAYER_SECURITY_SETTINGS:
			{
				if(response)
				{
					switch(list_id)
					{
						case 1:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
								"Информация о настройках",
								"{FFFFFF}Тут Вы можете изменить настройки безопасности вашего аккаунта. Это\n"\
								"поможет защитить его от взлома.\n\n"\
								"Существуют 3 вида защиты: с использованием мобильного приложения\n"\
								"{6699FF}Google Authenticator{FFFFFF}, системы 'Случайный код' или номера мобильного\n"\
								"телефона. Если Вы включите защиту, то при авторизации, помимо\n"\
								"пароля, будет запрашиваться ввод кода или части номера телефона\n"\
								"(в зависимости от ваших настроек). Подробнее Вы можете узнать, выбрав\n"\
								"нужный пункт в меню безопасности.\n\n"\
								"Система будет запрашивать ввод только если Ваш IP адрес или подсеть\n"\
								"(первые 2 цифры IP адреса) игрока не совпадают с теми, которые были\n"\
								"записаны при успешном входе в игру. Другими словами, система\n"\
								"выдаст запрос, если под Вашим аккаунтом попытаются зайти с другого\n"\
								"компьютера.",
								"Назад", ""
							);
						}
						case 2:
						{
							if(strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true) != 0)
							{
								// установлен
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PHONE, DIALOG_STYLE_LIST,
									"При авторизации запрашивать мобильный...",
									"Не запрашивать\n"\
									"Если подсеть не совпадает с моей\n"\
									"Если IP не совпадает с моим",
									"Сохранить", "Назад"
								);
							}
							else
							{
								// не установлен
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
									"Мобильный телефон",
									"{FFFFFF}В данный момент мы проводим обновление этой системы безопасности.\n"\
									"Приносим свои извинения за временные неудобства.",
									"Назад", ""
								);
							}

						}
						case 3:
						{
						    SendClientMessage(playerid,-1,"Скоро на SAMP Mobile....");
/*							if(strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true) != 0)
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN, DIALOG_STYLE_LIST,
									"При авторизации запрашивать случайный PIN-код...",
									"Не запрашивать\n"\
									"Если подсеть не совпадает с моей\n"\
									"Если IP не совпадает с моим",
									"Сохранить", "Назад"
								);
							}
							else
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN_SET, DIALOG_STYLE_MSGBOX,
									"Случайный PIN-код",
									"{FFFFFF}Для продолжения, вам необходимо придумать и набрать 4-х значный код.\n\n"\
									"Эта система безопасности поможет защитить Ваш аккаунт, если на\n"\
									"компьютер попадет вирус-кейлоггер, который перехватывает данные с\n"\
									"клавиатуры.  Каждый раз когда ваш IP Адресс не будет совпадать с \n\
									IP последней авторизации , мы будем заправшить этот код.",
									"Далее", "Назад"
								);
							}
*/
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
								"Защита с использованием приложения Authenticator",
								"{FFFFFF}Этот тип защиты является самым надежным для Вашего аккаунта. Чтобы его активировать,\n"\
								"зайдите в Личный Кабинет на сайте {33CCFF}"SERVER_SITE" (Настройки > Защитить акк.) {FFFFFF}и следуйте\n"\
								"инструкциям.\n\n"\
								"Вам потребуется мобильное устройство с поддержкой сторонних приложений (Android, iOS,\n"\
								"Windows Phone и другие). После включения защиты на сайте, вернитесь в это меню для\n"\
								"завершения настройки.",
								"Назад", ""
							);
						}
						case 5:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_PASS_1, DIALOG_STYLE_INPUT,
								"Изменение пароля",
								"{FFFFFF}Введите Ваш текущий пароль в поле ниже:",
								"Далее", "Назад"
							);
						}
						case 6:
						{
							if(!strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true))
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN_SET, DIALOG_STYLE_MSGBOX,
									"Случайный PIN-код",
									"{FFFFFF}Для продолжения, вам необходимо придумать и набрать 4-х значный код.\n\n"\
									"Эта система безопасности поможет защитить Ваш аккаунт, если на\n"\
									"компьютер попадет вирус-кейлоггер, который перехватывает данные с\n"\
									"клавиатуры.  Кнопки всегда располагаются в случайном порядке, что не даст\n"\
									"злоумышленникам возможность узнать ваш PIN-код.",
									"Далее", "Назад"
								);
							}
							else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_CHECK);
						}
						case 7:
						{
							// 7. Статус безопасности
							static const
								setting_status_name[3][64] =
							{
								"Не запрашивается",
								"{1E90FF}Запрашивается при несовпадении подсети",
								"{009900}Запрашивается при несовпадении IP"
							};

							new fmt_str[364];
							format
							(
								fmt_str, sizeof fmt_str,
								"{FFFFFF}Тут Вы можете увидеть статус всех Ваших настроек безопасности.\n"\
								"Для их изменения, выберите нужный пункт в меню настроек\n\n"\
								"Мобильный телефон:\t\t%s\n"\
								"{FFFFFF}Случайный PIN-код:\t\t%s\n"\
								"{FFFFFF}Google Authenticator:\t\t{CC9900}Не запрашивается",
								setting_status_name[GetPlayerData(playerid, P_REQUEST_PHONE)],
								setting_status_name[GetPlayerData(playerid, P_REQUEST_PIN)]
							);
							Dialog(playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX, "Статус безопасности", fmt_str, "Назад", "");
						}
						case 8:
						{
							if(GetPlayerData(playerid, P_CONFIRM_EMAIL))
								return SendClientMessage(playerid, 0xFFFFFFFF, "Ваш Email-адрес уже подтвержден");

							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_EMAIL, DIALOG_STYLE_MSGBOX,
								"{6699FF}Подтверждение Email",
								"{FFFFFF}При регистрации на сервере на Вашу почту мы выслали ссылку для\n"\
								"подтверждения Email. Она действительна в течение 14 дней.\n"\
								"Пожалуйста, проверьте почту и подтвердите ее.\n\n"\
								"В случае, если вы не получили наше письмо, нажмите кнопку \"Повтор\".\n"\
								"Мы отправим Вам новую ссылку.",
								"Закрыть", "Повтор"
							);
						}
						default:
							return 1;
					}
				}
				else cmd::menu(playerid, "");
			}
			case DIALOG_SECURITY_SETTING_INFO:
			{
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PHONE:
			{
				if(!strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true)) return 1;

				if(response)
				{
					if(0 <= list_id-1 <= 2)
					{
						new query[64 + 1];
						SetPlayerData(playerid, P_REQUEST_PHONE, list_id-1);

						format(query, sizeof query, "UPDATE accounts SET request_phone=%d WHERE id=%d LIMIT 1", list_id-1, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {00FFCC}сохранены");
							switch(list_id-1)
							{
								case 1: SendClientMessage(playerid, 0xCECECEFF, "Запрос на ввод мобильного телефона отключен");
								case 2: SendClientMessage(playerid, 0xFFFF00FF, "Ваш мобильный телефон будет запрашиваться при несовпадении подсети");
								case 3: SendClientMessage(playerid, 0x32a44bFF, "Мобильный телефон будет запрашиваться при несовпадении IP адресов");
							}
						}
						else
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {FF3333}не сохранены");
							SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 03)");
						}
					}
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PHONE_S:
			{
				// установить телефон
				if(strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true) != 0) return 1;
			}
			case DIALOG_SECURITY_SETTING_PIN:
			{
				if(!strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true)) return 1;

				if(response)
				{
					if(0 <= list_id-1 <= 2)
					{
						new query[64 + 1];
						SetPlayerData(playerid, P_REQUEST_PIN, list_id-1);

						format(query, sizeof query, "UPDATE accounts SET request_pin=%d WHERE id=%d LIMIT 1", list_id-1, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {00FFCC}сохранены");
							switch(list_id-1)
							{
								case 1: SendClientMessage(playerid, 0xCECECEFF, "Запрос случайного PIN-кода отключен");
								case 2: SendClientMessage(playerid, 0xFFFF00FF, "Ваш случайный PIN-код будет запрашиваться при несовпадении подсети");
								case 3: SendClientMessage(playerid, 0x32a44bFF, "Случайный PIN-код будет запрашиваться при несовпадении IP адресов");
							}
						}
						else
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "Изменения в настройках безопасности {FF3333}не сохранены");
							SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 03)");
						}
					}
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PIN_SET:
			{
				// установить пин код
				if(strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true) != 0) return 1;

				if(response)
				{
					ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_SET);
				}
				else ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PASS_1:
			{
				if(response)
				{
					new query[256],
						rows;

				    mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%s' AND password=MD5('%s')", GetPlayerNameEx(playerid), inputtext);
					mysql_query(mysql, query, true);

					rows = cache_num_rows();

					if(!(rows == 0))
					{
						Dialog
						(
							playerid, DIALOG_SECURITY_SETTING_PASS_2, DIALOG_STYLE_INPUT,
							"Новый пароль",
							"{FFFFFF}Введите новый пароль в поле ниже:",
							"Изменить", "Отмена"
						);
						return 1;
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы ввели неверный пароль");
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PASS_2:
			{
				if(response)
				{
					if(!(1 <= strlen(inputtext) <= 15) || strfind(inputtext, " ") != -1)
					{
						SendClientMessage(playerid, 0xCECECEFF, "Длина пароля должна быть от 6 до 15 символов");
						SendClientMessage(playerid, 0xCECECEFF, "Также не допускается использование пробелов");
					}
					else
					{
						new query[100];
						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET password=MD5('%e') WHERE id=%d LIMIT 1", inputtext, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							format(g_player[playerid][P_PASSWORD], 64, "%s", inputtext);
							format(query, sizeof query, "Ваш новый пароль: {1E90FF}%s", GetPlayerData(playerid, P_PASSWORD));

							SendClientMessage(playerid, 0xFFFF00FF, query);
							SendClientMessage(playerid, 0xFFFFFFFF, "Рекомендуем сделать скрин {32a44b}(клавиша F8) {FFFFFF}чтобы не забыть его");

							ShowPlayerSecuritySettings(playerid);
							return 1;
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 05)");
					}

					Dialog
					(
						playerid, DIALOG_SECURITY_SETTING_PASS_2, DIALOG_STYLE_INPUT,
						"Новый пароль",
						"{FFFFFF}Введите новый пароль в поле ниже:",
						"Изменить", "Отмена"
					);
				}
				else ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_EMAIL:
			{
				if(!response)
				{
					// отправка кода на почту
					Dialog
					(
						playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
						"Письмо отправлено",
						"{FFFFFF}В течение нескольких минут на Вашу почту придет письмо с новой ссылкой.\n"\
						"Перейдите по ней для подтверждения Email.",
						"Закрыть", ""
					);
				}
			}
			case DIALOG_REPORT:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(1 <= len <= 80)
					{
						new fmt_str[128];
                        if(GetPlayerPremium(playerid))
						{
						    format(fmt_str, sizeof fmt_str, "{ffff00}[VIP PLAYER]{ffffff} %s[%d] : {ffff00}%s", GetPlayerNameEx(playerid), playerid, inputtext);
						}
						else format(fmt_str, sizeof fmt_str, "%s[%d] : {ffff00}%s", GetPlayerNameEx(playerid), playerid, inputtext);
						SendMessageToAdmins(fmt_str, 0x32a44bFF);

						if(GetPlayerAdminEx(playerid) < 1)
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);

						SendClientMessage(playerid, 0xFFFFFFFF, "Ваше сообщение отправлено");

						format(fmt_str, sizeof fmt_str, "%s", inputtext);

						SendLog(playerid, LOG_TYPE_REPORT, fmt_str);

						return 1;
					}
					else if(len > 80)
					{
						SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное сообщение");
					}
					ShowPlayerReportDialog(playerid);
				}
				else cmd::menu(playerid, "");
			}
			case DIALOG_PLAYER_IMPROVEMENTS:
			{
				if(response)
				{
					new my_i_level = GetPlayerData(playerid, P_IMPROVEMENTS);

					if(0 <= list_id-1 <= sizeof(g_player_improvements)-1)
					{
						new i_level = GetPlayerImprovementInfo(list_id-1, I_LEVEL);
						new i_price = GetPlayerImprovementInfo(list_id-1, I_PRICE);

						if(my_i_level < list_id-1)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Это улучшение пока не доступно");
						}
						else if(my_i_level > list_id-1)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили это улучшение");
						}
						else if(GetPlayerLevel(playerid) < i_level || GetPlayerMoneyEx(playerid) < i_price)
						{
							new fmt_str[64 + 1];

							format(fmt_str, sizeof fmt_str, "Для покупки этого улучшения необходим %d уровень и $%d", i_level, i_price);
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}
						else
						{
							new fmt_str[85];

							format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,improvements=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - i_price, my_i_level + 1, GetPlayerAccountID(playerid));
							mysql_query(mysql, fmt_str, false);

							if(!mysql_errno())
							{
								GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшения аккаунта", false);

								AddPlayerData(playerid, P_IMPROVEMENTS, +, 1);

								format(fmt_str, sizeof fmt_str, "Вы приобрели улучшение {ffff00}\"%s\"", GetPlayerImprovementInfo(list_id-1, I_NAME));
								SendClientMessage(playerid, 0x1E90FFFF, fmt_str);

								switch(list_id)
								{
									case 1:
										SendClientMessage(playerid, 0xCECECEFF, "Полоска здоровья будет уменьшаться значительно медленнее");

									case 2:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Вы можете покидать организацию по собственному желанию {33FF33}(/vleave)");

									case 3:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Вы можете использовать /backpack");

									case 4:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Вы можете не бояться небольших аварий, двигатель не заглохнет");

									case 5:
										SendClientMessage(playerid, 0xCECECEFF, "Теперь Ваше оружие будет сохраняться в полном объеме при выходе из игры");
								}
							}
							else
							{
								SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 06)");
								ShowPlayerImprovementsDialog(playerid);
							}
						}
					}
					else
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"Информация",
							"{FFFFFF}1. Выносливость позволит находиться в хорошей форме длительное\n"\
							"время. Полоска здоровья будет уменьшаться медленнее.\n\n"\
							"2. Решительность позволит вам самостоятельно принять решение об\n"\
							"увольнении с организации (команда /vleave). Без решительности вы не\n"\
							"сможете покинуть организацию по собственному желанию.\n\n"\
							"3. Рюкзак даст возможность переносить с собой металл, патроны и\n"\
							"наркотики в гораздо большем количестве.\n\n"\
							"4. Став мастером вождения, двигатель транспорта под Вашим управлением\n"\
							"больше не будет глохнуть при различных ударах.\n\n"\
							"5. Полная экипировка сохраняет все ваше оружие в полном объеме,\n"\
							"при выходе из игры.",
							"Закрыть", ""
						);
					}
				}
				else cmd::menu(playerid, "");
			}
			case DIALOG_CHANGE_NAME:
			{
				if(response)
				{
					if(!GetPVarInt(playerid, "change_name_status"))
					{
						new len = strlen(inputtext);
						if(4 <= len <= 20)
						{
							new bool: valid_name = true;
							for(new idx; idx < len; idx ++)
							{
								switch(inputtext[idx])
								{
									case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
									default:
										valid_name = false;
								}
							}

							if(!strcmp(GetPlayerNameEx(playerid), inputtext, false))
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже используете это имя");
							}
							else if(valid_name)
							{
								new query[128];
								new Cache: result, rows;

								mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
								result = mysql_query(mysql, query, true);

								rows = cache_num_rows();
								cache_delete(result);

								if(!rows)
								{
									SetPVarInt(playerid, "change_name_status", 1);
									SetPVarString(playerid, "change_name", inputtext);

									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"Заявка на изменение имени",
										"{FFFFFF}Ваша просьба об изменении ника отправлена администрации.\n"\
										"Вы получите сообщение, как только заявка будет обработана.\n\n"\
										"Если в течении нескольких минут Ваше имя не было изменено,\n"\
										"то, скорее всего, оно не соответствует RP правилам,\n"\
										"либо Вы уже используете RP имя.",
										"Ок", ""
									);

									format(query, sizeof query, "[Смена non rp имени] %s >> %s {ffff00}| /okay %d для одобрения" , GetPlayerNameEx(playerid), inputtext, playerid);
									SendMessageToAdmins(query, 0x66CC99FF);

								}
								else SendClientMessage(playerid, 0xCECECEFF, "Введенное Вами имя уже используется");

							}
							else
							{
								SendClientMessage(playerid, 0xCECECEFF, "Имя уже используется или содержит недопустимые символы");
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте латинские буквы a-z A-Z, а также символы [ ] _");
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Недопустимый формат ввода");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы уже подавали заявку на изменение имени");
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_GPS:
			{
				if(response)
				{
					switch(list_id)
					{
						case 1:
						{
							Dialog
							(
								playerid, DIALOG_GPS_PUBLIC_PLACES, DIALOG_STYLE_LIST,
								"Общественные места",
								"{ffff00}1. {FFFFFF}Центр лицензирования (LS)\n\
								{ffff00}2. {FFFFFF}Авторынок эконом класса (LS)\n\
								{ffff00}3. {FFFFFF}Авторынок среднего класса (SF)\n\
								{ffff00}4. {FFFFFF}Авторынок премиум класса (LV)\n\
								{ffff00}5. {FFFFFF}Мото-Вело рынок (LS)\n\
								{ffff00}6. {FFFFFF}Б/У рынок (LS)\n\
								{ffff00}7. {FFFFFF}Покупка воздушного транспорта (LS)\n\
								{ffff00}8. {FFFFFF}Военкомат (LS)\n\
								{ffff00}9. {FFFFFF}Центральный банк ЛС",
								"Отметить", "Назад"
							);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_GPS_STATE_ORGANIZATIONS, DIALOG_STYLE_LIST,
								"Государственные организации",
								"{ffff00}1. {FFFFFF}Мэрия г.Los-Santos\n\
								{ffff00}2. {FFFFFF}LSPD\n\
								{ffff00}3. {FFFFFF}FBI\n\
								{ffff00}4. {FFFFFF}Больница г.Los-Santos\n\
								{ffff00}5. {FFFFFF}СМИ г.Los-Santos\n\
								{ffff00}6. {FFFFFF}ВМФ",
								"Отметить", "Назад"
							);
						}
						case 3:
						{
							Dialog
							(
								playerid, DIALOG_GPS_GANGS, DIALOG_STYLE_LIST,
								"Базы преступных группировок",
								"{ffff00}1. {FFFFFF}Grove Gang\n\
								{ffff00}2. {FFFFFF}Vagos Gang\n\
								{ffff00}3. {FFFFFF}Ballas Gang\n\
								{ffff00}4. {FFFFFF}Aztecas Gang",
								"Отметить", "Назад"
							);
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_GPS_JOBS, DIALOG_STYLE_LIST,
								"По работе",
								"{ffff00}1. {FFFFFF}Работа грузчика\n\
								{ffff00}2. {FFFFFF}Работа лесоруба\n\
								{ffff00}3. {FFFFFF}Работа на заводе\n\
								{ffff00}4. {FFFFFF}Работа развозчиком\n\
								{ffff00}5. {FFFFFF}Работа фермера\n\
								{ffff00}6. {FFFFFF}Работа шахтёра\n\
								{ffff00}7. {FFFFFF}Работа комбайнера {1E90FF}(3 уровень)\n\
								{ffff00}8. {FFFFFF}Шахта {1E90FF}(Загрузка металла)\n\
								{ffff00}9. {FFFFFF}База дальнобойщиков\n\
								{ffff00}10. {FFFFFF}Развозчик пиццы\n\
								{ffff00}11. {FFFFFF}Таксопарк\n\
								{ffff00}12. {FFFFFF}База автобусов\n\
								{ffff00}13. {FFFFFF}База автомехаников\n\
								{ffff00}14. {FFFFFF}Пирс Лос-Сантос (рыбалка)\n\
								{ffff00}14. {FFFFFF}Пирс Лас-Вентурас (рыбалка)","Отметить", "Назад");

							// 3. Банк Эдово // (частный)
						}
						/*case 7:
						{
							Dialog
							(
								playerid, DIALOG_GPS_ENTERTAINMENT, DIALOG_STYLE_LIST,
								"Развлечения",
								"{ffff00}1. {FFFFFF}Райский остров\n\
								2. Областной дом культуры\n\
								3. Гоночная трасса для картинга\n\
								4. Гоночная трасса для мотоциклов\n\
								5. Гоночная трасса для катеров\n\
								6. Игровой клуб Арзамаса (в разработке)\n\
								7. Игровой клуб Батырево (в разработке)\n\
								8. Игровой клуб Лыткарино (в разработке)\n\
								9. Пляж \"Кордон\"\n\
								10. Пляж \"Анашан\"\n\
								11. Пляж \"Роговичи\"\n\
								12. Парк Арзамаса",
								"Отметить", "Назад"
							);
						}*/
						case 5: // 8. Бизнес
						{
							CallLocalFunction("ShowPlayerGPSBusinessList", "i", playerid);
						}
						case 6:
						{
							new fmt_str[128];

							new stationid;
							new Float: dist;

							stationid = GetNearestFuelStation(playerid, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								GetFuelStationData(stationid, FS_POS_X),
								GetFuelStationData(stationid, FS_POS_Y),
								GetFuelStationData(stationid, FS_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится АЗС №%d \"%s\" (расстояние %.1f м)", stationid, GetFuelStationData(stationid, FS_NAME), dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас буквой {0099CC}Z");
						}
						case 7:
						{
							new fmt_str[128];

							new atmid;
							new Float: dist;

							atmid = GetNearestAtm(playerid, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, g_atm[atmid][A_POS_X], g_atm[atmid][A_POS_Y], g_atm[atmid][A_POS_Z]);

							EnablePlayerGPS
							(
								playerid,
								g_atm[atmid][A_POS_X],
								g_atm[atmid][A_POS_Y],
								g_atm[atmid][A_POS_Z],
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближайший банкомат находится на расстоянии %.1f м от Вас", dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Он отмечен у Вас значком {32a44b}$");
						}
						case 8:
						{
							new fmt_str[128];

							new biz_id;
							new Float: dist;

							biz_id = GetNearestBiz(playerid, BUSINESS_TYPE_MCDONALDS, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								GetBusinessData(biz_id, B_POS_X),
								GetBusinessData(biz_id, B_POS_Y),
								GetBusinessData(biz_id, B_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится \"%s\" №%d (расстояние %.1f м)",GetBusinessInteriorInfo(GetBusinessData(biz_id, B_INTERIOR), BT_NAME), biz_id,  dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас значком {32a44b}$");
						}
						case 9:
						{
							new fmt_str[128];

							new biz_id;
							new Float: dist;

							biz_id = GetNearestBiz(playerid, BUSINESS_TYPE_SHOP_24_7, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								GetBusinessData(biz_id, B_POS_X),
								GetBusinessData(biz_id, B_POS_Y),
								GetBusinessData(biz_id, B_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится \"%s\" №%d (расстояние %.1f м)", GetBusinessInteriorInfo(GetBusinessData(biz_id, B_INTERIOR), BT_NAME), biz_id,  dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас значком {32a44b}$");
						}
						case 10:
						{
							new fmt_str[128];

							new biz_id;
							new Float: dist;

							biz_id = GetNearestBiz(playerid, BUSINESS_TYPE_CLOTHING_SHOP, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								GetBusinessData(biz_id, B_POS_X),
								GetBusinessData(biz_id, B_POS_Y),
								GetBusinessData(biz_id, B_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится \"%s\" №%d (расстояние %.1f м)", GetBusinessInteriorInfo(GetBusinessData(biz_id, B_INTERIOR), BT_NAME), biz_id,  dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас значком {32a44b}$");
						}
						case 11:
						{
							new fmt_str[128];

							new biz_id;
							new Float: dist;

							biz_id = GetNearestBiz(playerid, BUSINESS_TYPE_SHOP_GUN, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(biz_id, B_POS_X), GetBusinessData(biz_id, B_POS_Y), GetBusinessData(biz_id, B_POS_Z));

							EnablePlayerGPS
							(
								playerid,
								GetBusinessData(biz_id, B_POS_X),
								GetBusinessData(biz_id, B_POS_Y),
								GetBusinessData(biz_id, B_POS_Z),
								""
							);

							format(fmt_str, sizeof fmt_str, "Ближе всех к Вам находится \"%s\" №%d (расстояние %.1f м)", GetBusinessInteriorInfo(GetBusinessData(biz_id, B_INTERIOR), BT_NAME), biz_id,  dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

							SendClientMessage(playerid, 0xFFFF00FF, "Она отмечена у Вас значком {32a44b}$");
						}
						default:
							return 1;
					}
				}
			}
			case DIALOG_GPS_PUBLIC_PLACES:
			{
				if(response)
				{
					if(0 <= list_id-1 <= sizeof gps_public_places-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_public_places[list_id-1][G_POS_X],
							gps_public_places[list_id-1][G_POS_Y],
							gps_public_places[list_id-1][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_STATE_ORGANIZATIONS:
			{
				if(response)
				{
					if(0 <= list_id-1 <= sizeof gps_state_organizations-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_state_organizations[list_id-1][G_POS_X],
							gps_state_organizations[list_id-1][G_POS_Y],
							gps_state_organizations[list_id-1][G_POS_Z],
							"Местоположение организации отмечено у Вас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_GANGS:
			{
				if(response)
				{
					if(0 <= list_id-1 <= sizeof gps_gangs-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_gangs[list_id-1][G_POS_X],
							gps_gangs[list_id-1][G_POS_Y],
							gps_gangs[list_id-1][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_JOBS:
			{
				if(response)
				{
					if(0 <= list_id-1 <= sizeof gps_jobs-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_jobs[list_id-1][G_POS_X],
							gps_jobs[list_id-1][G_POS_Y],
							gps_jobs[list_id-1][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_ENTERTAINMENT:
			{
				if(response)
				{
					if(0 <= list_id-1 <= sizeof gps_entertainment-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_entertainment[list_id-1][G_POS_X],
							gps_entertainment[list_id-1][G_POS_Y],
							gps_entertainment[list_id-1][G_POS_Z],
							"Место отмечено у Вас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_BUSINESS:
			{
				if(response)
				{
					if(0 <= list_id-1 <= MAX_BUSINESS_GPS-1)
					{
						new idx = GetPlayerListitemValue(playerid, list_id-1);
						new businessid = GetBusinessGPSInfo(idx, BG_BIZ_ID);

						if(GetBusinessGPSInfo(idx, BG_SQL_ID))
						{
							EnablePlayerGPS
							(
								playerid,
								GetBusinessData(businessid, B_POS_X),
								GetBusinessData(businessid, B_POS_Y),
								GetBusinessData(businessid, B_POS_Z),
								"Бизнес отмечен у Вас на GPS"
							);
						}
						else cmd::gps(playerid, "");
					}
				}
				else cmd::gps(playerid, "");
			}
			// -----------------------------------------------------------------
			case DIALOG_HELP:
			{
				if(response)
				{
					if(0 <= list_id-1 <= sizeof help_info - 1)
						ShowPlayerHelpSection(playerid, list_id-1);
				}
				else DeletePVar(playerid, "help_section");
			}
			case DIALOG_HELP_SECTION:
			{
				new sectionid = GetPVarInt(playerid, "help_section");

				if(!response && sectionid < sizeof help_info - 1)
				{
					ShowPlayerHelpSection(playerid, sectionid + 1);
				}
				else cmd::help(playerid, "");
			}
			// -----------------------------------------------------------------
			case DIALOG_SERVER_RADIO:
			{
				if(response)
				{
					if(0 <= list_id-1 <= sizeof g_server_radio - 1)
					{
						PlayAudioStreamForPlayer(playerid, GetServerRadioData(list_id-1, SR_CHANNEL_URL));

						SetPVarInt(playerid, "server_radio_enabled", 1);
						SendClientMessage(playerid, 0x32a44bFF, "Онлайн радио включено");
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ANIM_LIST:
			{
				if(response)
				{
					if(!SetPlayerAnimation(playerid, list_id-1))
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"Информация",
							"Для быстрого запуска нужной анимации можно использовать {FFFFFF}/anim(list) [номер анимации из списка]",
							"Закрыть", ""
						);
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_OPEN_HOOD_OR_TRUNK:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid)
				{
					new E_VEHICLE_PARAMS_STRUCT: param = response ? V_BONNET : V_BOOT;
					new set_status = GetVehicleParam(vehicleid, param) ^ VEHICLE_PARAM_ON;

					SetVehicleParam(vehicleid, param, set_status);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_DRIVING_TUTORIAL_START:
			{
				if(response)
					ShowDrivingTutorialSection(playerid, 0);
			}
			case DIALOG_DRIVING_TUTORIAL:
			{
				new step = GetPVarInt(playerid, "driving_tutorial_step");
				if(response)
				{
					step ++;
				}
				else step --;

				if(step >= sizeof driving_tutorial)
				{
					Dialog
					(
						playerid, DIALOG_DRIVING_TUTORIAL_END, DIALOG_STYLE_MSGBOX,
						"Завершение",
						"{FFFFFF}Надеемся вы все внимательно прочли и готовы приступить к сдаче экзамена\n"\
						"Если вы сомневаетесь в чем-либо, то рекомендуем не рисковать и прочитать нужный раздел еще раз!\n\n"\
						"Желаем Вам удачи на экзамене!\n"\
						"Для того, чтобы завершить обучение нажмите \"Выход\"",
						"Выход", "Назад"
					);
				}
				else if(step < 0)
				{
					ShowPlayerDrivingTutorial(playerid);
				}
				else
				{
					ShowDrivingTutorialSection(playerid, step);
				}
			}
			case DIALOG_DRIVING_TUTORIAL_END:
			{
				if(!response)
					ShowDrivingTutorialSection(playerid, sizeof driving_tutorial - 1);
			}
			case DIALOG_DRIVING_EXAM_START:
			{
				if(response)
				{
					SetPlayerDrivingExamInfo(playerid, DE_POINTS, 0);
					ShowPlayerDrivingExam(playerid, 0);
				}
			}
			case DIALOG_DRIVING_EXAM:
			{
				new step = GetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP);

				if(driving_exam[step][DE_CORRECT_ANSWER] == (list_id))
				{
					SetPlayerChatBubble(playerid, "+1", 0xFFFF00FF, 5.0, 2000);
					SetPlayerDrivingExamInfo(playerid, DE_POINTS, GetPlayerDrivingExamInfo(playerid, DE_POINTS) + 1);
				}
				ShowPlayerDrivingExam(playerid, step + 1);
			}
			case DIALOG_DRIVING_EXAM_RESULT:
			{
				if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
				{
					Dialog
					(
						playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
						"{CCCC00}Практическая часть",
						"{FFFFFF}Отлично, теперь приступим к практической части\n"\
						"Вам нужно будет немного проехаться по городу на учебном авто\n"\
						"Найти его можно на стоянке слева от выхода\n\n"\
						"Внимание! Соблюдайте осторожность и не превышайте скорость\n"\
						"Если вы повредите автомобиль экзамен будет провален",
						"Начать", ""
					);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ATM://мне сюда
			{
				if(response)
				{
					switch(list_id)
					{
						case 1,2: // Снять\Положить с банковского счета
						{
							ShowPlayerATMSelectSumDialog(playerid, !(list_id-1));
						}
						case 3: // Баланс банковского счета
						{
							new fmt_str[64];
							format(fmt_str, sizeof fmt_str, "{FFFFFF}На Вашем банковском счету {%s}$%d", GetPlayerBankMoney(playerid) > 0 ? ("32a44b") : ("FF6633"), GetPlayerBankMoney(playerid));

							Dialog
							(
								playerid, DIALOG_ATM_BALANCE, DIALOG_STYLE_MSGBOX,
								"Баланс счета",
								fmt_str,
								"Назад", "Выйти"
							);
						}
						case 4: // Снять со счета предприятия
						{
	    					new stationid = GetPlayerFuelStation(playerid);
							new businessid = GetPlayerBusiness(playerid);
							if(stationid == -1 && businessid == -1) return SendClientMessage(playerid,-1,"У вас нет предприятия!");
							ShowPlayerATMCompanyDialog(playerid, true);
						}
						case 5: // Положить на счет предприятия
						{
							new stationid = GetPlayerFuelStation(playerid);
							new businessid = GetPlayerBusiness(playerid);
							if(stationid == -1 && businessid == -1) return SendClientMessage(playerid,-1,"У вас нет предприятия!");
							ShowPlayerATMCompanyDialog(playerid, false);
						}
						case 6: // Пополнить мобильный телефон
						{
							if(GetPlayerPhone(playerid) != 0)
							{
								Dialog
								(
									playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
									"Пополнение мобильного телефона",
									"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
									"Готово", "Назад"
								);
							}
							else
							{
								SendClientMessage(playerid, 0xCECECEFF, "У Вас нет телефона. Его можно купить в сотовом салоне");
								ShowPlayerATMDialog(playerid);
							}
						}
						case 7: // Безналичный перевод
						{
							if(GetPlayerLevel(playerid) >= 2)
							{
								Dialog
								(
									playerid, DIALOG_ATM_TRANSFER_MONEY_1, DIALOG_STYLE_INPUT,
									"Безналичный перевод",
									"{FFFFFF}Укажите номер банковского счета:",
									"Далее", "Отмена"
								);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Перевод денег доступен со 2 уровня");
						}
						case 8:
						{
							Dialog
							(
								playerid, DIALOG_ATM_TICKET_SELECT, DIALOG_STYLE_LIST,
								"Оплата штрафа",
								"1. Выбрать штраф из списка\n"\
								"2. Оплатить штраф по номеру",
								"Далее", "Отмена"
							);
						}
						case 9: // Благотворительность
						{
							ShowPlayerATMCharityDialog(playerid);
						}
						default:
							return 1;
					}
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
				}
			}
			case DIALOG_ATM_TAKE_MONEY: // снять деньги
			{
				if(response)
				{
					if(0 <= list_id-1 <= 6)
					{
						new sum = atm_item_sum[list_id-1];
						if(GetPlayerBankMoney(playerid) >= sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + sum, GetPlayerBankMoney(playerid) - sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, -, sum);
								GivePlayerMoneyEx(playerid, sum, "Снятие денег с банкомата", false, true);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "На Вашем банковском счету недостаточно средств");
							ShowPlayerATMSelectSumDialog(playerid, true);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, true);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_TAKE_OTHER_MONEY: // снять деньги (другая сума)
			{
				if(response)
				{
					new take_sum = strval(inputtext);
					if(take_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerBankMoney(playerid) >= take_sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + take_sum, GetPlayerBankMoney(playerid) - take_sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, -, take_sum);
								GivePlayerMoneyEx(playerid, take_sum, "Снятие денег с банкомата (другая сумма)", false, true);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "На Вашем банковском счету недостаточно средств");
							ShowPlayerATMSelectOtherSum(playerid, true);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, true);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
					ShowPlayerATMSelectSumDialog(playerid, true);
				}
			}
			case DIALOG_ATM_PUT_MONEY: // положить деньги
			{
				if(response)
				{
					if(0 <= list_id-1 <= 6)
					{
						new sum = atm_item_sum[list_id-1];
						if(GetPlayerMoneyEx(playerid) >= sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - sum, GetPlayerBankMoney(playerid) + sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, +, sum);
								GivePlayerMoneyEx(playerid, -sum, "Пополнение денег в банкомате", false, true);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
							ShowPlayerATMSelectSumDialog(playerid, false);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, false);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_PUT_OTHER_MONEY: // положить деньги (другая сума)
			{
				if(response)
				{
					new put_sum = strval(inputtext);
					if(put_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= put_sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - put_sum, GetPlayerBankMoney(playerid) + put_sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, +, put_sum);
								GivePlayerMoneyEx(playerid, -put_sum, "Пополнение денег в банкомате (другая сумма)", false, true);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 08)");

							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
							ShowPlayerATMSelectOtherSum(playerid, false);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, false);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
					ShowPlayerATMSelectSumDialog(playerid, false);
				}
			}
			case DIALOG_ATM_BALANCE:
			{
				if(response)
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_PHONE_BALANCE:
			{
				if(response)
				{
					new sum = strval(inputtext);
					if(sum < 0 || sum > 10000)
					{
					    Dialog
						(
							playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
							"Пополнение мобильного телефона",
							"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
							"Готово", "Назад"
						);
				 		SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Нельзя положить меньше 0 и больше 10.000");
                        return 1;
					}
					if(sum > 0 && IsNumeric(inputtext))
					{
						if(sum > 10000)
						{
							SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Нельзя положить меньше 0 и больше 10.000");
							Dialog
							(
								playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
								"Пополнение мобильного телефона",
								"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
								"Готово", "Назад"
							);
							return 1;
						}
						if(GetPlayerMoneyEx(playerid) >= sum)
						{
							new query[128];

							format(query, sizeof query, "UPDATE accounts SET money=%d,phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_PHONE_BALANCE)+sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);

							if(!mysql_errno())
							{
								GivePlayerMoneyEx(playerid, -sum, "Пополнение счета телефона", false, true);
								AddPlayerData(playerid, P_PHONE_BALANCE, +, sum);

								format(query, sizeof query, "Вы пополнили счет мобильного телефона на {FF9900}$%d", sum);
								SendClientMessage(playerid, 0x32a44bFF, query);

								format(query, sizeof query, "Сейчас на счету $%d", GetPlayerData(playerid, P_PHONE_BALANCE));
								SendClientMessage(playerid, 0x32a44bFF, query);

								return 1;
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 15)");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас не хватает денег");

						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
					}

					Dialog
					(
						playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
						"Пополнение мобильного телефона",
						"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
						"Готово", "Назад"
					);
				}
				else
				{
					ShowPlayerATMDialog(playerid);
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
				}
			}
			case DIALOG_ATM_SELECT_COMPANY_TAKE, DIALOG_ATM_SELECT_COMPANY_PUT:
			{
				if(response)
				{
					new bool: action = (dialogid == DIALOG_ATM_SELECT_COMPANY_TAKE);

					switch(list_id)
					{
						case 1:
							ShowPlayerATMBusinessDialog(playerid, action);

						case 2:
							ShowPlayerATMFuelStationDialog(playerid, action);
					}
				}
				else
				{
					ShowPlayerATMDialog(playerid);
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
				}
			}
			case DIALOG_ATM_FUEL_ST_TAKE_MONEY:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetFuelStationData(stationid, FS_BALANCE) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)+sum, GetFuelStationData(stationid, FS_BALANCE)-sum, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddFuelStationData(stationid, FS_BALANCE, -, sum);
									GivePlayerMoneyEx(playerid, sum, "+ Снятие средств со счета АЗС", false, true);

									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На счету предприятия нет такой суммы");
						}
						ShowPlayerATMFuelStationDialog(playerid, true);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
					}
				}
			}
			case DIALOG_ATM_FUEL_ST_PUT_MONEY:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetPlayerMoneyEx(playerid) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-sum, GetFuelStationData(stationid, FS_BALANCE)+sum, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddFuelStationData(stationid, FS_BALANCE, +, sum);
									GivePlayerMoneyEx(playerid, -sum, "Пополнение счета АЗС", false, true);

									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
						}
						ShowPlayerATMFuelStationDialog(playerid, false);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
					}
				}
			}
			case DIALOG_ATM_BIZ_TAKE_MONEY:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetBusinessData(businessid, B_BALANCE) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)+sum, GetBusinessData(businessid, B_BALANCE)-sum, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddBusinessData(businessid, B_BALANCE, -, sum);
									GivePlayerMoneyEx(playerid, sum, "+ Снятие средств со счета Бизнеса", false, true);

									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
									ShowPlayerATMDialog(playerid);

									return 1;
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На счету предприятия нет такой суммы");
						}
						ShowPlayerATMBusinessDialog(playerid, true);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
					}
				}
			}
			case DIALOG_ATM_BIZ_PUT_MONEY:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetPlayerMoneyEx(playerid) >= sum)
							{
								new query[128 + 1];

								format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-sum, GetBusinessData(businessid, B_BALANCE)+sum, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									AddBusinessData(businessid, B_BALANCE, +, sum);
									GivePlayerMoneyEx(playerid, -sum, "Пополнение счета Бизнеса", false, true);

									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет столько денег");
						}
						ShowPlayerATMBusinessDialog(playerid, false);
					}
					else
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);
					}
				}
			}
			case DIALOG_ATM_TRANSFER_MONEY_1:
			{
				if(response)
				{
					new transfer_id = strval(inputtext);

					if(transfer_id > 0 && IsNumeric(inputtext))
					{
						SetPlayerBankTransfer(playerid, BT_ID, 0);

						new query[64 + 1];
						new Cache: result;

						format(query, sizeof query, "SELECT id FROM bank_accounts WHERE id=%d LIMIT 1", transfer_id);
						result = mysql_query(mysql, query);

						if(cache_num_rows())
							SetPlayerBankTransfer(playerid, BT_ID, cache_get_row_int(0, 0));

						cache_delete(result);

						if(GetPlayerBankTransfer(playerid, BT_ID))
						{
							return ShowPlayerATMTransfer(playerid);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Счета с таким номером не существует");
					}

					Dialog
					(
						playerid, DIALOG_ATM_TRANSFER_MONEY_1, DIALOG_STYLE_INPUT,
						"Безналичный перевод",
						"{FFFFFF}Укажите номер банковского счета:",
						"Далее", "Отмена"
					);
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TRANSFER_MONEY_2:
			{
				new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
				if(response && transfer_id)
				{
					new transfer_sum = strval(inputtext);
					if(transfer_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerBankMoney(playerid) >= transfer_sum)
						{
							new fmt_str[155];

							format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.bank=%d,ba.balance=ba.balance + %d WHERE a.id=%d AND ba.id=%d", GetPlayerBankMoney(playerid)-transfer_sum, transfer_sum, GetPlayerAccountID(playerid), transfer_id);
							mysql_query(mysql, fmt_str, false);

							if(!mysql_errno())
							{
								format(fmt_str, sizeof fmt_str, "+ Пополнения с банкомата $%d", transfer_sum);
								BankAccountLog(playerid, transfer_id, fmt_str);

								AddPlayerData(playerid, P_BANK, -, transfer_sum);
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Откуда:\t\t\tОсновной счет\n"\
									"Куда:\t\t\t\tСчет №%d\n"\
									"Сумма:\t\t\t\t$%d\n"\
									"Остаток на Вашем счету:\t$%d",
									transfer_id,
									transfer_sum,
									GetPlayerBankMoney(playerid)
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{99FF00}Перевод завершен", fmt_str, "Закрыть", "");

								return PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 11)");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "На основном банковском счете недостаточно денег");
					}
					ShowPlayerATMTransfer(playerid);
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TICKET_SELECT:
			{
				if(response)
				{
					switch(list_id)
					{
						case 1:
						{
							new fmt_text[1024],
								query[90],
								Cache: result,
								rows;

							mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d AND status=0", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query, true);

							rows = cache_num_rows();

							ClearPlayerListitemValues(playerid);

							if(rows)
							{
								for(new idx; idx < rows; idx ++)
								{
									new reason[64];

									SetPlayerListitemValue(playerid, idx, cache_get_field_content_int(idx, "id"));

									cache_get_field_content(idx, "description", reason);

									format(query, sizeof query, "#%d\t$%d\t%s\n", cache_get_field_content_int(idx, "id"),
									cache_get_field_content_int(idx, "amount"), reason);

									strcat(fmt_text, query);
								}
							}
							else format(fmt_text, sizeof fmt_text, "У Вас нет неоплаченных штрафов");

							cache_delete(result);

							Dialog
							(
								playerid, DIALOG_ATM_TICKET_LIST, DIALOG_STYLE_LIST,
								"Список штрафов",
								fmt_text,
								"Выбор", "Отмена"
							);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_ATM_TICKET_PAY, DIALOG_STYLE_INPUT,
								"Оплата штрафа",
								"{FFFFFF}Введите номер штрафа, который\n"\
								"Вы хотели бы оплатить:",
								"Далее", "Отмена"
							);
						}
					}
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TICKET_LIST:
			{
				if(response)
				{
					new ticketid = GetPlayerListitemValue(playerid, list_id-1);

					if(ticketid) PayTicket(playerid, ticketid);
				}

				ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TICKET_PAY:
			{
				if(response)
				{
					new ticketid = strval(inputtext);

					PayTicket(playerid, ticketid);
				}

				ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_CHARITY:
			{
				if(response)
				{
					new put_sum = strval(inputtext);
					if(put_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= put_sum)
						{
							new fmt_str[85];
							format(fmt_str, sizeof fmt_str, "INSERT INTO charity (uid,money,time) VALUES (%d,%d,%d)", GetPlayerAccountID(playerid), put_sum, gettime());
							mysql_query(mysql, fmt_str, false);

							GivePlayerMoneyEx(playerid, -put_sum, "Благотворительность", true, true);

							format(fmt_str, sizeof fmt_str, "Вы сделали пожертвование в размере $%d", put_sum);
							SendClientMessage(playerid, 0x1E90FFFF, fmt_str);

							UpdateCharity();
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег");
							ShowPlayerATMCharityDialog(playerid);
						}
					}
					else ShowPlayerATMCharityDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PAY_FOR_RENT:
			{
				if(response)
				{
					new buffer = -1;
					switch(list_id)
					{
						case 1: // Заплатить за дом
						{
							buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
							if(buffer != -1)
							{
								ShowPlayerHousePayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет дома");
						}
						case 2: // Оплатить аренду бизнеса
						{
							buffer = GetPlayerBusiness(playerid);
							if(buffer != -1)
							{
								ShowPlayerBusinessPayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");
						}
						case 3: // Оплатить аренду АЗС
						{
							buffer = GetPlayerFuelStation(playerid);
							if(buffer != -1)
							{
								ShowPlayerFuelStationPayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет заправки");
						}
					}
					ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_FUEL_ST:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new rent_time = GetFuelStationData(stationid, FS_RENT_DATE);

							new rent_days = rent_time;
							new rent_price = GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2;

							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = rent_days + days;

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.bank=%d,f.rent_time=%d WHERE a.id=%d AND f.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetFuelStationData(stationid, FS_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {1E90FF}$%d", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно продлили аренду АЗС еще на {1E90FF}%d дней", days);
										SendClientMessage(playerid, 0x32a44bFF, fmt_str);

										TransferCoffersMoney(total_price, "Аренда АЗС", "", false);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо $%d", days, total_price);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerFuelStationPayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_BIZ:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new rent_time = GetBusinessData(businessid, B_RENT_DATE);

							new rent_days = rent_time;
							new rent_price = GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2;

							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = rent_time + days;

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.bank=%d,b.rent_time=%d WHERE a.id=%d AND b.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetBusinessData(businessid, B_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {1E90FF}$%d", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно продлили аренду бизнеса еще на {1E90FF}%d дней", days);
										SendClientMessage(playerid, 0x32a44bFF, fmt_str);

										TransferCoffersMoney(total_price, "Аренда Бизнеса", "", false);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо $%d", days, total_price);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerBusinessPayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_HOUSE:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new rent_days = GetHouseData(houseid, H_RENT_DATE);

							new rent_price = GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? GetHouseData(houseid, H_RENT_PRICE) : GetHouseData(houseid, H_RENT_PRICE) / 2;

							new total_price = rent_price * days;

							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									new rent_time = rent_days + days;

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,houses h SET a.bank=%d,h.rent_time=%d WHERE a.id=%d AND h.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetHouseData(houseid, 	H_RENT_DATE, 	rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {1E90FF}$%d", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно оплатили дом еще на {1E90FF}%d дней", days);
										SendClientMessage(playerid, 0x32a44bFF, fmt_str);

										TransferCoffersMoney(total_price, "Аренда Дома", "", false);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо $%d", days, total_price);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerHousePayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_BANK:
			{
				if(response)
				{
					switch(list_id)
					{
						case 1:
						{
							ShowPlayerBankAccounts(playerid);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT,
								"Создание нового счета",
								"{FFFFFF}Введите название для нового счета.\n"\
								"Максимальная длина 20 символов:",
								"Ок", "Отмена"
							);
						}
						case 3:
						{
						    Dialog
							(
								playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_LIST,
								"Депозит",
								"{ffff00}1. {FFFFFF}Положить деньги на депозит\n"\
								"{ffff00}2. {FFFFFF}Снять деньги с депозита\n"\
								"{ffff00}3. {FFFFFF}Информация о депозите",
								"Ок", "Отмена"
							);
						}
						case 4:
						{
							if(GetPlayerMoneyEx(playerid) < 5)
								return SendClientMessage(playerid,-1,"У вас нет таких денег! ( 5$ )");
						    if(GetPlayerData(playerid, P_PASS_CASH))
						        return SendClientMessage(playerid,-1,"Вы уже оплатили гос пошлину!");
							GivePlayerMoneyEx(playerid, -5,"Оплата гос пошлины!");
							SendClientMessage(playerid,-1,"Вы оплатили гос пошлину");
							SetPlayerData(playerid, P_PASS_CASH, 1);
                            UpdatePlayerDatabaseInt(playerid, "toll", 1);
						}
					}
				}
			}
			case DIALOG_BANK_DEPOSIT:
			{
			    switch(list_id)
			    {
			        case 1:
			        {
						if(GetPlayerData(playerid, P_LEVEL) < 6) return SendClientMessage(playerid, 0xCECECEFF, "Класть деньги на депозит можно только с 6-го уровня.");
			            new fmt_str[256];
			            format(fmt_str, sizeof fmt_str, "{FFFFFF}Введите сумму которую хотите положить на депозит\nНа счету Вашего депозита: $%d", GetPlayerData(playerid, P_DEPOSIT));
			            Dialog(playerid, DIALOG_BANK_DEPOSIT_PUT_MONEY, DIALOG_STYLE_INPUT, "Положить", fmt_str, "Далее", "Отмена");
			        }
			        case 2:
			        {
			            new fmt_str[256];
			            format(fmt_str, sizeof fmt_str, "{FFFFFF}Введите сумму которую хотите снять с депозита\nНа счету Вашего депозита: $%d", GetPlayerData(playerid, P_DEPOSIT));
			            Dialog(playerid, DIALOG_BANK_DEPOSIT_TAKE_MONEY, DIALOG_STYLE_INPUT, "Снять", fmt_str, "Далее", "Отмена");
			        }
			        case 3:
			        {
			            new fmt_str[256];
			            format(fmt_str, sizeof fmt_str, "{FFFFFF}На счету Вашего депозита: $%d\nПроцент: 0.3%", GetPlayerData(playerid, P_DEPOSIT));
			            Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Информация", fmt_str, "Закрыть", "");
			        }
			    }
			}
			case DIALOG_BANK_DEPOSIT_PUT_MONEY:
			{
				if(!response) return cmd::bank(playerid, "");

				new put_sum = strval(inputtext);
				if(put_sum > 0 && IsNumeric(inputtext))
				{
					new fmt_str[155];

					if(GetPlayerMoneyEx(playerid) >= put_sum)
					{
						format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,deposit=%d WHERE id=%d", GetPlayerMoneyEx(playerid)-put_sum, GetPlayerData(playerid, P_DEPOSIT) + put_sum, GetPlayerAccountID(playerid));
						mysql_query(mysql, fmt_str, false);

						if(!mysql_errno())
						{
							GivePlayerMoneyEx(playerid, -put_sum, "Положил на депозит", false, true);
							AddPlayerData(playerid, P_DEPOSIT, +, put_sum);

							format
							(
								fmt_str, sizeof fmt_str,
								"Вы положили на свой депозит: $%d",
								put_sum
							);
							return SendClientMessage(playerid, 0x32a44bFF, fmt_str);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
					}
					else
					{
						SendClientMessage(playerid, 0xFFFFFFFF, "Недостаточно средств.");
					}
				}
			}
			case DIALOG_BANK_DEPOSIT_TAKE_MONEY:
			{
				if(!response) return cmd::bank(playerid, "");

				new take_sum = strval(inputtext);
				if(take_sum > 0 && IsNumeric(inputtext))
				{
					new fmt_str[155];

					if(GetPlayerData(playerid, P_DEPOSIT) >= take_sum)
					{
						format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,deposit=%d WHERE id=%d", GetPlayerMoneyEx(playerid) + take_sum, GetPlayerData(playerid, P_DEPOSIT) - take_sum, GetPlayerAccountID(playerid));
						mysql_query(mysql, fmt_str, false);

						if(!mysql_errno())
						{
							GivePlayerMoneyEx(playerid, take_sum, "Снял с депозита", false, true);
							AddPlayerData(playerid, P_DEPOSIT, -, take_sum);

							format
							(
								fmt_str, sizeof fmt_str,
								"Вы сняли с депозита: $%d",
								take_sum
							);
							return SendClientMessage(playerid, 0x32a44bFF, fmt_str);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
					}
					else
					{
						SendClientMessage(playerid, 0xFFFFFFFF, "Недостаточно средств на депозите");
					}
				}
			}
			case DIALOG_BANK_ACCOUNTS:
			{
				if(response)
				{
					switch(list_id-1)
					{
						case 0: ShowPlayerATMDialog(playerid);
						case 1..(MAX_BANK_ACCOUNTS):
						{
							new accountid = GetPlayerListitemValue(playerid, list_id-2);
							if(IsValidBankAccount(playerid, accountid))
							{
								SetPlayerUseListitem(playerid, accountid);
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_LOGIN, DIALOG_STYLE_INPUT,
									"Авторизация",
									"{FFFFFF}Введите PIN-код счета:",
									"Ввести", "Отмена"
								);
							}
						}
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_ACCOUNT_LOGIN:
			{
				if(response)
				{
					new accountid = GetPlayerUseListitem(playerid);
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);
						new pin_len = strlen(GetBankAccountData(playerid, accountid, BA_PIN_CODE));
						if(!strcmp(GetBankAccountData(playerid, accountid, BA_PIN_CODE), inputtext, false) && pin_len && len)
						{
							ShowPlayerBankAccountOperation(playerid);
						}
						else
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"Ошибка",
								"{FFFFFF}Вы допустили ошибку при вводе PIN-кода",
								"Закрыть", ""
							);
						}
					}
				}
			}
			case DIALOG_BANK_ACCOUNT_OPERATION:
			{
				if(response)
				{
					new accountid = GetPlayerUseListitem(playerid);
					if(IsValidBankAccount(playerid, accountid))
					{
						switch(list_id)
						{
							case 1: // Информация о счете
							{
								UpdateBankAccountData(playerid, accountid);

								new fmt_str[128];
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Номер счета:\t\t%d\n"\
									"Наименование:\t\"%s\"\n"\
									"Баланс:\t\t{00CC66}$%d",
									GetBankAccountData(playerid, accountid, BA_ID),
									GetBankAccountData(playerid, accountid, BA_NAME),
									GetBankAccountData(playerid, accountid, BA_BALANCE)
								);
								Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "Информация", fmt_str, "Вернуться", "");
							}
							case 2: // История операций
							{
								ShowPlayerBankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID));
							}
							case 3: // Снять деньги
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
									"Снять деньги",
									"{FFFFFF}Укажите сумму:",
									"Снять", "Отмена"
								);
							}
							case 4: // Положить деньги
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
									"Положить деньги",
									"{FFFFFF}Укажите сумму:",
									"Положить", "Отмена"
								);
							}
							case 5: // Перевести на другой счет
							{
								if(GetPlayerLevel(playerid) >= 2)
								{
									Dialog
									(
										playerid, DIALOG_BANK_ACCOUNT_TRANSFER_1, DIALOG_STYLE_INPUT,
										"Перевод средств",
										"{FFFFFF}Укажите номер счета, на который\n"\
										"хотите осуществить перевод:",
										"Далее", "Отмена"
									);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Перевод денег доступен только со 2 уровня");
							}
							case 6: // Переименовать счет
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
									"Переименование счета",
									"{FFFFFF}Введите новое название для этого счета.\n"\
									"Максимальная длина 20 символов:",
									"Ок", "Отмена"
								);
							}
							case 7: // Изменить PIN-код
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
									"Изменение PIN-кода",
									"{FFFFFF}Введите новый PIN-код.\n"\
									"Длина от 4 до 8 цифр:",
									"Ок", "Отмена"
								);
							}
						}
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_ACCOUNT_INFO:
			{
				ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TAKE_MONEY:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new take_sum = strval(inputtext);
						if(take_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);

							new fmt_str[155];
							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);

							if(balance >= take_sum)
							{
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.money=%d,ba.balance=ba.balance - %d WHERE a.id=%d AND ba.id=%d", GetPlayerMoneyEx(playerid)+take_sum, take_sum, GetPlayerAccountID(playerid), GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, take_sum, "Снятие с банк. счета (банк)", false, true);
									SetBankAccountData(playerid, accountid, BA_BALANCE, balance - take_sum);

									format(fmt_str, sizeof fmt_str, "- Снятие наличных $%d", take_sum);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет:\t\t№%d\n"\
										"Вы сняли:\t{FF9900}$%d\n"\
										"{FFFFFF}Остаток:\t$%d",
										GetBankAccountData(playerid, accountid, BA_ID),
										take_sum,
										GetBankAccountData(playerid, accountid, BA_BALANCE)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{1E90FF}Операция завершена успешно", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
							}
							else
							{
								format(fmt_str, sizeof fmt_str, "Недостаточно средств. Текущий баланс счета №%d: {009966}$%d", GetBankAccountData(playerid, accountid, BA_ID), balance);
								SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
							}
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
							"Снять деньги",
							"{FFFFFF}Укажите сумму:",
							"Снять", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_PUT_MONEY:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new put_sum = strval(inputtext);
						if(put_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);

							new fmt_str[155];
							new money = GetPlayerMoneyEx(playerid);
							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);

							if(money >= put_sum)
							{
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.money=%d,ba.balance=ba.balance + %d WHERE a.id=%d AND ba.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -put_sum, "Пополнение банк. счета (банк)", false, true);
									SetBankAccountData(playerid, accountid, BA_BALANCE, balance + put_sum);

									format(fmt_str, sizeof fmt_str, "+ Пополнение на сумму $%d", put_sum);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет:\t\t\t№%d\n"\
										"Вы положили:\t{32a44b}$%d\n"\
										"{FFFFFF}Итоговый баланс:\t$%d",
										GetBankAccountData(playerid, accountid, BA_ID),
										put_sum,
										GetBankAccountData(playerid, accountid, BA_BALANCE)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{1E90FF}Операция завершена успешно", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 09)");
							}
							else SendClientMessage(playerid, 0xFFFFFFFF, "Недостаточно средств");
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
							"Положить деньги",
							"{FFFFFF}Укажите сумму:",
							"Положить", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TRANSFER_1:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new transfer_id = strval(inputtext);
						if(transfer_id > 0 && IsNumeric(inputtext))
						{
							new fmt_str[64 + 1];
							new Cache: result;
							new rows;

							format(fmt_str, sizeof fmt_str, "SELECT id,name FROM bank_accounts WHERE id=%d LIMIT 1", transfer_id);
							result = mysql_query(mysql, fmt_str);

							if((rows = cache_num_rows()))
							{
								SetPlayerBankTransfer(playerid, BT_ID, cache_get_row_int(0, 0));
								cache_get_row(0, 1, g_player_bank_transfer[playerid][BT_NAME], mysql, 21);
							}
							cache_delete(result);

							if(rows)
							{
								return ShowPlayerBankAccountTransfer(playerid, accountid);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Счета с таким номером не существует");
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TRANSFER_1, DIALOG_STYLE_INPUT,
							"Перевод средств",
							"{FFFFFF}Укажите номер счета, на который\n"\
							"хотите осуществить перевод:",
							"Далее", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TRANSFER_2:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new transfer_sum = strval(inputtext);
						new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);

						if(transfer_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);

							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);
							if(balance >= transfer_sum)
							{
								new fmt_str[160];

								if(GetBankAccountData(playerid, accountid, BA_ID) != transfer_id)
								{
									format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=balance-%d WHERE id=%d LIMIT 1", transfer_sum, GetBankAccountData(playerid, accountid, BA_ID));
									mysql_query(mysql, fmt_str, false);

									format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=balance+%d WHERE id=%d LIMIT 1", transfer_sum, transfer_id);
									mysql_query(mysql, fmt_str, false);

									SetBankAccountData(playerid, accountid, BA_BALANCE, balance - transfer_sum);
								}
								format(fmt_str, sizeof fmt_str, "- Перевод $%d на счет №%d", transfer_sum, transfer_id);
								BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

								format(fmt_str, sizeof fmt_str, "+ Перевод $%d со счета №%d", transfer_sum, GetBankAccountData(playerid, accountid, BA_ID));
								BankAccountLog(playerid, transfer_id, fmt_str);

								SetPlayerBankTransfer(playerid, BT_ID, 0);

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Со счета:\t\t\t№%d\n"\
									"На счет:\t\t\t№%d\n"\
									"Cумма перевода:\t\t{FF9900}$%d\n"\
									"{FFFFFF}Остаток на Вашем счете:\t{00CC66}$%d",
									GetBankAccountData(playerid, accountid, BA_ID),
									transfer_id,
									transfer_sum,
									GetBankAccountData(playerid, accountid, BA_BALANCE)
								);
								Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{1E90FF}Перевод успешно выполнен", fmt_str, "Вернуться", "");
							}
							else
							{
								SendClientMessage(playerid, 0xCECECEFF, "На счету недостаточно средств для перевода");
								ShowPlayerBankAccountTransfer(playerid, accountid);
							}
						}
						else ShowPlayerBankAccountTransfer(playerid, accountid);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_CHANGE_NAME:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);

						if(3 <= len <= 20)
						{
							if(!IsABadBankAccountName(inputtext))
							{
								new fmt_str[128];

								mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET name='%e' WHERE id=%d LIMIT 1", inputtext, GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									format(g_bank_account[playerid][accountid][BA_NAME], 21, "%s", inputtext);

									format(fmt_str, sizeof fmt_str, "* Переименование счета на \"%s\"", inputtext);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Счет успешно переименован.\n"\
										"Теперь он будет доступен под названием \"%s\"",
										GetBankAccountData(playerid, accountid, BA_NAME)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "Завершение", fmt_str, "Вернуться", "");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 10)");
							}
							else
							{
								SendClientMessage(playerid, 0xCECECEFF, "Недопустимые символы в новом названии");
								SendClientMessage(playerid, 0xCECECEFF, "Можно использовать {FFCC15}русские {CECECE}и {FFCC15}английские {CECECE}буквы, а также {FFCC15}цифры");
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Длина названия счета может быть от {FFCC15}3 до 20 {CECECE}символов");

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
							"Переименование счета",
							"{FFFFFF}Введите новое название для этого счета.\n"\
							"Максимальная длина 20 символов:",
							"Ок", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_CHANGE_PIN:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);

						if(4 <= len <= 8 && IsNumeric(inputtext))
						{
							new fmt_str[128];

							mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET pin='%e' WHERE id=%d LIMIT 1", inputtext, GetBankAccountData(playerid, accountid, BA_ID));
							mysql_query(mysql, fmt_str, false);

							if(!mysql_errno())
							{
								format(g_bank_account[playerid][accountid][BA_PIN_CODE], 9, "%s", inputtext);
								BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), "* Изменение PIN-кода");

								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}PIN-код успешно изменен.\n"\
									"Рекомендуем сделать скрин (F8) чтобы не забыть его: {CCFF00}%s",
									GetBankAccountData(playerid, accountid, BA_PIN_CODE)
								);
								return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "Изменение PIN", fmt_str, "Вернуться", "");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 10)");
						}

						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
							"Изменение PIN-кода",
							"{FFFFFF}Введите новый PIN-код.\n"\
							"Длина от 4 до 8 цифр:",
							"Ок", "Отмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_CREATE_ACCOUNT:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(3 <= len <= 20)
					{
						if(!IsABadBankAccountName(inputtext))
						{
							new query[128];
							new Cache: result;
							new total_accounts;

							format(query, sizeof query, "SELECT COUNT(*) FROM bank_accounts WHERE uid=%d", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query);

							total_accounts = cache_get_row_int(0, 0);
							cache_delete(result);

							if(total_accounts < MAX_BANK_ACCOUNTS)
							{
								mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts (uid,name,reg_time) VALUES (%d,'%e',%d)", GetPlayerAccountID(playerid), inputtext, gettime());
								mysql_query(mysql, query, false);

								if(!mysql_errno())
								{
									Dialog
									(
										playerid, DIALOG_BANK_CREATED_ACCOUNT, DIALOG_STYLE_MSGBOX,
										"Счет создан",
										"{FFFFFF}Вы создали новый счет в банке.\n\n"\
										"Для доступа к нему используйте PIN-код {00FF66}0000{FFFFFF}. После входа\n"\
										"настоятельно рекомендуем изменить его на более сложный.\n"\
										"Это поможет защитить счет от несанкционированного доступа.",
										"Готово", ""
									);
								}
							}
							else Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Лимит счетов", "{FFFFFF}Можно создать не более восьми банковских счетов", "Ок", "");
						}
						else
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF3300}Ошибка",
								"{FFFFFF}Операция запрещена. Недопустимые символы в названии счета\n"\
								"Можно использовать {FFCC15}русские {FFFFFF}и {FFCC15}английские {FFFFFF}буквы, а также {FFCC15}цифры",
								"Выход", ""
							);
						}
					}
					else
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{FF3300}Ошибка",
							"{FFFFFF}Длина названия счета может быть от {FFCC15}3 до 20 {FFFFFF}символов",
							"Закрыть", ""
						);
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_CREATED_ACCOUNT:
			{
				ShowPlayerBankDialog(playerid);
			}
			// -----------------------------------------------------------------
			case DIALOG_PHONE_CALL:
			{
				if(response)
				{
					new number = strval(inputtext);

					if(number >= 0 && strlen(inputtext))
					{
						new params[16];
						valstr(params, number);

						cmd::c(playerid, params);
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Ошибка набора");
				}
			}
			case DIALOG_PHONE_CALL_BALANCE:
			{
				SetPlayerPhoneUseState(playerid, false);
			}
			// -----------------------------------------------------------------
			case DIALOG_ACTION:
			{
				if(response)
				{
					if(1 <= (list_id) <= 4)
					{
						new targetid = GetPlayerData(playerid, P_TARGET_ID);

						if(IsPlayerConnected(targetid) && IsPlayerLogged(targetid))
						{
							if(IsPlayerInRangeOfPlayer(playerid, targetid, 10.0))
							{
								new params[5];
								valstr(params, targetid);

								new cmd[4][16] = {"cmd_hi", "cmd_pass", "cmd_lic", "cmd_skill"};
								CallLocalFunction(cmd[list_id-1], "ds", playerid, params);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Игрок вышел из игры");
					}
					SetPlayerData(playerid, P_TARGET_ID, INVALID_PLAYER_ID);
				}
			}
			case DIALOG_MAYOR_PASS:
			{
			    if(response)
				{
				    if(!GetPlayerData(playerid, P_MED_REFERENCE) || !GetPlayerData(playerid, P_PASS_CASH) || !GetPlayerData(playerid, P_PASS_PHOTO))
				        return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вы не собрали нужные документы для паспорта!");

				    SetPlayerData(playerid, P_PASS, 1);
					SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Поздравляем! Вы успешно получили паспорт!");
					UpdatePlayerDatabaseInt(playerid, "pass", 1);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_VIEV_JOBS_LIST:
			{
				if(response)
				{
					Dialog
					(
						playerid, DIALOG_JOIN_TO_JOB, DIALOG_STYLE_LIST,
						"Список доступных работ",
						"{ffff00}1. {FFFFFF}Водитель автобуса\t\t\t{32a44b}2 лвл\n"\
						"{ffff00}2. {FFFFFF}Таксист\t\t\t\t{32a44b}3 лвл\n"\
						"{ffff00}3. {FFFFFF}Автомеханик\t\t\t{32a44b}4 лвл\n"\
						"{ffff00}4. {FFFFFF}Дальнобойщик\t\t\t{32a44b}5 лвл",
						"Выбрать", "Отмена"
					);
				}
			}
			case DIALOG_JOIN_TO_JOB:
			{
				if(response)
				{
					if(GetPlayerTeamEx(playerid) != 0)
						return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете устроиться на работу, находясь во фракции");

					switch(list_id)
					{
						case JOB_BUS_DRIVER:
						{
							if(GetPlayerLevel(playerid) < 2)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу водителя автобуса необходим 2 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {32a44b}Вы устроились на работу водителя автобуса");
							SendClientMessage(playerid, 0xFFFFFFFF, "Стоянки автобусов находятся на всех автостанциях. Используйте {ffff00}/gps {FFFFFF}чтобы найти ближайшую к вам");
						}
						case JOB_TAXI_DRIVER:
						{
							if(GetPlayerLevel(playerid) < 3)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу водителя такси необходим 3 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {32a44b}Вы устроились на работу таксиста");
							SendClientMessage(playerid, 0xFFFFFFFF, "Стоянки такси можно найти возле автостанций, ЖД вокзалов и в других людных местах");
						}
						case JOB_MECHANIC:
						{
							if(GetPlayerLevel(playerid) < 4)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу автомеханика необходим 4 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {32a44b}Вы устроились на работу автомеханика");
							SendClientMessage(playerid, 0xFFFFFFFF, "Чтобы начать работу найдите служебный транспорт в Вашем городе. Используйте {FF9900}/gps {FFFFFF}при необходимости");
							SendClientMessage(playerid, 0xFFFFFFFF, "Команды: /getfuel - закупить топливо; /fill - заправить транспорт; /repair - починить транспорт");
						}
						case JOB_TRUCKER:
						{
							if(GetPlayerLevel(playerid) < 5)
								return SendClientMessage(playerid, 0xCECECEFF, "Чтобы устроиться на работу дальнобойщика необходим 5 уровень");

							SendClientMessage(playerid, 0xFFFF00FF, "Поздравляем! {32a44b}Вы устроились на работу дальнобойщика");
							SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}/gps {FFFFFF}чтобы найти стоянки транспорта для развозчиков");
							SendClientMessage(playerid, 0xFFFFFFFF, "Дополнительные инструкции и указания Вы будете получать в процессе работы");
						}
						default:
							return 1;
					}
					new query[64];

					format(query, sizeof query, "UPDATE accounts SET job=%d WHERE id=%d LIMIT 1", list_id, GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);

					if(!mysql_errno())
					{
						SetPlayerData(playerid, P_JOB, list_id);
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 14)");
				}
			}
			case DIALOG_END_JOB:
			{
				if(response)
					EndPlayerJob(playerid);
			}
			case DIALOG_BUS_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 100)
						{
							GivePlayerMoneyEx(playerid, -100, "Аренда автобуса", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x32a44bFF, "Для того, чтобы начать работу водителя автобуса {FF9900}нажмите 2 или введите команду /two");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_BUS_ROUTE_COST:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						new route_cost = strval(inputtext);

						if(0 <= route_cost <= 20 && IsNumeric(inputtext))
						{
							SetPlayerData(playerid, P_JOB_TARIFF, route_cost);

							Dialog
							(
								playerid, DIALOG_BUS_ROUTE_SELECTION, DIALOG_STYLE_LIST,
								"Выберите маршрут",
								g_bus_routes_list,
								"Ок", "Отмена"
							);
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT,
								"Стоимость проезда",
								"{FFFFFF}Сколько будет стоить проезд?\n"\
								"Укажите цену от 0 до 20$",
								"Далее", "Отмена"
							);
						}
					}
				}
			}
			case DIALOG_BUS_ROUTE_SELECTION:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(0 <= list_id-1 <= sizeof g_bus_routes - 1)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
							SetPlayerData(playerid, P_BUS_ROUTE, list_id-1);

							StartPlayerJob(playerid, JOB_BUS_DRIVER);
						}
					}
				}
			}
			case DIALOG_TAXI_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 200)
						{
							GivePlayerMoneyEx(playerid, -200, "Аренда такси", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x32a44bFF, "Для того, чтобы начать работу таксиста {FF9900}нажмите 2 или введите команду /two");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_TAXI_NAME:
			{
				if(response)
				{
					if(!(1 <= strlen(inputtext) <= 15))
					{
						Dialog
						(
							playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT,
							"Название такси",
							"{FFFFFF}Придумайте название для вашего такси\n"\
							"Максимальная длина 15 символов\n\n"\
							"Если вы не хотите как-то называться\n"\
							"нажмите кнопку \"Пропустить\"",
							"Далее", "Пропустить"
						);
						return 1;
					}
					else format(g_player[playerid][P_JOB_SERVICE_NAME], 17, "%s\n", inputtext);
				}
				else g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;

				Dialog
				(
					playerid, DIALOG_TAXI_TARIFF, DIALOG_STYLE_INPUT,
					"Настройка счетчика",
					"{FFFFFF}Укажите тариф по которому будет работать ваше такси\n"\
					"Эта сумма будет сниматься с пассажира каждые 100 м поездки\n"\
					"Тарифная ставка может быть от 0 до 200$",
					"Ок", "Отмена"
				);
			}
			case DIALOG_TAXI_TARIFF:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						new tariff = strval(inputtext);

						if(!(0 <= tariff <= 200) || !IsNumeric(inputtext))
						{
							Dialog
							(
								playerid, DIALOG_TAXI_TARIFF, DIALOG_STYLE_INPUT,
								"Настройка счетчика",
								"{FFFFFF}Укажите тариф по которому будет работать ваше такси\n"\
								"Эта сумма будет сниматься с пассажира каждые 100 м поездки\n"\
								"Тарифная ставка может быть от 0 до 200$",
								"Ок", "Отмена"
							);
							return 1;
						}
						else
						{
							SetPlayerData(playerid, P_JOB_TARIFF, tariff);
							StartPlayerJob(playerid, JOB_TAXI_DRIVER);
						}
					}
				}
				g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;
			}
			case DIALOG_MECHANIC_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_MECHANIC && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 180)
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда эвакуатора", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x32a44bFF, "Для того, чтобы начать работу автомеханика {FF9900}нажмите 2 или введите команду /two");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_MECHANIC_START_JOB:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_MECHANIC && action_id == VEHICLE_ACTION_ID_NONE)
					{
						Dialog
						(
							playerid, DIALOG_MECHANIC_NAME, DIALOG_STYLE_INPUT,
							"Автомеханик",
							"{FFFFFF}Введите название для Вашей техслужбы,\n"\
							"или оставьте поле пустым",
							"Готово", "Отмена"
						);
					}
				}
			}
			case DIALOG_MECHANIC_NAME:
			{
				if(response)
				{
					new len = strlen(inputtext);

					if(len)
					{
						if(!(1 <= len <= 15))
						{
							Dialog
							(
								playerid, DIALOG_MECHANIC_NAME, DIALOG_STYLE_INPUT,
								"Автомеханик",
								"{FFFFFF}Введите название для Вашей техслужбы,\n"\
								"или оставьте поле пустым",
								"Готово", "Отмена"
							);
							return SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное название | 15 символов максимум");
						}
						else format(g_player[playerid][P_JOB_SERVICE_NAME], 17, "%s\n", inputtext);
					}
					else g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;

					StartPlayerJob(playerid, JOB_MECHANIC);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_TRUCKER_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_TRUCKER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 180)
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда грузовика", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x32a44bFF, "Для того, чтобы начать работу дальнобойщика {FF9900}нажмите 2 или введите команду /two");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_TRUCK_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);

					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_TRUCK && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 180)
						{
							GivePlayerMoneyEx(playerid, -180, "Аренда грузовика", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);

							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x32a44bFF, "Для того, чтобы начать работу дальнобойщика {FF9900}нажмите 2 или введите команду /two");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_TRUCKER_START_JOB:
			{
				if(response)
				{
					StartPlayerJob(playerid, JOB_TRUCKER);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PHONE_BOOK:
			{
				if(response && (0 <= list_id-1 <= MAX_PHONE_BOOK_CONTACTS-1))
				{
					ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS, list_id-1);
				}
			}
			case DIALOG_PHONE_BOOK_OPTION:
			{
				new contactid = GetPlayerPhoneBookSelectContact(playerid);
				if(contactid != INVALID_PLAYER_ID)
				{
					if(response)
					{
						ShowPhoneBookOperation(playerid, list_id, contactid);
					}
					else ShowPlayerPhoneBook(playerid);
				}
			}
			case DIALOG_PHONE_BOOK_SEND_SMS:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(len)
					{
						if(len < 65)
						{
							new contactid = GetPlayerPhoneBookSelectContact(playerid);
							new fmt_str[90];

							format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER), inputtext);
							cmd::sms(playerid, fmt_str);
							return 1;
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное сообщение");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Введите сообщение для отправки");

					ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_SEND_SMS);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_CHANGE_NAME:
			{
				if(response)
				{
					if(3 <= strlen(inputtext) <= 20)
					{
						new contactid = GetPlayerPhoneBookSelectContact(playerid);
						new query[90];

						format(g_player_phone_book[playerid][contactid][PB_NAME], 21, "%s", inputtext);

						mysql_format(mysql, query, sizeof query, "UPDATE phone_books SET name='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
						mysql_query(mysql, query, false);

						SendClientMessage(playerid, 0x99CC33FF, "Имя контакта изменено");
						ShowPlayerPhoneBook(playerid);
					}
					else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_CHANGE_NAM);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_CHANGE_NUMBER:
			{
				if(response)
				{
					if(3 <= strlen(inputtext) <= 9 && strval(inputtext) > 0 && IsNumeric(inputtext))
					{
						if(!CheckPhoneBookUsedNumber(playerid, inputtext))
						{
							new contactid = GetPlayerPhoneBookSelectContact(playerid);
							new query[90];

							format(g_player_phone_book[playerid][contactid][PB_NUMBER], 10, "%s", inputtext);

							mysql_format(mysql, query, sizeof query, "UPDATE phone_books SET number='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
							mysql_query(mysql, query, false);

							SendClientMessage(playerid, 0x99CC33FF, "Номер контакта изменен");
							ShowPlayerPhoneBook(playerid);
						}
					}
					else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_CHANGE_NUM);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_ADD_CONTACT:
			{
				if(response)
				{
					new player_name[20 + 1];
					GetPVarString(playerid, "add_contact_name", player_name, sizeof(player_name));

					if(!(3 <= strlen(inputtext) <= 9) || strval(inputtext) < 1 || !IsNumeric(inputtext))
					{
						new fmt_str[64 + 1];

						format(fmt_str, sizeof fmt_str, "{FFFFFF}Введите номер телефона для контакта %s", player_name);
						Dialog(playerid, DIALOG_PHONE_BOOK_ADD_CONTACT, DIALOG_STYLE_INPUT, "Добавление нового контакта", fmt_str, "Добавить", "Отмена");

						return 1;
					}
					AddPhoneBookContact(playerid, player_name, inputtext);
				}
				DeletePVar(playerid, "add_contact_name");
			}
			// -----------------------------------------------------------------
			case DIALOG_MINER_BUY_METALL:
			{
				if(response)
				{
					new count = strval(inputtext);
					new metall = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);

					if(IsNumeric(inputtext))
					{
						if(metall >= count)
						{
							if(1 <= count <= 50)
							{
								if((GetPlayerData(playerid, P_METALL) + count) <= 20)
								{
									new sum = count * 15;
									if(GetPlayerMoneyEx(playerid) >= sum)
									{
										new fmt_str[80];

										format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,metall=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_METALL) + count, GetPlayerAccountID(playerid));
										mysql_query(mysql, fmt_str, false);

										if(!mysql_errno())
										{
											SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, metall - count);
											UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

											AddPlayerData(playerid, P_METALL, +, count);

											format(fmt_str, sizeof fmt_str, "Вы купили %d кг за $%d", count, count * 15);
											SendClientMessage(playerid, 0x1E90FFFF, fmt_str);

											return GivePlayerMoneyEx(playerid, -sum, "Покупка металла на шахте", false, true);
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 12)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки такого количества металла");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы не можете носить с собой более 20 кг металла");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Можно купить от 1 до 50 кг металла");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "На складе шахты нет такого количества металла");
					}
					ShowPlayerBuyMetalDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_TEMP_JOB_LOADER_START:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						TogglePlayerDynamicCP(playerid, help_info_CP, false);

						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_LOADER, TJ_SKIN)[GetPlayerSex(playerid)]);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_LOADER);

						SetPlayerLoaderJobLoadCP(playerid);

						SendClientMessage(playerid, 0x1E90FFFF, "Вы начали работу грузчика");
						SendClientMessage(playerid, 0x1E90FFFF, "Точки доставки материалов помечены {FF0000}красными {1E90FF}маркерами");
					}
				}
			}
			case DIALOG_TEMP_JOB_LOADER_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_LOADER);
				}
			}
			case DIALOG_TEMP_JOB_LOADERA_START:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						if(!(GetPlayerTeamEx(playerid) == 2)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не служите в Армии");

						TogglePlayerDynamicCP(playerid, help_info_CP, false);

						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_LOADERA, TJ_SKIN)[GetPlayerSex(playerid)]);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_LOADERA);

						SetPlayerLoaderArmyJobLoadCP(playerid);

						SendClientMessage(playerid, 0x1E90FFFF, "Вы начали работу грузчика");
						SendClientMessage(playerid, 0x1E90FFFF, "Точки доставки материалов помечены {FF0000}красными {1E90FF}маркерами");
					}
				}
			}
			case DIALOG_TEMP_JOB_LOADERA_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_LOADERA);
				}
			}
			case DIALOG_TEMP_JOB_MINER_START:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_MINER, TJ_SKIN)[GetPlayerSex(playerid)]);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_MINER);

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
						SetPlayerMinerJobLoadCP(playerid);

						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);


						SendClientMessage(playerid, 0x1E90FFFF, "Вы начали работу шахтера");
						SendClientMessage(playerid, 0x32a44bFF, "Отправляйтесь на красные маркеры отмеченные на карте.");
						SendClientMessage(playerid, 0x32a44bFF, "Добытое сырье относите на склад для переплавки");
					}
				}
			}
			case DIALOG_TEMP_JOB_MINER_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_MINER);
				}
			}
			case DIALOG_TEMP_JOB_FACTORY_TRUCKER:
			{
				if(response)
				{
					new job = GetPlayerTempJob(playerid);

					switch(job)
					{
						case TEMP_JOB_NONE:
						{
							new skin = GetTempJobInfo(TEMP_JOB_FACTORY_TRUCKER, TJ_SKIN)[GetPlayerSex(playerid)];

							ClearAnimations(playerid);
							SetPlayerSkin(playerid, skin);

							if(GetPlayerSex(playerid))
								SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HEAD, 18638, A_OBJECT_BONE_HEAD, 0.16, 0.02, 0.0, 0.0, 0.0, 0.0, 1.0, 1.1, 1.12, 0);

							SetPlayerJobLoadItems(playerid, 0);

							SetPlayerTempJob(playerid, TEMP_JOB_FACTORY_TRUCKER);
							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_NONE);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы начали работу в службе доставки завода");

							SetPlayerData(playerid, P_IN_JOB, true);
						}
						case TEMP_JOB_FACTORY_TRUCKER:
						{
							new fmt_str[128];
							RemovePlayerAttachedObjects(playerid);
							SetPlayerSkinInit(playerid);

							format(fmt_str, sizeof fmt_str, "Вы успешно закончили рабочий день");
							SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

							SetPlayerJobLoadItems(playerid, 0);
							SetPlayerTempJob(playerid, TEMP_JOB_NONE);
						}
					}
				}
			}
			case DIALOG_TEMP_JOB_FACTORY:
			{
				if(response)
				{
					new job = GetPlayerTempJob(playerid);

					switch(job)
					{
						case TEMP_JOB_NONE:
						{
							new skin = GetTempJobInfo(TEMP_JOB_FACTORY, TJ_SKIN)[GetPlayerSex(playerid)];
							if(!GetPlayerSex(playerid))
							{
								skin += random(2);
							}

							ClearAnimations(playerid);
							SetPlayerSkin(playerid, skin);
							SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HEAD, 18638, A_OBJECT_BONE_HEAD, 0.16, 0.02, 0.0, 0.0, 0.0, 0.0, 1.0, 1.1, 1.12, 0);

							TogglePlayerFactoryCP(playerid, true);
							SetPlayerData(playerid, P_JOB_WAGE, 0);

							SetPlayerJobLoadItems(playerid, 0);
							SetPlayerTempJob(playerid, TEMP_JOB_FACTORY);

							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы начали работу в производственном цеху завода");
						//	SendClientMessage(playerid, 0x32a44bFF, "Для получения информации воспользуйтесь инструкцией у входа в цех");

							DeletePVar(playerid, "factory_skill");
							DeletePVar(playerid, "factory_bad_prods");
							DeletePVar(playerid, "factory_take_metall");
						}
						case TEMP_JOB_FACTORY:
						{
							EndPlayerTempJob(playerid, TEMP_JOB_FACTORY);
						}
					}
				}
			}
			case DIALOG_TEMP_JOB_LUMBERJACK_ST:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_MINER, TJ_SKIN)[GetPlayerSex(playerid)]);
						SetPlayerAttachedObject(playerid,0,341,6);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK);

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);
						SetPlayerLumberJackChopCP(playerid);

						SendClientMessage(playerid, 0x1E90FFFF, "Вы начали работу лесоруба");
						SendClientMessage(playerid, 0x1E90FFFF, "Точки добычи дерева помечены {FF0000}красными {1E90FF}маркерами");
					}
				}
			}
			case DIALOG_TEMP_JOB_LUMBERJACK_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK);
				}
			}
			case DIALOG_TEMP_JOB_FARM_ST:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_FARM, TJ_SKIN)[GetPlayerSex(playerid)]);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_FARM);

						SetPlayerData(playerid, P_FARM_ROUTE_STEP, 0);

						NextFarmRouteCP(playerid);

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FARM_CHOP);
						//SetPlayerLumberJackChopCP(playerid);

						SendClientMessage(playerid, 0x1E90FFFF, "Вы начали работу фермера");
						SendClientMessage(playerid, 0x1E90FFFF, "Точки добычи пшеницы помечены {FF0000}красными {1E90FF}маркерами");
					}
				}
			}
			case DIALOG_TEMP_JOB_FARM_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_FARM);
				}
			}
			case DIALOG_TEMP_JOB_COMBAIN_ST:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						if(GetPlayerData(playerid, P_LEVEL) < 3) return SendClientMessage(playerid, 0xCECECEFF, "Для того чтобы работать комбайнеров Вам нужен 3-ий уровень и вод. права");
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_FARM, TJ_SKIN)[GetPlayerSex(playerid)]);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_COMBAIN);

						SetPlayerData(playerid, P_COMBAIN_ROUTE_STEP, 0);

						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_COMBAIN_CHOP);
						//SetPlayerLumberJackChopCP(playerid);

						SendClientMessage(playerid, 0x1E90FFFF, "Вы начали работу комбайнера");
						SendClientMessage(playerid, 0x1E90FFFF, "Сядьте в комбайн и отправляйтесь по меткам.");
					}
				}
			}
			case DIALOG_TEMP_JOB_COMBAIN_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_COMBAIN);
				}
			}
			case DIALOG_TEMP_JOB_PIZZA_ST:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{

                        if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID && playerid == rent_cars_data[GetPlayerRentCar(playerid) - first_rent_car_id][rent_car_tenant_id])
							return SendClientMessage(playerid, 0xCECECEFF, "Для начала работы , необходимо закончить договор аренды т/c ( /unrent )");

                        SetPlayerAttachedObject(playerid, 1 , 2814, 1,0.11,0.36,0.0,0.0,90.0);
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_PIZZA, TJ_SKIN)[GetPlayerSex(playerid)]);

						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_PIZZA);


						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_PIZZA_K_DOMY);

						SendClientMessage(playerid, 0x1E90FFFF, "Вы начали работу развозчика пиццы");
						SendClientMessage(playerid, 0x1E90FFFF, "Сядьте в скутер и отправляйтесь по меткам.");
					}
				}
			}
			case DIALOG_TEMP_JOB_PIZZA_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_PIZZA);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_FUEL_STATION_BUY:
			{
				if(response)
				{
					new stationid = GetPVarInt(playerid, "buy_fuel_st");

					if(IsPlayerInRangeOfPoint(playerid, 15.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
					{
						if(!IsFuelStationOwned(stationid))
						{
							if(GetPlayerMoneyEx(playerid) >= GetFuelStationData(stationid, FS_PRICE))
							{
								SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы купили заправочную станцию");
								BuyPlayerFuelStation(playerid, stationid);

								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{1E90FF}Новая заправочная станция", "{FFFFFF}Вам нужно заплатить за аренду АЗС в ближайшем отделением банка {ffff00}(/gps)", "Ок", "");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этой заправочной станции");
						}
						else
						{
							new fmt_str[75];

							format(fmt_str, sizeof fmt_str, "Эта заправочная станция уже куплена. Владелец: %s", GetFuelStationData(stationid, FS_OWNER_NAME));
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}
					}
				}
				DeletePVar(playerid, "buy_fuel_st");
			}
			case DIALOG_FUEL_STATION_INFO:
			{
				if(response)
				{
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_PARAMS:
			{
				if(response)
				{
					ShowPlayerFuelStationDialog(playerid, list_id);
				}
				else cmd::fuelst(playerid, "");
			}
			case DIALOG_FUEL_STATION_NAME:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(3 <= strlen(inputtext) <= 15)
						{
							format(g_fuel_station[stationid][FS_NAME], 20, inputtext, 0);
							UpdateFuelStationLabel(stationid);

							SendClientMessage(playerid, 0x32a44bFF, "Название заправочной станции изменено");
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Длина названия должна быть от 3-х до 15-ти символов");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_NEW_NAME);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_PRICE_FUEL:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(2 <= price <= 15 && IsNumeric(inputtext))
						{
							new fmt_str[75];

							SetFuelStationData(stationid, FS_FUEL_PRICE, price);
							UpdateFuelStationLabel(stationid);

							format(fmt_str, sizeof fmt_str, "Теперь топливо на Вашей заправке будет продаваться по $%d за 1 литр", price);
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);

							format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET fuel_price=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_FUEL_PRICE), GetFuelStationData(stationid, FS_SQL_ID));
							mysql_query(mysql, fmt_str, false);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Укажите отпускную цену от 2 до 15$ за 1 литр");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_FUEL_PRICE);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_ORDER_FUELS:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new order_fuels = strval(inputtext);
						new fuel_price = 5;
						new price = order_fuels * fuel_price;

						if(order_fuels > 0 && IsNumeric(inputtext))
						{
							new fmt_str[256];

							new free_fuel_slots = GetFuelStationMaxFuel(stationid) - GetFuelStationData(stationid, FS_FUELS);

							if(free_fuel_slots > 8000)
								free_fuel_slots = 8000;

							if(order_fuels <= free_fuel_slots)
							{
								if(GetFuelStationData(stationid, FS_BALANCE) >= price)
								{
									AddFuelStationData(stationid, FS_BALANCE, -, price);

									format(fmt_str, sizeof fmt_str, "~w~fuel st. bank~n~~r~-$%d", price);

									AddFuelStationData(stationid, FS_FUELS, +, order_fuels);

									GameTextForPlayer(playerid, fmt_str, 4000, 1);

									format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET balance=%d,fuels=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Параметры заказа:\n\n"\
										"Количество топлива:\t\t\t%d л\n"\
										"Стоимость 1 литра:\t\t\t$%d\n"\
										"Общая стоимость заказа:\t\t$%d\n"\
										"Топливо было успешно доставлено на АЗС",
										order_fuels,
										fuel_price,
										price
									);
									Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Заказ оформлен", fmt_str, "Закрыть", "");

									return 1;
								}
								else
								{
									format(fmt_str, sizeof fmt_str, "Чтобы оплатить заказ необходимо иметь $%d на счету АЗС", price);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
							else
							{
								format(fmt_str, sizeof fmt_str, "Вы не можете заказать более %d литров топлива", free_fuel_slots);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
						}
					}
				}
			}
			case DIALOG_FUEL_STATION_IMPROVEMENT:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(0 <= list_id-1 <= sizeof g_fuel_station_improvements - 1)
						{
							new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);
							new i_price = g_fuel_station_improvements[list_id-1][I_PRICE];

							if(i_level < list_id-1)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							}
							else if(i_level > list_id-1)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];

								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо $%d", list_id, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
								new fmt_str[128];

								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, fuel_stations f SET a.money=%d, f.improvements=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для АЗС", false, true);

									format(fmt_str, sizeof fmt_str, "Вы улучшили свою заправочную станцию до {ffff00}%s {1E90FF}уровня", GetNumericName(list_id));
									SendClientMessage(playerid, 0x1E90FFFF, fmt_str);

									AddFuelStationData(stationid, FS_IMPROVEMENTS, +, 1);
									switch(list_id)
									{
										case 1..3:
										{
											format(fmt_str, sizeof fmt_str, "Емкость топливного хранилища увеличена до %d литров", GetFuelStationMaxFuel(stationid));
											SendClientMessage(playerid, 0x32a44bFF, fmt_str);

											SendClientMessage(playerid, 0xCECECEFF, "Теперь можно меньше заботиться о его наполнении");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x32a44bFF, "Акцизный сбор на бензин больше не распространяется на Вашу заправочную станцию");
											SendClientMessage(playerid, 0xCECECEFF, "Благодаря этому, плата за аренду территории АЗС уменьшена в 2 раза");
										}
									}
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 17)");
							}
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_SELL:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						SellFuelStation(playerid);
					}
				}
			}
			case DIALOG_FUEL_STATION_BUY_JERRICA:
			{
				new stationid = GetPVarInt(playerid, "buy_jerrican_in_fuelst");
				DeletePVar(playerid, "buy_jerrican_in_fuelst");

				if(response)
				{
					if(IsPlayerInRangeOfPoint(playerid, 10.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
					{
						if(!GetPVarInt(playerid, "have_jerrican"))
						{
							new price = GetFuelStationData(stationid, FS_FUEL_PRICE) * 15;
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								new query[150];

								if(IsFuelStationOwned(stationid))
								{
									if(GetFuelStationData(stationid, FS_FUELS) < 15)
										return SendClientMessage(playerid, 0xCECECEFF, "На этой АЗС нет бензина");

									AddFuelStationData(stationid, FS_FUELS, -, 15);
									AddFuelStationData(stationid, FS_BALANCE, +, price);

									format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								}
								else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));

								mysql_query(mysql, query, false);
								if(!mysql_errno())
								{
									new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay_j");
									SetPVarInt(playerid, "buy_fuel_pay_j", buy_fuel_pay + price);

									GivePlayerMoneyEx(playerid, -price, "Покупка канистры на АЗС", false, true);

									SetPVarInt(playerid, "have_jerrican", 1);
									SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1650, A_OBJECT_BONE_LEFT_HAND, 0.15, 0.0, 0.0, 0.0, -90.0, 180.0, 1.0, 1.0, 1.0, 0);

									SendClientMessage(playerid, 0x32a44bFF, "Вы купили канистру с 15 литрами бензина");
									SendClientMessage(playerid, 0x1E90FFFF, "Чтобы заправить транспорт, подойдите к нему и нажмите ПКМ");
									SendClientMessage(playerid, 0xCECECEFF, "Примечание: Вы не должны двигаться во время заправки. ПКМ - правая кнопка мышки");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 19)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки канистры");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили канистру");
					}
				}
			}
			case DIALOG_FUEL_STATION_BUY_FUEL_M:
			{
				new stationid = GetPVarInt(playerid, "nearest_fuel_st");

				if(response)
				{
					new buy_fuel_count = strval(inputtext);
					new vehicleid = GetPlayerVehicleID(playerid);

					if(GetPlayerJob(playerid) == JOB_MECHANIC && IsPlayerInJob(playerid) && IsPlayerInVehicle(playerid, GetPlayerJobCar(playerid)))
					{
						if(IsPlayerInRangeOfPoint(playerid, 10.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
						{
							new fmt_str[150];

							if((1 <= buy_fuel_count <= 10_000) && IsNumeric(inputtext))
							{
								if(GetFuelStationData(stationid, FS_FUELS) >= buy_fuel_count)
								{
									if(!(buy_fuel_count % 10))
									{
										if((GetPlayerJobLoadItems(playerid) + buy_fuel_count) <= 50)
										{
											new price = buy_fuel_count * GetFuelStationData(stationid, FS_FUEL_PRICE);
											if(GetPlayerMoneyEx(playerid) >= price)
											{
												if(IsFuelStationOwned(stationid))
												{
													AddFuelStationData(stationid, FS_FUELS, -, buy_fuel_count);
													AddFuelStationData(stationid, FS_BALANCE, +, price);

													format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
												}
												else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
												mysql_query(mysql, fmt_str, false);

												if(!mysql_errno())
												{
													GivePlayerMoneyEx(playerid, -price, "Покупка топлива на АЗС (/getfuel)", false, true);
													SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + buy_fuel_count);

													new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay_j");
													SetPVarInt(playerid, "buy_fuel_pay_j", buy_fuel_pay + price);

													format(fmt_str, sizeof fmt_str, "Вы купили %d л топлива за $%d", buy_fuel_count, price);
													SendClientMessage(playerid, 0x32a44bFF, fmt_str);

													format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{CECECE}Топливо: %d л", GetPlayerData(playerid, P_JOB_SERVICE_NAME), GetPlayerJobLoadItems(playerid));
													UpdateVehicleLabel(vehicleid, 0xCC9900FF, fmt_str);

													return DeletePVar(playerid, "nearest_fuel_st");
												}
												else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 20)");
											}
											else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для закупки такого кол-во топлива");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Можно загрузить не более 50 л топлива");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Кол-во топлива должно быть кратно 10");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "На АЗС нет такого кол-ва топлива");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Неверное значение");

							format
							(
								fmt_str, sizeof fmt_str,
								"{FFFFFF}Топливо на АЗС:\t\t%d/10000 л\n"\
								"Стоимость 1 литра:\t$%d\n\n"\
								"Введите кол-во бензина, которое хотите закупить\n"\
								"(число должно быть кратным 10)",
								GetFuelStationData(stationid, FS_FUELS),
								GetFuelStationData(stationid, FS_FUEL_PRICE)
							);
							Dialog(playerid, DIALOG_FUEL_STATION_BUY_FUEL_M, DIALOG_STYLE_INPUT, "Закупка топлива", fmt_str, "Купить", "Отмена");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться около заправочной станции");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в рабочем транспорте");
				}
				else DeletePVar(playerid, "nearest_fuel_st");
			}
			// -----------------------------------------------------------------
			case DIALOG_JERRICAN_FILL_CAR:
			{
				new vehicleid = GetPVarInt(playerid, "jerrican_fill_car");
				DeletePVar(playerid, "jerrican_fill_car");

				if(response && vehicleid)
				{
					new Float: x, Float: y, Float: z;
					GetVehiclePos(vehicleid, x, y, z);

					if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
					{
						if((GetVehicleData(vehicleid, V_FUEL) + 15.0) <= 150.0)
						{
							if(IsAOwnableCar(vehicleid))
							{
                                new index = GetVehicleData(vehicleid, V_ACTION_ID);

								SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + 15.0);

								SetOwnableCarData(index, OC_FUEL, GetVehicleData(vehicleid, V_FUEL) + 15.0);

								new query[256];
								mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET fuel=%f WHERE id=%d", GetVehicleData(vehicleid, V_FUEL),GetOwnableCarData(index, OC_SQL_ID));
						     	mysql_query(mysql, query);
							}
							else
							{
							    SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + 15.0);
							}
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 1);

							DeletePVar(playerid, "have_jerrican");

							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
							SendClientMessage(playerid, 0x32a44bFF, "Транспорт заправлен");

						}
						else SendClientMessage(playerid, 0xCECECEFF, "В бензобак этого транспорта столько не поместится");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы находитесь слишком далеко от транспорта");
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_BIZ_BUY:
			{
				if(response)
				{
				    if(GetPlayerBusiness(playerid) != -1)
						return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть бизнес. Чтобы купить другой необходимо продать старый");
					new businessid = GetPVarInt(playerid, "buy_biz_id");

					if(IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
					{
						if(!IsBusinessOwned(businessid))
						{
							if(GetPlayerMoneyEx(playerid) >= GetBusinessData(businessid, B_PRICE))
							{
							    BuyPlayerBusiness(playerid, businessid);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого бизнеса");
						}
						else
						{
							new fmt_str[64];

							format(fmt_str, sizeof fmt_str, "Этот бизнес уже куплен. Владелец: %s", GetBusinessData(businessid, B_OWNER_NAME));
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}
					}
				}
				DeletePVar(playerid, "buy_biz_id");
			}
			case DIALOG_BIZ_INFO:
			{
				if(response)
				{
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_SET_NAMES:
			{
			    if(response)
			    {
					SetBusinessName(GetPlayerData(playerid,P_BUSINESS),inputtext);
				}
			}
			case DIALOG_SELECT_BOARD:
			{
			    if(response)
			    {
					if(0 <= list_id-1 <= g_board_created-1)
					{
					    if(GetBoardData(list_id-1, B_OWNER) != -1)
					    	return SendClientMessage(playerid, 0xCECECEFF, "Рекламный щит с таким порядковым номером занят!");
						new price = 250;
						if(GetPlayerMoneyEx(playerid) >= price)
						{
							GivePlayerMoneyEx(playerid, -price, "Просмотр рекламного щита", true, true);

                            new Float: angle;
							new Float:cam_x, Float:cam_y;

							//--------------------------
							new Float:pos_x = GetBoardData(list_id-1, B_POS_X);
							new Float:pos_y = GetBoardData(list_id-1, B_POS_Y);
							new Float:pos_z = GetBoardData(list_id-1, B_POS_Z);
							angle = GetAngleToPoint(pos_x+10, pos_y+10, pos_x, pos_y);
							SetPlayerPos(playerid, pos_x, pos_y, pos_z);
							SetPlayerVirtualWorld(playerid,playerid);
							SetPlayerInterior(playerid,0);

							cam_x = pos_x + 15.0 * -floatsin(angle, degrees);
							cam_y = pos_y + 15.0 * floatcos(angle, degrees);

							SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
							SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);

							SetPVarInt(playerid, "board_id", list_id-1);
							Dialog(playerid,DIALOG_TEXT_BOARD,DIALOG_STYLE_INPUT,
							"{1E90FF}Рекламный щит",
							"{ffffff}Введите ваш рекламный текст в окошко ниже\n\
							 Цена одной буквы на рекламном щите {ffff00}250${ffffff}\n\n\
							 Если вы не хотите арендовывать этот рекламный щит\n\
							 Нажмите 'Отмена' вас вернёт в выбор рекламных щитов.",
							"Далее","Отмена");

						}
						else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
					}
				}
				return 1;
			}
			case DIALOG_TEXT_BOARD:
			{
			    SetCameraBehindPlayer(playerid);
			    SetPlayerPos(playerid,1565.0228, -28.8129, 1134.8964 + 1.8);
			    SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,18);

			    if(response)
			    {
				    if(strlen(inputtext))
					{
						if(GetPlayerMoney(playerid) < strlen(inputtext)*80)
						    return SendClientMessage(playerid, 0xCECECEFF, "У вас недостаточно денег для аренды!");
						GivePlayerMoneyEx(playerid,-strlen(inputtext)*250,"Аренда рекламного щита");
						SetBoardData(GetPVarInt(playerid,"board_id"), B_OWNER , GetPlayerAccountID(playerid));
					 	SetBoardName(GetPVarInt(playerid,"board_id"),inputtext);

						new fmt_str[128];
						format(fmt_str, sizeof fmt_str, "[BOARD ID: %d] %s [%d]: %s",GetPVarInt(playerid,"board_id"), GetPlayerNameEx(playerid), playerid, inputtext);
						SendMessageToAdmins(fmt_str, 0x99cc00FF);
						SendMessageToAdmins("Используйте /bclear [board id] в случае неадекватного контента", 0x99cc00FF);

						Dialog(playerid,INVALID_DIALOG_ID,DIALOG_STYLE_MSGBOX,
						"{1E90FF}Информация",
						"{6699FF}Аренда рекламного щита заканчивается каждый PayDay" , "Ясно","");
					}
				}
				else
				{
				    new count = 0;
			        g_business_realtor_list = "";
					for(new idx; idx < g_board_created; idx ++)
					{
					    if(GetBoardData(idx, B_OWNER) != -1) continue;
						g_business_realtor_list_idx[count ++] = idx;

						format(s_string, sizeof s_string, "{ffffff}Рекламный щит №{ffff00}%d\n", idx+1);
						strcat(g_business_realtor_list, s_string);
					}
			        strcat(g_business_realtor_list, "\n Внимание! просмотр рекламного щита стоит {ffff00}250$");
			    	Dialog(playerid,DIALOG_SELECT_BOARD,DIALOG_STYLE_LIST,"{1E90FF}Выбор",g_business_realtor_list,"Далее","Отмена");
				}
			}
			case DIALOG_BIZ_PARAMS:
			{
				if(response)
				{
					ShowPlayerBusinessDialog(playerid, list_id);
				}
				else cmd::business(playerid, "");
			}
			case DIALOG_BIZ_ENTER_PRICE:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(strlen(inputtext))
						{
							if((0 <= price <= 5000) && IsNumeric(inputtext))
							{
								new query[64 + 1];
								SetBusinessData(businessid, B_ENTER_PRICE, price);

								format(query, sizeof query, "UPDATE business SET enter_price=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_ENTER_PRICE), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								UpdateBusinessLabel(businessid);
								SendClientMessage(playerid, 0x32a44bFF, "Цена за вход в бизнес изменена");

								return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Предел цены от 0 до 5000$");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Введите цену за вход в Ваш бизнес");

						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_ENTER_PRICE);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_PROD_PRICE:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new price = strval(inputtext),
							query[64 + 1];

						if(strlen(inputtext) && IsNumeric(inputtext))
						{
							if(1 <= price <= 10000)
							{
								switch(GetPVarInt(playerid, "prod_id"))
								{
								    case 1:
								    {
									    SetBusinessData(businessid, B_PRICE_1, price);

										format(query, sizeof query, "UPDATE business SET price_1=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRICE_1), GetBusinessData(businessid, B_SQL_ID));
										mysql_query(mysql, query, false);
								    }
          							case 2:
								    {
									    SetBusinessData(businessid, B_PRICE_2, price);

										format(query, sizeof query, "UPDATE business SET price_2=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRICE_2), GetBusinessData(businessid, B_SQL_ID));
										mysql_query(mysql, query, false);
								    }
								    case 3:
								    {
									    SetBusinessData(businessid, B_PRICE_3, price);

										format(query, sizeof query, "UPDATE business SET price_3=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRICE_3), GetBusinessData(businessid, B_SQL_ID));
										mysql_query(mysql, query, false);
								    }
								    case 4:
								    {
									    SetBusinessData(businessid, B_PRICE_4, price);

										format(query, sizeof query, "UPDATE business SET price_4=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRICE_4), GetBusinessData(businessid, B_SQL_ID));
										mysql_query(mysql, query, false);
								    }
								    case 5:
								    {
									    SetBusinessData(businessid, B_PRICE_5, price);

										format(query, sizeof query, "UPDATE business SET price_5=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRICE_5), GetBusinessData(businessid, B_SQL_ID));
										mysql_query(mysql, query, false);
								    }
								    case 6:
								    {
									    SetBusinessData(businessid, B_PRICE_6, price);

										format(query, sizeof query, "UPDATE business SET price_6=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRICE_6), GetBusinessData(businessid, B_SQL_ID));
										mysql_query(mysql, query, false);
								    }
								    case 7:
								    {
									    SetBusinessData(businessid, B_PRICE_7, price);

										format(query, sizeof query, "UPDATE business SET price_7=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRICE_7), GetBusinessData(businessid, B_SQL_ID));
										mysql_query(mysql, query, false);
								    }
								    case 8:
								    {
									    SetBusinessData(businessid, B_PRICE_8, price);

										format(query, sizeof query, "UPDATE business SET price_8=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRICE_8), GetBusinessData(businessid, B_SQL_ID));
										mysql_query(mysql, query, false);
								    }
								    case 9:
								    {
									    SetBusinessData(businessid, B_PRICE_9, price);

										format(query, sizeof query, "UPDATE business SET price_9=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRICE_9), GetBusinessData(businessid, B_SQL_ID));
										mysql_query(mysql, query, false);
								    }
								    case 10:
								    {
									    SetBusinessData(businessid, B_PRICE_10, price);

										format(query, sizeof query, "UPDATE business SET price_10=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRICE_10), GetBusinessData(businessid, B_SQL_ID));
										mysql_query(mysql, query, false);
								    }
								}

								SendClientMessage(playerid, 0x32a44bFF, "Стоимость продукта изменена");
								return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость от 1 до 10000$");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Введите стоимость продукта");

						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_PROD_PRICE_LIST:
			{
				new businessid = GetPlayerBusiness(playerid),
					fmt_str[356];

				if(businessid != -1)
				{
					if(response)
					{
						switch(list_id)
						{
						    case 1:
						    {
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Товар №%d:\n\n"\
									"Цена:\t\t$%d\n"\
									"Введите новую цену",
									list_id,
									GetBusinessData(businessid, B_PRICE_1)
								);
								Dialog(playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT, "Изменение цены", fmt_str, "Далее", "Назад");
						    }
        					case 2:
						    {
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Товар №%d:\n\n"\
									"Цена:\t\t$%d\n"\
									"Введите новую цену",
									list_id,
									GetBusinessData(businessid, B_PRICE_2)
								);
								Dialog(playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT, "Изменение цены", fmt_str, "Далее", "Назад");
						    }
						    case 3:
						    {
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Товар №%d:\n\n"\
									"Цена:\t\t$%d\n"\
									"Введите новую цену",
									list_id,
									GetBusinessData(businessid, B_PRICE_3)
								);
								Dialog(playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT, "Изменение цены", fmt_str, "Далее", "Назад");
						    }
						    case 4:
						    {
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Товар №%d:\n\n"\
									"Цена:\t\t$%d\n"\
									"Введите новую цену",
									list_id,
									GetBusinessData(businessid, B_PRICE_4)
								);
								Dialog(playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT, "Изменение цены", fmt_str, "Далее", "Назад");
						    }
						    case 5:
						    {
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Товар №%d:\n\n"\
									"Цена:\t\t$%d\n"\
									"Введите новую цену",
									list_id,
									GetBusinessData(businessid, B_PRICE_5)
								);
								Dialog(playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT, "Изменение цены", fmt_str, "Далее", "Назад");
						    }
						    case 6:
						    {
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Товар №%d:\n\n"\
									"Цена:\t\t$%d\n"\
									"Введите новую цену",
									list_id,
									GetBusinessData(businessid, B_PRICE_6)
								);
								Dialog(playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT, "Изменение цены", fmt_str, "Далее", "Назад");
						    }
						    case 7:
						    {
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Товар №%d:\n\n"\
									"Цена:\t\t$%d\n"\
									"Введите новую цену",
									list_id,
									GetBusinessData(businessid, B_PRICE_7)
								);
								Dialog(playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT, "Изменение цены", fmt_str, "Далее", "Назад");
						    }
						    case 8:
						    {
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Товар №%d:\n\n"\
									"Цена:\t\t$%d\n"\
									"Введите новую цену",
									list_id,
									GetBusinessData(businessid, B_PRICE_8)
								);
								Dialog(playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT, "Изменение цены", fmt_str, "Далее", "Назад");
						    }
						    case 9:
						    {
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Товар №%d:\n\n"\
									"Цена:\t\t$%d\n"\
									"Введите новую цену",
									list_id,
									GetBusinessData(businessid, B_PRICE_9)
								);
								Dialog(playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT, "Изменение цены", fmt_str, "Далее", "Назад");
						    }
						    case 10:
						    {
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}Товар №%d:\n\n"\
									"Цена:\t\t$%d\n"\
									"Введите новую цену",
									list_id,
									GetBusinessData(businessid, B_PRICE_10)
								);
								Dialog(playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT, "Изменение цены", fmt_str, "Далее", "Назад");
						    }
							default: ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
						}

						SetPVarInt(playerid, "prod_id", list_id);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ORDER_PRODS:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new order_prods = strval(inputtext);
						new prod_price = 35;
						new price = order_prods * prod_price;

						if(order_prods > 0 && IsNumeric(inputtext))
						{
							new fmt_str[256];

							new free_prods_slots = GetBusinessMaxProd(businessid) - GetBusinessData(businessid, B_PRODS);

							if(free_prods_slots > 1000)
								free_prods_slots = 1000;

							if(order_prods <= free_prods_slots)
							{
								if(GetBusinessData(businessid, B_BALANCE) >= price)
								{
									AddBusinessData(businessid, B_BALANCE, -, price);
									AddBusinessData(businessid, B_PRODS, +, order_prods);

									format(fmt_str, sizeof fmt_str, "~w~business bank~n~~r~-$%d", price);
									GameTextForPlayer(playerid, fmt_str, 4000, 1);

									format(fmt_str, sizeof fmt_str, "UPDATE business SET balance=%d, products=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, fmt_str, false);


									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Параметры заказа:\n\n"\
										"Количество продуктов:\t\t%d шт.\n"\
										"Стоимость 1 продутка:\t\t$%d\n"\
										"Общая стоимость заказа:\t\t$%d\n\n"\
										"{32a44b}Продукты были успешно доставлены в бизнес",
										order_prods,
										prod_price,
										price
									);
									Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Заказ оформлен", fmt_str, "Закрыть", "");
								}
								else
								{
									format(fmt_str, sizeof fmt_str, "Чтобы оплатить заказ необходимо иметь $%d на счету бизнеса", price);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
							else
							{
								format(fmt_str, sizeof fmt_str, "Вы не можете заказать более %d продуктов", free_prods_slots);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
						}
						/*}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Перед тем как оформить заказ, установите стоимость продукта");
							return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
						}
						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_ORDER);*/
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ORDER_CANCEL:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{

					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_IMPROVEMENT:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(IsBusinessNoEnter(businessid)) return SendClientMessage(playerid, 0xCECECEFF, "Данный тип бизнеса нельзя улучшить.");
				if(businessid != -1)
				{
					if(response)
					{
						if(0 <= list_id-1 <= sizeof g_business_improvements - 1)
						{
							new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);
							new i_price = g_business_improvements[list_id-1][I_PRICE];

							if(i_level < list_id-1)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							}
							else if(i_level > list_id-1)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];

								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо $%d", list_id, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
								new fmt_str[128];

								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, business b SET a.money=%d, b.improvements=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									new cur_max_prods = GetBusinessMaxProd(businessid);
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для Бизнеса", false, true);

									format(fmt_str, sizeof fmt_str, "Вы улучшили свой бизнес до {ffff00}%s {1E90FF}уровня", GetNumericName(list_id));
									SendClientMessage(playerid, 0x1E90FFFF, fmt_str);

									format(fmt_str, sizeof fmt_str, "UPDATE business SET improvements=%d WHERE id=%d",GetBusinessData(businessid,B_IMPROVEMENTS) + 1, GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									AddBusinessData(businessid, B_IMPROVEMENTS, +, 1);

									switch(list_id)
									{
										case 1:
										{
											format(fmt_str, sizeof fmt_str, "Количество слотов для продуктов увеличено с %d до %d", cur_max_prods, GetBusinessMaxProd(businessid));
											SendClientMessage(playerid, 0x32a44bFF, fmt_str);

											SendClientMessage(playerid, 0xCECECEFF, "Теперь можно намного реже пополнять их запас");
										}
										case 2:
										{
											SendClientMessage(playerid, 0x32a44bFF, "Теперь ваши клиенты смогут пользоваться услугами медпункта на территории бизнеса");
											SendClientMessage(playerid, 0xCECECEFF, "Доходы от этого будут перечисляться на баланс предприятия");

											BusinessHealthPickupInit(businessid);
										}
										case 3:
										{
											SendClientMessage(playerid, 0x32a44bFF, "Благодаря пониженному налогу, вы будете платить за аренду помещения в 2 раза меньше");
											SendClientMessage(playerid, 0xCECECEFF, "Благодаря этому, вы сможете получать большую прибыль");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x32a44bFF, "Теперь ваши клиенты будут слышать звук при входе в бизнес");
											SendClientMessage(playerid, 0xCECECEFF, "Вы также можете поменять или выключить его командой {FF9900}/bizmusic");
										}
										case 5:
										{
											SendClientMessage(playerid, 0x32a44bFF, "В Вашем бизнесе был оборудован дополнительный склад продуктов повышенной вместимости");

											format(fmt_str, sizeof fmt_str, "Количество слотов для продуктов увеличено с %d до %d", cur_max_prods, GetBusinessMaxProd(businessid));
											SendClientMessage(playerid, 0xCECECEFF, fmt_str);
										}
										case 6:
										{
											format(fmt_str, sizeof fmt_str, "INSERT INTO business_gps (bid,time) VALUES (%d,%d)", businessid, gettime());
											mysql_query(mysql, fmt_str, false);

											g_business_gps_init = false;

											SendClientMessage(playerid, 0x32a44bFF, "Теперь Ваш бизнес можно будет найти в списке бизнесов {FF9900}(/gps > Бизнес)");
											SendClientMessage(playerid, 0xCECECEFF, "Это позволит привлечь дополнительных клиентов, тем самым повысить доходы предприятия");
										}
									}
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 23)");
							}
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_SELL:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						SellBusiness(playerid);
					}
				}
			}
			case DIALOG_BIZ_ENTER_MUSIC:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(0 <= list_id-1 <= sizeof g_business_sound)
						{
							new query[64];
							format(query, sizeof query, "UPDATE business SET enter_music=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_ENTER_MUSIC), GetBusinessData(businessid, B_SQL_ID));
							mysql_query(mysql, query, false);

							if(list_id-1 > 0)
								PlayerPlaySound(playerid, g_business_sound[list_id - 2], 0.0, 0.0, 0.0);

							SetBusinessData(businessid, B_ENTER_MUSIC, list_id-1);
							SendClientMessage(playerid, 0x32a44bFF, "Звук при входе в бизнес изменен");
						}
					}
				}
			}
			case DIALOG_BIZ_ENTER:
			{
				new businessid = GetPVarInt(playerid, "biz_enter") - 1;
				DeletePVar(playerid, "biz_enter");

				if(response && GetPlayerInBiz(playerid) == -1)
				{
					if(businessid != -1 && GetBusinessData(businessid, B_ENTER_PRICE) > 0)
					{
						if(IsBusinessOwned(businessid))
						{
							if(IsPlayerInRangeOfPoint(playerid, 5.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
							{
								new price = GetBusinessData(businessid, B_ENTER_PRICE);
								new take_prods = GetBusinessEnterProdCount(businessid);

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[150];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
											AddBusinessData(businessid, B_BALANCE_DAY, +, price);
										}

										SetPlayerUseListitem(playerid, businessid);
										GivePlayerMoneyEx(playerid, -price, "Оплата за вход в бизнес", false, true);

										EnterPlayerToBiz(playerid, businessid);

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 22)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для входа");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CAR_MARKET:
			{
				if(!response) return 1;

				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					return SendClientMessage(playerid, 0x1E90FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/menu > Дополнительно");

				new biz_id = GetPlayerInBiz(playerid);
				new car_market_id = biz_id - 33;

				if(biz_id == -1 || GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET || GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID) return 1;

				buy_car_select_car[playerid] =
				buy_car_select_color_type[playerid] = 0;

				buy_car_select_color[playerid][0] =
				buy_car_select_color[playerid][1] = 1;

				SetPlayerVirtualWorld(playerid, playerid + 1);
				SetPlayerPosEx(playerid, 149.4721, -83.7604, 1005.8106, 0.0, _, _, false);
				TogglePlayerControllable(playerid, false);

				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(car_market_data[car_market_id][0][0], 147.7250, -82.9883, 1001.8265, 180.0, 1, 1, 5));

				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 5);

				SetPlayerCameraPos(playerid, 150.024200, -86.989334, 1003.224487);
				SetPlayerCameraLookAt(playerid, 147.971115, -82.769119, 1001.499755);


				return 1;
			}

			case DIALOG_BIZ_CAR_MARKET_CAR_INFO:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new car_market_id = GetVehicleCarMarketID(vehicleid);

				if(response && 0 <= car_market_id <= 5)
				{
				  	BuyOwnableCar(playerid, car_market_id, GetVehicleModel(vehicleid) + 1000, random(2), random(2)),RemovePlayerFromVehicle(playerid);
				}
				else RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, true);

				DeletePVar(playerid, "buycar_dialog");

				return 1;
			}
			case DIALOG_BIZ_CAR_TUNING:
			{
				switch(list_id)
				{
					case 1:
					{
						if(GetPlayerMoneyEx(playerid) < 25000)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Перекраска транспорта стоит 25.000$");

							return 1;
						}

						TogglePlayerControllable(playerid, false);

						InterpolateCameraPos(playerid, 873.7983, 1329.8220, 1008.6472, 865.7976, 1330.6577, 1009.8746, 1500, CAMERA_MOVE);
						InterpolateCameraLookAt(playerid, 872.7995, 1329.8646, 1008.6438, 866.6001, 1331.2516, 1009.6305, CAMERA_MOVE);

						// ShowChangeColorTD(playerid);

					}
					case 2:
					{
						if(GetPlayerMoneyEx(playerid) < 50000)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Смена дисков стоит 50.000$");

							return 1;
						}
					}
				}
			}
			case DIALOG_BIZ_SHOP_24_7:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
						{
							new price;
							new take_prods;

							switch(list_id)
							{
								case 1:
								{
									price = GetBusinessData(businessid, B_PRICE_1);
									take_prods = 2;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerData(playerid, P_MED_CHEST) < 2)
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка аптечки", false, true);

												AddPlayerData(playerid, P_MED_CHEST, +, 2);
												SendClientMessage(playerid, 0x32a44bFF, "Вы купили набор аптечек. Используйте {1E90FF}/healme {32a44b}для их использования");

												format(query, sizeof query, "Текущее количество аптечек: %d", GetPlayerData(playerid, P_MED_CHEST));
												SendClientMessage(playerid, 0xDD90FFFF, query);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У вас не хватает денег!");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Вы не можете купить больше аптечек");
								}
								case 2:
								{
									price = GetBusinessData(businessid, B_PRICE_2);
									take_prods = 2;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка фотоаппарата", false, true);

											GivePlayerWeapon(playerid, 43, 15);
											SendClientMessage(playerid, 0x32a44bFF, "Вы купили фотоаппарат на 15 снимков");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 29)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не хватает денег!");
								}
								case 3:
								{
									price = GetBusinessData(businessid, B_PRICE_3);
									take_prods = 2;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка трости", false, true);
											GivePlayerWeapon(playerid, WEAPON_CANE, 1);

											SendClientMessage(playerid, 0x32a44bFF, "Вы купили трость");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 31)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не хватает денег!");
								}
								case 4:
								{
									price = GetBusinessData(businessid, B_PRICE_4);
									take_prods = 2;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка лотерейного билета", false, true);
											SetPlayerData(playerid, P_LOTTERY, random(900) + 100);

											CallLocalFunction("ShowPlayerLotteryDialog", "i", playerid);
											SendClientMessage(playerid, 0x32a44bFF, "Вы купили лотерейный билет");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 32)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не хватает денег!");
								}
								case 5:
								{
									price = GetBusinessData(businessid, B_PRICE_5);
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(!GetPlayerData(playerid, P_MASK))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка маски", false, true);
												SetPlayerData(playerid, P_MASK, 1);

												SendClientMessage(playerid, 0x32a44bFF, "Вы купили маску");
												SendClientMessage(playerid, 0x32a44bFF, "Используйте {ffff00}/mask {32a44b}для скрытия Вашего расположения на карте (на 10 минут)");
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 33)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У вас не хватает денег!");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Вы уже приобрели маску");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_DRIVING_EXAM_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_AUTOSCHOOL))
						{
							new price;
							new take_prods;

							switch(list_id)
							{
								case 1:
								{
									price = GetBusinessData(businessid, B_PRICE_1);
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(!GetPlayerData(playerid, P_DRIVING_A))
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}
												SetPVarInt(playerid, "driving_a", 1);
												DrivingExam(playerid);

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Категория A", false, true);

												Dialog(playerid,INVALID_DIALOG_ID,DIALOG_STYLE_MSGBOX,
												"Автошкола",
												"Вы были перемещены на закрытый полигон автошколы\n\
												Ваша задача проехать все маркеры и не нанести урон т/с",
												"Ясно","");
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть права категории A");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
								}
								case 2:
								{
									price = GetBusinessData(businessid, B_PRICE_2);
									take_prods = 5;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(!GetPlayerData(playerid, P_DRIVING_B))
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Категория B", false, true);



                            					SetPlayerDrivingExamInfo(playerid, DE_POINTS, 10);

                            					SetPVarInt(playerid, "driving_b", 1);
                            					DrivingExam(playerid);

                            					SetPVarInt(playerid, "de_route_id", businessid - 19);

												// SetPlayerData(playerid, P_DRIVING_B, 1);

												format(query, sizeof query, "UPDATE accounts SET eat=%d, water=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_EAT), GetPlayerData(playerid, P_NEED_WATER), GetPlayerAccountID(playerid));
												mysql_query(mysql, query, false);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть права категории B");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
								}
								case 3:
								{
									price = GetBusinessData(businessid, B_PRICE_3);
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(!GetPlayerData(playerid, P_DRIVING_C))
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Категория C", false, true);



                            					SetPlayerDrivingExamInfo(playerid, DE_POINTS, 10);

                            					SetPVarInt(playerid, "driving_c", 1);
                            					DrivingExam(playerid);

                            					SetPVarInt(playerid, "de_route_id", businessid - 19);

												// SetPlayerData(playerid, P_DRIVING_C, 1);

												format(query, sizeof query, "UPDATE accounts SET eat=%d, water=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_EAT), GetPlayerData(playerid, P_NEED_WATER), GetPlayerAccountID(playerid));
												mysql_query(mysql, query, false);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть права категории C");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
								}
								case 4:
								{
									price = GetBusinessData(businessid, B_PRICE_4);
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(!GetPlayerData(playerid, P_DRIVING_D))
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Категория D", false, true);



                            					SetPlayerDrivingExamInfo(playerid, DE_POINTS, 10);

                            					SetPVarInt(playerid, "driving_d", 1);
                            					DrivingExam(playerid);

                            					SetPVarInt(playerid, "de_route_id", businessid - 19);

												// SetPlayerData(playerid, P_DRIVING_D, 1);

												format(query, sizeof query, "UPDATE accounts SET eat=%d, water=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_EAT), GetPlayerData(playerid, P_NEED_WATER), GetPlayerAccountID(playerid));
												mysql_query(mysql, query, false);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть права категории D");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
								}
								case 5:
								{
								price = GetBusinessData(businessid, B_PRICE_5);
								take_prods = 1;

								if(price == 0)
									return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");
								if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(!GetPlayerData(playerid, P_LIC_WATER))
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Категория WATER", false, true);



                            					SetPlayerDrivingExamInfo(playerid, DE_POINTS, 10);

                            					SetPVarInt(playerid, "water_lic", 1);
                            					DrivingExam(playerid);

                            					SetPVarInt(playerid, "de_route_id", businessid - 19);

												// SetPlayerData(playerid, P_DRIVING_D, 1);

												format(query, sizeof query, "UPDATE accounts SET eat=%d, water=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_EAT), GetPlayerData(playerid, P_NEED_WATER), GetPlayerAccountID(playerid));
												mysql_query(mysql, query, false);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть права этой категории");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
								}
                                case 6:
								{
								price = GetBusinessData(businessid, B_PRICE_6);
								take_prods = 1;

								if(price == 0)
									return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");
								if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(!GetPlayerData(playerid, P_LIC_FLY))
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Категория FLY", false, true);



                            					SetPlayerDrivingExamInfo(playerid, DE_POINTS, 10);

                            					SetPVarInt(playerid, "fly_lic", 1);
                            					DrivingExam(playerid);

                            					SetPVarInt(playerid, "de_route_id", businessid - 19);

												// SetPlayerData(playerid, P_DRIVING_D, 1);

												format(query, sizeof query, "UPDATE accounts SET eat=%d, water=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_EAT), GetPlayerData(playerid, P_NEED_WATER), GetPlayerAccountID(playerid));
												mysql_query(mysql, query, false);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть права этой категории");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_BIZ_MCDONALDS:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_MCDONALDS))
						{
							new price;
							new take_prods;

							switch(list_id)
							{
								case 1:
								{
									price = GetBusinessData(businessid, B_PRICE_1);
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(!(GetPlayerData(playerid, P_NEED_EAT) >= 100))
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка бургера", false, true);

												AddPlayerData(playerid, P_NEED_EAT, +, 20);

												if(GetPlayerData(playerid, P_NEED_EAT) >= 100)
												{
													SetPlayerData(playerid, P_NEED_EAT, 100);
												}

												format(query, sizeof query, "UPDATE accounts SET eat=%d, water=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_EAT), GetPlayerData(playerid, P_NEED_WATER), GetPlayerAccountID(playerid));
												mysql_query(mysql, query, false);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Вы не хотите есть!");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Бургер стоит 125$");
								}
								case 2:
								{
									price = GetBusinessData(businessid, B_PRICE_2);
									take_prods = 5;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(!(GetPlayerData(playerid, P_NEED_EAT) >= 100))
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка пиццы", false, true);

												AddPlayerData(playerid, P_NEED_EAT, +, 50);

												if(GetPlayerData(playerid, P_NEED_EAT) >= 100)
												{
													SetPlayerData(playerid, P_NEED_EAT, 100);
												}

												format(query, sizeof query, "UPDATE accounts SET eat=%d, water=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_EAT), GetPlayerData(playerid, P_NEED_WATER), GetPlayerAccountID(playerid));
												mysql_query(mysql, query, false);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Вы не хотите есть!");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Пицца стоит 125$");
								}
								case 3:
								{
									price = GetBusinessData(businessid, B_PRICE_3);
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(!(GetPlayerData(playerid, P_NEED_WATER) >= 100))
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка пепси", false, true);

												AddPlayerData(playerid, P_NEED_WATER, +, 20);

												if(GetPlayerData(playerid, P_NEED_WATER) >= 100)
												{
													SetPlayerData(playerid, P_NEED_WATER, 100);
												}

												format(query, sizeof query, "UPDATE accounts SET eat=%d, water=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_EAT), GetPlayerData(playerid, P_NEED_WATER), GetPlayerAccountID(playerid));
												mysql_query(mysql, query, false);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Вы не хотите пить!");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Пепси стоит 60$");
								}
								case 4:
								{
									price = GetBusinessData(businessid, B_PRICE_4);
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(!(GetPlayerData(playerid, P_NEED_WATER) >= 100))
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка колы", false, true);

												AddPlayerData(playerid, P_NEED_WATER, +, 20);

												if(GetPlayerData(playerid, P_NEED_WATER) >= 100)
												{
													SetPlayerData(playerid, P_NEED_WATER, 100);
												}

												format(query, sizeof query, "UPDATE accounts SET eat=%d, water=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_EAT), GetPlayerData(playerid, P_NEED_WATER), GetPlayerAccountID(playerid));
												mysql_query(mysql, query, false);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Вы не хотите пить!");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Кола стоит 60$");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_BIZ_SHOP_GUN:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_GUN))
						{
							new price;
							new take_prods;

							switch(list_id)
							{
								case 1:
								{
									price = GetBusinessData(businessid, B_PRICE_1);
									take_prods = 20;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false,true);
											GivePlayerWeapon(playerid,8,1);
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								case 2:
								{
									price = GetBusinessData(businessid, B_PRICE_2);
									take_prods = 20;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

                                            GivePlayerWeapon(playerid,9,1);
											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);


										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								case 3:
								{
									price = GetBusinessData(businessid, B_PRICE_3);
									take_prods = 30;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,4,1);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								case 4:
								{
									price = GetBusinessData(businessid, B_PRICE_4);
									take_prods = 30;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,5,1);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								case 5:
								{
									price = GetBusinessData(businessid, B_PRICE_5);
									take_prods = 30;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,3,1);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								case 6:
								{
									price = GetBusinessData(businessid, B_PRICE_6);
									take_prods = 1;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];

										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);

											GivePlayerMoneyEx(playerid, -price, "Покупка оружия", false, true);
           									GivePlayerWeapon(playerid,1,1);

										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 28)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У вас не достаточно денег!");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CELL_SALON:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
						{
							new price;
							new take_prods;

							switch(list_id)
							{
								case 1:
								{
									price = GetBusinessData(businessid, B_PRICE_1);
									take_prods = 2;

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(!GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];

											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);

											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
													AddBusinessData(businessid, B_BALANCE_DAY, +, price);
												}

												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);

												GivePlayerMoneyEx(playerid, -price, "Покупка телефона", false, true);
												SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);

												SendClientMessage(playerid, 0x32a44bFF, "Используйте {ffff00}/c(/call) или /call [номер телефона] {32a44b}чтобы сделать звонок.");
												SendClientMessage(playerid, 0x32a44bFF, "Для отправки SMS сообщения используйте {ffff00}/sms{32a44b}. Другие команды: {ffff00}/menu > Список команд > Общение");

												format
												(
													query, sizeof query,
													"{FFFFFF}Поздравляем!\n"\
													"Вы купили мобильный телефон. Ваш номер: {ffff00}%d",
													GetPlayerPhone(playerid)
												);
												Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{32a44b}Покупка мобильного телефона", query, "Закрыть", "");
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 25)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У вас недостаточно денег!");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть мобильный телефон");
								}
								case 2:
								{
									price = GetBusinessData(businessid, B_PRICE_2);

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
												"{32a44b}Изменение номера",
												"{FFFFFF}Введите новый номер в поле ниже\n\n"\
												"{FF6633}Примечания:\n"\
												"- Номер должен быть шестизначным,\n"\
												"например: 284411\n"\
												"- Номер не должен начинаться с 0\n\n"\
												"{FFFFFF}Вы также можете вернуть свой\n"\
												"стандартный номер. Для этого\n"\
												"введите в поле {1E90FF}цифру 0",
												"Сменить", "Отмена"
											);

											return 1;
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У вас недостаточно денег!");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Сначала нужно приобрести мобильный телефон");

									cmd::buy(playerid, "");
								}
								case 3:
								{
									price = GetBusinessData(businessid, B_PRICE_3);

									if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

									if(GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_COLOR, DIALOG_STYLE_LIST,
												"{32a44b}Изменение цвета телефона",
												"1. Карамельный\n"\
												"2. Синий\n"\
												"3. Оранжевый\n"\
												"4. Серебристый\n"\
												"5. Розовый\n"\
												"6. Красный\n"\
												"7. Зеленый\n"\
												"8. Темно-синий\n"\
												"9. Желтый\n"\
												"10. Белый",
												"Поменять", "Отмена"
											);

											return 1;
										}
										else SendClientMessage(playerid, 0xCECECEFF, "У вас недостаточно денег!");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Сначала нужно приобрести мобильный телефон");

									cmd::buy(playerid, "");
								}
								case 4:
								{
									if(GetPlayerPhone(playerid) != 0)
									{
										Dialog
										(
											playerid, DIALOG_BIZ_PHONE_BALANCE, DIALOG_STYLE_INPUT,
											"Пополнение мобильного телефона",
											"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
											"Готово", "Назад"
										);

										return 1;
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет телефона. Его можно купить в сотовом салоне");

									cmd::buy(playerid, "");
								}
								default:
									return 1;
							}
						}
					}
				}
			}
			case DIALOG_BIZ_PHONE_BALANCE:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
					{
						if(response)
						{
							new sum = strval(inputtext);
							if(sum > 10000)
							{
								SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Нельзя положить меньше 0 и больше 10.000");
								Dialog
								(
									playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT,
									"Пополнение мобильного телефона",
									"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
									"Готово", "Назад"
								);
								return 1;
							}
							if(sum > 0 && IsNumeric(inputtext))
							{
								if(GetPlayerMoneyEx(playerid) >= sum)
								{
									new query[128];

									format(query, sizeof query, "UPDATE accounts SET money=%d,phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_PHONE_BALANCE)+sum, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										GivePlayerMoneyEx(playerid, -sum, "Пополнение счета телефона", false, true);
										AddPlayerData(playerid, P_PHONE_BALANCE, +, sum);

										format(query, sizeof query, "Вы пополнили счет мобильного телефона на {FF9900}$%d", sum);
										SendClientMessage(playerid, 0x32a44bFF, query);

										format(query, sizeof query, "Сейчас на счету $%d", GetPlayerData(playerid, P_PHONE_BALANCE));
										SendClientMessage(playerid, 0x32a44bFF, query);

										return 1;
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 15)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас не хватает денег");
							}

							Dialog
							(
								playerid, DIALOG_BIZ_PHONE_BALANCE, DIALOG_STYLE_INPUT,
								"Пополнение мобильного телефона",
								"{FFFFFF}Укажите сумму, на которую хотите пополнить счёт:",
								"Готово", "Назад"
							);
						}
						else cmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_CHANGE_PHONE_NUMBER:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
					{
						if(response)
						{
							new buffer = strlen(inputtext);
							if((1 <= buffer <= 10) && IsNumeric(inputtext))
							{
								new fmt_str[175];
								new number = strval(inputtext);

								new price = GetBusinessData(businessid, B_PRICE_2);
								new take_prods = 3;

								if(price == 0)
										return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

								if(number > 0)
								{
									if(inputtext[0] != '0' && buffer == 6)
									{
										new Cache: result;
										buffer = 0;

										format(fmt_str, sizeof fmt_str, "SELECT id FROM accounts WHERE phone=%d LIMIT 1", number);
										result = mysql_query(mysql, fmt_str, true);

										buffer = cache_num_rows();
										cache_delete(result);

										if(!buffer)
										{
											if(GetPlayerMoneyEx(playerid) >= price)
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, number, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
												}
												else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, number, GetPlayerAccountID(playerid));
												mysql_query(mysql, fmt_str, false);

												if(!mysql_errno())
												{
													if(GetBusinessData(businessid, B_PRODS) >= take_prods)
													{
														AddBusinessData(businessid, B_PRODS, -, take_prods);
														AddBusinessData(businessid, B_BALANCE, +, price);
														AddBusinessData(businessid, B_BALANCE_DAY, +, price);
													}

													mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
													mysql_query(mysql, fmt_str, false);

													GivePlayerMoneyEx(playerid, -price, "Смена номера телефона[1]", false, true);
													SetPlayerData(playerid, P_PHONE, number);

													format
													(
														fmt_str, sizeof fmt_str,
														"{FFFFFF}Номер телефона изменен\n"\
														"Теперь с Вами  можно связаться по номеру {ffff00}%d",
														GetPlayerPhone(playerid)
													);
													return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{32a44b}Номер изменен", fmt_str, "Закрыть", "");
												}
												else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 26)");
											}
											else
											{
												return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
											}
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Введенный Вами номер уже занят");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Номер введен некорректно. Повторите попытку");
								}
								else
								{
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetPlayerAccountID(playerid));
										mysql_query(mysql, fmt_str, false);

										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
												AddBusinessData(businessid, B_BALANCE_DAY, +, price);
											}

											mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, fmt_str, false);

											GivePlayerMoneyEx(playerid, -price, "Смена номера телефона[2]", false, true);
											SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);

											format(fmt_str, sizeof fmt_str, "{FFFFFF}Установлен Ваш стандартный номер: {ffff00}%d", GetPlayerPhone(playerid));
											return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{32a44b}Номер изменен", fmt_str, "Закрыть", "");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 26)");
									}
									else
									{
										return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
									}
								}
							}

							Dialog
							(
								playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
								"{32a44b}Изменение номера",
								"{FFFFFF}Введите новый номер в поле ниже\n\n"\
								"{FF6633}Примечания:\n"\
								"- Номер должен быть шестизначным,\n"\
								"например: 284411\n"\
								"- Номер не должен начинаться с 0\n\n"\
								"{FFFFFF}Вы также можете вернуть свой\n"\
								"стандартный номер. Для этого\n"\
								"введите в поле {1E90FF}цифру 0",
								"Сменить", "Отмена"
							);
						}
						else cmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_CHANGE_PHONE_COLOR:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
					{
						if(response)
						{
							if(0 <= list_id-1 <= 9)
							{
								new price = GetBusinessData(businessid, B_PRICE_3);
								new take_prods = 1;

								if(price == 0)
									return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[185];

									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.phone_color=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, list_id-1, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d,phone_color=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, list_id-1, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
											AddBusinessData(businessid, B_BALANCE_DAY, +, price);
										}

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);

										GivePlayerMoneyEx(playerid, -price, "Смена цвета телефона", false, true);

										SetPlayerData(playerid, P_PHONE_COLOR, list_id-1);
										SendClientMessage(playerid, 0x1E90FFFF, "Вы изменили цвет своего мобильного телефона");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 27)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Для изменение цвета телефона необходимо 200$");
							}
						}
						else cmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_LOTTERY:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
					{
						if(response)
						{
							if(strlen(inputtext))
							{
								new number = strval(inputtext);
								if(100 <= number <= 999 && IsNumeric(inputtext))
								{
									new fmt_str[64];
									SetPlayerData(playerid, P_LOTTERY, number);

									format(fmt_str, sizeof fmt_str, "Счастливое число изменено на {00CCCC}%d", number);
									SendClientMessage(playerid, 0x32a44bFF, fmt_str);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Счастливое число не было изменено, т.к. было введено неверно");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CLUB:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CLUB, 15.0)
					|| IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CASINO, 15.0))
					{
						if(response)
						{
							if(0 <= list_id-1 <= 9)
							{
								new const
									item_price[10] = {60, 100, 200, 270, 300, 450, 630, 750, 50, 80};

								if(GetPlayerMoneyEx(playerid) >= item_price[list_id-1])
								{
									new query[150];
									new take_prods = 1;

									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-item_price[list_id-1], GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+item_price[list_id-1], GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-item_price[list_id-1], GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, item_price[list_id-1]);
											AddBusinessData(businessid, B_BALANCE_DAY, +, item_price[list_id-1]);
										}
										GivePlayerMoneyEx(playerid, -item_price[list_id-1], "Покупка в клубе/казино", false, true);
										GivePlayerDrinkItem(playerid, list_id-1);

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), item_price[list_id-1], IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);

										switch(list_id)
										{
											case 1: Action(playerid, "купил(а) банку лимонада", 	15.0, false);
											case 2: Action(playerid, "купил(а) бутылку пива", 		15.0, false);
											case 3: Action(playerid, "купил(а) бутылку вина", 		15.0, false);
											case 4: Action(playerid, "купил(а) бутылку шампанского",15.0, false);
											case 5: Action(playerid, "купил(а) бутылку водки", 		15.0, false);
											case 6: Action(playerid, "купил(а) бутылку коньяка",	15.0, false);
											case 7: Action(playerid, "купил(а) бутылку виски", 		15.0, false);
											case 8: Action(playerid, "купил(а) бутылку абсента", 	15.0, false);
											case 9: Action(playerid, "купил(а) закуску", 			15.0, false);
											case 10:Action(playerid, "купил(а) сигару", 			15.0, false);
										}
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 22)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас не хватает денег");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_BIZ_LIST:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_BIZ, 15.0))
					{
						if(response)
						{
							if(0 <= list_id-1 <= MAX_BUSINESS-1)
							{
								new price = 70; //

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new fmt_str[300];
									GivePlayerMoneyEx(playerid, -price, "Просмотр инфо о бизнесе (управление статистики)", true, true);

									businessid = g_business_realtor_list_idx[list_id-1];
									SetPlayerUseListitem(playerid, businessid);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Название:\t\t\t%s\n"\
										"Номер бизнеса:\t\t%d\n"\
										"Стоимость:\t\t\t%d\n\n"\
										"{FFFFFF}Вы также можете посмотреть фотографию бизнеса.\n"\
										"Для этого нажмите кнопку \"Фото\". {ffff00}Услуга стоит 290$",
										GetBusinessData(businessid, B_NAME),
										businessid,
										GetBusinessData(businessid, B_PRICE)
									);
									Dialog(playerid, DIALOG_BIZ_REALTOR_BIZ_INFO, DIALOG_STYLE_MSGBOX, "Информация о выбранном бизнесе", fmt_str, "Фото", "Закрыть");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_BIZ_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_BIZ, 15.0))
					{
						if(response)
						{
							new price = 290; //

							new b_id = GetPlayerUseListitem(playerid);
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								GivePlayerMoneyEx(playerid, -price, "Просмотр фото бизнеса (управление статистики)", true, true);

								SetPlayerVirtualWorld(playerid, playerid + 50);
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {32a44b}/ephoto {FFFFFF}для выхода");

								SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_BIZ);
								SetTimerEx("SetRealtorMakePhoto", 1000, false, "iii", playerid, REALTOR_TYPE_BIZ, b_id);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_HOME_GET:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_HOME, 15.0))
					{
						if(response)
						{
							new price = 50;
							new houseid = strval(inputtext);

							if(strlen(inputtext) && IsNumeric(inputtext) && (0 <= houseid <= g_house_loaded-1))
							{
								if(GetPlayerMoneyEx(playerid) >= price)
								{
									GivePlayerMoneyEx(playerid, -price, "Просмотр инфо о доме (риелторское агенство)", true, true);

									new fmt_str[512];
									new type = GetHouseData(houseid, H_TYPE);

									SetPlayerUseListitem(playerid, houseid);

									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Номер дома:\t\t\t%d\n"\
										"Стоимость:\t\t\t%d\n"\
										"Количество комнат:\t\t%d\n"\
										"Статус:\t\t\t\t%s\n\n"\
										"{FFFFFF}Вы также можете посмотреть как выглядит этот дом снаружи.\n"\
										"Для этого нажмите кнопку \"Фото\". {ffff00}Услуга стоит 250$",
										houseid,
										GetHouseData(houseid, H_PRICE),
										GetHouseTypeInfo(type, HT_ROOMS),
										IsHouseOwned(houseid) && IsHouseFamily(houseid) ? ("Дом занят") : ("Дом свободен")
									);
									Dialog(playerid, DIALOG_BIZ_REALTOR_HOME_INFO, DIALOG_STYLE_MSGBOX, "{FF9933}Информация о выбранном доме", fmt_str, "Фото", "Назад");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
							}
							else
							{
								if(!(0 <= houseid <= g_house_loaded-1))
									SendClientMessage(playerid, 0xCECECEFF, "Этот дом еще не построили");

								ShowPlayerRealtorHomeDialog(playerid);
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_HOME_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_HOME, 15.0))
					{
						if(response)
						{
							new price = 250; //

							if(GetPlayerMoneyEx(playerid) >= price)
							{
								GivePlayerMoneyEx(playerid, -price, "Просмотр фото дома (риелторское агенство)", true, true);

								TogglePlayerSpectating(playerid, true);

								SetPlayerVirtualWorld(playerid, playerid + 3000);
								SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {00CC99}/ephoto {FFFFFF}для выхода");

								SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_HOUSE);
								SetTimerEx("SetRealtorMakePhoto", 1000, false, "iii", playerid, REALTOR_TYPE_HOUSE, GetPlayerUseListitem(playerid));
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
						}
						else ShowPlayerRealtorHomeDialog(playerid);
					}
				}
			}
			case DIALOG_BIZ_CLOTHING_BUY:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CLOTHING_SHOP, 50.0))
					{
						if(response)
						{
							new select_skin = GetPlayerSelectSkin(playerid);
							if(select_skin != -1)
							{
								new price = g_business_clothing_skins[GetPlayerSex(playerid)][select_skin][1];
								new skinid = g_business_clothing_skins[GetPlayerSex(playerid)][select_skin][0];

								new take_prods = random(8) + 6;
								new biz_price = price * 20 / 100;

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[180];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.skin=%d,a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", skinid, GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+biz_price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET skin=%d,money=%d WHERE id=%d LIMIT 1", skinid, GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, biz_price);
											AddBusinessData(businessid, B_BALANCE_DAY, +, biz_price);
										}
										GivePlayerMoneyEx(playerid, -price, "Покупка скина (магазин одежды)", false, true);
										SetPlayerData(playerid, P_SKIN, skinid);

										SendClientMessage(playerid, 0x32a44bFF, "Поздравляем с покупкой новой одежды!");
										ExitPlayerClothingShopPanel(playerid);

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 36)");
								}
								else
								{
									SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
									ExitPlayerClothingShopPanel(playerid);
								}
							}
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_HOUSE_BUY:
			{
				new houseid = GetPlayerUseListitem(playerid);
				if(GetPlayerData(playerid,P_PASS) == 0) return SendClientMessage(playerid, -1, "У вас нет паспорта!");
				if(houseid >= 0 && response)
				{
					if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
					{
						if(GetPlayerHouse(playerid) == -1)
						{
							if(IsPlayerInRangeOfHouse(playerid, houseid, 5.0))
							{
								if(!IsHouseOwned(houseid) && !IsHouseFamily(houseid))
								{
									if(GetPlayerMoneyEx(playerid) >= GetHouseData(houseid, H_PRICE))
									{
									    if(GetHouseData(houseid, H_TYPE) == 3)
									    {
									        if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "Данный особняк предназначен для семьи");

											new fam_id = GetPlayerData(playerid, P_FAMILY);

											if(GetFamilyData(fam_id, F_HOUSE_ID) != -1) return SendClientMessage(playerid, 0xCECECEFF, "У Вашей семьи уже имеется особняк");

											for(new i; i < MAX_PLAYERS; i ++)
											{
												if(!IsPlayerConnected(i)) continue;
												if(!IsPlayerLogged(i)) continue;
												if(GetPlayerData(i, P_FAMILY) == 0) continue;
												if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

												if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

												SendClientMessage(i, 0x32a44bFF, "[F] Поздравляем! Вашей семье удалось приобрести свой Особняк!");
											}

											BuyPlayerHouse(playerid, houseid);

											return 1;
									    }


										SendClientMessage(playerid, 0xFFFFFFFF, "Поздравляем! Вы приобрели дом");
										BuyPlayerHouse(playerid, houseid);

										EnterPlayerToHouse(playerid, houseid);
										PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);

										GameTextForPlayer(playerid, "~b~welcome ~g~to~n~~y~new ~w~home!", 4000, 1);
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки этого дома");
								}
								else
								{
									new fmt_str[64];

									format(fmt_str, sizeof fmt_str, "Этот дом уже куплен. Владелец: %s", GetHouseData(houseid, H_OWNER_NAME));
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть дом. Чтобы купить новый - необходимо продать старый");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Вы снимаете номер в гостинице. Нужно выселиться перед покупкой дома");
				}
			}
			case DIALOG_HOUSE_SELL:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						SellHouse(playerid, INVALID_PLAYER_ID, 0, 0);
					}
				}
			}
			case DIALOG_FHOUSE_SELL:
			{
				new fam_id = GetPlayerData(playerid, P_FAMILY);
				new houseid = GetFamilyData(fam_id, F_HOUSE_ID);
				if(houseid != -1)
				{
					if(response)
					{
						SellHouse(playerid, INVALID_PLAYER_ID, 0, fam_id);
					}
				}
			}
			case DIALOG_HOUSE_INFO:
			{
				if(response)
				{
					new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
					if(houseid != -1)
					{
						ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
					}
				}
			}
			case DIALOG_HOUSE_PARAMS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						ShowPlayerHouseDialog(playerid, list_id);
					}
					//else cmd::home(playerid, "");
				}
			}
			case DIALOG_HOUSE_IMPROVEMENTS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(0 <= list_id-1 <= sizeof g_house_improvements - 1)
						{
							new i_level = GetHouseData(houseid, H_IMPROVEMENTS);
							new i_price = g_house_improvements[list_id-1][I_PRICE];

							if(i_level >= sizeof g_house_improvements)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже приобрели все доступные улучшения для дома");
							}
							else if(i_level < list_id-1)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Этот уровень улучшений пока недоступен");
							}
							else if(i_level > list_id-1)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Вы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];

								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня улучшений необходимо $%d", list_id, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
								new fmt_str[128];

								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, houses h SET a.money=%d, h.improvements=%d WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -i_price, "Покупка улучшений для дома", false, true);

									format(fmt_str, sizeof fmt_str, "Вы улучшили свой дом до {ffff00}%s {1E90FF}уровня", GetNumericName(list_id));
									SendClientMessage(playerid, 0x1E90FFFF, fmt_str);

									AddHouseData(houseid, H_IMPROVEMENTS, +, 1);
									switch(list_id)
									{
										case 1:
										{
											SendClientMessage(playerid, 0x32a44bFF, "Теперь чтобы выйти из дома достаточно нажать {FF9900}УДАРИТЬ{32a44b}, стоя у двери");
											SendClientMessage(playerid, 0xCECECEFF, "Автоматические двери облегчат жизнь в Вашем доме");
										}
										case 2:
										{
											SendClientMessage(playerid, 0x32a44bFF, "Теперь в доме всегда будет доступна аптечка");
											SendClientMessage(playerid, 0xCECECEFF, "Вы и ваши гости в любой момент можете использовать ее");

											HouseHealthInit(houseid);
										}
										case 3:
										{
											SendClientMessage(playerid, 0x32a44bFF, "Вы можете разрешить людям проживать в Вашем доме с помощью команды {FF9900}/live");
											SendClientMessage(playerid, 0xCECECEFF, "В доме могут разместиться столько гостей, сколько в нем комнат");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x32a44bFF, "На Ваше имя была оформлена субсидия, которая дает право платить пониженную квартплату");
											SendClientMessage(playerid, 0xCECECEFF, "Благодаря этому, ежедневная квартплата уменьшена в 2 раза");
										}
										case 5:
										{
											SendClientMessage(playerid, 0x32a44bFF, "Используйте {1E90FF}/makestore {32a44b}для размещения шкафа. В нем можно будет хранить различные вещи");
											SendClientMessage(playerid, 0xCECECEFF, "В любой момент можно перенести шкаф на другое место. Для открытия шкафа напишите {1E90FF}/use");

											HouseStoreInit(houseid);
										}

										case 6:
										{
                                            SendClientMessage(playerid, 0x32a44bFF, "Используйте {1E90FF}/exit {32a44b}для выхода на чердак/гараж.");
											SendClientMessage(playerid, 0xCECECEFF, "Теперь вы можете парковать своё авто в гараже!");
										}
										/*
										case 7:
										{
											// сигнализация
										}
										*/
									}
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 35)");
							}
						}
					}
					ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_TYPE:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
				    if(GetPlayerInHouse(playerid) != -1)
						return SendClientMessage(playerid,0xCECECEFF,"Невозможно использовать находясь в доме!");
					if(response)
					{
						if(0 <= list_id-1 <= sizeof g_house_type - 1)
						{
							new i_level = GetHouseData(houseid, H_TYPE);
							new i_price = g_house_type[list_id-1][HT_PRICE];

							if(i_level == list_id-1)
							{
								SendClientMessage(playerid, 0xCECECEFF, "У Вас установлен данный интерьер");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];

								format(fmt_str, sizeof fmt_str, "Для покупки %d уровня интерьера необходимо $%d", list_id, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else
							{
							    new fmt_str[128];
           						if(list_id == 4)
								{
									new fam_id = GetPlayerData(playerid, P_FAMILY);
									if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
									if(GetFamilyData(fam_id, F_HOUSE_ID) != -1) return SendClientMessage(playerid, 0xCECECEFF, "У Вашей семьи уже имеется особняк");
									SetFamilyData(fam_id, F_HOUSE_ID, houseid);
									mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE family f, house h SET f.house_id=%d h.family_id = %d WHERE f.id='%d' AND h.id = %d",houseid, fam_id + 1,fam_id + 1,houseid);
									mysql_query(mysql, fmt_str, false);
								}
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, houses h SET a.money=%d, h.type=%d, h.price = %d WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level,GetHouseData(houseid, H_PRICE) +i_price, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
								mysql_query(mysql, fmt_str, false);

								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -i_price, "Покупка интереьра для дома", false, true);

									format(fmt_str, sizeof fmt_str, "Вы сменили интерьер своего дома на {ffff00}%s", g_house_type[list_id-1][HT_NAME]);
									SendClientMessage(playerid, 0x1E90FFFF, fmt_str);

									SetHouseData(houseid, H_TYPE, list_id-1);
									format(g_house[houseid][H_NAME], 20, "%s", GetHouseTypeInfo(list_id-1, HT_NAME));

									HouseHealthInit(houseid);
									HouseStoreInit(houseid);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 35 HOUSE_TYPE)");
							}
						}
					}
					ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTERS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(0 <= list_id-1 <= MAX_HOUSE_ROOMS-1)
						{
							new room = GetPlayerListitemValue(playerid, list_id-1);
							ShowHouseRenterInfo(playerid, houseid, room);
						}
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTER_INFO:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new room = GetPlayerUseListitem(playerid);
						if(IsHouseRoomOwned(houseid, room))
						{
							switch(list_id)
							{
								case 4:
								{
									new fmt_str[95];
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}Вы действительно хотите выселить {ffff00}%s {FFFFFF}из своего дома?",
										GetHouseRenterInfo(houseid, room, HR_OWNER_NAME)
									);
									return Dialog(playerid, DIALOG_HOUSE_RENTER_EVICT, DIALOG_STYLE_MSGBOX, "Выселение арендатора", fmt_str, "Да", "Нет");
								}
							}
							ShowHouseRenterInfo(playerid, houseid, room);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В этой комнате уже никто не проживает");
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTER_EVICT:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new room = GetPlayerUseListitem(playerid);
						if(IsHouseRoomOwned(houseid, room))
						{
							new fmt_str[64],
								renter_id = GetPlayerID(GetHouseRenterInfo(houseid, room, HR_OWNER_NAME));

							format(fmt_str, sizeof fmt_str, "Вы выселили %s из своего дома", GetHouseRenterInfo(houseid, room, HR_OWNER_NAME));
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);

							EvictHouseRenter(houseid, room, renter_id, playerid);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "В этой комнате уже никто не проживает");
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_EVICT:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM);
				if(houseid != -1)
				{
					if(response)
					{
						new roomid = GetPlayerData(playerid, P_HOUSE_ROOM);
						new owner_id = GetPlayerID(GetHouseData(houseid, H_OWNER_NAME));

						EvictHouseRenter(houseid, roomid, playerid);

						if(owner_id != INVALID_PLAYER_ID)
						{
							new fmt_str[45 + 1];

							format(fmt_str, sizeof fmt_str, "%s выселился из Вашего дома", GetPlayerNameEx(playerid));
							SendClientMessage(owner_id, 0x32a44bFF, fmt_str);
						}
						SendClientMessage(playerid, 0x32a44bFF, "Вы выселились из дома");
					}
				}
			}
			case DIALOG_HOUSE_MOVE_STORE:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(GetPlayerInHouse(playerid) == houseid)
						{
							if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
							{
								new type = GetHouseData(houseid, H_TYPE);
								if(IsPlayerInRangeOfPoint(playerid, 50.0, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
								{
									if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
									{
										new query[128];

										new Float: pos_x, Float: pos_y, Float: pos_z;
										GetPlayerPos(playerid, pos_x, pos_y, pos_z);

										SetHouseData(houseid, H_STORE_X, pos_x);
										SetHouseData(houseid, H_STORE_Y, pos_y);
										SetHouseData(houseid, H_STORE_Z, pos_z);

										DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
										SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);

										HouseStoreInit(houseid);

										format(query, sizeof query, "UPDATE houses SET store_x=%f,store_y=%f,store_z=%f WHERE id=%d LIMIT 1", pos_x, pos_y, pos_z, GetHouseData(houseid, H_SQL_ID));
										mysql_tquery(mysql, query, "", "");
									}
								}
							}
						}
					}
				}
			}
			case DIALOG_HOUSE_STORE:
			{
				if(response)
				{
					new house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);

					new item_name[2][10] = {"металл", "наркотики"},
							title[32];

					if(0 <= list_id-1 <= 1)
					{
						format(title, sizeof title, "Положить %s", item_name[list_id-1]);

						Dialog
						(
							playerid, DIALOG_HOUSE_STORE_PUT, DIALOG_STYLE_INPUT,
							title,
							"{FFFFFF}Введите количество, которое Вы хотите {ffff00}положить:",
							"Положить", "Отмена"
						);

						SetPVarInt(playerid, "store_index", list_id-1);
					}
					else if(4 <= list_id-1 <= 5)
					{
						format(title, sizeof title, "Взять %s", item_name[list_id-5]);

						Dialog
						(
							playerid, DIALOG_HOUSE_STORE_TAKE, DIALOG_STYLE_INPUT,
							title,
							"{FFFFFF}Введите количество, которое Вы хотите {ffff00}взять:",
							"Взять", "Отмена"
						);

						SetPVarInt(playerid, "store_index", list_id-5);
					}
					else
					{
						new query[80];

						switch(list_id-1)
						{
							case 2:
							{
								if(GetHouseData(house_id, H_STORE_WEAPON))
									SendClientMessage(playerid, 0xCECECEFF, "Место в шкафу уже занято другим оружием");

								else
								{
									new weapon_id = GetPlayerWeapon(playerid),
										weapon_ammo = GetPlayerAmmo(playerid);

									if(!weapon_id)
										SendClientMessage(playerid, 0xCECECEFF, "У Вас в руках нет оружия");

									else
									{
										if(weapon_ammo > 3000)
											SendClientMessage(playerid, 0xCECECEFF, "В шкаф не вместится такое количество патронов");

										else
										{
											if(weapon_id == 23 || weapon_id == 24
											|| weapon_id == 25 || weapon_id == 29
											|| weapon_id == 30 || weapon_id == 31
											|| weapon_id == 33 || weapon_id == 34)
											{
												SetHouseData(house_id, H_STORE_WEAPON, 	weapon_id);
												SetHouseData(house_id, H_STORE_AMMO, 	weapon_ammo);

												SetPlayerAmmo(playerid, weapon_id, 0);

												mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_weapon=%d, store_ammo=%d WHERE id=%d",
												weapon_id, weapon_ammo, GetHouseData(house_id, H_SQL_ID));
												mysql_query(mysql, query, false);

												format(query, sizeof query, "Вы положили %s в шкаф", GetWeaponName(weapon_id));
												SendClientMessage(playerid, 0x1E90FFFF, query);
											}
											else SendClientMessage(playerid, 0xCECECEFF, "Вы не можете класть этот тип оружия в шкаф");
										}
									}
								}
							}
							case 3:
							{
								if(!GetPlayerTeamEx(playerid))
								{
									if(GetHouseData(house_id, H_STORE_SKIN))
										SendClientMessage(playerid, 0xCECECEFF, "Место в шкафу уже занято другой одеждой");

									else
									{
										SetHouseData(house_id, H_STORE_SKIN, GetPlayerData(playerid, P_SKIN));

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_skin=%d WHERE id=%d",
										GetPlayerSkinEx(playerid), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										SetPlayerData(playerid, P_SKIN, 97);
										UpdatePlayerDatabaseInt(playerid, "skin", 97);

										SetPlayerSkin(playerid, 97);

										SendClientMessage(playerid, 0x1E90FFFF, "Вы положили свою одежду в шкаф");
									}
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы не можете хранить в шкафу одежду организации");
							}
							case 6:
							{
								if(!GetHouseData(house_id, H_STORE_WEAPON))
									SendClientMessage(playerid, 0xCECECEFF, "В шкафу нет оружия");

								else
								{
									new weapon_id = GetHouseData(house_id, H_STORE_WEAPON),
										weapon_ammo = GetHouseData(house_id, H_STORE_AMMO);

									GivePlayerWeaponEx(playerid, weapon_id, weapon_ammo);

									SetHouseData(house_id, H_STORE_WEAPON, 	0);
									SetHouseData(house_id, H_STORE_AMMO, 	0);

									mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_weapon=0, store_ammo=0 WHERE id=%d",
									GetHouseData(house_id, H_SQL_ID));
									mysql_query(mysql, query, false);

									format(query, sizeof query, "Вы достали из шкафа %s и %d патр.", GetWeaponName(weapon_id), weapon_ammo);
									SendClientMessage(playerid, 0x1E90FFFF, query);
								}
							}
							case 7:
							{
								if(!GetPlayerTeamEx(playerid))
								{
									if(!GetHouseData(house_id, H_STORE_SKIN))
										SendClientMessage(playerid, 0xCECECEFF, "В шкафу нет одежды");

									else
									{
										SetPlayerData(playerid, P_SKIN, GetHouseData(house_id, H_STORE_SKIN));
										UpdatePlayerDatabaseInt(playerid, "skin", GetHouseData(house_id, H_STORE_SKIN));

										SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));

										SetHouseData(house_id, H_STORE_SKIN, 	0);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_skin=0 WHERE id=%d",
										GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										SendClientMessage(playerid, 0x1E90FFFF, "Вы переоделись в одежду из шкафа");
									}
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы не можете переодеться, находясь в организации");
							}
						}

						UpdateHouseStore(house_id);

						cmd::use(playerid, "");
					}
				}
			}
			case DIALOG_HOUSE_STORE_TAKE:
			{
				if(response)
				{
					new value = strval(inputtext),
						house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME),
						query[55];

					if(value < 1)
						SendClientMessage(playerid, 0xCECECEFF, "Некорректное значение");

					else
					{
						switch(GetPVarInt(playerid, "store_index"))
						{
							case 0:
							{
								if(value > GetHouseData(house_id, H_STORE_METALL))
									SendClientMessage(playerid, 0xCECECEFF, "В шкафу нет такого количества металла");

								else
								{
									if(GetPlayerData(playerid, P_METALL) + value > GetPlayerMaxStorage(playerid, STORAGE_METALL))
										SendClientMessage(playerid, 0xCECECEFF, "Вы не сможете унести с собой такое количество металла");

									else
									{
										AddPlayerData(playerid, P_METALL, +, value);
										UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

										SetHouseData(house_id, H_STORE_METALL, GetHouseData(house_id, H_STORE_METALL) - value);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_metall=%d WHERE id=%d",
										GetHouseData(house_id, H_STORE_METALL), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										format(query, sizeof query, "Вы достали из шкафа %d кг металла", value);
										SendClientMessage(playerid, 0x1E90FFFF, query);
									}
								}
							}
							case 1:
							{
								if(value > GetHouseData(house_id, H_STORE_DRUGS))
									SendClientMessage(playerid, 0xCECECEFF, "В шкафу нет такого количества наркотиков");

								else
								{
									if(GetPlayerData(playerid, P_DRUGS) + value > GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
										SendClientMessage(playerid, 0xCECECEFF, "Вы не сможете унести с собой такое количество наркотиков");

									else
									{
										AddPlayerData(playerid, P_DRUGS, +, value);
										UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_DRUGS));

										SetHouseData(house_id, H_STORE_DRUGS, GetHouseData(house_id, H_STORE_DRUGS) - value);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_drugs=%d WHERE id=%d",
										GetHouseData(house_id, H_STORE_DRUGS), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										format(query, sizeof query, "Вы достали из шкафа %d г наркотиков", value);
										SendClientMessage(playerid, 0x1E90FFFF, query);
									}
								}
							}
						}

						UpdateHouseStore(house_id);
					}
				}

				cmd::use(playerid, "");
			}
			case DIALOG_SELL_FISH:
			{
				if(!response) return 1;

				new fmt_msg[256];

				GivePlayerMoneyEx(playerid, GetPlayerData(playerid, P_FISH_MAS) * price_fish, "Продал рыбу на пирсе", true, true);

				SetPlayerData(playerid, P_FISH_MAS, 0);

				format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET fish_mas=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_FISH_MAS), GetPlayerAccountID(playerid));
				mysql_query(mysql, fmt_msg, false);
			}
			case DIALOG_HOUSE_STORE_PUT:
			{
				if(response)
				{
					new value = strval(inputtext),
						house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME),
						query[55];

					if(value < 1)
						SendClientMessage(playerid, 0xCECECEFF, "Некорректное значение");

					else
					{
						switch(GetPVarInt(playerid, "store_index"))
						{
							case 0:
							{
								if(value > GetPlayerData(playerid, P_METALL))
									SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества металла");

								else
								{
									if(GetHouseData(house_id, H_STORE_METALL) + value > 700)
										SendClientMessage(playerid, 0xCECECEFF, "В шкафу не хватает места");

									else
									{
										AddPlayerData(playerid, P_METALL, -, value);
										UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

										SetHouseData(house_id, H_STORE_METALL, GetHouseData(house_id, H_STORE_METALL) + value);

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_metall=%d WHERE id=%d",
										GetHouseData(house_id, H_STORE_METALL), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);

										format(query, sizeof query, "Вы положили в шкаф %d кг металла", value);
										SendClientMessage(playerid, 0x1E90FFFF, query);
									}
								}
							}
							case 1:
							{
								if(value > GetPlayerData(playerid, P_DRUGS))
									SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества наркотиков");

								else
								{
									AddPlayerData(playerid, P_DRUGS, -, value);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_DRUGS));

									SetHouseData(house_id, H_STORE_DRUGS, GetHouseData(house_id, H_STORE_DRUGS) + value);

									mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_drugs=%d WHERE id=%d",
									GetHouseData(house_id, H_STORE_DRUGS), GetHouseData(house_id, H_SQL_ID));
									mysql_query(mysql, query, false);

									format(query, sizeof query, "Вы положили в шкаф %d г наркотиков", value);
									SendClientMessage(playerid, 0x1E90FFFF, query);
								}
							}
						}

						UpdateHouseStore(house_id);
					}
				}

				cmd::use(playerid, "");
			}

			case DIALOG_HOUSE_ENTER:
			{
				new houseid = GetPlayerUseListitem(playerid);

				if(houseid >= 0 && response)
				{
					if(GetPlayerInHouse(playerid) == -1)
					{
						if(!GetHouseData(houseid, H_LOCK_STATUS) || GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid)
						{
							EnterPlayerToHouse(playerid, houseid);
						}
						else GameTextForPlayer(playerid, "~r~Closed", 3000, 1);
					}
				}
			}
			case DIALOG_HOUSE_OUT:
			{
			    if(response)
			    {
       				new houseid = GetPlayerInHouse(playerid);
       				switch(list_id)
					{
						case 1:
						{
						    if(GetPlayerInHouse(playerid) != GetPlayerData(playerid, P_HOUSE)) return SendClientMessage(playerid,-1,"У вас нет ключей от чердака этого дома");
							SetPlayerPosEx
							(
								playerid,
       							532.0135,
								-234.5101,
								763.2584,
								0.0,
								GetPlayerData(playerid, P_HOUSE) + 10,
								GetPlayerData(playerid, P_HOUSE) + 10
							);
							SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Чтобы выйти из чердака введите /exit");
							GameTextForPlayer(playerid, "~g~Cherdak", 3000, 1);
						}
						case 2:
						{
					        SetPlayerInHouse(playerid, -1);
							SetPlayerPosEx
							(
								playerid,
								GetHouseData(houseid, H_EXIT_POS_X),
								GetHouseData(houseid, H_EXIT_POS_Y),
								GetHouseData(houseid, H_EXIT_POS_Z),
								GetHouseData(houseid, H_EXIT_ANGLE),
								0,
								0
							);
							GameTextForPlayer(playerid, "~g~Street", 3000, 1);
						}
						case 3:
						{
							if(GetPlayerInHouse(playerid) != GetPlayerData(playerid, P_HOUSE)) return SendClientMessage(playerid,-1,"У вас нет ключей от гаража этого дома");

                            SetPlayerPosEx
							(
								playerid,
								1699.6826,
								1413.3649,
								1415.9196,
								0.0,
								GetPlayerData(playerid, P_HOUSE) + 10,
								GetPlayerData(playerid, P_HOUSE) + 10
							);
							SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Чтобы выйти из гаража введите /exit");
							GameTextForPlayer(playerid, "~g~Garage", 3000, 1);
						}
					}
				}
			}
			case DIALOG_GARAGE_ENTER:
			{
			    if(response)
			    {
			        new h = GetPlayerData(playerid, P_HOUSE);
			    	SetPlayerVirtualWorld(playerid, h+10);
					SetPlayerInterior(playerid, h+10);

					SetPlayerInHouse(playerid, h);
					SetVehiclePos(GetPlayerVehicleID(playerid),1697.1901, 1415.8605, 1415.6683);
					SetVehicleZAngle(GetPlayerVehicleID(playerid),0);

					LinkVehicleToInterior(GetPlayerVehicleID(playerid), h+10);
					SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), h+10);

				}
			}
			// -----------------------------------------------------------------
			case DIALOG_HOTEL:
			{
				if(response)
				{
					new hotel_id = GetPlayerInHotelID(playerid);
					if(hotel_id != -1)
					{
						switch(list_id)
						{
							case 1:
							{
								ShowPlayerHotelFloorsInfo(playerid, hotel_id);
							}
							case 2:
							{
								if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
								{
									new free_room = GetHotelFreeRoom(hotel_id);
									if(free_room != -1)
									{
										SetPlayerUseListitem(playerid, free_room);

										new fmt_str[128];
										format
										(
											fmt_str, sizeof fmt_str,
											"{FFFFFF}Мы предлагаем Вам поселиться в номере %d на %d этаже\n"\
											"Регистрация стоит 1000$. Вы уверены?",
											(free_room % 12) + 1,
											(free_room / 12) + 1
										);
										Dialog(playerid, DIALOG_HOTEL_REG_ROOM, DIALOG_STYLE_MSGBOX, "{66CC99}Подтверждение регистрации", fmt_str, "Выбрать", "Назад");
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX,
											"{66CC99}Свободные номера",
											"{FFFFFF}В этой гостинице нет свободных номеров",
											"Назад", "Закрыть"
										);
									}
								}
								else
								{
									Dialog
									(
										playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX,
										"{66CC99}Регистрация",
										"{FFFFFF}Вы уже снимаете номер в гостинице",
										"Назад", "Закрыть"
									);
								}
							}
							case 3:
							{
								ShowPlayerHotelClientMenu(playerid, hotel_id);
							}
						}
					}
				}
			}
			case DIALOG_HOTEL_FLOOR_SELECT:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id != -1)
				{
					if(response)
					{
						ShowPlayerHotelFloorInfo(playerid, hotel_id, list_id-1);
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_FLOOR_INFO:
			{
				if(response)
				{
					ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_FLOOR_LIFT:
			{
				if(response)
				{
					new hotel_id = GetPlayerInHotelID(playerid);
					if(hotel_id != -1)
					{
						new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
						if(0 <= list_id-1 <= max_floors-1)
						{
							new to_floor = GetPlayerListitemValue(playerid, list_id-1);

							if(!to_floor)
							{
								new businessid = GetPlayerInBiz(playerid);
								new type = GetBusinessData(businessid, B_INTERIOR);

								SetPlayerPosEx(playerid, 2227.9436,-1150.6353,1029.7969, 89.9507, GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR), businessid + 255);
							}
							else SetPlayerPosEx(playerid, 2241.1584,-1153.9369,1029.8043, 360.0, 15, ((hotel_id + 1) * 200) + (to_floor + 1000));

							SetPlayerData(playerid, P_IN_HOTEL_FLOOR, to_floor);
						}
					}
				}
			}
			case DIALOG_HOTEL_REG_ROOM:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id != -1)
				{
					if(response)
					{
						new room_id = GetPlayerUseListitem(playerid);
						new businessid = GetPlayerInBiz(playerid);

						if(GetPlayerHouse(playerid) == -1)
						{
							if(!IsHotelRoomOwned(hotel_id, room_id))
							{
								new price = 1000;
								new take_prods = 2;

								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[300];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,hotels h,business b SET a.money=%d,a.house_type=%d,a.house_room=%d,a.house=%d,h.owner_id=%d,h.rent_time=%d,h.status=0,b.products=%d,b.balance=%d WHERE a.id=%d AND h.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOTEL, room_id, hotel_id, GetPlayerAccountID(playerid), 1, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID),GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts a, hotels h SET a.money=%d,a.house_type=%d,a.house_room=%d,a.house=%d,h.owner_id=%d,h.rent_time=%d,h.status=0 WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOTEL, room_id, hotel_id, GetPlayerAccountID(playerid), 1, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
											AddBusinessData(businessid, B_BALANCE_DAY, +, price);
										}
										SetPlayerData(playerid, P_HOUSE, hotel_id);
										SetPlayerData(playerid, P_HOUSE_ROOM, room_id);
										SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_HOTEL);

										SetHotelData(hotel_id, room_id, H_OWNER_ID, 	GetPlayerAccountID(playerid));
										SetHotelData(hotel_id, room_id, H_RENT_DATE, 	1);
										SetHotelData(hotel_id, room_id, H_STATUS, 		false);

										format(g_hotel[hotel_id][room_id][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);

										GivePlayerMoneyEx(playerid, -price, "Покупка номера в отеле", false, true);
										EnterPlayerToHotelRoom(playerid, hotel_id, room_id);

										SendClientMessage(playerid, 0x1E90FFFF, "Вы сняли номер в отеле");
										SendClientMessage(playerid, 0xFFFFFFFF, "Введите {66CC99}/exit {FFFFFF}для выхода из номера");

										SendClientMessageTip(playerid, "Оплатить проживание можно на первом этаже у регистрационной стойки");

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 37)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег чтобы снять этот номер");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Извините, но этот номер уже занят");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас есть жилье. Нужно продать его перед покупкой номера");
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_CLIENT_MENU:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						switch(list_id)
						{
							case 1: // Оплатить проживание
							{
								ShowPlayerHotelRoomPayForRent(playerid);
							}
							case 2: // Информация о транспорте
							{
								new vehicleid = GetPlayerOwnableCar(playerid);
								if(vehicleid != INVALID_VEHICLE_ID)
								{
									new model_id = GetVehicleData(vehicleid, V_MODELID);
									if(model_id)
									{
										new fmt_str[64];
										new index = GetVehicleData(vehicleid, V_ACTION_ID);

										format(fmt_str, sizeof fmt_str, "Модель: %s (номер модели %d)", GetVehicleName(vehicleid), model_id);
										SendClientMessage(playerid, 0x99FF66FF, fmt_str);

										if(!(GetOwnableCarData(index, OC_COLOR_1) == -1 || GetOwnableCarData(index, OC_COLOR_2) == -1))
										{
											format(fmt_str, sizeof fmt_str, "Цвет 1: ID %d   Цвет 2: ID %d", GetOwnableCarData(index, OC_COLOR_1), GetOwnableCarData(index, OC_COLOR_2));
											SendClientMessage(playerid, 0x99FF66FF, fmt_str);
										}
										else SendClientMessage(playerid, 0x99FF66FF, "Цвета транспорта: случайные");

										format(fmt_str, sizeof fmt_str, "Гос. стоимость: $%d", GetVehicleInfo(model_id - 400, VI_PRICE)*3);
										SendClientMessage(playerid, 0x99FF66FF, fmt_str);
									}
								}
								else
								{
									if(GetPlayerOwnableCars(playerid) == 0)
										SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного транспорта");
									else
										SendClientMessage(playerid, 0xCECECEFF, "Ваш личный транспорт не загружен на сервер");
								}
							}
							case 3: // Подогнать транспорт к отелю (1000$)
							{
								new vehicleid = GetPlayerOwnableCar(playerid);
								if(vehicleid != INVALID_VEHICLE_ID)
								{
									if(!SetVehicleToHotelRespawn(playerid,hotel_id, vehicleid))
									{
										SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вы не можете использовать эту функцию");
									}
								}
								else
								{
									if(GetPlayerOwnableCars(playerid) == 0)
										SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного транспорта");
									else
										SendClientMessage(playerid, 0xCECECEFF, "Ваш личный транспорт не загружен на сервер");
								}
							}
							case 4: // Продать транспорт
							{
								cmd::sellcar(playerid, "");
							}
							case 5: // Выселиться из отеля
							{
								Dialog
								(
									playerid, DIALOG_HOTEL_OUT, DIALOG_STYLE_MSGBOX,
									"{66CC99}Выселение",
									"{FFFFFF}Вы уверены что хотите выселиться из отеля?",
									"Да", "Нет"
								);
							}
							default:
								return 1;
						}
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_PAY_FOR_ROOM:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];

							new rent_time = GetHotelData(hotel_id, room_id, H_RENT_DATE);

							new rent_days = rent_time;
							new total_price = days * 1000;

							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = rent_time + days;

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a, hotels h SET a.bank=%d,h.rent_time=%d WHERE a.id=%d AND h.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetHotelData(hotel_id, room_id, H_RENT_DATE, rent_time);

										format(fmt_str, sizeof fmt_str, "С банковского счета снято {1E90FF}$%d", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

										format(fmt_str, sizeof fmt_str, "Вы успешно проживание в отеле еще на {1E90FF}%d дней", days);
										SendClientMessage(playerid, 0x32a44bFF, fmt_str);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xB5B500FF, "На основном банковском счету не хватает денег для оплаты");

									format(fmt_str, sizeof fmt_str, "Для продления аренды на %d дней необходимо $%d", days, total_price);
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "Вы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerHotelRoomPayForRent(playerid);
					}
					else ShowPlayerHotelClientMenu(playerid, hotel_id);
				}
			}
			case DIALOG_HOTEL_OUT:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						new query[155];

						format(query, sizeof query, "UPDATE accounts a,hotels h SET a.house_type=-1,a.house_room=-1,a.house=-1,h.owner_id=0,h.rent_time=0 WHERE a.id=%d AND h.id=%d", GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
						mysql_query(mysql, query, false);

						if(!mysql_errno())
						{
							SetPlayerData(playerid, P_HOUSE, 		-1);
							SetPlayerData(playerid, P_HOUSE_ROOM, 	-1);
							SetPlayerData(playerid, P_HOUSE_TYPE, 	-1);

							SetHotelData(hotel_id, room_id, H_OWNER_ID, 	0);
							SetHotelData(hotel_id, room_id, H_RENT_DATE, 	0);
							SetHotelData(hotel_id, room_id, H_STATUS, 		false);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы выселились из отеля");
						}
					}
					else ShowPlayerHotelClientMenu(playerid, hotel_id);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_OWNABLE_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerOwnableCar(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						switch(list_id)
						{
							case 1: // Открыть / закрыть
							{
								cmd::lock(playerid, "1");
							}
							case 2: // Вставить / вытащить ключи
							{
								return 1;
							}
							case 3: // Отметить транспорт на GPS
							{
								cmd::getmycar(playerid, "");
							}
							case 4: // Содержимое багажника
							{
								ShowTrunkDialog(playerid, vehicleid, true);
							}
							case 5: // Документы на транспорт
							{
								ShowOwnableCarPass(playerid, vehicleid);
							}
							case 6: // Припарковать транспорт
							{
								cmd::park(playerid, "");
							}
							case 7:
							{
                                g_business_realtor_list = "";
								for(new idx; idx < 128; idx ++)
								{
									format(l_string, 15, "{%06x}%d | ", VehicleColoursTableRGBA[idx]>>> 8, idx);
									strcat(g_business_realtor_list, l_string);
									if(!(idx % 10)) strcat(g_business_realtor_list, "\n");
								}
								strcat(g_business_realtor_list,"\n{FFFFFF}Введите число в окошко ниже \nПример: 10,25");
							    Dialog(playerid, DIALOG_CHANGE_COLOR_CAR, DIALOG_STYLE_INPUT,"Покраска автомобиля",
								g_business_realtor_list,
								"Покрасить", "Отмена");
							}
							case 8:
							{
							    ShowVehicleImproveDialog(playerid);
							}
							case 9: // Выгрузить транспорт
							{
								if(SaveOwnableCar(GetPlayerOwnableCar(playerid)) != -1)
								{
									if(UnloadPlayerOwnableCar(playerid))
										SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно выгружен!");
									else
										SendClientMessage(playerid, 0xCECECEFF, "С момента загрузки данного транспорта еще не прошло 5 минут");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка при выгрузке транспорта");
							}
							default:
								return 1;
						}
						//cmd::car(playerid, "");
					}
				}
			}
			case DIALOG_OWNABLE_CAR_PT:
			{
			    if(response)
			    {
					ShowPerformanceItem(playerid, list_id);
			    }
			}

			case DIALOG_OWNABLE_CAR_PT_ITEM:
			{
			    if(response)
			    {
			        new vehicleid = GetPlayerOwnableCar(playerid);

			        if(vehicleid == INVALID_VEHICLE_ID)
			            return 1;

			        new index = GetVehicleData(vehicleid, V_ACTION_ID);

			        new pt_item_level[3],
			            pt_item_type = GetPVarInt(playerid, "pt_item_type");

			        pt_item_level[0] = GetOwnableCarData(index, OC_PT_ENGINE);
			        pt_item_level[1] = GetOwnableCarData(index, OC_PT_BRAKE);
			        pt_item_level[2] = GetOwnableCarData(index, OC_PT_STABILITY);

			        if(pt_item_level[pt_item_type - 1] != list_id - 1)
			        {
			            if(pt_item_level[pt_item_type - 1] < list_id - 1)
			            	SendClientMessage(playerid, 0x999999FF, "Сначала Вы должны приобрести предыдущее улучшение");

			            else
			                SendClientMessage(playerid, 0x999999FF, "Достигнут максимальный уровень улучшения");

			            ShowPerformanceItem(playerid, pt_item_type);

			            return 1;
			        }

			        if(pt_item_level[pt_item_type - 1] >= 3 && GetPlayerPremium(playerid) != 3)
			        {
			            SendClientMessage(playerid, 0x999999FF, "Покупка этого улучшения доступна только для пользователей имеющих VIP Gold статус.");
			            ShowPerformanceItem(playerid, pt_item_type);

			            return 1;
			        }

			        Dialog(playerid, DIALOG_OWNABLE_CAR_PT_ACCEPT, DIALOG_STYLE_MSGBOX, "Покупка улучшения", "{FFFFFF}Вы действительно хотите приобрести это улучшение?", "Купить", "Отмена");

			        SetPVarInt(playerid, "pt_item_id", list_id);
			    }
			    else ShowVehicleImproveDialog(playerid);
			}
			case DIALOG_OWNABLE_CAR_PT_ACCEPT:
			{
			    new pt_item_type = GetPVarInt(playerid, "pt_item_type"),
			        pt_item_id = GetPVarInt(playerid, "pt_item_id");

				if(response)
				{
				    new pt_item_price[3],
				        pt_item_level[3];

				    pt_item_price[0] = engine_ptune_price[pt_item_id - 1];
			        pt_item_price[1] = brake_ptune_price[pt_item_id - 1];
			        pt_item_price[2] = stability_ptune_price[pt_item_id - 1];

			        if(GetPlayerMoneyEx(playerid) >= pt_item_price[pt_item_type - 1])
			        {
			            new vehicleid = GetPlayerOwnableCar(playerid);

			            if(vehicleid == INVALID_VEHICLE_ID)
			                return 0;

			            new index = GetVehicleData(vehicleid, V_ACTION_ID);

			            pt_item_level[0] = GetOwnableCarData(index, OC_PT_ENGINE);
				        pt_item_level[1] = GetOwnableCarData(index, OC_PT_BRAKE);
				        pt_item_level[2] = GetOwnableCarData(index, OC_PT_STABILITY);

			            pt_item_level[pt_item_type - 1] ++;

			            SetOwnableCarData(index, OC_PT_ENGINE, pt_item_level[0]);
			            SetOwnableCarData(index, OC_PT_BRAKE, pt_item_level[1]);
			            SetOwnableCarData(index, OC_PT_STABILITY, pt_item_level[2]);

			            new query[100];

			            mysql_format(mysql, query, sizeof query, "UPDATE ownable_cars SET pt_engine=%d, pt_brake=%d, pt_stability=%d WHERE id=%d", pt_item_level[0], pt_item_level[1], pt_item_level[2], GetOwnableCarData(index, OC_SQL_ID));
			            mysql_query(mysql, query);

			            GivePlayerMoneyEx(playerid, -pt_item_price[pt_item_type - 1], "Performance Tuning");

			            SendClientMessage(playerid, 0x66CC33FF, "Вы успешно приобрели улучшение");
			        }
			        else SendClientMessage(playerid, 0x999999FF, "Недостаточно средств для покупки улучшения");
				}

				ShowPerformanceItem(playerid, pt_item_type);
			}
			case DIALOG_CHANGE_COLOR_CAR:
			{
			    if(response)
			    {
					if(GetPlayerMoneyEx(playerid) >= 30_000)
					{
						new color1, color2, fmt_text[256],
						 	idx = GetPVarInt(playerid, "ownablecar_id");

						if(sscanf(inputtext, "P<,>dd", color1, color2))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Некорректный ввод");
							new all_colors_str[1808], color_str[15];

							for(new idxx; idxx < 128; idxx ++)
							{
								format(color_str, sizeof color_str, "{%06x}%d | ", VehicleColoursTableRGBA[idxx]>>> 8, idxx);
								strcat(all_colors_str, color_str);
								if(!(idxx % 10)) strcat(all_colors_str, "\n");
							}
							strcat(all_colors_str,"\n{FFFFFF}Введите число в окошко ниже \nПример: 10,25");
						    Dialog(playerid, DIALOG_CHANGE_COLOR_CAR, DIALOG_STYLE_INPUT,"Покраска автомобиля",
							all_colors_str,
							"Покрасить", "Отмена");

							return 1;
						}
						else
						{
							if(!(-1 <= color1 <= 128))
							{
								SendClientMessage(playerid, 0xCECECEFF, "Цвет транспорт от 0 до 255");
								new all_colors_str[1808], color_str[15];

								for(new idxx; idxx < 128; idxx ++)
								{
									format(color_str, sizeof color_str, "{%06x}%d | ", VehicleColoursTableRGBA[idxx]>>> 8, idxx);
									strcat(all_colors_str, color_str);
									if(!(idxx % 10)) strcat(all_colors_str, "\n");
								}
								strcat(all_colors_str,"\n{FFFFFF}Введите число в окошко ниже \nПример: 10,25");
							    Dialog(playerid, DIALOG_CHANGE_COLOR_CAR, DIALOG_STYLE_INPUT,"Покраска автомобиля",
								all_colors_str,
								"Покрасить", "Отмена");

								return 1;
							}
							if(!(-1 <= color2 <= 128))
							{
								SendClientMessage(playerid, 0xCECECEFF, "Цвет транспорт от 0 до 255");
								new all_colors_str[1808], color_str[15];

								for(new idxx; idxx < 128; idxx ++)
								{
									format(color_str, sizeof color_str, "{%06x}%d | ", VehicleColoursTableRGBA[idxx]>>> 8, idxx);
									strcat(all_colors_str, color_str);
									if(!(idxx % 10)) strcat(all_colors_str, "\n");
								}
								strcat(all_colors_str,"\n{FFFFFF}Введите число в окошко ниже \nПример: 10,25");
							    Dialog(playerid, DIALOG_CHANGE_COLOR_CAR, DIALOG_STYLE_INPUT,"Покраска автомобиля",
								all_colors_str,
								"Покрасить", "Отмена");
								return 1;
							}

							SendClientMessage(playerid, 0xffff00FF, "Вы покрасили свой личный транспорт, для того чтобы изменения вступили в силу...");
							SendClientMessage(playerid, 0xffff00FF, "...выгрузите и загрузите свой транспорт, или перезайдите.");

							GivePlayerMoneyEx(playerid, -30000, "Покрасил авто", true);

							TransferCoffersMoney(30000, "Покраска авто", "", false);

							mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET color_1='%d', color_2='%d'  WHERE id='%d' LIMIT 1", color1, color2, idx);
							mysql_query(mysql, fmt_text, false);

							cmd::car(playerid,"");
						}
					}
					else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег: 30000$");
			    }
			}
			case DIALOG_OWNABLE_CAR_LOAD:
			{
				if(response)
				{
					new idx = GetPVarInt(playerid, "ownablecar_id"),
						Float: x,
						Float: y,
						Float: z,
						Cache: result,
						query[100];

					mysql_format(mysql, query, sizeof query, "SELECT pos_x, pos_y, pos_z FROM ownable_cars WHERE id='%d'", idx);
					result = mysql_query(mysql, query, true);

					if(cache_num_rows())
					{
						x = cache_get_row_float(0, 0);
						y = cache_get_row_float(0, 1);
						z = cache_get_row_float(0, 2);
					}

					cache_delete(result);

					switch(list_id)
					{
						case 1:
						{
							if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
							{
								if(GetPlayerMoneyEx(playerid) >= 300)
								{
									GivePlayerMoneyEx(playerid, -300, "Метка ТС на GPS", true, true);

									EnablePlayerGPS(playerid, x, y, z, "Местоположение Вашего транспорта отмечено на GPS");
									return 1;
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "На Вашем GPS уже отмечено место");
						}
						case 2:
						{
							if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Системная ошибка. Транспорт уже загружен.");
								return 1;
							}

							//if(!IsPlayerInRangeOfPoint(playerid, 45.0, x, y, z))
							//{
							//	SendClientMessage(playerid, 0xCECECEFF, "Вы слишком далеко от места, где припаркован Ваш транспорт");
							//}
							else
							{
								if(LoadOwnableCar(idx) != -1)
								{
									PlayerOwnableCarInit(playerid);
									SendClientMessage(playerid, 0x66CC33FF, "Ваш транспорт успешно загружен!");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ошибка при загрузке личного транспорта");
							}
						}
					}
				}
				else
				{
					if(GetPVarInt(playerid, "show_menu"))
					{
						DeletePVar(playerid, "show_menu");
						cmd::car(playerid, "");
					}
				}
			}
			case DIALOG_OWNABLE_CAR_LIST:
			{
				if(response)
				{
					new idx = GetPlayerListitemValue(playerid, list_id-1);

					ShowOwnableCarLoadDialog(playerid, idx, true);
				}
			}
			case DIALOG_OWNABLE_CAR_SELL:
			{
				if(response)
				{
					new vehicleid = GetPlayerOwnableCar(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						new model_id = GetVehicleData(vehicleid, V_MODELID);

						if(DestroyOwnableCar(vehicleid))
						{
							new fmt_str[128];

							new car_price = GetVehicleInfo(model_id-400, VI_PRICE);
							new percent = car_price * 20 / 100;
							new price = car_price - percent;

							SetPlayerData(playerid, P_OWNABLE_CAR, INVALID_VEHICLE_ID);
							AddPlayerData(playerid, P_BANK, +, price);

							BankLog(playerid, price, "Продажа личного транспорта");

							format(fmt_str, sizeof fmt_str, "UPDATE accounts SET bank=%d WHERE id=%d LIMIT 1", GetPlayerBankMoney(playerid), GetPlayerAccountID(playerid));
							mysql_query(mysql, fmt_str, false);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы продали личный транспорт");

							format(fmt_str, sizeof fmt_str, "Налоговый сбор составляет 20 процентов от его стоимости {FF9900}($%d)", percent);
							SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

							format(fmt_str, sizeof fmt_str, "На основной банковский счет переведено {FFFF00}$%d", price);
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);

							format(fmt_str, sizeof fmt_str, "~g~+$%d", price);
							GameTextForPlayer(playerid, fmt_str, 4000, 1);
						}
					}
				}
			}
			case DIALOG_OWNABLE_CAR_NUMBER:
			{
				if(response)
				{
					new vehicleid = GetPlayerOwnableCar(playerid);

					if(vehicleid != INVALID_VEHICLE_ID)
					{
						if(GetPlayerMoney(playerid) >= 5000)
						{
							new fmt_text[100],
								index;

							index = GetVehicleData(vehicleid, V_ACTION_ID);

							format(g_ownable_car[index][OC_NUMBER], 7, GenerateCarNumber());

							UpdateVehicleLabel(vehicleid, 0xFFFF00EE, GetOwnableCarData(index, OC_NUMBER));

							format(fmt_text, sizeof fmt_text, "Вы купили номера формата: {ffff00}\"%s\" {66cc33}за 5000$", GetOwnableCarData(index, OC_NUMBER));
							SendClientMessage(playerid, 0x66CC33FF, fmt_text);

							GivePlayerMoneyEx(playerid, -5000, "Покупка номеров", true, true);

							mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET number='%s' WHERE id='%d' LIMIT 1", GetOwnableCarData(index, OC_NUMBER), GetOwnableCarData(index, OC_SQL_ID));
							mysql_query(mysql, fmt_text, false);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки номеров");
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_VEHICLE_TRUNK:
			{
				new vehicleid = GetPlayerUseTrunk(playerid);

				if(response && vehicleid != INVALID_VEHICLE_ID)
				{
					if(GetPlayerListitemValue(playerid, list_id-1) == -1) // Положить
					{
						Dialog
						(
							playerid, DIALOG_VEHICLE_TRUNK_PUT, DIALOG_STYLE_LIST,
							"Содержимое багажника",
							"\
							1. Положить деньги\n\
							2. Положить канистру\n\
							3. Положить аптечку\n\
							4. Положить металл\n\
							5. Положить патроны\n\
							6. Положить наркотики\
							",
							"Положить", "Назад"
						);
					}
					else
					{
						if(0 <= list_id-1 <= MAX_VEHICLE_TRUNK_SLOTS)
						{
							new desc[64] = "",
								type = GetTrunkData(vehicleid, list_id-1, VT_ITEM_TYPE);

							if(type == ITEM_TYPE_JERRICAN)
							{
								if(TakeTrunkItem(vehicleid, type, 15))
								{
									if(!GetPVarInt(playerid, "have_jerrican"))
									{
										SetPVarInt(playerid, "have_jerrican", 1);
										SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1650, A_OBJECT_BONE_LEFT_HAND, 0.15, 0.0, 0.0, 0.0, -90.0, 180.0, 1.0, 1.0, 1.0, 0);

										SendClientMessage(playerid, 0x1E90FFFF, "Вы достали из багажника \"Канистра\" в количестве: 15 л");
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть канистра");
										AddTrunkItem(vehicleid, type, 15);
									}
								}
								else
								{
									SendClientMessage(playerid, 0xCECECEFF, "В багажнике нет канистры");
								}
							}
							else
							{
								if(type == ITEM_TYPE_NONE) type++;

								strcat(desc, GetItemInfo(type, I_NAME));

								SetPVarInt(playerid, "trunk_slot", type);

								Dialog
								(
									playerid, DIALOG_VEHICLE_TRUNK_TAKE, DIALOG_STYLE_INPUT,
									desc,
									"{FFFFFF}Введите количество, которое Вы хотите {ffff00}достать:",
									"Достать", "Назад"
								);
							}
						}
					}
				}
			}
			case DIALOG_VEHICLE_TRUNK_PUT:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					slot = list_id;

				if(response && vehicleid != INVALID_VEHICLE_ID)
				{
					if(slot == ITEM_TYPE_JERRICAN)
					{
						if(!GetPVarInt(playerid, "have_jerrican"))
						{
							SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет канистры");
						}
						else
						{
							DeletePVar(playerid, "have_jerrican");
							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);

							if(AddTrunkItem(vehicleid, ITEM_TYPE_JERRICAN, 15) != -1)
							{
								SendClientMessage(playerid, 0x1E90FFFF, "Вы положили в багажник \"Канистра\" в количестве: 15 л");
							}
							else
							{
								SendClientMessage(playerid, 0xCECECEFF, "В багажнике недостаточно места");
							}
						}
					}
					else
					{
						new desc[32] = "";

						strcat(desc, GetItemInfo(slot, I_NAME));

						Dialog
						(
							playerid, DIALOG_VEHICLE_TRUNK_PUT_ITEM, DIALOG_STYLE_INPUT,
							desc,
							"{FFFFFF}Введите количество, которое Вы хотите {ffff00}положить:",
							"Положить", "Назад"
						);

						SetPVarInt(playerid, "trunk_slot", slot);
					}
				}
				else ShowTrunkDialog(playerid, vehicleid, false);
			}
			case DIALOG_VEHICLE_TRUNK_PUT_ITEM:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					amount = strval(inputtext),
					slot = GetPVarInt(playerid, "trunk_slot");

				if(vehicleid == INVALID_VEHICLE_ID)
					return 1;

				if(response)
				{
					if(amount > 0)
					{
						if(AddTrunkItem(vehicleid, slot, amount))
						{
							switch(slot)
							{
								case ITEM_TYPE_MONEY:
								{
									if(GetPlayerMoneyEx(playerid) >= amount)
									{
										GivePlayerMoneyEx(playerid, -amount, "Положил в багажник", true);
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества денег");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_MED:
								{
									if(GetPlayerData(playerid, P_MED_CHEST) >= amount)
									{
										AddPlayerData(playerid, P_MED_CHEST, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества аптечек");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_METALL:
								{
									if(GetPlayerData(playerid, P_METALL) >= amount)
									{
										AddPlayerData(playerid, P_METALL, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества металла");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_AMMO:
								{
									if(GetPlayerData(playerid, P_AMMO) >= amount)
									{
										AddPlayerData(playerid, P_AMMO, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества патронов");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_DRUGS:
								{
									if(GetPlayerData(playerid, P_DRUGS) >= amount)
									{
										AddPlayerData(playerid, P_DRUGS, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества наркотиков");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "В багажнике недостаточно места");
							return 1;
						}

						new fmt_text[128];

						format(fmt_text, sizeof fmt_text, "Вы положили в багажник \"%s\" в количестве: %d %s", GetItemInfo(slot, I_NAME), amount, GetItemInfo(slot, I_NAME_COUNT));
						SendClientMessage(playerid, 0x1E90FFFF, fmt_text);
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Неверное количество");
				}
				else
				{
					ShowTrunkDialog(playerid, vehicleid, false);
				}
			}
			case DIALOG_VEHICLE_TRUNK_TAKE:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					amount = strval(inputtext),
					slot = GetPVarInt(playerid, "trunk_slot");

				if(vehicleid == INVALID_VEHICLE_ID)
					return 1;

				if(response)
				{
					if(amount > 0)
					{
						if(TakeTrunkItem(vehicleid, slot, amount) != -1)
						{
							switch(slot)
							{
								case ITEM_TYPE_MONEY:
								{
									GivePlayerMoneyEx(playerid, amount, "Достал из багажника", true);
								}
								case ITEM_TYPE_MED:
								{
									if((GetPlayerData(playerid, P_MED_CHEST) + amount) < 3)
									{
										AddPlayerData(playerid, P_MED_CHEST, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "Вы не можете носить с собой больше 3-х аптечек");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_METALL:
								{
									if((GetPlayerData(playerid, P_METALL) + amount) < GetPlayerMaxStorage(playerid, STORAGE_METALL))
									{
										AddPlayerData(playerid, P_METALL, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой больше металла");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_AMMO:
								{
									if((GetPlayerData(playerid, P_AMMO) + amount) < GetPlayerMaxStorage(playerid, STORAGE_AMMO))
									{
										AddPlayerData(playerid, P_AMMO, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой больше патронов");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_DRUGS:
								{
									if((GetPlayerData(playerid, P_DRUGS) + amount) < GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
									{
										AddPlayerData(playerid, P_DRUGS, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества наркотиков");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
							}

							new fmt_text[128];

							format(fmt_text, sizeof fmt_text, "Вы достали из багажника \"%s\" в количестве: %d %s", GetItemInfo(slot, I_NAME), amount, GetItemInfo(slot, I_NAME_COUNT));
							SendClientMessage(playerid, 0x1E90FFFF, fmt_text);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "В багажнике нет такого количества предмета");
							ShowTrunkDialog(playerid, vehicleid, false);
						}
					}
				}
				else ShowTrunkDialog(playerid, vehicleid, false);
			}
			// -----------------------------------------------------------------
			case DIALOG_SET_SPAWN:
			{
				if(response)
				{
					switch(list_id-1)
					{
						case 1: if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет дома");
						case 2: if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы не проживаете в гостиничном номере");
						case 3: if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в организации");
						case 4: if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы не проживаете ни у кого в гостях");
						case 5: if(GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_HOUSE_ID) == -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье, или у неё нет особняка");
					}

					SetPlayerSpawnSetting(playerid, list_id-1);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", list_id-1);

					SendClientMessage(playerid, 0x1E90FFFF, "Место появления в игре изменено");
				}
			}
			case DIALOG_SELECT_SPAWN:
			{
			    switch(list_id-1)
				{
				    case 0:
				    {

				    }
					case 1:
					{
						if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1)
						{
						    ShowSelectSpawnDialog(playerid);

							return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет дома");
						}
					}
					case 2:
					{
						if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
						{
						    ShowSelectSpawnDialog(playerid);

							return SendClientMessage(playerid, 0xCECECEFF, "Вы не проживаете в гостиничном номере");
						}
					}
					case 3:
					{
						if(!GetPlayerTeamEx(playerid))
						{
						    ShowSelectSpawnDialog(playerid);

							return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в организации");
						}
					}
					case 4:
					{
						if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1)
						{
						    ShowSelectSpawnDialog(playerid);

							return SendClientMessage(playerid, 0xCECECEFF, "Вы не проживаете ни у кого в гостях");
						}
					}
					case 5:
					{
						if(GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_HOUSE_ID) == -1)
						{
						    ShowSelectSpawnDialog(playerid);

							return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье, или у неё нет особняка");
						}
					}
				}

				SetPlayerSpawnSetting(playerid, list_id-1);
			}
			// -----------------------------------------------------------------
			case DIALOG_DONATE_INFO:
			{
				if(!response) return cmd::menu(playerid, "");

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_ENROLLMENT:
			{
				if(!response) return true;

				new donate_money = GetPVarInt(playerid, "donate_money"),
					donate_money_with_action = GetPVarInt(playerid, "donate_money_with_action"),
					fmt_text[248];

				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE `donations` SET activated=1 WHERE acc_id=%d", GetPlayerAccountID(playerid));
				mysql_query(mysql, fmt_text, false);

				if(!mysql_errno())
				{
					GivePlayerDonate(playerid, donate_money_with_action, "Пополнение счёта");

					format
					(
						fmt_text, sizeof fmt_text,
						"{FFFFFF}\
						Сумма была зачислена на Ваш аккаунт\n\
						Вы успешно пополнили счёт на {66cc99}%d Рублей\n\
						{FFFFFF}С учётом акции было зачислено {33cc66}%d Рублей\n\n\
						{FFFFFF}Используйте: {ffff00}/menu > Дополнительно\
						",
						donate_money, donate_money_with_action
					);

					Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Счёт пополнен", fmt_text, "Закрыть", "");
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 48)");
			}
			case DIALOG_DONATE_MENU:
			{
				if(!response) return 1;

				// if(response && GetPlayerCurrentDonate(playerid) <= 0) return cmd::mn(playerid, "");

				switch(list_id-1)
				{
					case 0: ShowPlayerDonations(playerid, GetPlayerAccountID(playerid));
					case 1: ShowPlayerConvertDialog(playerid);
					case 2:
					{
					    if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_NAME))
					    {
							Dialog
							(
								playerid, DIALOG_DONATE_CHANGE_NAME, DIALOG_STYLE_INPUT,
								"Изменение имени",
								"{FFFFFF}Введите новое имя в поле ниже:",
								"Изменить", "Закрыть"
							);
						}
						else SendClientMessage(playerid, -1, "Для смены имени необходимо иметь на счету 29 рублей");
					}
					case 3:
					{
						if(GetPlayerData(playerid, P_WARN))
						{
							if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_WARNS))
							{
								SetPlayerData(playerid, P_WARN, 		0);
								SetPlayerData(playerid, P_WARN_TIME, 	0);

								UpdatePlayerDatabaseInt(playerid, "warn", 		0);
								UpdatePlayerDatabaseInt(playerid, "warn_time", 	0);

								GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_WARNS), "Снятие предупреждений");

								SendClientMessage(playerid, 0x66CC33FF, "Все предупреждения успешно сняты");
								SendClientMessage(playerid, 0xFFFF00FF, "Теперь Вы можете устроиться в организацию");
							}
							else
							{
								new fmt_text[80];

								format(fmt_text, sizeof fmt_text, "Для снятия всех предупреждений необходимо иметь на счету %d Рублей",
								GetDonatePrice(DONATE_PRICE_WARNS));

								SendClientMessage(playerid, -1, fmt_text);
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "На Вашем аккаунте нет предупреждений");

						ShowPlayerDonateMenu(playerid);
					}
					case 4:
					{
						new fmt_text[80];

						if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_DRUGS))
						{
							AddPlayerData(playerid, P_DRUGS, +, 8);
							UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

							format(fmt_text, sizeof fmt_text, "Вы приобрели 8 доз наркотика ЛСД за %d Рублей",
							GetDonatePrice(DONATE_PRICE_DRUGS));
							SendClientMessage(playerid, 0x66CC33FF, fmt_text);
							SendClientMessage(playerid, 0xFFFF00FF, "Вы можете использовать их {1E90FF}/drugs");

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_DRUGS), "Покупка наркотиков");
						}
						else
						{
							format(fmt_text, sizeof fmt_text, "Для покупки наркотиков необходимо иметь на счету %d Рублей",
							GetDonatePrice(DONATE_PRICE_DRUGS));

							SendClientMessage(playerid, -1, fmt_text);
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 5:
					{
						new fmt_text[80];

						if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_LAW_ABIDING))
						{
							AddPlayerData(playerid, P_LAW_ABIDING, +, 10);
							if(GetPlayerData(playerid, P_LAW_ABIDING) >= 100){SetPlayerData(playerid, P_LAW_ABIDING, 100); return SendClientMessage(playerid,0x66CC33FF, "Ваши документы и так в порядке!");}
							UpdatePlayerDatabaseInt(playerid, "law_abiding", GetPlayerData(playerid, P_LAW_ABIDING));

							SendClientMessage(playerid, 0x66CC33FF, "Документы удалось подделать");

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_LAW_ABIDING), "Подделка документов");
						}
						else
						{
							format(fmt_text, sizeof fmt_text, "Для подделки документов необходимо иметь на счету %d Рублей",
							GetDonatePrice(DONATE_PRICE_LAW_ABIDING));

							SendClientMessage(playerid, -1, fmt_text);
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 6:
					{
						if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_PHONE_NUMBER))
						{
							Dialog
							(
								playerid, DIALOG_DONATE_BUY_NUMBER, DIALOG_STYLE_INPUT,
								"Покупка 4-х значного номера телефона",
								"{FFFFFF}Введите номер, который\n"\
								"Вы хотели бы приобрести:",
								"Далее", "Отмена"
							);

							return 1;
						}
						else
						{
							new fmt_text[85];

							format(fmt_text, sizeof fmt_text, "Для покупки 4-х значного номера телефона необходимо иметь на счету %d Рублей",
							GetDonatePrice(DONATE_PRICE_PHONE_NUMBER));

							SendClientMessage(playerid, -1, fmt_text);
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 7:
					{
						new fmt_text[400];

						format
						(
							fmt_text, sizeof fmt_text,
							"1. Сила\t\t%d%%\n"\
							"2. Colt 45\t%d%%\n"\
							"3. SD Pistol\t%d%%\n"\
							"4. Desert Eagle\t%d%%\n"\
							"5. Shotgun\t%d%%\n"\
							"6. MP5\t\t%d%%\n"\
							"7. AK47\t\t%d%%\n"\
							"8. M4\t\t%d%%\n"\
							"9. Sniper Rifle\t%d%%\n"\
							"10. Sawnoff\t%d%%\n"\
							"11. Combat SG\t%d%%\n"\
							"12. Micro Uzi\t%d%%",
							GetPlayerData(playerid, P_POWER),
							GetPlayerData(playerid, P_SKILL_COLT),
							GetPlayerData(playerid, P_SKILL_SDPISTOL),
							GetPlayerData(playerid, P_SKILL_DEAGLE),
							GetPlayerData(playerid, P_SKILL_SHOTGUN),
							GetPlayerData(playerid, P_SKILL_MP5),
							GetPlayerData(playerid, P_SKILL_AK47),
							GetPlayerData(playerid, P_SKILL_M4),
							GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE),
							GetPlayerData(playerid, P_SKILL_SAWNOFF),
							GetPlayerData(playerid, P_SKILL_COMBAT_SG),
							GetPlayerData(playerid, P_SKILL_MICRO_UZI)
						);

						Dialog(playerid, DIALOG_DONATE_SKILLS, DIALOG_STYLE_LIST, "Выберите навык", fmt_text, "Выбор", "Отмена");
					}
					case 8:
					{
						if(GetPlayerOwnableCar(playerid) == INVALID_VEHICLE_ID)
						{
							if(GetPlayerOwnableCars(playerid) == 0)
								return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного транспорта");
							else
								return SendClientMessage(playerid, 0xCECECEFF, "Ваш личный транспорт не загружен на сервер");
						}

						Dialog
						(
							playerid, DIALOG_DONATE_BUY_CAR_NUMBER, DIALOG_STYLE_INPUT,
							"Введите номер для личного ТС",
							"{FFFFFF}\
							Введите номер, который\n\
							Вы хотите установить на личный транспорт\n\n\
							- Разрешено использовать цифры, а так же буквы: A, B, E, K, M, H, O, P, C, T, X\n\
							- Чем больше одинаковых букв/цифр встречается в номере - тем он дороже\n\
							- Номер должен быть в формате CNNNCC; Где C - буква, где N - цифра\n\n\
							{888888}Например: B713EC\
							",
							"Далее", "Отмена"
						);
					}
					case 9:
					{
						new fmt_text[80];

						if(GetPlayerCurrentDonate(playerid) < GetDonatePrice(DONATE_PRICE_CAR_SLOT))
						{
							format(fmt_text, sizeof fmt_text, "Для покупки слота для транспорта необходимо иметь на счету %d Рублей",
							GetDonatePrice(DONATE_PRICE_CAR_SLOT));

							SendClientMessage(playerid, -1, fmt_text);
						}
						else
						{
							AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
							UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_CAR_SLOT), "Покупка слота для транспорта", true);

							format(fmt_text, sizeof fmt_text, "Вы увеличили количество слотов для транспорта. Текущее количество слотов: %d",
							GetPlayerData(playerid, P_CAR_SLOTS));

							SendClientMessage(playerid, 0x32a44bFF, fmt_text);
						}
					}
					case 10:
					{
						if(GetPlayerData(playerid, P_DRIVING_B) == 2 && GetPlayerData(playerid, P_LIC_WEAPON) == 1)
							SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть все лицензии");

						else
						{
							if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_LIC_PACK))
							{
							    SetPlayerData(playerid, P_DRIVING_A,	1);
								SetPlayerData(playerid, P_DRIVING_B,	1);
								SetPlayerData(playerid, P_DRIVING_C,	1);
								SetPlayerData(playerid, P_DRIVING_D,	1);
								SetPlayerData(playerid, P_LIC_WEAPON,	1);
								SetPlayerData(playerid, P_LIC_FLY,	1);
								SetPlayerData(playerid, P_LIC_WATER,	1);
								SetPlayerData(playerid, P_LIC_BIZ,	1);

								UpdatePlayerDatabaseInt(playerid, "driving_a", 1);
								UpdatePlayerDatabaseInt(playerid, "driving_b", 1);
								UpdatePlayerDatabaseInt(playerid, "driving_c", 1);
								UpdatePlayerDatabaseInt(playerid, "driving_d", 1);
								UpdatePlayerDatabaseInt(playerid, "lic_fly", 1);
								UpdatePlayerDatabaseInt(playerid, "lic_water", 1);
								UpdatePlayerDatabaseInt(playerid, "lic_biz", 1);
								UpdatePlayerDatabaseInt(playerid, "lic_weapon", 1);

								GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_LIC_PACK), "Покупка пакета лицензий", true);

								SendClientMessage(playerid, 0x66CC33FF, "Вы приобрели пакет лицензий. Используйте: {ffff00}/lic");
							}
							else
							{
								new fmt_text[65];

								format(fmt_text, sizeof fmt_text, "Для покупки всех лицензий необходимо иметь на счету %d Рублей",
								GetDonatePrice(DONATE_PRICE_LIC_PACK));
							}
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 11:
					{
						if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_LEVEL))
						{
						    AddPlayerData(playerid, P_LEVEL, +, 1);

							UpdatePlayerDatabaseInt(playerid, "score", GetPlayerData(playerid, P_LEVEL));

							SetPlayerScore(playerid, GetPlayerData(playerid, P_LEVEL));

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_LEVEL), "Покупка '+1 уровень'", true);

							SendClientMessage(playerid, 0x66CC33FF, "Вы приобрели '+1 уровень'");
						}
						else
						{
							new fmt_text[65];

							format(fmt_text, sizeof fmt_text, "Для покупки '+1 уровень' необходимо иметь на счету %d. Рублей",
							GetDonatePrice(DONATE_PRICE_LEVEL));

							SendClientMessage(playerid, -1, fmt_text);
						}

						ShowPlayerDonateMenu(playerid);
					}
					case 12:
					{
					    Dialog
						(
							playerid,
							DIALOG_DONATE_VIP_HELP,
							DIALOG_STYLE_MSGBOX,
							"Информация",
							"{CD7F32}______________________ BRONZE VIP ______________________\n\
							{FFFF00}1{FFFFFF} /togphone - Отключить телефон\n\
							{FFFF00}1{FFFFFF} /admins - Просмотр администраторов онлайн\n\n\
							{C0C0C0}______________________ SILVER VIP ______________________\n\
							{FFFF00}1{FFFFFF} Все возможности BRONZE VIP \n\
							{FFFF00}2{FFFFFF} VIP чат ( nRP чат богачей сервера) /v | /voff \n\
							{FFFF00}3{FFFFFF} Раз в сутки можно в 2 раза уменьшить наказание в тюрьме (/unj) \n\
							{FFFF00}4{FFFFFF} +1 Слот транспорта в подарок \n\
							{FFFF00}5{FFFFFF} Лечение в больнице проходит в 2 раза быстрее! \n\n\
							{FFD700}______________________ GOLD VIP ______________________\n\
							{FFFF00}1{FFFFFF} Все возможности BRONZE VIP \n\
							{FFFF00}2{FFFFFF} Все возможности SILVER VIP \n\
							{FFFF00}3{FFFFFF} Раз в сутки можно в 3 раза уменьшить наказание в тюрьме (/unj)\n\
							{FFFF00}4{FFFFFF} +2 Слота транспорта в подарок.\n\
							{FFFF00}4{FFFFFF} /vleave - увольнение из фракции в любое время!\n\
							{FFFF00}5{FFFFFF} Каждый третий PayDay + 1 EXP и 1000$ к зарплате.\n\
							Покупая платные услуги, Вы помогаете проекту в развитии",
							"Далее","Отмена");
					 /*   Dialog
					    (
					        playerid,
					        DIALOG_DONATE_PREMIUM,
					        DIALOG_STYLE_MSGBOX,
					        "VIP Bronse",
					        "{EC174F}Бронзовый VIP Аккаунт\n\n"\
					        "{FFFFFF}Стоимость: {ABCDEF}400 руб/месяц {FFFFFF}(30 дней)\n\n"\
					        "Преимущества использования вип аккаунта:\n"\
					        "- Раз в сутки можно в 2 раза уменьшить наказание в тюрьме (/unj)\n"\
					        "- Ускоренная прокачка аккаунта (каждый третий PayDay Вы получаете доп. опыт)\n"\
					        "- Ускоренный ответ на вопросы для администрации\n"\
					        "- Увеличенная зарплата (каждый PayDay Вы будете получать $1000)\n"\
					        "{888888}Полный список преимуществ уточняйте у администрации\n\n"\
					        "{FFFFFF}Вы хотите приобрести {EC174F}подписку "SERVER_NAME"+{FFFFFF}?\n"\
					        "Покупая платные услуги, Вы помогаете проекту в развитии",
					        "Купить", "Отмена"
					    );
					    */
					}
					/*case 13:
					{
						if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_GIFT))
						{
						    AddPlayerData(playerid, P_GIFTS, +, 40);

							UpdatePlayerDatabaseInt(playerid, "gifts", GetPlayerData(playerid, P_GIFTS));

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_GIFT), "Покупка '40 подков'", true);

							SendClientMessage(playerid, 0x66CC33FF, "Вы приобрели '40 подков'");
						}
						else
						{
							new fmt_text[65];

							format(fmt_text, sizeof fmt_text, "Для покупки '40 подков' необходимо иметь на счету %d. Рублей",
							GetDonatePrice(DONATE_PRICE_GIFT));

							SendClientMessage(playerid, -1, fmt_text);
						}

						ShowPlayerDonateMenu(playerid);
					}*/
					case 13:
					{
					    Dialog(playerid,DIALOG_DONATE_CASE,DIALOG_STYLE_MSGBOX,
						"Кейсы "SERVER_NAME"",
						"СТАНДАРТНЫЕ кейсы представляет собой беспроигрышную игру\n\n"\
						"В которой Вы можете получать призы , Стоимость открытия кейсов 49 рублей.\n\n"\
						"Вы можете заработать целое состояние!.\n\n"\
						"У Вас есть возможность выиграть VIP-статус, автомобили, деньги, донат рубли,блатные номера",
						"Открыть","Отмена"
						);
					}
					case 14:
					{
					    Dialog(playerid,DIALOG_DONATE_SKIN,DIALOG_STYLE_LIST,"Купить скин","\
					    1. Федот пулемет\n\
					    2. Сукре\n\
					    3. Делорензи\n\
					    4. Влад Павлов (днем)\n\
					    5. Влад Павлов (ночью)\n\
					    6. Батори\n\
					    7. Данте\n\
					    8. Ричи в старости\n\
					    9. Мучачо красивый\n\
					    10. Тусовщик Элвис\n\
					    11. Гангстер-Шашлык\n\
					    12. Инструктор на обеде\n\
					    13. Сукре поел\n\
					    14. Милый дедушка\n\
					    15. Байкер Джони\n\
					    16. Дед Таксист\n\
					    17. Чеченец в рубашке\n\
					    18. Цыган богатый\n\
					    19. Карате пацан\n\
					    20. Механик Якубович\n\
					    21. Назад в будущее\n\
					    22. Скейтер Тони","Выбрать","Назад");
					}
				}
			}
			case DIALOG_DONATE_SKIN: // Скины сюда
			{
			    if(response)
			    {
					//new str_len = strval(inputtext);
					if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_SKIN))
			        {
			            GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_SKIN), "Покупка unical skin");
			            SetPlayerSkin(playerid,g_skin_donate[list_id-1]);
			            UpdatePlayerDatabaseInt(playerid, "skin", g_skin_donate[list_id-1]);
			            SetPlayerData(playerid, P_SKIN, g_skin_donate[list_id-1]);
			            SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Поздравляем вас с покупкой уникального скина!");
					}
					else
	    			{
						new fmt_text[128];
	    				format(fmt_text, sizeof fmt_text, "Для покупки уникального скина необходимо иметь на счету %d. Рублей",
						GetDonatePrice(DONATE_PRICE_SKIN));
						SendClientMessage(playerid,-1,fmt_text);
		    		}
                }
			}
			case DIALOG_DONATE_VIP_HELP:
			{
			    if(!response) return 1;
			    Dialog(playerid,DIALOG_DONATE_PREMIUM,DIALOG_STYLE_LIST,
				"VIP Аккаунты",
				"{FFFF00}1{CD7F32} Bronze VIP ( 400 RUB )\n\
				{FFFF00}2{C0C0C0} Silver VIP ( 800 RUB )\n\
				{FFFF00}3{FFD700} Gold VIP ( 1199 RUB )",
				"Купить","Отмена");
			}
            case DIALOG_DONATE_CASE:
			{
  				if(response)
			    {
			        if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_CASE))
			        {
			            GetPlayerPrise(playerid);
			            Dialog(playerid,DIALOG_DONATE_CASE_PRISE,DIALOG_STYLE_MSGBOX,
						"Кейсы "SERVER_NAME"",
						"{ffffff}Поздравляем Вы открыли кейс Ваш приз:{FFFF00} см. чат",
						"Забрать",""
						);
						return 1;
					}
				}
			}
			case DIALOG_DONATE_PREMIUM:
			{
				if(response)
			    {
				    new prem_day,prem_month,prem_year,premium = GetPlayerPremium(playerid),
				    fmt_text[128];
			        switch(list_id)
					{
	    				case 1:
						{
					        if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_BRONSE))
					        {
						        if(!premium)
						        {
									SetPlayerData(playerid, P_PREMIUM, 1);
						            SetPlayerData(playerid, P_PREMIUM_DATE, gettime() + 30 * 86400);
								}
								else
								{
								    AddPlayerData(playerid, P_PREMIUM_DATE, +, 30 * 86400);
								}


								timestamp_to_date(GetPlayerData(playerid, P_PREMIUM_DATE), prem_year, prem_month, prem_day);

								format(fmt_text, sizeof fmt_text, "Вы успешно оплатили {EC174F}VIP Bronse{FFFFFF}до {EC174F}%02d.%02d.%d", prem_day, prem_month, prem_year);
								SendClientMessage(playerid, -1, fmt_text);

								UpdatePlayerDatabaseInt(playerid, "premium", 1);
								UpdatePlayerDatabaseInt(playerid, "premium_date", GetPlayerData(playerid, P_PREMIUM_DATE));

								GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_BRONSE), "Покупка подписки "SERVER_NAME"+");
				    		}
						    else
						    {
						        format(fmt_text, sizeof fmt_text, "Для покупки подписки VIP Bronse необходимо иметь на счету %d. Рублей",
								GetDonatePrice(DONATE_PRICE_BRONSE));
						    }
						}
						case 2:
							{
						        if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_SILVER))
						        {
							        if(!premium)
							        {
							            AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
										SetPlayerData(playerid, P_PREMIUM, 2);
							            SetPlayerData(playerid, P_PREMIUM_DATE, gettime() + 30 * 86400);
									}
									else
									{
									    AddPlayerData(playerid, P_PREMIUM_DATE, +, 30 * 86400);
									}


									timestamp_to_date(GetPlayerData(playerid, P_PREMIUM_DATE), prem_year, prem_month, prem_day);


									format(fmt_text, sizeof fmt_text, "Вы успешно оплатили {EC174F}VIP Silver{FFFFFF}до {EC174F}%02d.%02d.%d", prem_day, prem_month, prem_year);
									SendClientMessage(playerid, -1, fmt_text);

									UpdatePlayerDatabaseInt(playerid, "premium", 2);
									UpdatePlayerDatabaseInt(playerid, "premium_date", GetPlayerData(playerid, P_PREMIUM_DATE));

									GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_BRONSE), "Покупка подписки "SERVER_NAME"+");
					    		}
							    else
							    {
							        format(fmt_text, sizeof fmt_text, "Для покупки подписки VIP Silver необходимо иметь на счету %d. Рублей",
									GetDonatePrice(DONATE_PRICE_SILVER));
							    }
						    }
		    			case 3:
							{
						        if(GetPlayerCurrentDonate(playerid) >= GetDonatePrice(DONATE_PRICE_GOLD))
						        {
							        if(!premium)
							        {
										AddPlayerData(playerid, P_CAR_SLOTS, +, 2);
										SetPlayerData(playerid, P_PREMIUM, 3);
							            SetPlayerData(playerid, P_PREMIUM_DATE, gettime() + 30 * 86400);
									}
									else
									{
									    AddPlayerData(playerid, P_PREMIUM_DATE, +, 30 * 86400);
									}


									timestamp_to_date(GetPlayerData(playerid, P_PREMIUM_DATE), prem_year, prem_month, prem_day);



									format(fmt_text, sizeof fmt_text, "Вы успешно оплатили {EC174F}VIP Gold{FFFFFF}до {EC174F}%02d.%02d.%d", prem_day, prem_month, prem_year);
									SendClientMessage(playerid, -1, fmt_text);

									UpdatePlayerDatabaseInt(playerid, "premium", 3);
									UpdatePlayerDatabaseInt(playerid, "premium_date", GetPlayerData(playerid, P_PREMIUM_DATE));

									GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_BRONSE), "Покупка подписки "SERVER_NAME"+");
					    		}
							    else
							    {
							        format(fmt_text, sizeof fmt_text, "Для покупки подписки VIP Gold необходимо иметь на счету %d. Рублей",
									GetDonatePrice(DONATE_PRICE_GOLD));
							    }
							}
					    }
					}

			    ShowPlayerDonateMenu(playerid);
			}

			case DIALOG_DONATE_CONVERT:
			{
				if(!response) return ShowPlayerDonateMenu(playerid);

				new fmt_text[256],
					money_amount = strval(inputtext);

				if(!(1 <= money_amount <= GetPlayerCurrentDonate(playerid)))
				{
					if(money_amount > GetPlayerCurrentDonate(playerid))
					{
						format(fmt_text, sizeof fmt_text, "Недостаточно средств. Сейчас на Вашем счету %d Рублей", GetPlayerCurrentDonate(playerid));
						SendClientMessage(playerid, 0xCECECEFF, fmt_text);
					}

					ShowPlayerConvertDialog(playerid);

					return 1;
				}

				new donate_price = g_doubling[DOUBLING_DONATE] * GetDonatePrice(DONATE_PRICE_MONEY);

				format(fmt_text, sizeof fmt_text, "Вы сконвертировали {009900}%d. Рублей рублей {FFFF00}в {009900}%d вирты", money_amount, money_amount * donate_price);
				SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

				format(fmt_text, sizeof fmt_text, "~g~+$%d~n~~y~-$%d", money_amount * donate_price, money_amount);
				GameTextForPlayer(playerid, fmt_text, 4000, 1);

				format(fmt_text, sizeof fmt_text, "Конвертация $%d в игровую валюту", money_amount);
				GivePlayerDonate(playerid, -money_amount, fmt_text, true);

				GivePlayerMoneyEx(playerid, money_amount * donate_price, fmt_text, true, true);

				return 1;
			}

			case DIALOG_DONATE_GET_MONEY:
			{
				if(!response)
				{
					DeletePVar(playerid, "donate_convert_count");
					return ShowPlayerDonateMenu(playerid);
				}

				new money_count;
				money_count = GetPVarInt(playerid, "donate_convert_count");

				new fmt_text[128];

				format(fmt_text, sizeof fmt_text, "Вы сконвертировали {32a44b}%d. Рублей рублей {FFFF00}в {32a44b}%d вирты", money_count, money_count * GetDonatePrice(DONATE_PRICE_MONEY));
				SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

				format(fmt_text, sizeof fmt_text, "~g~+$%d~n~~y~-$%d", money_count * GetDonatePrice(DONATE_PRICE_MONEY), money_count);
				GameTextForPlayer(playerid, fmt_text, 4000, 1);

				format(fmt_text, sizeof fmt_text, "Конвертация $%d в игровую валюту", money_count);
				GivePlayerDonate(playerid, -money_count, fmt_text, true);

				GivePlayerMoneyEx(playerid, money_count * GetDonatePrice(DONATE_PRICE_MONEY), fmt_text, false, true);

				DeletePVar(playerid, "donate_convert_count");

				return 1;
			}
			case DIALOG_DONATE_BUY_CAR_NUMBER:
			{
				if(response)
				{
					if(IsACarNumber(inputtext))
					{
						new fmt_text[105],
							number_price = GetCarNumberPrice(inputtext),
							Cache: result,
							rows;

						mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE number='%s'", inputtext);
						result = mysql_query(mysql, fmt_text, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
							SendClientMessage(playerid, 0xCECECEFF, "Данный номер уже занят");

						else
						{
							SetPVarString(playerid, "car_number", inputtext);
							SetPVarInt(playerid, "car_number_price", number_price);

							format(fmt_text, sizeof fmt_text, "{FFFFFF}Вы действительно хотите купить номер {32a44b}%s {FFFFFF}за {ffff00}$%d{FFFFFF}?", inputtext, number_price);
							Dialog(playerid, DIALOG_DONATE_ACCEPT_CAR_NUM, DIALOG_STYLE_MSGBOX, "Покупка номера", fmt_text, "Купить", "Назад");

							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, 0xCECECEFF, "Введенный Вами номер не соответствует формату CNNNCC");

						ShowPlayerDonateMenu(playerid);
					}
				}
				else ShowPlayerDonateMenu(playerid);
				return 1;
			}
			case DIALOG_DONATE_ACCEPT_CAR_NUM:
			{
				if(response)
				{
					new number_price = GetPVarInt(playerid, "car_number_price"),
						fmt_text[100];

					if(GetPlayerCurrentDonate(playerid) >= number_price)
					{
						new car_number[7],
							vehicleid,
							index;

						GetPVarString(playerid, "car_number", car_number, sizeof car_number);

						vehicleid = GetPlayerOwnableCar(playerid);

						if(vehicleid != INVALID_VEHICLE_ID)
						{
							index = GetVehicleData(vehicleid, V_ACTION_ID);

							format(g_ownable_car[index][OC_NUMBER], 7, car_number);

							UpdateVehicleLabel(vehicleid, 0xFFFF00EE, GetOwnableCarData(index, OC_NUMBER));

							format(fmt_text, sizeof fmt_text, "Вы купили номера формата: {ffff00}\"%s\" {66cc33}за $%d", GetOwnableCarData(index, OC_NUMBER), number_price);
							SendClientMessage(playerid, 0x66CC33FF, fmt_text);

							mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE ownable_cars SET number='%s' WHERE id='%d' LIMIT 1", GetOwnableCarData(index, OC_NUMBER), GetOwnableCarData(index, OC_SQL_ID));
							mysql_query(mysql, fmt_text, false);

							GivePlayerDonate(playerid, -number_price, "Покупка номеров", true);
						}
						else
						{
							if(GetPlayerOwnableCars(playerid) == 0)
								SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного транспорта");
							else
								SendClientMessage(playerid, 0xCECECEFF, "Ваш личный транспорт не загружен на сервер");
						}
					}
					else
					{
						format(fmt_text, sizeof fmt_text, "Для покупки номера необходимо иметь на счету %d Рублей", number_price);
						SendClientMessage(playerid, -1, fmt_text);
					}
				}

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_CHANGE_NAME:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(4 <= len <= 20)
					{
						new bool: valid_name = true;
						for(new idx; idx < len; idx ++)
						{
							switch(inputtext[idx])
							{
								case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
								default:
									valid_name = false;
							}
						}

						if(!strcmp(GetPlayerNameEx(playerid), inputtext, true))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Вы уже используете это имя");
						}
						else if(valid_name)
						{
							new query[128];
							new Cache: result, rows;

							mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
							result = mysql_query(mysql, query, true);

							rows = cache_num_rows();
							cache_delete(result);

							if(!rows)
							{

								if(ChangePlayerName(playerid, inputtext, false))
								{
									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"Имя изменено",
										"{66FF00}Ваше имя успешно изменено.\n\n"\
										"{FFFFFF}В следующий раз при входе в игру используйте свое новое имя. Для\n"\
										"этого нужно изменить его в окне клиента SAMP. Рекомендуем прямо\n"\
										"сейчас свернуть игру и сделать это.",
										"Ок", ""
									);

									GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_NAME), "Смена имени", true);

									return 1;
								}
								else SendClientMessage(playerid, 0xCECECEFF, "При смене ника произошла ошибка");

							}
							else SendClientMessage(playerid, 0xCECECEFF, "Введенное Вами имя уже используется");

						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Имя уже используется или содержит недопустимые символы");
							SendClientMessage(playerid, 0xFFFFFFFF, "Используйте латинские буквы a-z A-Z, а также символы [ ] _");
						}
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Недопустимый формат ввода");
				}

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_BUY_NUMBER:
			{
				if(response)
				{
					if(strlen(inputtext) == 4 && (1000 <= strval(inputtext) <= 9999))
					{
						new number = strval(inputtext),
							query[102],
							rows,
							Cache: result;

						mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE phone=%d", number);
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
							SendClientMessage(playerid, 0xCECECEFF, "Введенный Вами номер уже занят");

						else
						{
							SetPlayerData(playerid, P_PHONE, number);
							UpdatePlayerDatabaseInt(playerid, "phone", number);

							GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_PHONE_NUMBER), "Смена номера телефона");

							format
							(
								query, sizeof query,
								"{FFFFFF}Номер телефона изменен\n"\
								"Теперь с Вами  можно связаться по номеру {ffff00}%d",
								GetPlayerPhone(playerid)
							);
							return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{32a44b}Номер изменен", query, "Закрыть", "");
						}
					}
					else SendClientMessage(playerid, 0xCECECEFF, "Недопустимый формат ввода");
				}

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_SKILLS:
			{
				if(response)
				{
					SetPVarInt(playerid, "skill_index", list_id-1);

					new skill_amount = GetPlayerSkillAmount(playerid, list_id-1);

					new title[48],
						fmt_text[200];

					format(title, sizeof title, "Прокачать навык: %s", skill_name[list_id-1]);

					format
					(
						fmt_text, sizeof fmt_text,
						"%s:\t\t\t{FFFFFF}%d%%\n\n"\
						"Стоимость 1 ед.:\t{6699cc}$%d\n"\
						"{FFFFFF}Введите количество единиц, на которое\n"\
						"Вы хотите прокачать Ваш навык:",
						skill_name[list_id-1],
						skill_amount,
						GetDonatePrice(DONATE_PRICE_SKILLS)
					);

					Dialog(playerid, DIALOG_DONATE_SKILL_BUY, DIALOG_STYLE_INPUT, title, fmt_text, "Далее", "Отмена");
				}
				else ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_SKILL_BUY:
			{
				if(response)
				{
					new skill_index = GetPVarInt(playerid, "skill_index"),
						skill_amount = strval(inputtext);

					if(!(0 <= skill_index <= 11))
						return SendClientMessage(playerid, 0xFF5533FF, "Ошибка, попробуйте снова");

					if(skill_amount > 0 && IsNumeric(inputtext))
					{
						new skill_max = 100 - GetPlayerSkillAmount(playerid, skill_index);

						new fmt_text[90];

						if(skill_amount <= skill_max)
						{
							new skill_price = GetDonatePrice(DONATE_PRICE_SKILLS) * skill_amount;

							if(GetPlayerCurrentDonate(playerid) >= skill_price)
							{
								GivePlayerDonate(playerid, -skill_price, "Прокачка навыков", true);

								SetPlayerSkillAmount(playerid, skill_index, GetPlayerSkillAmount(playerid, skill_index) + skill_amount);

								new skill_db_name[12][20] =
								{
									"power",
									"skill_colt",
									"skill_sdpistol",
									"skill_deagle",
									"skill_shotgun",
									"skill_mp5",
									"skill_ak47",
									"skill_m4",
									"skill_sniper_rifle",
									"skill_sawnoff",
									"skill_combat_sg",
									"skill_micro_uzi"
								};

								UpdatePlayerDatabaseInt(playerid, skill_db_name[skill_index], GetPlayerSkillAmount(playerid, skill_index));

								format(fmt_text, sizeof fmt_text, "Вы прокачали навык %s на %d ед. Текущее значение: %d ед.",
								skill_name[skill_index], skill_amount, GetPlayerSkillAmount(playerid, skill_index));

								SendClientMessage(playerid, 0x66CC33FF, fmt_text);
							}
							else
							{
								format(fmt_text, sizeof fmt_text, "Для прокачки %d ед. навыка требуется %d Рублей на счету", skill_amount, skill_price);
								SendClientMessage(playerid, -1, fmt_text);
							}
						}
						else
						{
							format(fmt_text, sizeof fmt_text, "Максимальное значение навыка: 100 ед., Вы можете прокачать еще %d ед.", skill_max);
							SendClientMessage(playerid, -1, fmt_text);
						}
					}
					else SendClientMessage(playerid, 0xFF5533FF, "Введите корректное значение");
				}

				ShowPlayerDonateMenu(playerid);
			}
			// -----------------------------------------------------------------
			case DIALOG_TEAM_CHANGE_SKIN:
			{
				if(!response || !(0 <= list_id-1 <= 3)) return 1;

				new to_player = GetPVarInt(playerid, "change_team_skin_playerid");
				new team_id = GetPlayerTeamEx(playerid);

				if(!(1 <= team_id <= 10) || !(9 <= GetPlayerJob(playerid) <= 10)) return 1;
				if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || team_id != GetPlayerTeamEx(to_player)) return 1;
				if(GetPlayerSex(to_player)) return 1;

				new index = GetPlayerListitemValue(playerid, strval(inputtext)-1);

				SetPlayerData(to_player, P_OSKIN, GetTeamData(team_id, O_SKINS)[index]);

				new query[85];
				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET org_skin=%d WHERE id=%d", GetPlayerData(to_player, P_OSKIN), GetPlayerAccountID(to_player));
				mysql_query(mysql, query, false);

				ResetSkin(to_player);

				format(query, sizeof query, "Ваша внешность была изменена %s организации %s[%d]", GetPlayerJob(playerid) >= 10 ? ("лидером") : ("заместителем"), GetPlayerNameEx(playerid), playerid);
				SendClientMessage(to_player, 0x1E90FFFF, query);

				format(query, sizeof query, "Вы изменили внешность %s[%d]", GetPlayerNameEx(to_player), to_player);
				SendClientMessage(playerid, 0x1E90FFFF, query);

				return 1;
			}
			case DIALOG_TEAM_LEAVE:
			{
				if(response)
				{
					new fmt_text[110];

					format(fmt_text, sizeof fmt_text, "%s %s[%d] покинул организацию по собственному желанию",
					GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);

					SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x1E90FFFF, playerid);

					format(fmt_text, sizeof fmt_text, "Вы покинули организацию \"%s\"", GetTeamName(GetPlayerTeamEx(playerid)));
					SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

					UnInvite(playerid, playerid);
				}
			}
			case DIALOG_FAMILY_LEAVE:
			{
			    new fmt_text[110];
				if(response)
				{
					new fam_id = GetPlayerData(playerid, P_FAMILY),
					rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

					format(fmt_text, sizeof fmt_text, "[F] %s %s[%d] покинул семью по собственному желанию",
					GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid);

					for(new i; i < MAX_PLAYERS; i ++)
					{
						if(!IsPlayerConnected(i)) continue;
						if(!IsPlayerLogged(i)) continue;
						if(GetPlayerData(i, P_FAMILY) == 0) continue;
						if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

						if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

						SendClientMessage(i, 0xCECECEFF, fmt_text);
					}

					format(fmt_text, sizeof fmt_text, "Вы покинули семью \"%s\"", GetFamilyData(fam_id, F_NAME));
					SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

					FUnInvite(playerid, playerid);
					if(GetPlayerData(playerid, P_HOUSE) == GetFamilyData(fam_id, F_HOUSE_ID))
					{
					    SetHouseData(GetPlayerData(playerid, P_HOUSE),H_FAMILY_ID, 0);
					    SetFamilyData(fam_id, F_HOUSE_ID, -1);
					    SetHouseData(GetPlayerData(playerid, P_HOUSE), H_TYPE, -1);
					    mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family f, house h SET f.house_id=-1 h.family_id = 0,h.type =%d WHERE f.id='%d' AND h.id = %d",GetHouseData(GetPlayerData(playerid, P_HOUSE), H_TYPE)-1,fam_id + 1,GetPlayerHouse(playerid, HOUSE_TYPE_HOME));
						mysql_query(mysql, fmt_text, false);
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ADVISOR_MENU:
			{
				if(!response) return 1;

				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return 1;

				switch(list_id-1)
				{
					case 0:
					{
						if(!IsValidDynamic3DTextLabel(g_player[playerid][P_ADVISOR_LABEL]))
						{
							g_player[playerid][P_ADVISOR_LABEL] = CreateDynamic3DTextLabel("Советник", 0xFFCC33FF, 0.0, 0.0, 0.3, 10.0, playerid);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы надели бейджик");
						}
						else
						{
							DestroyDynamic3DTextLabel(g_player[playerid][P_ADVISOR_LABEL]);
							g_player[playerid][P_ADVISOR_LABEL] = Text3D: -1;

							SendClientMessage(playerid, 0x1E90FFFF, "Вы сняли бейджик");
						}
					}
					case 1:
					{
						if(GetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT))
						{
							SetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT, false);
							SendClientMessage(playerid, 0x32a44bFF, "Вы включили отображение рации организации");
							return 1;
						}
						else
						{
							SetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT, true);
							SendClientMessage(playerid, 0xCECECEFF, "Вы отключили отображение рации организации");
							return 1;
						}
					}
					case 2:
					{
						if(GetPlayerJob(playerid) != 5)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Функция доступна советникам по гос. организациям");
						}
						else
						{
							Dialog
							(
								playerid, DIALOG_ADVISOR_TEAM_STRUCTURE, DIALOG_STYLE_LIST,
								"{33CC66}Выберите организацию",
								"1. Мэрия г.Los-Santos\n\
								2. ВМФ\n\
								3. Больница г.Los-Santos\n\
								4. СМИ г.Los-Santos\n\
								5. LSPD\n\
								6. FBI",
								"Выбрать", "Отмена"
							);
							return 1;
						}
					}
					default: return -1;
				}

				cmd::smenu(playerid, "");
				return 1;
			}

			case DIALOG_ADVISOR_TEAM_STRUCTURE:
			{
				if(!response) return 1;
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return 1;

				if(0 <= list_id-1 <= 6)
				{
					ShowTeamStructureDialog(playerid, (list_id));
				}

				return 1;
			}

			// -----------------------------------------------------------------

/*
		new name[21],
								user_id = cache_get_field_content_int(i, "id"),
								lvl = cache_get_field_content_int(i, "admin"),
								game_for_day = cache_get_field_content_int(i, "game_for_day"),
								game_for_day_text[32];

							cache_get_field_content(i, "name", name);
							format(game_for_day_text, sizeof game_for_day_text, "%d ч %d мин", ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS), ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES));

							format(fmt_text, sizeof fmt_text, "\n%d.\t%s%s%d\t\t%s", user_id, name, strlen(name) > 14 ? "\t" : "\t\t", lvl, game_for_day_text);
							strcat(text, fmt_text);

*/

			case DIALOG_ADMIN_PANEL:
			{
				if(!response) return 1;

				new fmt_text[128],
					text[1440],
					Cache: result,
					rows;

				switch(list_id-1)
				{
					case 0: // Список администрации
					{
						result = mysql_query(mysql, "SELECT * FROM accounts WHERE admin != 0 ORDER BY admin DESC", true);
						rows = cache_num_rows();

						format(text, sizeof text, "{1E90FF}№ акк.\tИмя");

						for(new i = 0; i < rows; i++)
						{
							new name[21],
								user_id = cache_get_field_content_int(i, "id");

							cache_get_field_content(i, "name", name);

							format(fmt_text, sizeof fmt_text, "\n%d.\t%s", user_id, name);
							strcat(text, fmt_text);
							SetPlayerListitemValue(playerid, i+1, user_id);
						}

						cache_delete(result);

						Dialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_LIST, "Список администрации", text, "Выбрать", "Отмена");
					}
					case 1: // Список лидеров
					{
						result = mysql_query(mysql, "SELECT * FROM accounts WHERE job=10 ORDER BY team ASC", true);
						rows = cache_num_rows();

						format(text, sizeof text, "{1E90FF}№ акк.\tИмя\t\t\tФракция\tВ игре сегодня{FFFFFF}");

						for(new i = 0; i < rows; i++)
						{
							new name[21],
								user_id = cache_get_field_content_int(i, "id"),
								team = cache_get_field_content_int(i, "team"),
								game_for_day = cache_get_field_content_int(i, "game_for_day"),
								game_for_day_text[32];

							cache_get_field_content(i, "name", name);
							format(game_for_day_text, sizeof game_for_day_text, "%d ч %d мин", ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS), ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES));

							format(fmt_text, sizeof fmt_text, "\n%d.\t%s%s%d\t\t%s", user_id, name, strlen(name) > 14 ? "\t" : "\t\t", team, game_for_day_text);
							strcat(text, fmt_text);
							SetPlayerListitemValue(playerid, i+1, user_id);
						}

						cache_delete(result);

						Dialog(playerid, DIALOG_LEADERS, DIALOG_STYLE_LIST, "Список лидеров", text, "Выбрать", "Отмена");
					}
					case 2:
					{
						cmd::afind(playerid, "");
					}
				}

				return 1;
			}

			case DIALOG_ADMIN_FIND:
			{
			    if(!response) return 1;

				if(!(1 <= list_id <= 10))
					return cmd::afind(playerid, "");

				ShowTeamStructureDialog(playerid, list_id);

				return 1;
			}

			case DIALOG_ADMINS:
			{

				if(!response) return cmd::apanel(playerid, " ");

				new user_id = GetPlayerListitemValue(playerid, list_id-1);
				SetPVarInt(playerid, "admin_panel_user_id", user_id);

				Dialog
				(
					playerid, DIALOG_EDIT_ADMIN, DIALOG_STYLE_LIST,
					"Редактировать администратора",
					"\
					1. Статистика администратора {ff3300}( сегодня )\n\
			{ffffff}2. Понизить/повысить адм.ранг\n\
					3. Разжаловать администратора\n\
					{ff3300}4. Заблокировать аккаунт\
					",
					"Выбрать", "Отмена"
				);

				return 1;
			}

			case DIALOG_EDIT_ADMIN:
			{
			    if(!response) return cmd::apanel(playerid, " ");

				new fmt_text[128],
					user_id = GetPVarInt(playerid, "admin_panel_user_id");

				switch(list_id-1)
				{
					case 1:
					{
						format
						(
							fmt_text, sizeof fmt_text,
							"{FFFFFF}\
							Изменение администраторского ранга\n\n\
							ID аккаунта: %d\n\
							Имя: \t%s\
							",
							user_id, GetPlayerNameBySqlID(user_id)
						);

						Dialog(playerid, DIALOG_EDIT_ADMIN_RANG, DIALOG_STYLE_MSGBOX, "Изменение адм.ранга", fmt_text, "Повысить", "Понизить");
					}
					case 2:
					{
						format
						(
							fmt_text, sizeof fmt_text,
							"{FFFFFF}\
							Разжалование администратора\n\n\
							ID аккаунта: %d\n\
							Имя: \t%s\n\n\
							Вы действительно хотите разжаловать администратора?\
							",
							user_id, GetPlayerNameBySqlID(user_id)
						);

						Dialog(playerid, DIALOG_EDIT_ADMIN_RANG, DIALOG_STYLE_MSGBOX, "Разжалование администратора", fmt_text, "Да", "Нет");
					}
					case 3:
					{
						new query[200];
						new c_time = gettime()-(gettime() % 86400);

						mysql_format(mysql, query, sizeof query, "INSERT INTO ban_list (user_id,time,ban_time,ip,description,admin) VALUES (%d,%d,%d,'%e','%e','%e')", user_id, c_time, c_time + (30 * 86400), GetPlayerData(playerid, P_IP), "Бан через админ панель",  GetPlayerNameEx(playerid));
						mysql_query(mysql, query, false);
						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET admin = 0 WHERE id = '%d'",user_id);

						Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Информация", "Аккаунт администратора был заблокирован на 30 дней\nЕсли он находится на сервере просто кикните его.", "Да", "Нет");
					}
				}

				return 1;
			}

			case DIALOG_EDIT_ADMIN_RANG:
			{
				new user_id = GetPVarInt(playerid, "admin_panel_user_id"),
					player_id = GetPlayerIDBySqlID(user_id);

				if(player_id != -1)
				{
					if(response) AddPlayerData(player_id, P_ADMIN, +, 1);
					else AddPlayerData(player_id, P_ADMIN, -, 1);
					UpdatePlayerDatabaseInt(player_id, "admin", GetPlayerData(player_id, P_ADMIN));
					if(response) SendClientMessage(playerid, 0x66CC33FF, "Ваш администраторский ранг был повышен");
					else SendClientMessage(playerid, 0xFF3300FF, "Ваш администраторский ранг был понижен");
				}
				else
				{
					new query[55],
						Cache: result,
						admin_rank;

					mysql_format(mysql, query, sizeof query, "SELECT admin FROM accounts WHERE id=%d", user_id);
					result = mysql_query(mysql, query, true);

					if(!cache_num_rows()) return 0;

					admin_rank = cache_get_row_int(0, 0);

					cache_delete(result);

					if(response) admin_rank++;
					else admin_rank--;

					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET admin=%d WHERE id=%d", user_id, admin_rank);
					result = mysql_query(mysql, query, false);
				}


				return 1;
			}

			case DIALOG_LEADERS:
			{
				if(!response) return cmd::apanel(playerid, " ");

				new user_id = GetPlayerListitemValue(playerid, list_id-1);
				SetPVarInt(playerid, "admin_panel_user_id", user_id);

				Dialog
				(
					playerid, DIALOG_EDIT_LEADER, DIALOG_STYLE_LIST,
					"Редактировать лидера",
					"\
					1. Изменить управляемую фракцию\n\
					2. Разжаловать лидера\n\
					{ff3300}3. Заблокировать аккаунт\
					",
					"Выбрать", "Отмена"
				);

				return 1;
			}
			// -----------------------------------------------------------------
			case DIALOG_TELEPORT_LIST:
			{
				if(response)
				{
					if(0 <= list_id-1 <= sizeof g_teleport_list - 1)
					{
						SetPlayerPosEx
						(
							playerid,
							GetTeleportListData(list_id-1, TL_POS_X),
							GetTeleportListData(list_id-1, TL_POS_Y),
							GetTeleportListData(list_id-1, TL_POS_Z),
							0.0, 0, 0
						);
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_SET_DOUBLING:
			{
				if(response)
				{
					new fmt_text[50],
						doubling = g_doubling[list_id-1];

					static const doubling_name[3][24] = {"доната", "очков опыта", "зарплаты на подработках"};

					new next_value = doubling + 1;

					if(next_value > 3) next_value = 1;

					g_doubling[list_id-1] = next_value;

					format(fmt_text, sizeof fmt_text, "Вы установили X%d %s", g_doubling[list_id-1], doubling_name[list_id-1]);
					SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

					format(fmt_text, sizeof fmt_text, "Установил X%d %s", g_doubling[list_id-1], doubling_name[list_id-1]);
					SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_BOARD_OBJECT:
			{
				if(response)
				{
				switch(list_id)
					{
						case 1..2:
						{
							SetPVarInt(playerid, "board_object", list_id);

							new board_object[2] = {1259, 1260},
								Float: x,
								Float: y,
								Float: z;

							GetPlayerPos(playerid, x, y, z);

							player_board_object[playerid] = CreatePlayerObject
							(
								playerid,
								board_object[list_id-1],
								x + 1.0, y, z,
								0.0, 0.0, 0.0
							);

							EditPlayerObject(playerid, player_board_object[playerid]);

							SetPVarInt(playerid, "board_stage", 1);
						}
						default:
						{
							Dialog
							(
								playerid, DIALOG_BOARD_REMOVE, DIALOG_STYLE_INPUT,
								"Удаление рекламного щита",
								"{FFFFFF}Введите номер рекламного щита,\n"\
								"который Вы хотите удалить:",
								"Далее", "Отмена"
							);
						}
					}
			}
		}
			//------------------------------------------------------------------
			case DIALOG_BOARD_REMOVE:
			{
				if(response)
				{
					new board_id = strval(inputtext);

					if(!(0 <= board_id <= g_board_created - 1))
						return SendClientMessage(playerid, 0xCECECEFF, "Рекламный щит с таким порядковым номером не найден");

					if(!IsValidDynamicObject(GetBoardData(board_id, B_OBJECT)))
						return SendClientMessage(playerid, 0xCECECEFF, "Рекламный щит с таким порядковым номером не найден");

					new fmt_text[38];

					format(fmt_text, sizeof fmt_text, "Вы удалили рекламный щит №%d", board_id);
					SendClientMessage(playerid, 0x66CC33FF, fmt_text);

					RemoveBoard(board_id);
				}
				else return 1; //cmd::board(playerid, "");
			}
			// -----------------------------------------------------------------
			case DIALOG_RADAR_SELECT:
			{
				if(response)
				{
					switch(list_id)
					{
						case 1..4:
						{
							SetPVarInt(playerid, "radar_type", list_id);

							Dialog
							(
								playerid, DIALOG_RADAR_OBJECT, DIALOG_STYLE_LIST,
								"Выберите тип радара",
								"1. Регистратор на штативе\n"\
								"2. Стационарный регистратор скорости",
								"Выбор", "Отмена"
							);
						}
						default:
						{
							Dialog
							(
								playerid, DIALOG_RADAR_REMOVE, DIALOG_STYLE_INPUT,
								"Удаление регистратора скорости",
								"{FFFFFF}Введите номер регистратора,\n"\
								"который Вы хотите удалить:",
								"Далее", "Отмена"
							);
						}
					}
				}
			}
			case DIALOG_RADAR_OBJECT:
			{
				if(response)
				{
					SetPVarInt(playerid, "radar_object", list_id);

					new radar_object[2] = {10164, 18880},
						Float: x,
						Float: y,
						Float: z;

					GetPlayerPos(playerid, x, y, z);

					player_radar_object[playerid] = CreatePlayerObject
					(
						playerid,
						radar_object[list_id-1],
						x + 1.0, y, z,
						0.0, 0.0, 0.0
					);

					EditPlayerObject(playerid, player_radar_object[playerid]);

					SetPVarInt(playerid, "radar_stage", 1);
				}
				else cmd::radar(playerid, "");
			}
			case DIALOG_RADAR_REMOVE:
			{
				if(response)
				{
					new radar_id = strval(inputtext);

					if(!(0 <= radar_id <= g_radars_created - 1))
						return SendClientMessage(playerid, 0xCECECEFF, "Регистратор скорости с таким порядковым номером не найден");

					if(!IsValidDynamicObject(GetRadarData(radar_id, R_OBJECT)))
						return SendClientMessage(playerid, 0xCECECEFF, "Регистратор скорости с таким порядковым номером не найден");

					new fmt_text[38];

					format(fmt_text, sizeof fmt_text, "Вы удалили регистратор скорости №%d", radar_id);
					SendClientMessage(playerid, 0x66CC33FF, fmt_text);

					RemoveRadar(radar_id);
				}
				else cmd::radar(playerid, "");
			}
			// -----------------------------------------
			case DIALOG_GANG_REPOSITORY:
			{
				if(response)
				{
					new item_names[4][10] = {"наркотики", "патроны", "металл", "деньги"},
						description[32],
						fmt_text[70],
						status;

					if(0 <= list_id-1 <= 3)
						status = 1;

					SetPVarInt(playerid, "gr_state", status);
					SetPVarInt(playerid, "gr_item", status ? list_id-1 : list_id-5);

					format(description, sizeof description, "%s %s", status ? "Положить" : "Взять", status ? item_names[list_id-1] : item_names[list_id-5]);
					format(fmt_text, sizeof fmt_text, "{FFFFFF}Введите количество, которое Вы хотите {ffff00}%s:", status ? "положить" : "взять");

					Dialog(playerid, DIALOG_GANG_REPOSITORY_USE, DIALOG_STYLE_INPUT, description, fmt_text, "Далее", "Отмена");
				}
			}
			case DIALOG_GANG_REPOSITORY_USE:
			{
				if(response)
				{
					new status = GetPVarInt(playerid, "gr_state"),
						item = GetPVarInt(playerid, "gr_item"),
						item_count = strval(inputtext),
						repository_id = (GetPlayerTeamEx(playerid) - TEAM_GANG_GROVE);

					if(item_count < 1) return SendClientMessage(playerid, 0xCECECEFF, "Неверное количество");

					new item_names[4][12] = {"наркотиков", "патронов", "металла", "денег"},
						item_type[4][4] = {"г", "шт.", "кг", "$"};

					new fmt_text[90];

					switch(status)
					{
						case 0:
						{
							if(!GetGangRepositoryData(repository_id, GR_LOCK))
								return SendClientMessage(playerid, 0xCECECEFF, "Склад закрыт. Вы не можете ничего брать");

							switch(item)
							{
								case 0:
								{
									if(GetGangRepositoryData(repository_id, GR_DRUGS) < item_count)
										return SendClientMessage(playerid, 0xCECECEFF, "На складе нет такого количества наркотиков");

									if((GetPlayerData(playerid, P_DRUGS) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
										return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько наркотиков");

									AddPlayerData(playerid, P_DRUGS, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

									SetGangRepositoryData(repository_id, GR_DRUGS, GetGangRepositoryData(repository_id, GR_DRUGS) - item_count);
									UpdateGangRepository(repository_id);
								}
								case 1:
								{
									if(GetGangRepositoryData(repository_id, GR_AMMO) < item_count)
										return SendClientMessage(playerid, 0xCECECEFF, "На складе нет такого количества патронов");

									if((GetPlayerData(playerid, P_AMMO) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_AMMO))
										return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько патронов");

									AddPlayerData(playerid, P_AMMO, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

									SetGangRepositoryData(repository_id, GR_AMMO, GetGangRepositoryData(repository_id, GR_AMMO) - item_count);
									UpdateGangRepository(repository_id);
								}
								case 2:
								{
									if(GetGangRepositoryData(repository_id, GR_METALL) < item_count)
										return SendClientMessage(playerid, 0xCECECEFF, "На складе нет такого количества металла");

									if((GetPlayerData(playerid, P_METALL) + item_count) > GetPlayerMaxStorage(playerid, STORAGE_METALL))
										return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько металла");

									AddPlayerData(playerid, P_METALL, +, item_count);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

									SetGangRepositoryData(repository_id, GR_METALL, GetGangRepositoryData(repository_id, GR_METALL) - item_count);
									UpdateGangRepository(repository_id);
								}
								case 3:
								{
									if(GetGangRepositoryData(repository_id, GR_MONEY) < item_count)
										return SendClientMessage(playerid, 0xCECECEFF, "На складе нет такого количества денег");

									GivePlayerMoneyEx(playerid, item_count, "Взял со склада банды", true, true);

									SetGangRepositoryData(repository_id, GR_MONEY, GetGangRepositoryData(repository_id, GR_MONEY) - item_count);
									UpdateGangRepository(repository_id);
								}
							}

							format(fmt_text, sizeof fmt_text, "%s [id %d] взял(а) со склада банды {1E90FF}%d %s {66CC33}%s",
							GetPlayerNameEx(playerid), playerid, item_count, item_type[item], item_names[item]);

							SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x66CC33FF);
						}
						case 1:
						{
							switch(item)
							{
								case 0:
								{
									if(GetPlayerData(playerid, P_DRUGS) < item_count)
										return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества наркотиков");

									AddPlayerData(playerid, P_DRUGS, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

									SetGangRepositoryData(repository_id, GR_DRUGS, GetGangRepositoryData(repository_id, GR_DRUGS) + item_count);
									UpdateGangRepository(repository_id);
								}
								case 1:
								{
									if(GetPlayerData(playerid, P_AMMO) < item_count)
										return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества патронов");

									AddPlayerData(playerid, P_AMMO, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

									SetGangRepositoryData(repository_id, GR_AMMO, GetGangRepositoryData(repository_id, GR_AMMO) + item_count);
									UpdateGangRepository(repository_id);
								}
								case 2:
								{
									if(GetPlayerData(playerid, P_METALL) < item_count)
										return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества металла");

									AddPlayerData(playerid, P_METALL, -, item_count);
									UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

									SetGangRepositoryData(repository_id, GR_METALL, GetGangRepositoryData(repository_id, GR_METALL) + item_count);
									UpdateGangRepository(repository_id);
								}
								case 3:
								{
									if(GetPlayerMoneyEx(playerid) < item_count)
										return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества денег");

									GivePlayerMoneyEx(playerid, -item_count, "Положил на склад банды", true, true);

									SetGangRepositoryData(repository_id, GR_MONEY, GetGangRepositoryData(repository_id, GR_MONEY) + item_count);
									UpdateGangRepository(repository_id);
								}
							}

							format(fmt_text, sizeof fmt_text, "%s [id %d] положил(а) на склад банды {1E90FF}%d %s {66CC33}%s",
							GetPlayerNameEx(playerid), playerid, item_count, item_type[item], item_names[item]);

							SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x66CC33FF);
						}
					}
				}
			}
			// -----------------------------------------
			case DIALOG_ADVERT_EDIT:
			{
				new ad_id = GetPVarInt(playerid, "advert_id"),
					fmt_text[144];

				if(GetAdvertData(ad_id, A_CREATOR) == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0xCECECEFF, "Автор объявления отключился");

				if(response)
				{
					if(strlen(inputtext))
						format(g_advert[ad_id][A_TEXT], 128, inputtext);

					format(fmt_text, sizeof fmt_text, "%s | Отправил: %s[%d] (тел. %d)", GetAdvertData(ad_id, A_TEXT),
					GetPlayerNameEx(GetAdvertData(ad_id, A_CREATOR)), GetAdvertData(ad_id, A_CREATOR),
					GetPlayerPhone(GetAdvertData(ad_id, A_CREATOR)));

					SendClientMessageToAll(0x32a44bFF, fmt_text);

					format(fmt_text, sizeof fmt_text, " Объявление %s сотрудник СМИ г.Los-Santos %s", strlen(inputtext) ? "отредактировал" : "проверил",
					GetPlayerNameEx(playerid));
					SendClientMessageToAll(0x009900FF, fmt_text);
				}
				else
				{
					if(!strlen(inputtext))
						return SendClientMessage(playerid, 0xCECECEFF, "Введите причину отклонения объявления");

					new creator_id = GetAdvertData(ad_id, A_CREATOR);

					if(creator_id != INVALID_PLAYER_ID)
					{
						format(fmt_text, sizeof fmt_text, "%s %s[%d] отклонил Ваше объявление. Причина: %s",
						GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, inputtext);

						SendClientMessage(creator_id, 0xFF5533FF, fmt_text);
					}

					format(fmt_text, sizeof fmt_text, "[СМИ г.Los-Santos] %s %s[%d] отклонил объявление №%d. Причина: %s",
					GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, ad_id + 1, inputtext);

					SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x99CC99FF, playerid);

					format(fmt_text, sizeof fmt_text, "Вы отклонили объявление №%d. Причина: %s", ad_id + 1, inputtext);
					SendClientMessage(playerid, 0x66CC33FF, fmt_text);
				}

				DeleteAdvert(ad_id);
			}
			// -----------------------------------------
			case DIALOG_ARMORY:
			{
				if(response)
				{
					switch(list_id)
					{
						case 1:
						{
							if(GetPVarInt(playerid, "took_nitestick") > gettime())
								return SendClientMessage(playerid, 0xCECECEFF, "Вы уже недавно брали дубинку");

							GivePlayerWeapon(playerid, 3, 1);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы взяли дубинку");

							SetPVarInt(playerid, "took_nitestick", gettime() + 300);
						}
						case 2:
						{
							if(GetPVarInt(playerid, "took_mask") > gettime())
								return SendClientMessage(playerid, 0xCECECEFF, "Вы уже недавно брали маску");

							if(GetPlayerData(playerid, P_MASK) == 1)
								return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть маска");

							SetPlayerData(playerid, P_MASK, 1);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы взяли маску использовать /mask");

							SetPVarInt(playerid, "took_mask", gettime() + 300);
						}
						case 3:
						{
							new Float: armour;

							GetPlayerArmour(playerid, armour);

							if(armour > 20.0)
								return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть бронежилет");

							SetPlayerArmour(playerid, 100.0);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы надели бронежилет");
						}
						case 4:
						{
							if(GetPVarInt(playerid, "took_sdpistol") > gettime())
								return SendClientMessage(playerid, 0xCECECEFF, "Вы уже недавно брали пистолет с глушителем");

							GivePlayerWeaponEx(playerid, 24, 60);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы взяли пистолет с глушителем");

							SetPVarInt(playerid, "took_sdpistol", gettime() + 300);
						}
						case 5:
						{
							if(GetPVarInt(playerid, "took_deagle") > gettime())
								return SendClientMessage(playerid, 0xCECECEFF, "Вы уже недавно брали Desert Eagle");

							GivePlayerWeaponEx(playerid, 24, 120);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы взяли Desert Eagle");

							SetPVarInt(playerid, "took_deagle", gettime() + 300);
						}
						case 6:
						{
							if(GetPVarInt(playerid, "took_mp5") > gettime())
								return SendClientMessage(playerid, 0xCECECEFF, "Вы уже недавно брали MP5");

							GivePlayerWeapon(playerid, 29, 180);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы взяли MP5");

							SetPVarInt(playerid, "took_mp5", gettime() + 300);
						}
						case 7:
						{
							if(GetPVarInt(playerid, "took_shotgun") > gettime())
								return SendClientMessage(playerid, 0xCECECEFF, "Вы уже недавно брали дробовик");

							GivePlayerWeapon(playerid, 25, 30);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы взяли дробовик");

							SetPVarInt(playerid, "took_shotgun", gettime() + 300);
						}
						case 8:
						{
							if(GetPVarInt(playerid, "took_ak47") > gettime())
								return SendClientMessage(playerid, 0xCECECEFF, "Вы уже недавно брали АК47");

							GivePlayerWeapon(playerid, 30, 230);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы взяли АК47");

							SetPVarInt(playerid, "took_ak47", gettime() + 300);
						}
						case 9:
						{
							if(GetPlayerJob(playerid) < 4)
								return SendClientMessage(playerid, 0xCECECEFF, "Винтовку можно брать только с 4 ранга");

							if(GetPVarInt(playerid, "took_rifle") > gettime())
								return SendClientMessage(playerid, 0xCECECEFF, "Вы уже недавно брали винтовку");

							GivePlayerWeapon(playerid, 34, 40);

							SendClientMessage(playerid, 0x1E90FFFF, "Вы взяли винтовку");

							SetPVarInt(playerid, "took_rifle", gettime() + 300);
						}
					}
				}
			}
			case DIALOG_PROMO_CREATE:
			{
				if(response)
				{
					new code[32], type, amount, usings, paydays;

					if(sscanf(inputtext, "P<,>s[32]dddd", code, type, amount, usings, paydays))
					{
						SendClientMessage(playerid, 0xCECECEFF, "Некорректный ввод");
						cmd::createpromo(playerid, "");

						return 1;
					}
					else
					{
						if(!(0 <= type <= 2))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Тип должен быть от 0 до 2 (деньги, донат, exp)");
							cmd::createpromo(playerid, "");

							return 1;
						}

						if(!(1 <= amount <= 1_000_000))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Количество должно быть от 1 до 1.000.000");
							cmd::createpromo(playerid, "");

							return 1;
						}

						if(!(1 <= usings <= 1_000))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Количество использований должно быть от 1 до 1000");
							cmd::createpromo(playerid, "");

							return 1;
						}

						if(!(0 <= paydays <= 20))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Количество PayDay должно быть от 0 до 20");
							cmd::createpromo(playerid, "");

							return 1;
						}

						new query[128],
							Cache: result,
							rows;

						mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode WHERE code='%s'", code);
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Такой промокод уже есть в базе данных");
							cmd::createpromo(playerid, "");

							return 1;
						}

						mysql_format(mysql, query, sizeof query, "INSERT INTO promocode (code, type, amount, usings, paydays) VALUES ('%s', %d, %d, %d, %d)",
						code, type, amount, usings, paydays);

						mysql_query(mysql, query);

						format(query, sizeof query, "Промокод \"%s\" создан (Т: %s, К: %d, И: %d, PD: %d)", code, promo_info[type][P_NAME], amount, usings, paydays);
						SendClientMessage(playerid, 0x66CC33FF, query);
					}
				}
			}
			case DIALOG_PROMO_ACTIVATE:
			{
				if(response)
				{
					if(!strlen(inputtext))
					{
						cmd::promo(playerid, "");

						return 1;
					}

					new query[256],
						Cache: result,
						rows,
						//type,
						amount,
						paydays,
						usings;

					mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode_activations WHERE uid='%d' AND code='%s'", GetPlayerAccountID(playerid), inputtext);
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();

					if(rows)
					{
						// type = cache_get_field_content_int(0, "type");
						paydays = cache_get_field_content_int(0, "paydays");

						format(query, sizeof query, "Вы уже активировали этот промокод");

						if(paydays)
							format(query, sizeof query, "%s. Вы получите свой приз через %d PayDay", query, paydays);





						SendClientMessage(playerid, 0x1E90FFFF, query);

						cache_delete(result);

						return 1;
					}

					cache_delete(result);

					mysql_format(mysql, query, sizeof query, "SELECT * FROM promocode WHERE code='%s' AND usings > 0", inputtext);
					result = mysql_query(mysql, query, true);

					rows = cache_num_rows();

					if(rows)
					{
						// type = cache_get_field_content_int(0, "type");
						amount = cache_get_field_content_int(0, "amount");
						usings = cache_get_field_content_int(0, "usings");
						paydays = cache_get_field_content_int(0, "paydays");
					}

					cache_delete(result);

					if(!rows)
					{
						SendClientMessage(playerid, 0xCECECEFF, "Введенный промокод не существует");
						cmd::promo(playerid, "");

						return 1;
					}

					if(usings > 0)
					{
						format(query, sizeof query, "Вы активировали промокод \"%s\"", inputtext);

						if(paydays > 0)
						{
							format(query, sizeof query, "%s. Вы получите свой приз через %d PayDay", query, paydays);
						}
						else
						{
							GivePlayerMoneyEx(playerid, amount, "активация промокода", true, true);
						}

						SendClientMessage(playerid, 0x66CC33FF, query);

						mysql_format(mysql, query, sizeof query, "UPDATE promocode SET usings='%d' WHERE code='%s'", usings - 1, inputtext);
						mysql_query(mysql, query, false);

						mysql_format(mysql, query, sizeof query, "INSERT INTO promocode_activations (uid, code, paydays) VALUES (%d, '%s', %d)",
						GetPlayerAccountID(playerid), inputtext, paydays);
						mysql_query(mysql, query, false);
					}
					else
					{
						SendClientMessage(playerid, 0xCECECEFF, "Лимит использования промокода исчерпан");
						cmd::promo(playerid, "");
					}
				}
			}
			case DIALOG_OFFER_TOPLAYER:
			{
			    if(!response) return cmd::no(playerid, "");
			    else if(response) return cmd::yes(playerid, "");
			}
			case DIALOG_NAME_INIT:
			{
			    if(!response) return 1;

			    format(g_player[playerid][P_NAME], 21, "%s", inputtext);
				//SetPlayerName(playerid, GetPlayerNameEx(playerid));

				SetPVarInt(playerid, "change_name", 1);

			    SetTimerEx("CheckPlayerAccount", 100, false, "ii", playerid, mysql_race[playerid]);
			}
			case DIALOG_SELECT_SKIN:
			{
			    if(!response) return Dialog(playerid, DIALOG_BUY_SKIN, DIALOG_STYLE_MSGBOX, "Выберите действие", "{FFFFFF}Что Вы хотите сделать: отменить покупки или купить?", "Купить", "Отменить");

				new buffer = 0;

    			buffer = GetPlayerSelectSkin(playerid);
				if(!(0 <= ++buffer <= sizeof g_business_clothing_skins[] - 1))
				{
					buffer = 0;
				}
				SetPlayerSelectClothingSkin(playerid, buffer);

				new fmt_text[75];

				format(fmt_text, sizeof fmt_text, "{FFFFFF}Выберите себе подходящую одежду\n\nСтоимость: {66CC33}$%d", g_business_clothing_skins[GetPlayerSex(playerid)][buffer][1]);

				Dialog(playerid, DIALOG_SELECT_SKIN, DIALOG_STYLE_MSGBOX, "Выбор одежды", fmt_text, "Далее", "Действие");
			}
			case DIALOG_BUY_SKIN:
			{
			    if(!response) return ExitPlayerClothingShopPanel(playerid);

			    new buffer = 0;

			    buffer = GetPlayerSelectSkin(playerid);
				if(buffer != -1)
				{
					Dialog
					(
						playerid, DIALOG_BIZ_CLOTHING_BUY, DIALOG_STYLE_MSGBOX,
						"Магазин одежды",
						"{FFFFFF}Вы действительно хотите приобрести этот набор одежды?",
						"Да", "Нет"
					);
				}
			}
			case DIALOG_CREATE_FAMILY:
			{
			    if(!response) return 1;

			    if(GetPlayerData(playerid, P_FAMILY) != 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже состоите в семье");
			    if(GetPlayerMoneyEx(playerid) >= 2500000)
			    {
			        if(GetPlayerData(playerid, P_LEVEL) >= 10)
			        {
			            new query[256],
							Cache: result,
							rows;

						mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE name='%s'", inputtext);
						result = mysql_query(mysql, query, true);

						rows = cache_num_rows();

						cache_delete(result);

						if(rows)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Данное имя уже используется");
				    		Dialog
							(
								playerid, DIALOG_CREATE_FAMILY, DIALOG_STYLE_INPUT,
								"Создание семьи",
								"{FFFFFF}Решил создать семью?\nВот что тебе требуется:\n{32a44b}- $2.500.000\n- 10 уровень\n\
								{FFFFFF}Введите название семьи, и нажмите 'Создать'",
								"Создать", "Отмена"
							);

							return 1;
						}



						new time = gettime();

						mysql_format
						(
							mysql, query, sizeof query,
							"INSERT INTO family "\
								"(name,u_id,time) "\
								"VALUES "\
								"('%e',%d,%d)",
							inputtext,
							GetPlayerAccountID(playerid),
							time
						);
						result = mysql_query(mysql, query);

						new fam_id = cache_insert_id() - 1;

						SetPlayerData(playerid, P_FAMILY, fam_id);
                        SetPlayerData(playerid, P_FAMILY_RANK, 10);

						SetFamilyData(fam_id, F_SQL_ID, fam_id);

						format(g_family[fam_id][F_NAME], 64, "%s", inputtext);

						SetFamilyData(fam_id, F_TIME, time);
						SetFamilyData(fam_id, F_HOUSE_ID, -1);
						SetFamilyData(fam_id, F_USER_ID, GetPlayerAccountID(playerid));
						format(g_family[fam_id][F_RANK1], 32, "Пусто");
						format(g_family[fam_id][F_RANK2], 32, "Пусто");
						format(g_family[fam_id][F_RANK3], 32, "Пусто");
						format(g_family[fam_id][F_RANK4], 32, "Пусто");
						format(g_family[fam_id][F_RANK5], 32, "Пусто");
						format(g_family[fam_id][F_RANK6], 32, "Пусто");
						format(g_family[fam_id][F_RANK7], 32, "Пусто");
						format(g_family[fam_id][F_RANK8], 32, "Пусто");
						format(g_family[fam_id][F_RANK9], 32, "Пусто");
						format(g_family[fam_id][F_RANK10], 32, "Пусто");

						cache_delete(result);

						GivePlayerMoneyEx(playerid, -2500000, "создал семью", true, false);

						TransferCoffersMoney(2500000, "Создание семьи", "", false);

						format(query, sizeof query, "Семья '%s' создана. {ffff00}Панель управления семьей /fmenu", inputtext);
						SendClientMessage(playerid, 0x1E90FFFF, query);

						format(query, sizeof query, "UPDATE accounts SET family=%d, family_rank=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_FAMILY), GetPlayerData(playerid, P_FAMILY_RANK), GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
			        }
					else SendClientMessage(playerid, 0xCECECEFF, "Для создания семьи необходимо проживать в штате не менее 10-ти лет");
			    }
			    else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег");
			}
			case DIALOG_FAMILY_MENU:
			{
			    if(!response) return 1;

			    switch(list_id)
			    {
					case 1: ShowFamilyInfo(playerid);
					case 2:
					{
						SendClientMessage(playerid, 0x6699CCFF, "Семья: /finvite /funinvite /frang /bizwar /fleave /fmenu /fbiz");
					}
					case 3:
					{
						if(GetPlayerData(playerid, P_FAMILY_RANK) != 10) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа");

						ShowSettingFamily(playerid);
					}
					case 4:
					{
					    if(GetPlayerData(playerid, P_FAMILY_RANK) < 9) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет доступа");

						new query[256];
						format(query, sizeof query, "SELECT name, score, family_rank FROM accounts WHERE family = %d ORDER BY family_rank DESC", GetPlayerData(playerid, P_FAMILY));
						mysql_tquery(mysql, query, "ShowFamilyAllPlayers", "i", playerid);
					}
			    }
			}
			case DIALOG_FAMILY_SETTINGS:
			{
			    if(!response) return cmd::fmenu(playerid, "");

			    switch(list_id)
				{
				    case 1: ShowChangeRangDialog(playerid);
				    case 2: ShowChangeNameDialog(playerid);
					case 3: SellFamilyHouse(playerid);
				}
			}
			case DIALOG_FAMILY_RANG:
			{
				if(!response) return cmd::fmenu(playerid, "");

				new fam_id = GetPlayerData(playerid, P_FAMILY),
				    desc[32] = "";

			    switch(list_id)
				{
				    case 1: strcat(desc, g_family[fam_id][F_RANK1]);
				    case 2: strcat(desc, g_family[fam_id][F_RANK2]);
				    case 3: strcat(desc, g_family[fam_id][F_RANK3]);
				    case 4: strcat(desc, g_family[fam_id][F_RANK4]);
				    case 5: strcat(desc, g_family[fam_id][F_RANK5]);
				    case 6: strcat(desc, g_family[fam_id][F_RANK6]);
				    case 7: strcat(desc, g_family[fam_id][F_RANK7]);
				    case 8: strcat(desc, g_family[fam_id][F_RANK8]);
				    case 9: strcat(desc, g_family[fam_id][F_RANK9]);
				    case 10: strcat(desc, g_family[fam_id][F_RANK10]);
				}

				SetPVarInt(playerid, "userang", list_id);
				Dialog
				(
					playerid, DIALOG_FAMILY_RCHANGE, DIALOG_STYLE_INPUT,
					desc,
					"{FFFFFF}Введите название, которое Вы хотите {ffff00}установить:",
					"Далее", "Отмена"
				);
			}
			case DIALOG_FAMILY_RCHANGE:
			{
			    if(!response) return cmd::fmenu(playerid, "");

			    new fmt_text[556],
					rang_id = GetPVarInt(playerid, "userang"),
					fam_id = GetPlayerData(playerid, P_FAMILY);

			    switch(rang_id)
				{
				    case 1:
				    {
						format(g_family[fam_id][F_RANK1], 32, inputtext);
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank1='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
						mysql_query(mysql, fmt_text, false);
				    }
				    case 2:
				    {
						format(g_family[fam_id][F_RANK2], 32, inputtext);
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank2='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
						mysql_query(mysql, fmt_text, false);
				    }
				    case 3:
				    {
						format(g_family[fam_id][F_RANK3], 32, inputtext);
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank3='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
						mysql_query(mysql, fmt_text, false);
				    }
				    case 4:
				    {
						format(g_family[fam_id][F_RANK4], 32, inputtext);
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank4='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
						mysql_query(mysql, fmt_text, false);
				    }
				    case 5:
				    {
						format(g_family[fam_id][F_RANK5], 32, inputtext);
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank5='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
						mysql_query(mysql, fmt_text, false);
				    }
				    case 6:
				    {
						format(g_family[fam_id][F_RANK6], 32, inputtext);
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank6='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
						mysql_query(mysql, fmt_text, false);
				    }
				    case 7:
				    {
						format(g_family[fam_id][F_RANK7], 32, inputtext);
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank7='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
						mysql_query(mysql, fmt_text, false);
				    }
				    case 8:
				    {
						format(g_family[fam_id][F_RANK8], 32, inputtext);
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank8='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
						mysql_query(mysql, fmt_text, false);
				    }
				    case 9:
				    {
						format(g_family[fam_id][F_RANK9], 32, inputtext);
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank9='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
						mysql_query(mysql, fmt_text, false);
				    }
				    case 10:
				    {
						format(g_family[fam_id][F_RANK10], 32, inputtext);
						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET rank10='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
						mysql_query(mysql, fmt_text, false);
				    }
				}

				format(fmt_text, sizeof fmt_text, "Вы успешно изменили название ранга {ffff00}№%d {1E90FF}на {ffff00}\"%s\"", rang_id, inputtext);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_text);
			}
			case DIALOG_FAMILY_COLOR:
			{
			    if(!response) return cmd::fmenu(playerid, "");

			    if(GetPlayerData(playerid, P_DONATE_CURRENT) < 50) return SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно рублей, требуется 50");

			    if(0 > list_id > 16) return SendClientMessage(playerid, 0xCECECEFF, "ID цвета от 0 до 16");

			    new fam_id = GetPlayerData(playerid, P_FAMILY),
					fmt_text[556];

			    SetFamilyData(fam_id, F_COLOR, list_id);

			    GivePlayerDonate(playerid, -50, "Сменил цвет семьи", true);

                mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET color='%d' WHERE id='%d' LIMIT 1", list_id, fam_id + 1);
				mysql_query(mysql, fmt_text, false);

				format(fmt_text, sizeof fmt_text, "Вы успешно изменили цвет семьи {ffff00}%s {1E90FF}на {%06x}%s", GetFamilyData(fam_id, F_NAME), family_colors[list_id] >>> 8, family_colors_name[list_id]);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_text);
			}
			case DIALOG_FAMILY_NCHANGE:
			{
			    if(!response) return cmd::fmenu(playerid, "");

			    new fmt_text[556],
					fam_id = GetPlayerData(playerid, P_FAMILY);


				new query[128],
					Cache: result,
					rows;

				mysql_format(mysql, query, sizeof query, "SELECT * FROM family WHERE name='%s'", inputtext);
				result = mysql_query(mysql, query, true);

				rows = cache_num_rows();

				cache_delete(result);

				if(rows)
				{
					SendClientMessage(playerid, 0xCECECEFF, "Данное имя уже используется");
					cmd::fmenu(playerid, "");

					return 1;
				}

			 	format(fmt_text, sizeof fmt_text, "Вы успешно изменили название семьи с {ffff00}\"%s\" {1E90FF}на {ffff00}\"%s\"", GetFamilyData(fam_id, F_NAME), inputtext);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

				GivePlayerDonate(playerid, -500, "Сменил название семьи", true);


				format(g_family[fam_id][F_NAME], 64, inputtext);
				mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET name='%s' WHERE id='%d' LIMIT 1", inputtext, fam_id + 1);
				mysql_query(mysql, fmt_text, false);
			}
						case DIALOG_PLAYER_BACKPACK: // GO
			{
				if(response)
				{
					new desc[33] = "",
				    	type = GetPlayerListitemValue(playerid, list_id-1);

				    strcat(desc, g_backpack_info[type][BP_ITEAM_NAME]);

				    Dialog
					(
						playerid, DIALOG_PLAYER_BACKPACK_USED, DIALOG_STYLE_LIST,
						desc,
						"1. Использовать\n\
						2. Передать игроку\n\
						3. Выбросить {ffff00} (Не подлежит возврату!)",
						"Выбрать", "Назад"
					);

					SetPVarInt(playerid, "bp_slot", type);
				}
			}
			case DIALOG_PLAYER_BACKPACK_USED: // GO
			{
				if(response)
				{
				    new type = GetPVarInt(playerid, "bp_slot"),
				    	desc[33] = "",
						fmt_chat[144];

					switch(list_id)
					{
					    case 1: // Использовать
					    {
							if(g_backpack_info[type][BP_ITEAM_USED] == false)
							{
							    format(fmt_chat, sizeof fmt_chat, "Предмет {FFFFFF}\"%s\" {FF6600}невозможно использовать", g_backpack_info[type][BP_ITEAM_NAME]);
								SendClientMessage(playerid, 0xFF6600FF, fmt_chat);
							}
							else
							{
								switch(type)
								{
								    case TYPE_DRUGS: return cmd::drugs(playerid, "1");
								    case TYPE_MED: return cmd::healme(playerid, "");
								    case TYPE_MASK: return cmd::mask(playerid, "");
								}
							}
					    }
					    case 2: // Передать игроку
					    {
				    		strcat(desc, g_backpack_info[type][BP_ITEAM_NAME]);

					        Dialog
							(
								playerid, DIALOG_PLAYER_BACKPACK_DAR, DIALOG_STYLE_INPUT,
								desc,
								"{FFFFFF}Для того чтобы передать предмет введите\n"\
								"следующие параметры в окно ниже:\n\n"\
								"{FFCC00}Параметры: ID игрока, количество",
								"Далее", "Отмена"
							);
					    }
					    case 3: // Выбросить
						{
							switch(type)
							{
							    case TYPE_MONEY:
							    {
									if(g_admin_pay_log)
									{
									    format(fmt_chat, sizeof fmt_chat, "[A] %s[%d] выбросил деньги в количестве $%d", GetPlayerNameEx(playerid), playerid, GetPlayerMoneyEx(playerid));
										SendMessageToAdmins(fmt_chat, 0x66CC33FF);
									}
									format(fmt_chat, sizeof fmt_chat, "Вы выбросили %s в количестве %d", g_backpack_info[type][BP_ITEAM_NAME], GetPlayerMoneyEx(playerid));
									SendClientMessage(playerid, 0x1E90FFFF, fmt_chat);

									GivePlayerMoneyEx(playerid, -GetPlayerMoneyEx(playerid), "Выбросил деньги", true, true);
							    }
								default:
								{
									format(fmt_chat, sizeof fmt_chat, "Вы выбросили %s в количестве %d", g_backpack_info[type][BP_ITEAM_NAME], GetPlayerData(playerid, g_backpack_info[type][P_DATA]));
									SendClientMessage(playerid, 0x1E90FFFF, fmt_chat);

									SetPlayerData(playerid, g_backpack_info[type][P_DATA], 0);

									format(fmt_chat, sizeof fmt_chat, "UPDATE accounts SET \"%s\"=%d WHERE id=%d LIMIT 1", g_backpack_info[type][BP_SQL_NAME], GetPlayerData(playerid, g_backpack_info[type][P_DATA]), GetPlayerAccountID(playerid));
									mysql_query(mysql, fmt_chat, false);
								}
							}
						}
					}
				}
			}
			case DIALOG_PLAYER_BACKPACK_DAR: // GO
			{
			    if(response)
				{
					new id, amount,
						type = GetPVarInt(playerid, "bp_slot"),
				    	desc[33] = "",
						fmt_chat[144];

					if(sscanf(inputtext, "P<,>dd", id, amount))
					{
					    strcat(desc, g_backpack_info[type][BP_ITEAM_NAME]);

					    Dialog
						(
							playerid, DIALOG_PLAYER_BACKPACK_DAR, DIALOG_STYLE_INPUT,
							desc,
							"{FFFFFF}Для того чтобы передать предмет введите\n"\
							"следующие параметры в окно ниже:\n\n"\
							"{FFCC00}Параметры: ID игрока, количество",
							"Далее", "Отмена"
						);

						SendClientMessage(playerid, 0x999999FF, "Некорректный ввод");

						return 1;
					}

					if(!IsPlayerConnected(id) || !IsPlayerLogged(id))
						return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");

					if(!IsPlayerInRangeOfPlayer(playerid, id, 6.0))
						return SendClientMessage(playerid, 0x999999FF, "Игрок находится далеко от Вас");

					if(playerid == id)
					    return SendClientMessage(playerid, 0x999999FF, "Нельзя передать самому себе");

					switch(type)
					{
					    case TYPE_MONEY:
					    {
					        if(GetPlayerMoneyEx(playerid) >= amount && (amount > 0))
							{
								format(fmt_chat, sizeof fmt_chat, "+%d", amount);
								SetPlayerChatBubble(id, fmt_chat, 0x00CC00FF, 10.0, 5000);

								format(fmt_chat, sizeof fmt_chat, "-%d", amount);
								SetPlayerChatBubble(playerid, fmt_chat, 0xFF6600FF, 10.0, 5000);

								format(fmt_chat, sizeof fmt_chat, "Передача денег от %s (id: %d)", GetPlayerNameEx(playerid), GetPlayerAccountID(playerid));
								GivePlayerMoneyEx(id, amount, fmt_chat, true, true);

								format(fmt_chat, sizeof fmt_chat, "Передача денег игроку %s (id: %d)", GetPlayerNameEx(id), GetPlayerAccountID(id));
								GivePlayerMoneyEx(playerid, -amount, fmt_chat, true, true);

								format(fmt_chat, sizeof fmt_chat, "%s передал Вам деньги $%d", GetPlayerNameEx(playerid), amount);
								SendClientMessage(id, 0x1E90FFFF, fmt_chat);

								format(fmt_chat, sizeof fmt_chat, "Вы передали игроку %s деньги $%d", GetPlayerNameEx(id), amount);
								SendClientMessage(playerid, 0x1E90FFFF, fmt_chat);

								if(g_admin_pay_log)
								{
								    format(fmt_chat, sizeof fmt_chat, "[A] %s[%d] передал %s[%d] деньги $%d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(id), id, amount);
									SendMessageToAdmins(fmt_chat, 0x66CC33FF);
								}
							}
					    }
						default:
						{
						    if(GetPlayerData(playerid, g_backpack_info[type][P_DATA]) >= amount && (amount > 0))
						    {
								format(fmt_chat, sizeof fmt_chat, "%s передал Вам %s в количестве %d", GetPlayerNameEx(playerid), g_backpack_info[type][BP_ITEAM_NAME], amount);
								SendClientMessage(id, 0x1E90FFFF, fmt_chat);

								format(fmt_chat, sizeof fmt_chat, "Вы передали игроку %s %s в количестве %d", GetPlayerNameEx(id), g_backpack_info[type][BP_ITEAM_NAME], amount);
								SendClientMessage(playerid, 0x1E90FFFF, fmt_chat);

								AddPlayerData(playerid, g_backpack_info[type][P_DATA], -, amount);

								AddPlayerData(id, g_backpack_info[type][P_DATA], +, amount);

								format(fmt_chat, sizeof fmt_chat, "UPDATE accounts SET %s=%d WHERE id=%d LIMIT 1", g_backpack_info[type][BP_SQL_NAME], GetPlayerData(playerid, g_backpack_info[type][P_DATA]), GetPlayerAccountID(playerid));
								mysql_query(mysql, fmt_chat, false);

								format(fmt_chat, sizeof fmt_chat, "UPDATE accounts SET %s=%d WHERE id=%d LIMIT 1", g_backpack_info[type][BP_SQL_NAME], GetPlayerData(id, g_backpack_info[type][P_DATA]), GetPlayerAccountID(id));
								mysql_query(mysql, fmt_chat, false);
							}
						}
					}
				}
			}
			case DIALOG_TRUCK_MENU:
			{
			    if(!response) return 1;

			    ShowPlayerDialogJobTruck(playerid, list_id);
			}
			case DIALOG_TRUCK_PASS:
			{
			    if(!response) return 1;

			    ShowPlayerDialogJobTruck(playerid, 0);
			}
			case DIALOG_TRUCK_WAGE:
			{
			    if(!response) return 1;

				new fmt_chat[138];

				GivePlayerMoneyEx(playerid, GetPlayerData(playerid, P_TRUCK_WAGE), "Зарплата дальнобойщика", true, true);
				SetPlayerData(playerid, P_TRUCK_WAGE, 0);

				format(fmt_chat, sizeof fmt_chat, "UPDATE accounts SET truck_wage=0 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
				mysql_query(mysql, fmt_chat, false);
			}
			case DIALOG_TRUCK_RENT:
			{
			    if(!response) return 1;

			    new truck_lvl = (GetPlayerData(playerid, P_TRUCK_ROAD) / 100) + 1,
					id_ship = random(sizeof g_trailer_pos);

			    switch(list_id)
			    {
			        case 1:
			        {
			            if(GetPlayerMoneyEx(playerid) >= 5000)
			            {
		                    new truck_id = CreateVehicle(609,g_trailer_pos[id_ship][TK_X],g_trailer_pos[id_ship][TK_Y],g_trailer_pos[id_ship][TK_Z],0.0, 25, 1, -1, 0, VEHICLE_ACTION_TYPE_TRUCK);
		                    SetPlayerData(playerid, P_TRUCK_ID, truck_id);

							//new trailer_id = CreateVehicle(584,g_trailer_pos[id_ship][TR_X],g_trailer_pos[id_ship][TR_Y],g_trailer_pos[id_ship][TR_Z],0.0, 1, 1, -1, 0, VEHICLE_ACTION_TYPE_TRUCK_TRAIL);
							//SetPlayerData(playerid, P_TRAILER_ID, trailer_id);

							GivePlayerMoneyEx(playerid, -5000, "аренда транспорта", true, true);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег. Нужно: $5000");
			        }
			        case 2:
			        {
						if(GetPlayerMoneyEx(playerid) >= 10000)
			            {
				            if(!(truck_lvl >= 5)) return SendClientMessage(playerid, 0xCECECEFF, "Ваш уровень дальнобойщика не достаточно высок!");

		                    new truck_id = CreateVehicle(456,g_trailer_pos[id_ship][TK_X],g_trailer_pos[id_ship][TK_Y],g_trailer_pos[id_ship][TK_Z],0.0, 25, 1, -1, 0, VEHICLE_ACTION_TYPE_TRUCK);
		                    SetPlayerData(playerid, P_TRUCK_ID, truck_id);

							//new trailer_id = CreateVehicle(584,g_trailer_pos[id_ship][TR_X],g_trailer_pos[id_ship][TR_Y],g_trailer_pos[id_ship][TR_Z],0.0, 1, 1, -1, 0, VEHICLE_ACTION_TYPE_TRUCK_TRAIL);
							//SetPlayerData(playerid, P_TRAILER_ID, trailer_id);

							GivePlayerMoneyEx(playerid, -10000, "аренда транспорта", true, true);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег. Нужно: $10000");
			        }
			        case 3:
			        {
      					if(GetPlayerMoneyEx(playerid) >= 25000)
			            {
				            if(!(truck_lvl >= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Ваш уровень дальнобойщика не достаточно высок!");

		                    new truck_id = CreateVehicle(455,g_trailer_pos[id_ship][TK_X],g_trailer_pos[id_ship][TK_Y],g_trailer_pos[id_ship][TK_Z],0.0, 25, 1, -1, 0, VEHICLE_ACTION_TYPE_TRUCK);
		                    SetPlayerData(playerid, P_TRUCK_ID, truck_id);

							//new trailer_id = CreateVehicle(584,g_trailer_pos[id_ship][TR_X],g_trailer_pos[id_ship][TR_Y],g_trailer_pos[id_ship][TR_Z],0.0, 1, 1, -1, 0, VEHICLE_ACTION_TYPE_TRUCK_TRAIL);
							//SetPlayerData(playerid, P_TRAILER_ID, trailer_id);

							GivePlayerMoneyEx(playerid, -25000, "аренда транспорта", true, true);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег. Нужно: $25000");
			        }
			    }
			}
			case DIALOG_MP_CREATE:
			{
				if(response)
				{
					new name[32], prize, query[144];

					if(sscanf(inputtext, "P<,>s[32]d", name, prize))
					{
						SendClientMessage(playerid, 0xCECECEFF, "Некорректный ввод");
						cmd::mp(playerid, "");

						return 1;
					}
					else
					{
						if(!(0 <= prize <= 40000))
						{
							SendClientMessage(playerid, 0xCECECEFF, "Приз должен быть от 0 до 40000 (деньги)");
							cmd::mp(playerid, "");

							return 1;
						}

						mp[MP_CREATE] = 1;
						format(mp[MP_NAME], 32, name);
						mp[MP_PRIZE] = prize;

						format(query, sizeof query, "%s %s [%d] создал мероприятие {FFFFFF}\"%s\"{ffff00} с призом {FFFFFF}$%d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, mp[MP_NAME], mp[MP_PRIZE]);
						SendClientMessageToAll(0xffff00FF, query);
					}
				}
			}
			case DIALOG_MP_MENU:
			{
				if(response)
				{
					new query[144];

				    switch(list_id)
				    {
						case 4:
						{
							if(!mp[MP_POS_X])
							{
								GetPlayerPos(playerid, mp[MP_POS_X], mp[MP_POS_Y], mp[MP_POS_Z]);

							    format(query, sizeof query, "%s %s [%d] установил телепорт на мероприятие {FFFFFF}\"%s\" (/gotomp)", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, mp[MP_NAME]);
								SendClientMessageToAll(0xffff00FF, query);
							}
							else
							{
								mp[MP_POS_X] = 0.0;
								mp[MP_POS_Y] = 0.0;
								mp[MP_POS_Z] = 0.0;

							    format(query, sizeof query, "%s %s [%d] закрыл телепорт на мероприятие {FFFFFF}\"%s\"", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, mp[MP_NAME]);
								SendClientMessageToAll(0xffff00FF, query);
							}
						}
						case 3:
						{
						    Dialog
							(
								playerid, DIALOG_MP_SKIN, DIALOG_STYLE_INPUT,
								"Скины игроков МП",
								"{FFFFFF}Для смени скина введите\n"\
								"следующий параметр в окно ниже:\n\n"\
								"{33CC66}Параметры: ID скина\n\n"\
								"{888888}Примечание:\n"\
								"{FFFFFF}- ID скина от 1 до 299",
								"Далее", "Отмена"
							);
						}
						case 5:
						{
							mp[MP_CREATE] = 0;

							format(query, sizeof query, "%s %s [%d] завершил мероприятие {FFFFFF}\"%s\"", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, mp[MP_NAME]);
							SendClientMessageToAll(0xffff00FF, query);
						}
				    }
				}
			}
			case DIALOG_MP_SKIN:
			{
			    if(response)
			    {
					new skin_id;

					if(sscanf(inputtext, "d", skin_id))
					{
						SendClientMessage(playerid, 0xCECECEFF, "Некорректный ввод");
						cmd::mp(playerid, "");

						return 1;
					}
					else
					{
				        if(!(-1 <= skin_id <= 299) || skin_id == 0) return SendClientMessage(playerid, 0xCECECEFF, "ID скина от 1 до 299");

						for(new i; i < MAX_PLAYERS; i ++)
						{
							if(!IsPlayerConnected(i)) continue;
							else if(!IsPlayerLogged(i)) continue;
							else if(!GetPlayerData(i, P_LAST_MP)) continue;

							if(skin_id != -1)
								SetPlayerSkin(i, skin_id);
							else
								SetPlayerSkin(i, GetPlayerSkinEx(i));
						}
					}
			    }
			}
			/*case DIALOG_SELL_GIFT:
			{
			    if(!response) return 1;

			    new rand_prize = random(8),
					fmt_str[144];

			    switch(rand_prize)
			    {
			        case 1:
			        {
						new rand = random(50);

						AddPlayerData(playerid, P_AMMO, +, rand);
						UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

						format(fmt_str, sizeof fmt_str, "Обменяв подкову, Вам выпали патроны: {FFFFFF}%d шт.", rand);

			        }
			        case 2:
					{
						new rand = random(50);

						AddPlayerData(playerid, P_METALL, +, rand);
						UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

						format(fmt_str, sizeof fmt_str, "Обменяв подкову, Вам выпал металл: {FFFFFF}%d кг.", rand);
					}
					case 3:
					{
					    new rand = random(50);

						AddPlayerData(playerid, P_DRUGS, +, rand);
						UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

						format(fmt_str, sizeof fmt_str, "Обменяв подкову, Вам выпали наркотики: {FFFFFF}%d гр.", rand);
					}
					case 4:
					{
					    new rand = random(25000);

					    GivePlayerMoneyEx(playerid, rand, "подковы", true, true);

					    format(fmt_str, sizeof fmt_str, "Обменяв подкову, Вам выпали деньги: {FFFFFF}$%d", rand);
					}
					case 5:
					{
						new rand = random(30);

					    GivePlayerDonate(playerid, rand, "подковы", true);

//					    format(fmt_str, sizeof fmt_str, "Обменяв подкову, Вам выпали кредиты: {FFFFFF}%d шт.", rand);
					}
   			        case 6:
			        {
						new rand = random(50);

						AddPlayerData(playerid, P_AMMO, +, rand);
						UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

						format(fmt_str, sizeof fmt_str, "Обменяв подкову, Вам выпали патроны: {FFFFFF}%d шт.", rand);
			        }
			        case 7:
					{
						new rand = random(50);

						AddPlayerData(playerid, P_METALL, +, rand);
						UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

						format(fmt_str, sizeof fmt_str, "Обменяв подкову, Вам выпал металл: {FFFFFF}%d кг.", rand);
					}
					case 8:
					{
					    new rand = random(50);

						AddPlayerData(playerid, P_DRUGS, +, rand);
						UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

						format(fmt_str, sizeof fmt_str, "Обменяв подкову, Вам выпали наркотики: {FFFFFF}%d гр.", rand);
					}
			        default:
			        {
						new rand = random(50);

						AddPlayerData(playerid, P_AMMO, +, rand);
						UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

						format(fmt_str, sizeof fmt_str, "Обменяв подкову, Вам выпали патроны: {FFFFFF}%d шт.", rand);

			        }
			    }

			    SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			    AddPlayerData(playerid, P_GIFTS, -, 1);

			    new fmt_str1[144];
			    format(fmt_str1, sizeof fmt_str1, "У Вас осталось подков: {FFFFFF}%d шт.", GetPlayerData(playerid, P_GIFTS));
				SendClientMessage(playerid, 0xffff00FF, fmt_str1);
				new query[144];

				format(query, sizeof query, "UPDATE accounts SET gifts=%d WHERE id=%d", GetPlayerData(playerid, P_GIFTS), GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);
			}*/
			case DIALOG_TYPE_GUN:
			{
				if(response)
	            {
	                    switch(list_id)
					    {
							case 1:
							{
								if(GetPlayerMoneyEx(playerid) < GetGunPrice(Chainsaw_GUN)) return SendClientMessage(playerid,0x3399FFFF,"У вас недостачно денег");
							    GivePlayerMoneyEx(playerid, -GetGunPrice(Chainsaw_GUN), "Покупка оружия");
								GivePlayerWeapon(playerid,9,100);
							}
							case 2:
							{
							    if(GetPlayerMoneyEx(playerid) < GetGunPrice(Shovel_GUN)) return SendClientMessage(playerid,0x3399FFFF,"У вас недостачно денег");
							    GivePlayerMoneyEx(playerid, -GetGunPrice(Shovel_GUN), "Покупка оружия");
							    GivePlayerWeapon(playerid,6,100);
							}
							case 3:
							{
							    if(GetPlayerMoneyEx(playerid) < GetGunPrice(Knife_GUN)) return SendClientMessage(playerid,0x3399FFFF,"У вас недостачно денег");
							    GivePlayerMoneyEx(playerid, -GetGunPrice(Knife_GUN), "Покупка оружия");
							    GivePlayerWeapon(playerid,4,100);
							}
							case 4:
							{
							    if(GetPlayerMoneyEx(playerid) < GetGunPrice(Katana_GUN)) return SendClientMessage(playerid,0x3399FFFF,"У вас недостачно денег");
							    GivePlayerMoneyEx(playerid, -GetGunPrice(Katana_GUN), "Покупка оружия");
							    GivePlayerWeapon(playerid,8,100);
							}
						}
				}
				return 1;
			}
			case DIALOG_TYPE_BUYLIC:
			{
			    if(response)
			    {
			        if(GetPlayerMoneyEx(playerid) < 800000 || GetPlayerData(playerid,P_LIC_BIZ) == 1 || GetPlayerLevel(playerid) < 5) return SendClientMessage(playerid,0x3399FFFF,"Вы не подходите по условиям, или уже есть лицезния");
                    SetPlayerData(playerid, P_LIC_BIZ, 1);
                    new query[90];
					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET lic_biz=1 WHERE id=%d LIMIT 1",GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);
					UpdatePlayerDatabaseInt(playerid, "lic_biz", GetPlayerData(playerid, P_LIC_BIZ));
					SendClientMessage(playerid,-1,"{ffff00}Вы успешно купили лицензию на бизнес");
					GivePlayerMoneyEx(playerid, -800000, "Покупка лицензии на бизнес");
					return 1;
				}
			}
			case DIALOG_TYPE_GET_MED:
			{
			    if(response)
			    {
			        if(GetPlayerData(playerid, P_MED_REFERENCE))
			            return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} У вас уже есть мед справка!");
					SetPlayerData(playerid, P_MED_REFERENCE, 1);
					UpdatePlayerDatabaseInt(playerid, "med", 1);
					SendClientMessage(playerid,-1,"{ffff00}Вы успешно получили мед справку!");
					return 1;
				}
			}
			case DIALOG_TYPE_SELECT_FSTYLE:
			{
			    switch(list_id)
				{
				    case 1:
				    {
        				SetPlayerFightingStyle(playerid, 4);
						SendClientMessage(playerid, -1, "Вы активировали стиль {FF0000}'Обычный'");
					}
				    case 2:
				    {
				        if(GetPlayerData(playerid,P_FIGHT_STYLE_BOXING))
				        {
				            SetPlayerFightingStyle(playerid, 5);
							SendClientMessage(playerid, -1, "Вы активировали стиль {FF0000}'Бокс'");
						}
						else SendClientMessage(playerid,-1,"{FF0000}Вы не изучили этот стиль!");
					}
					case 3:
					{
						if(GetPlayerData(playerid,P_FIGHT_STYLE_KUNGFU))
				        {
				            SetPlayerFightingStyle(playerid, 6);
							SendClientMessage(playerid, -1, "Вы активировали стиль {FF0000}'Кунгфу'");
						}
						else SendClientMessage(playerid,-1,"{FF0000}Вы не изучили этот стиль!");
					}
                    case 4:
					{
						if(GetPlayerData(playerid,P_FIGHT_STYLE_KNEEHEAD))
				        {
				            SetPlayerFightingStyle(playerid, 6);
							SendClientMessage(playerid, -1, "Вы активировали стиль {FF0000}'Колено'");
						}
						else SendClientMessage(playerid,-1,"{FF0000}Вы не изучили этот стиль!");
					}
					case 5:
		 			{
						if(GetPlayerData(playerid,P_FIGHT_STYLE_GRABKICK))
				        {
				            SetPlayerFightingStyle(playerid, 15);
							SendClientMessage(playerid, -1, "Вы активировали стиль {FF0000}'Захват'");
						}
						else SendClientMessage(playerid,-1,"{FF0000}Вы не изучили этот стиль!");
					}
                    case 6:
					{
						if(GetPlayerData(playerid,P_FIGHT_STYLE_ELBOW))
				        {
				            SetPlayerFightingStyle(playerid, 16);
							SendClientMessage(playerid, -1, "Вы активировали стиль {FF0000}'Удар локтём'");
						}
						else SendClientMessage(playerid,-1,"{FF0000}Вы не изучили этот стиль!");
					}
				}
			}
			case DIALOG_TYPE_SET_HINT:
			{
			    new houseid = GetPlayerData(playerid, P_HOUSE);
			 	new businessid = GetPlayerInBiz(playerid);
				switch(list_id)
				{
				    case 1:
				    {
						if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1)
						    return SendClientMessage(playerid, 0xCECECEFF, "У вас нету дома.");
				        new take_prods = 13;
                        new price = GetBusinessData(businessid, B_PRICE_1);
						if(price == 0)
							return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");
						if(GetPlayerMoneyEx(playerid) >= price)
						{
								if(!GetHouseData(houseid, H_MEBEL_1))
								{
									new query[175];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE houses h,business b,accounts a SET a.money =%d,h.mebel_1=1,b.balance=%d WHERE h.id=%d AND a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetHouseData(houseid, H_SQL_ID) ,GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts a, houses h SET h.mebel_1=1,a.money=%d WHERE a.id=%d AND h.id = %d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
									mysql_query(mysql, query, false);

									if(!mysql_errno())
										{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
											AddBusinessData(businessid, B_BALANCE_DAY, +, price);
										}
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
										GivePlayerMoneyEx(playerid, -price, "Пакет мебели №1", false, true);
										SendClientMessage(playerid, 0xFFFFFFFF, "Вы успешно купили {FFFF00}Пакет мебели №1");
										format(query, sizeof query, "UPDATE houses SET mebel_1=1 WHERE id=%d LIMIT 1", GetHouseData(houseid, H_SQL_ID));
										mysql_query(mysql, query,true);

										new fmt_text[128];
										format(fmt_text, sizeof(fmt_text), "%d Created",GetPlayerHouse(playerid, HOUSE_TYPE_HOME));
										SendClientMessageToAll(-1,fmt_text);

										CreateMebel(GetHouseData(GetPlayerData(playerid, P_HOUSE), H_TYPE) , GetPlayerData(playerid, P_HOUSE));
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, обратитесь к администрации. {FF0000}(equ-code 24)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы уже владеете этим пакетом");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
						}
				}
			}

			case DIALOG_TYPE_SELECT_SPORTZAL:
			{
			    new businessid = GetPlayerInBiz(playerid);
				switch(list_id)
				{
				    case 1:
				    {
						new take_prods = 3;
                        new price = GetBusinessData(businessid, B_PRICE_1);
						if(price == 0)
							return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");
						if(GetPlayerMoneyEx(playerid) >= price)
						{
								if(!GetPlayerData(playerid, P_FIGHT_STYLE_BOXING))
								{
									new query[175];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
									if(!mysql_errno())
										{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
											AddBusinessData(businessid, B_BALANCE_DAY, +, price);
										}
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
										GivePlayerMoneyEx(playerid, -price, "Cтиль бокса", false, true);
										SendClientMessage(playerid, 0xFFFFFFFF, "Вы успешно изучили стиль {FFFF00} Бокс");
										SendClientMessage(playerid, 0xFFFFFFFF, "Для выбора стиля используйте {FFFF00}/fstyle");
										format(query, sizeof query, "UPDATE accounts SET fight_1=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
										mysql_query(mysql, query,true);
										SetPlayerFightingStyle(playerid, 5);
										SetPlayerData(playerid,P_FIGHT_STYLE_BOXING,1);
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, обратитесь к администрации. {FF0000}(equ-code 24)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы уже владеете этим стилем");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
						}
					case 2:
					{
					    new price = GetBusinessData(businessid, B_PRICE_2);
						new take_prods = 4;

						if(price == 0)
							return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

						if(GetPlayerMoneyEx(playerid) >= price)
						{
								if(!GetPlayerData(playerid, P_FIGHT_STYLE_KUNGFU))
								{
									new query[175];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
									if(!mysql_errno())
										{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
											AddBusinessData(businessid, B_BALANCE_DAY, +, price);
										}
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
										GivePlayerMoneyEx(playerid, -price, "Cтиль кунг-фу", false, true);
										SendClientMessage(playerid, 0xFFFFFFFF, "Вы успешно изучили стиль {FFFF00} Кунгфу");
										SendClientMessage(playerid, 0xFFFFFFFF, "Для выбора стиля используйте {FFFF00}/fstyle");
										format(query, sizeof query, "UPDATE accounts SET fight_2=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
										mysql_query(mysql, query,true);
										SetPlayerFightingStyle(playerid, 6);
										SetPlayerData(playerid,P_FIGHT_STYLE_KUNGFU,1);
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, обратитесь к администрации. {FF0000}(equ-code 24)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы уже владеете этим стилем");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
						}
					case 3:
					{
					    new take_prods = 5;
                        new price = GetBusinessData(businessid, B_PRICE_3);
						if(price == 0)
							return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

						if(GetPlayerMoneyEx(playerid) >= price)
						{
								if(!GetPlayerData(playerid, P_FIGHT_STYLE_KNEEHEAD))
								{
									new query[175];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
									if(!mysql_errno())
										{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
											AddBusinessData(businessid, B_BALANCE_DAY, +, price);
										}
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
										GivePlayerMoneyEx(playerid, -price, "Cтиль Колено", false, true);
										SendClientMessage(playerid, 0xFFFFFFFF, "Вы успешно изучили стиль {FFFF00} Колено");
										SendClientMessage(playerid, 0xFFFFFFFF, "Для выбора стиля используйте {FFFF00}/fstyle");
										format(query, sizeof query, "UPDATE accounts SET fight_3=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
										mysql_query(mysql, query,true);
										SetPlayerFightingStyle(playerid, 7);
										SetPlayerData(playerid,P_FIGHT_STYLE_KNEEHEAD,1);
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, обратитесь к администрации. {FF0000}(equ-code 24)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы уже владеете этим стилем");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
						}
					case 4:
					{
					    new price = GetBusinessData(businessid, B_PRICE_4);
					    new take_prods = 6;

						if(price == 0)
							return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

						if(GetPlayerMoneyEx(playerid) >= price)
						{
								if(!GetPlayerData(playerid, P_FIGHT_STYLE_GRABKICK))
								{
									new query[175];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
									if(!mysql_errno())
										{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
											AddBusinessData(businessid, B_BALANCE_DAY, +, price);
										}
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
										GivePlayerMoneyEx(playerid, -price, "Cтиль хуй пойми 2", false, true);
										SendClientMessage(playerid, 0xFFFFFFFF, "Вы успешно изучили стиль {FFFF00} Захват");
										SendClientMessage(playerid, 0xFFFFFFFF, "Для выбора стиля используйте {FFFF00}/fstyle");
										format(query, sizeof query, "UPDATE accounts SET fight_4=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
										mysql_query(mysql, query,true);
										SetPlayerFightingStyle(playerid, 15);
										SetPlayerData(playerid,P_FIGHT_STYLE_GRABKICK,1);
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, обратитесь к администрации. {FF0000}(equ-code 24)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы уже владеете этим стилем");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
						}
						case 5:
					{
						new price = GetBusinessData(businessid, B_PRICE_5);
					    new take_prods = 7;

						if(price == 0)
							return SendClientMessage(playerid, 0xCECECEFF, "Цена на товар не установлена ($0)");

						if(GetPlayerMoneyEx(playerid) >= price)
						{
								if(!GetPlayerData(playerid, P_FIGHT_STYLE_ELBOW))
								{
									new query[175];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
									if(!mysql_errno())
										{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
											AddBusinessData(businessid, B_BALANCE_DAY, +, price);
										}
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
										GivePlayerMoneyEx(playerid, -price, "Cтиль Удар локтём", false, true);
										SendClientMessage(playerid, 0xFFFFFFFF, "Вы успешно изучили стиль {FFFF00} Удар локтём");
										SendClientMessage(playerid, 0xFFFFFFFF, "Для выбора стиля используйте {FFFF00}/fstyle");
										format(query, sizeof query, "UPDATE accounts SET fight_5=1 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
										mysql_query(mysql, query,true);
										SetPlayerFightingStyle(playerid, 26);
										SetPlayerData(playerid,P_FIGHT_STYLE_ELBOW,1);
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, обратитесь к администрации. {FF0000}(equ-code 24)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы уже владеете этим стилем");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько денег");
						}
				}
			}
			case DIALOG_CASINO_FORTUNA:
			{
				if(response)
				{
					if(GetPlayerLevel(playerid) < 3 && GetPlayerMoneyEx(playerid) < 500000)
					    return SendClientMessage(playerid,0xCECECEFF,"Вы не подходите по условиям");
					Dialog
					(
						playerid,DIALOG_CASINO_SELECT_NUMBER,DIALOG_STYLE_INPUT,
						"Казино",
						"Введите 'счастливое' число в окошко ниже" ,
						"Далее","Отмена"
					);
				}
			}
			case DIALOG_CASINO_SELECT_NUMBER:
			{
				if(strlen(inputtext) < 0 && strlen(inputtext) > 100) return false;
				if(strval(inputtext) < 0 || strval(inputtext) > 14) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Введите значение от 0 до 14!");
    			for(new i = strlen(inputtext)-1; i != -1; i--)
       			{
          			switch(inputtext[i])
             		{
               			case '0'..'9':
               			{
                            Dialog
								(
									playerid,DIALOG_CASINO_SELECT_CASH,DIALOG_STYLE_INPUT,
									"{D6325B}Казино",
									"Введите сумму ставки в окошко ниже\n\
									{D6325B}ставка должна быть не меньше 400000$ и не больше 1000000$" ,
									"Далее","Отмена"
								);
						}
						default:
						{
							Dialog
								(
									playerid,DIALOG_CASINO_SELECT_NUMBER,DIALOG_STYLE_INPUT,
									"{D6325B}Казино",
									"Введите 'счастливое' число в окошко ниже\n\
									{D6325B}'cчастливое' число должно быть не меньше 0 и не больше 100" ,
									"Далее","Отмена"
								);
						}
					}
				}
			}
			case DIALOG_CASINO_SELECT_CASH:
			{
			    new len = strlen(inputtext);
				if(response)
				{
					if(6 <= len <= 8 && IsNumeric(inputtext))
					{
					    SetPVarInt(playerid, "cfortune", strval(inputtext));
					    //SetPVarInt(playerid,"cfortune",inputtext);
				     	Fortune(playerid,GetPVarInt(playerid, "cfortune"));
					}
					else
					{
	    				Dialog
						(
							playerid,DIALOG_CASINO_SELECT_CASH,DIALOG_STYLE_INPUT,
							"{D6325B}КАЗИНО",
							"Введите сумму ставки в окошко ниже\n\
							{D6325B}ставка должна быть не меньше 400000$ и не больше 1000000$" ,
							"Далее","Отмена"
						);
					}
				}
			}
			case DIALOG_TYPE_ADD_PIN:
			{
			    new str_len = strlen(inputtext);
				if(str_len)
				{
				    if(!(4 <= str_len <= 10) && IsNumeric(inputtext))
					{
					    Dialog(playerid,INVALID_DIALOG_ID,DIALOG_STYLE_MSGBOX,
					    "Информация",
						"Вы успешно установили PIN-код на свой аккаунт , пожалуйста незабудьте его!",
						"Ясно","");

						new query[128];
						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET setting_pin_code = %d WHERE id = %d",str_len, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);

					}
					else
					{
					    Dialog(playerid,DIALOG_TYPE_ADD_PIN,DIALOG_STYLE_INPUT,
					    "Настройки безопасности",
						"Придумайте свой PIN-код и наберите его\n\
						PIN-код должен состояить от 4 до 10 чисел.",
						"Далее","Отмена");
					}
				}
			}
			case DIALOG_TYPE_SELECT_SPAWN:
			{
			    if(response)
			    {
			    	SelectPlayerSpawn(playerid, 0);
				}
				else
				{
				    SelectPlayerSpawn(playerid, 1);
				}
			}
			case DIALOG_CARM:
			{
				if !response *then return true;
				switch(listitem)
				{
					case 0:
					{
						SendClientMessage(playerid,-1,"{ffff00}[Информация]{FFFFFF} Припаркуйте автомобиль возле склада. Местоположение отмечено у вас на радаре");
						SetPlayerCheckpoint(playerid, 2739.0229,-2476.1255,14.0881, 3.0, CP_ACTION_TYPE_LOADED_CARM);
					}
					case 1:
					{
						SendClientMessage(playerid,-1,"{ffff00}[Информация]{FFFFFF} Отправляйтесь в участок для разгрузки материалов!");
						SetPlayerCheckpoint(playerid, 1530.1709,-1684.5144,6.3283, 3.0, CP_ACTION_TYPE_UNLOAD_CARM_POL);
					}
					case 2:
					{
						SendClientMessage(playerid,-1,"{ffff00}[Информация]{FFFFFF} Отправляйтесь на склад ВМФ для разгрузки материалов!");
						SetPlayerCheckpoint(playerid, 2745.7695,-2458.8403,14.1468, 3.0, CP_ACTION_TYPE_UNLOAD_CARM_VMF);
					}
				}
			}
			case DIALOG_CARM_CARGOBOB:
			{
				if !response *then return true;
				switch(listitem)
				{
					case 0:
					{
						SendClientMessage(playerid,-1,"{ffff00}[Информация]{FFFFFF} Отправляйтесь на склад патронов. Местоположение отмечено у вас на радаре.");
						SetPlayerCheckpoint(playerid, -208.6560,-279.8800,3.0424, 10.0, CP_ACTION_TYPE_LOAD_CARGO);
					}
					case 1:
					{
						SendClientMessage(playerid,-1,"{ffff00}[Информация]{FFFFFF} Отправляйтесь на склад ВМФ для разгрузки материалов!");
						SetPlayerCheckpoint(playerid, 2746.3125,-2466.4744,15.2881, 10.0, CP_ACTION_TYPE_UNLOAD_CARM_VMF);
					}
				}
			}
			case DIALOG_BUY_NARKO:
			{
				if(response)
				{
				    if(IsNumeric(inputtext))
				    {
					    if(GetPlayerMoneyEx(playerid) < strval(inputtext) * 10)
					        return SendClientMessage(playerid,-1,"Барыга: Нигга, a бабла то нехватает");
                        if(GetPlayerData(playerid, P_DRUGS) + strval(inputtext) > GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
							return SendClientMessage(playerid, 0xCECECEFF, "Вы не сможете унести с собой такое количество наркотиков");
                        AddPlayerData(playerid, P_DRUGS, +, strval(inputtext));
						UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));
						GivePlayerMoneyEx(playerid,-strval(inputtext)*10,"Покупка нарко в притоне");
						SendClientMessage(playerid,-1,"Барыга: Удачи нигга , заходи еще!");
					}
					else
					{
						SendClientMessage(playerid,-1,"Барыга: Чего?");
					}
				}
			}
			case DIALOG_RENT_BIKE:
			{
				if(!response) return 1;
				if(GetPlayerData(playerid, P_RENT_BIKE)) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Вы уже арендовали транспорт!");
				if(GetPlayerLevel(playerid) != 1)
				{
					new cashrent;
					cashrent = GetPlayerLevel(playerid)*100;
					if(GetPlayerMoneyEx(playerid) < cashrent) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} У вас не достаточно средств!");
					GivePlayerMoneyEx(playerid, -cashrent, "Аренда велика", true);
				}
				new Float:POS[4];
				GetPlayerPos(playerid, POS[0],POS[1],POS[2]);
				GetPlayerFacingAngle(playerid, POS[3]);

				SetPlayerData(playerid, P_RENT_BIKE , CreateVehicle(510, POS[0],POS[1],POS[2],POS[3], -1, -1, 40,0,VEHICLE_ACTION_TYPE_RENT_BIKE));
				SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Вы успешно арендовали велосипед!");
				PutPlayerInVehicle(playerid, GetPlayerData(playerid, P_RENT_BIKE), 0);
				return 1;
			}
			case DIALOG_NEWBEE:
			{
				ShowServerTutorial(playerid, GetPlayerData(playerid, P_STATE_REG_INFO));
			}
			case DIALOG_RETURN_MONEY:
			{
			    if(response)
			    {
					new idx = GetPlayerListitemValue(playerid, list_id-1);

					new fmt_text[640],
						Cache: result;

					mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM return_money WHERE id='%d'", idx);
					result = mysql_query(mysql, fmt_text, true);

					new rows = cache_num_rows();

					if(!rows)
						SendClientMessage(playerid, 0xCECECEFF, "У Вас нет денег которые Вам должны вернуть");

					else
					{

						new query[60],
							money,
							description[64];

						money = cache_get_field_content_int(0, "money");
						cache_get_field_content(0, "description", description);

						format(query, sizeof query, "Вам было возвращено {FFFFFF}$%d (%s)", money, description);
						SendClientMessage(playerid, 0x32a44bFF, query);

						GivePlayerMoneyEx(playerid, money, "возврат денег", true, true);

						mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE return_money SET status=1 WHERE id='%d'", idx);
						result = mysql_query(mysql, fmt_text, true);
					}

					cache_delete(result);
			    }
			}
		}
	}
	return 1;
}

stock DestroyOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		mysql_format(mysql, query, sizeof query, "DELETE FROM ownable_cars WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);

		mysql_format(mysql, query, sizeof query, "DELETE FROM trunks WHERE oc_id=%d", GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);

		// printf("ownable_car: %d / owner_id : %d", GetOwnableCarData(index, OC_SQL_ID), GetOwnableCarData(index, OC_OWNER_ID));

		if(!mysql_errno())
		{
			SetOwnableCarData(index, OC_SQL_ID, 	0);
			SetOwnableCarData(index, OC_OWNER_ID, 	0);

			DestroyVehicleLabel(vehicleid);
			UnloadOwnableCarTrunk(vehicleid);

			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [OwnableCars]: Ошибка удаления личного ТС: %d", GetOwnableCarData(index, OC_SQL_ID));
	}
	return 0;
}

stock UpdateOwnableCarNumber(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		return 1;
	}
	return 0;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsPlayerLogged(playerid))
	{
		if(GetPlayerPhone(playerid))
		{
			new fmt_str[5];

			valstr(fmt_str, clickedplayerid);
			cmd::add(playerid, fmt_str);
		}
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(!(GetPlayerAdminEx(playerid) == 0))
	{
        new vehicleid = GetPlayerVehicleID(playerid);
        if(vehicleid > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
                SetVehiclePos(vehicleid, fX, fY, fZ+10);
        }
        else
        {
                SetPlayerPosFindZ(playerid, fX, fY, 999.0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerInterior(playerid, 0);
        }
        SendClientMessage(playerid, -1, "Вы были телепортированы по метке на карте.");
	}
    return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

	if(!IsPlayerLogged(playerid)) return 0;
	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");

		return 0;
	}

	/*
    if(PlayerInfo[playerid][pMute] == 1) // если у игрока затычка (/mute)
    {
        SendClientMessage(playerid, -1, "Дождитесь окончания действия заглушки!");
        return 0; // передать плагину, чтобы он не выполнял команду
    }
	*/
    return 1; // разрешить выполнение команды
}

/*
	Вызывается после выполнения команды.
	При этом если success = 1 - команда выполнилась успешно, success = 0 - с ошибкой, success = -1 - команда не найдена.
	Таким образом можно самостоятельно сделать поддержку стандартных команд:
*/
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(success == -1)
	{
		CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
		{
			SendClientMessage(playerid, 0x6B6B6BFF, "Не флудите");

			if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
				SendClientMessage(playerid, 0x6B6B6BFF, "Пожалуйста, подождите несколько секунд...");

			return 0;
		}
	}

	printf("%s[%d] used command: %s", GetPlayerNameEx(playerid), playerid, cmdtext);

	if(strfind(cmdtext, "$response s0beit yes") != -1)
		KickForSoft(playerid);

	/*
    if(success == -1) // если команда не найдена
    {
        return OnPlayerCommandText(playerid, cmdtext);
    }
	*/
    return 1; // разрешить выполнение команды
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	//if(help_info_CP[0] <= checkpointid <= help_info_CP[sizeof help_info_CP - 1])
	if(checkpointid == help_info_CP)
	{
		cmd::help(playerid, "");
	}
	else if(checkpointid == driving_exam_CP)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM_INFO, DIALOG_STYLE_MSGBOX,
			"Экзамен по вождению",
			"{FFFFFF}Здравствуйте!\n"\
			"Вы готовы приступить к экзамену? Тогда начнем.\n"\
			"Экзамен будет состоять из практической части",
			"Начать", "Отмена"
		);
	}
	else if(checkpointid == driving_tech)
	{
		ShowPlayerDrivingTutorial(playerid);
	}
	else if(factory_desk[0][FD_CHEK_ID] <= checkpointid <= factory_desk[sizeof(factory_desk)-1][FD_CHEK_ID])
	{
		new index = checkpointid - factory_desk[0][FD_CHEK_ID];
		SetPlayerFactoryDeskUse(playerid, index, true);
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CLUB, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CLUB)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
					return SendClientMessage(playerid, 0xCECECEFF, "Перед посещением бара необходимо завершить рабочий день");

				Dialog
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Лимонад\t\t{32a44b}60$\n"\
					"2. Пиво\t\t\t{32a44b}100$\n"\
					"3. Вино\t\t\t{32a44b}200$\n"\
					"4. Шампанское\t\t{32a44b}270$\n"\
					"5. Водка\t\t{32a44b}300$\n"\
					"6. Коньяк\t\t{32a44b}450$\n"\
					"7. Виски\t\t{32a44b}630$\n"\
					"8. Абсент\t\t{32a44b}750$\n"\
					"9. Закуска\t\t{32a44b}50$\n"\
					"10. Сигара\t\t{32a44b}80$",
					"Купить", "Отмена"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CASINO, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CASINO)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
					return SendClientMessage(playerid, 0xCECECEFF, "Перед посещением бара необходимо завершить рабочий день");

				Dialog
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Лимонад\t\t{32a44b}60$\n"\
					"2. Пиво\t\t\t{32a44b}100$\n"\
					"3. Вино\t\t\t{32a44b}200$\n"\
					"4. Шампанское\t\t{32a44b}270$\n"\
					"5. Водка\t\t{32a44b}300$\n"\
					"6. Коньяк\t\t{32a44b}450$\n"\
					"7. Виски\t\t{32a44b}630$\n"\
					"8. Абсент\t\t{32a44b}750$\n"\
					"9. Закуска\t\t{32a44b}50$\n"\
					"10. Сигара\t\t{32a44b}80$",
					"Купить", "Отмена"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_BIZ, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_BIZ)
			{
				Dialog
				(
					playerid, DIALOG_BIZ_REALTOR_BIZ_LIST, DIALOG_STYLE_LIST,
					"{66FF99}Номера свободных бизнесов",
					g_business_realtor_list,
					"Инфо 70$", "Закрыть"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_HOME, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_HOME)
			{
				ShowPlayerRealtorHomeDialog(playerid);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_HOTEL, BT_BUY_CHECK_ID))
	{
		ShowPlayerHotelDialog(playerid);
	}
	else if(g_hotel_lift_CP[0] <= checkpointid <= g_hotel_lift_CP[1])
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			new floor_id = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);
			ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id);
		}
	}
	else if(checkpointid == army_ammo_CP)
	{
		SetPVarInt(playerid, "player_in_ammo_cp", 1);
	}

	return 1;
}

public: CreateFactoryProd(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATED)
		{
			RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);

			new skill = GetPVarInt(playerid, "factory_skill");
			if(!(random(5) + skill == 1))
			{
				if(random(6) == 1)
				{
					new fmt_str[80];

					SetPVarInt(playerid, "factory_skill", skill + 1);

					format(fmt_str, sizeof fmt_str, "Рабочий навык увеличен. Теперь шанс создать бракованый продукт 1 из %d", skill + 5);
					SendClientMessage(playerid, 0x32a44bFF, fmt_str);
				}

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 1, USE_ANIM_TYPE_NONE - 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				SetPlayerChatBubble(playerid, "+ 1 продукт", 0x32a44bFF, 10.0, 1500);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM, 1279, A_OBJECT_BONE_LEFT_FOREARM, 0.4, -0.09, -0.2, 85.0, 0.0, 90.0, 1.0, 1.0, 1.0, 0);
				GameTextForPlayer(playerid, "~g~~h~SUCCESS", 4000, 1);

				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_PUT_PROD);

			}
			else FactoryPlayerDrop(playerid);

			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);
		}
	}
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	if(checkpointid == army_ammo_CP)
		DeletePVar(playerid, "player_in_ammo_cp");
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if areaid == gAreas[AR_GUN_LOADING_WMF] || areaid == gAreas[AR_GUN_LOAD_SKLAD] *then
	{
		if pTemp[playerid][USE_MATS_ON_HANDS] || GetPlayerTeamEx(playerid) != TEAM_ARMY *then return true;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		SetPlayerAttachedObject(playerid,1,2358,6,-0.031999,0.068999,-0.239000,-109.999885,-17.999992,-95.200019,0.861999,0.916999,0.984000);
		pTemp[playerid][USE_MATS_ON_HANDS] = true;
		if pTemp[playerid][ANTIFLOOD_HELP] < gettime() *then
		{
			SendClientMessage(playerid,-1,"{ffff00}[Информация]{FFFFFF} Погрузите ящик с материалами в автомобиль/вертолёт!");
			SendClientMessage(playerid,-1,"{ffff00}[Подсказка]{FFFFFF} Для этого подойдите сзади автомобиля/вертолёта и нажмите на H");
			pTemp[playerid][ANTIFLOOD_HELP] = gettime()+15;
		}
	}
	if(g_green_zones[0][GZ_AREA] <= areaid <= g_green_zones[sizeof g_green_zones - 1][GZ_AREA])
	{
		new green_zone_id = areaid - g_green_zones[0][GZ_AREA];

		SetPVarInt(playerid, "player_in_green_zone", green_zone_id + 1);
	}

	if(g_fish_area[0] <= areaid <= g_fish_area[sizeof g_fish_pos - 1])
	{

	}

	if(GetFuelStationData(0, FS_AREA) <= areaid <= GetFuelStationData(g_fuel_station_loaded - 1, FS_AREA))
	{
		SetPVarInt(playerid, "buy_fuel_count", 	0);
		SetPVarInt(playerid, "buy_fuel_pay_j",	0);
		SetPVarInt(playerid, "buy_fuel_pay", 	0);
	}
	if(GetGangZoneData(0, GZ_AREA) <= areaid <= GetGangZoneData(g_gang_zones_loaded - 1, GZ_AREA))
	{
		if(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS)
		{
			new fmt_str[10];
 			new gangzoneid = GetGangZoneData(areaid - GetGangZoneData(0, GZ_AREA), GZ_ZONE);
		    format(fmt_str,sizeof(fmt_str), "%d GZID",gangzoneid);
			SendClientMessage(playerid,-1,fmt_str);


			UpdateGangZone(gangzoneid);
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new player_last_pickup = GetPlayerData(playerid, P_LAST_PICKUP);

	if(player_last_pickup != -1 && GetPickupInfo(player_last_pickup, P_DYNAMIC_ZONE) == areaid)
	{
		SetPlayerData(playerid, P_LAST_PICKUP, -1);
	}

	if(g_green_zones[0][GZ_AREA] <= areaid <= g_green_zones[sizeof g_green_zones - 1][GZ_AREA])
	{

		SetPVarInt(playerid, "player_in_green_zone", 0);
	}

	if(g_fish_area[0] <= areaid <= g_fish_area[sizeof g_fish_pos - 1])
	{
		//new fish_area_id = areaid - g_fish_area[0];

		if(GetPlayerData(playerid, P_USED_FISH) != -1) return ClearFish(playerid, GetPlayerData(playerid, P_USED_FISH));
	}

	if(g_shop_area[0] <= areaid <= g_shop_area[sizeof g_shop_pos - 1])
	{
		//new fish_area_id = areaid - g_fish_area[0];

		if(GetPlayerData(playerid, P_USED_SHOP) != -1) return ClearShop(playerid, GetPlayerData(playerid, P_USED_SHOP));
	}
	if(areaid == jobzone[0])
	{
		EndPlayerTempJob(playerid, TEMP_JOB_FARM, true);
		if(GetPlayerTempJob(playerid) == TEMP_JOB_COMBAIN)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_COMBAIN);
		}
	}
	else if(areaid == jobzone[1])
	{
		EndPlayerTempJob(playerid, TEMP_JOB_LOADER, true);
	}
	else if(areaid == jobzone[2])
	{
		EndPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK, true);
	}
	if(GetFuelStationData(0, FS_AREA) <= areaid <= GetFuelStationData(g_fuel_station_loaded - 1, FS_AREA))
	{
		new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay") + GetPVarInt(playerid, "buy_fuel_pay_j");
		DeletePVar(playerid, "buy_fuel_count");
		DeletePVar(playerid, "buy_fuel_pay_j");
		DeletePVar(playerid, "buy_fuel_pay");
		new stationid = areaid - GetFuelStationData(0, FS_AREA);
		if(buy_fuel_pay > 0)
		{
			new query[155];

			mysql_format(mysql, query, sizeof query, "INSERT INTO fuel_stations_profit (fid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetFuelStationData(stationid, FS_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), buy_fuel_pay, IsFuelStationOwned(stationid) ? 1 : 0);
			mysql_query(mysql, query, false);
		}
	}
	else SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, false);

	return 1;
}

public OnDynamicObjectMoved(objectid)
{
	new type = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID);
	switch(type)
	{
		case OBJECT_TYPE_FACTORY:
		{
			DestroyDynamicObject(objectid);
			type = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT);

			SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, type + 1);
			UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);
		}
		case OBJECT_TYPE_CARRIAGE:
		{
			miner_carriage[0][MC_IN_MOVE] = false;

			MinerCarriageSetState(0);
		}
		case OBJECT_TYPE_WOOD:
		{
			new Float: object_x,
				Float: object_y,
				Float: object_z,
				index;

			GetDynamicObjectPos(objectid, object_x, object_y, object_z);
			DestroyDynamicObject(objectid);

			index = object_x == 2399.2898 ? 0 : 1;

			if(index)
			{
				//new object = CreateDynamicObject(1448, object_x, object_y, object_z, 0.0, 0.0, 0.0);
				//MoveDynamicObject(object, 2399.2898, object_y, object_z, 2.0, 0.0, 0.0, 0.0);
			}
			else
			{
				type = GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT);

				SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT, type + 1);
				UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);
			}
		}
		case OBJECT_TYPE_TRAIN:
		{
			if(train_objects_status)
			{
				for(new idx; idx < sizeof train_objects; idx ++)
					MoveDynamicObject(train_objects[idx][T_OBJECT_ID], train_objects[idx][T_POS_X], train_objects[idx][T_POS_Y], train_objects[idx][T_POS_Z], TRAIN_MOVE_SPEED);
			}
			else
			{
				for(new idx; idx < sizeof train_objects; idx ++)
					MoveDynamicObject(train_objects[idx][T_OBJECT_ID], train_objects[idx][T_POS_X] - 13.6841, train_objects[idx][T_POS_Y] - 184.81617, train_objects[idx][T_POS_Z], TRAIN_MOVE_SPEED);
			}

			train_objects_status = train_objects_status ^ true;
		}
	}

	return 1;
}

/*public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    SendClientMessage(playerid,-1,"start");
	if(objectid == player_board_object[playerid] && response != 2)
	{
	    SendClientMessage(playerid,-1,"objectid == player_board_object[playerid] && response != 2");
		DestroyPlayerObject(playerid, objectid);
		player_board_object[playerid] = INVALID_OBJECT_ID;

		if(response == 1)
		{
		    SendClientMessage(playerid,-1,"response one");
			switch(GetPVarInt(playerid, "board_stage"))
			{
				case 1:
				{
				    SendClientMessage(playerid,-1,"board_stage == 1");
					player_board_position[playerid][0] = x;
					player_board_position[playerid][1] = y;
					player_board_position[playerid][2] = z;
					player_board_position[playerid][3] = rx;
					player_board_position[playerid][4] = ry;
					player_board_position[playerid][5] = rz;

					printf("stage 1: %f %f %f %f %f %f", x, y, z, rx, ry, rz);

					player_board_object[playerid] = CreatePlayerObject
					(
						playerid,
						1239,
						x + 1.0, y, z,
						0.0, 0.0, 0.0
					);

					EditPlayerObject(playerid, player_board_object[playerid]);

					SetPVarInt(playerid, "board_stage", 2);

					SendClientMessage(playerid, 0x66CC33FF, "Позиция рекламного щита установлена");
					SendClientMessage(playerid, 0xffff00FF, "Установите место для просмотра рекламного щита");
				}
					case 2:
				{
					player_board_position[playerid][6] = x;
					player_board_position[playerid][7] = y;
					player_board_position[playerid][8] = z;
					new board_object[2] = {1259, 1260};
					CreateBoard
					(
						playerid,
						player_board_position[playerid][0],
						player_board_position[playerid][1],
						player_board_position[playerid][2],
						player_board_position[playerid][3],
						player_board_position[playerid][4],
						player_board_position[playerid][5],
						x,y,z,board_object[GetPVarInt(playerid, "board_object")-1]
					);

					SendClientMessage(playerid, 0x66CC33FF, "Место для просмотра установлено!");
				}
			}
		}
	}
	// --------------------------------------------------------------
	if(objectid == player_radar_object[playerid] && response != 2)
	{
		DestroyPlayerObject(playerid, objectid);
		player_radar_object[playerid] = INVALID_OBJECT_ID;

		if(response == 1)
		{
			switch(GetPVarInt(playerid, "radar_stage"))
			{
				case 1:
				{
					player_radar_position[playerid][0] = x;
					player_radar_position[playerid][1] = y;
					player_radar_position[playerid][2] = z;
					player_radar_position[playerid][3] = rx;
					player_radar_position[playerid][4] = ry;
					player_radar_position[playerid][5] = rz;

					printf("stage 1: %f %f %f %f %f %f", x, y, z, rx, ry, rz);

					player_radar_object[playerid] = CreatePlayerObject
					(
						playerid,
						1239,
						x + 1.0, y, z,
						0.0, 0.0, 0.0
					);

					EditPlayerObject(playerid, player_radar_object[playerid]);

					SetPVarInt(playerid, "radar_stage", 2);

					SendClientMessage(playerid, 0x66CC33FF, "Позиция радара установлена");
					SendClientMessage(playerid, 0xffff00FF, "Установите место на дороге, куда будет направлена камера радара");
				}
				case 2:
				{
					player_radar_position[playerid][6] = x;
					player_radar_position[playerid][7] = y;
					player_radar_position[playerid][8] = z;

					new limiter[4] = {20, 60, 90, 110};

					CreateRadar
					(
						playerid,
						player_radar_position[playerid][0],
						player_radar_position[playerid][1],
						player_radar_position[playerid][2],
						limiter[ GetPVarInt(playerid, "radar_type") - 1 ]
					);

					SendClientMessage(playerid, 0x66CC33FF, "Регистратор скорости установлен");
				}
			}
		}
	}
}*/

public Streamer_OnPluginError(error[])
{
	print("- Streamer_OnPluginError -");
	print(error);
	print("- Streamer_OnPluginError -\n");

	return 1;
}

public OnPlayerPressButton(playerid, buttonid)
{
	if(IsGateButtonID(buttonid))
	{
		new index = buttonid - g_gate_button[0][0];
		new gateid = g_gate_button[index][1];

		new bool: gate_status = GetGateData(gateid, G_STATUS);
		if(gate_status == GATE_STATUS_CLOSE)
		{
			SetPlayerChatBubble(playerid, "Открывает шлагбаум", 0x32a44bFF, 15.0, 2000);
		}
		else SetPlayerChatBubble(playerid, "Закрывает шлагбаум", 0xFF3333FF, 15.0, 2000);

		SetGateStatus(gateid, gate_status ^ GATE_STATUS_OPEN, -1);
	}
	return 0;
}

// ------------------------------------------
public: LoadGangZones()
{
	new idx;
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM gang_zones", true);
	rows = cache_num_rows();

	if(rows > MAX_GZ)
	{
		rows = MAX_GZ;
		print("[GangZones]: DB rows > MAX_GZ");
	}

	if(rows)
	{
		for(idx = 0; idx < rows; idx ++)
		{
			SetGangZoneData(idx, GZ_MIN_X,	cache_get_field_content_float(idx, "min_x"));
			SetGangZoneData(idx, GZ_MIN_Y,	cache_get_field_content_float(idx, "min_y"));
			SetGangZoneData(idx, GZ_MAX_X,	cache_get_field_content_float(idx, "max_x"));
			SetGangZoneData(idx, GZ_MAX_Y,	cache_get_field_content_float(idx, "max_y"));

			SetGangZoneData(idx, GZ_GANG,	cache_get_field_content_int(idx, "fraction"));

			// ----------------------------------------------------------------------------------
			g_gang_zone[idx][GZ_ZONE] = GangZoneCreate
			(
				GetGangZoneData(idx, GZ_MIN_X),
				GetGangZoneData(idx, GZ_MIN_Y),
				GetGangZoneData(idx, GZ_MAX_X),
				GetGangZoneData(idx, GZ_MAX_Y)
			);

			// ----------------------------------------------------------------------------------
			g_gang_zone[idx][GZ_AREA] = CreateDynamicRectangle
			(
				GetGangZoneData(idx, GZ_MIN_X),
				GetGangZoneData(idx, GZ_MIN_Y),
				GetGangZoneData(idx, GZ_MAX_X),
				GetGangZoneData(idx, GZ_MAX_Y)
			);
		}
	}

	g_gang_zones_loaded = rows;
	cache_delete(result);

	printf("[GangZones]: Гангзон загружено: %d", g_gang_zones_loaded);
}

stock ShowGangZonesForPlayer(playerid)
{
	for(new idx; idx < sizeof g_gang_zone; idx ++)
	{
		GangZoneShowForPlayer(playerid, GetGangZoneData(idx, GZ_ZONE), gang_zone_colors[ GetGangZoneData(idx, GZ_GANG) ]);
	}

	if(g_capture[C_STATUS])
		GangZoneFlashForPlayer(playerid, GetGangZoneData(g_capture[C_GANG_ZONE], GZ_ZONE), gang_zone_colors[ g_capture[C_ATTACK_TEAM] ]);
}

stock UpdateGangZone(idx)
{
	if(!GetGangZoneData(idx, GZ_GANG))
	{
		new area_players[3];

		foreach(new i : Player)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(!IsPlayerInDynamicArea(i, GetGangZoneData(idx, GZ_AREA))) continue;
			else if(!(TEAM_GANG_GROVE <= GetPlayerTeamEx(i) <= TEAM_GANG_AZTECAS)) continue;

			area_players[ GetPlayerTeamEx(i) - TEAM_GANG_GROVE ] ++;
		}

		for(new i; i < 4; i++)
		{
			if(area_players[i] < MIN_PLAYERS_FOR_CAPTURE) continue;

			SetGangZoneData(idx, GZ_GANG, i + 1);
			SaveGangZone(idx);

			GangZoneShowForAll(GetGangZoneData(idx, GZ_ZONE), gang_zone_colors[i + 1]);

			new fmt_text[50];

			format(fmt_text, sizeof fmt_text, "%s захватили новую территорию", GetTeamName(i + TEAM_GANG_GROVE));
			SendMessageToGang(fmt_text, 0xFF5533FF);

			UpdateGangRepository(i);

			break;
		}
	}
}

stock SaveGangZone(idx)
{
	new query[55];

	mysql_format(mysql, query, sizeof query, "UPDATE gang_zones SET fraction=%d WHERE id=%d", GetGangZoneData(idx, GZ_GANG), idx + 1);
	mysql_query(mysql, query, false);
}

stock GetGangZonesCount(team)
{
	new count;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(GetGangZoneData(idx, GZ_GANG) != team) continue;

		count ++;
	}

	return count;
}

// ------------------------------------------
public: LoadGangRepositories()
{
	new idx;
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM gang_repositories", true);
	rows = cache_num_rows();

	if(rows > MAX_GZ)
	{
		rows = MAX_GZ;
		print("[GangRepositories]: DB rows > MAX_GANG_REPOSITORIES");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetGangRepositoryData(idx, GR_GANG, 		cache_get_field_content_int(idx, "id"));
		SetGangRepositoryData(idx, GR_METALL, 		cache_get_field_content_int(idx, "metall"));
		SetGangRepositoryData(idx, GR_AMMO, 		cache_get_field_content_int(idx, "ammo"));
		SetGangRepositoryData(idx, GR_DRUGS, 		cache_get_field_content_int(idx, "drugs"));
		SetGangRepositoryData(idx, GR_MONEY, 		cache_get_field_content_int(idx, "money"));

		SetGangRepositoryData(idx, GR_LOCK, 		bool: cache_get_field_content_int(idx, "lock"));

		new fmt_text[330],
			gang_id = GetGangRepositoryData(idx, GR_GANG);


		format
		(
			fmt_text, sizeof fmt_text,
			"Склад\n\
			%s\n\n\
			{FFFFFF}Наркотики: {ff9900}%d из 20000 г\n\
			{FFFFFF}Патроны: {ff9900}%d из 50000 шт\n\
			{FFFFFF}Металл: {ff9900}%d из 6000 кг\n\
			{FFFFFF}Деньги: {3366FF}$%d\n\n\
			%s\
			",
			GetTeamName(idx + TEAM_GANG_GROVE),
			GetGangRepositoryData(idx, GR_DRUGS),
			GetGangRepositoryData(idx, GR_AMMO),
			GetGangRepositoryData(idx, GR_METALL),
			GetGangRepositoryData(idx, GR_MONEY),
			GetGangRepositoryData(idx, GR_LOCK) ? "{66CC33}Открыт" : "{FF3300}Закрыт"
		);


		g_gang_repository[idx][GR_LABEL] = CreateDynamic3DTextLabel
		(
			fmt_text,
			0xFFFFFFFF,
			GetTeamData(idx + TEAM_GANG_GROVE, O_REPOSITORY_POS)[0],
			GetTeamData(idx + TEAM_GANG_GROVE, O_REPOSITORY_POS)[1],
			GetTeamData(idx + TEAM_GANG_GROVE, O_REPOSITORY_POS)[2] + 1.5,
			10.0
		);

		g_gang_repository[idx][GR_PICKUP] = CreatePickup
		(
			1239,
			23,
			GetTeamData(idx + TEAM_GANG_GROVE, O_REPOSITORY_POS)[0],
			GetTeamData(idx + TEAM_GANG_GROVE, O_REPOSITORY_POS)[1],
			GetTeamData(idx + TEAM_GANG_GROVE, O_REPOSITORY_POS)[2],
			-1,
			PICKUP_ACTION_TYPE_GANG_REPOSIT,
			gang_id
		);
	}

	cache_delete(result);

	printf("[GangRepositories]: Склады банд загружены");
}

stock UpdateGangRepository(idx)
{
	new fmt_text[330];

	format
	(
		fmt_text, sizeof fmt_text,
		"Склад\n\
		%s\n\n\
		{FFFFFF}Наркотики: {ff9900}%d из 20000 г\n\
		{FFFFFF}Патроны: {ff9900}%d из 50000 шт\n\
		{FFFFFF}Металл: {ff9900}%d из 6000 кг\n\
		{FFFFFF}Деньги: {3366FF}$%d\n\n\
		%s\
		",
		GetTeamName(idx + TEAM_GANG_GROVE),
		GetGangRepositoryData(idx, GR_DRUGS),
		GetGangRepositoryData(idx, GR_AMMO),
		GetGangRepositoryData(idx, GR_METALL),
		GetGangRepositoryData(idx, GR_MONEY),
		GetGangRepositoryData(idx, GR_LOCK) ? "{66CC33}Открыт" : "{FF3300}Закрыт"
	);

	UpdateDynamic3DTextLabelText(GetGangRepositoryData(idx, GR_LABEL), 0xFFFFFFFF, fmt_text);
}

public: LoadOwnableCars()
{
	new rows, vehicleid;
	new Cache: result;

	result = mysql_query(mysql, "SELECT oc.*, IFNULL(a.name, 'None') AS owner_name FROM ownable_cars oc LEFT JOIN accounts a ON a.id = oc.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_OWNABLE_CARS)
	{
		rows = MAX_OWNABLE_CARS;
		print("[OwnableCars]: DB rows > MAX_OWNABLE_CARS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(idx, "model_id"));
		SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(idx, "color_1"));
		SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(idx, "color_2"));

		SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(idx, "pos_x"));
		SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(idx, "pos_y"));
		SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(idx, "pos_z"));
		SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(idx, "angle"));

		SetOwnableCarData(idx, OC_World, 		cache_get_field_content_int(idx, "World"));
		SetOwnableCarData(idx, OC_Int, 			cache_get_field_content_int(idx, "Inter"));

		cache_get_field_content(idx, "number", g_ownable_car[idx][OC_NUMBER], mysql, 8);

		SetOwnableCarData(idx, OC_KEY_IN, 		bool: cache_get_field_content_int(0, "key_in"));

		SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(0, "create_time"));

		SetOwnableCarData(idx, OC_PT_ENGINE, 	cache_get_field_content_int(0, "pt_engine"));
		SetOwnableCarData(idx, OC_PT_BRAKE, 	cache_get_field_content_int(0, "pt_brake"));
		SetOwnableCarData(idx, OC_PT_STABILITY, cache_get_field_content_int(0, "pt_stability"));
		// ----------------------------------------------------------------------------------------

		if(strlen(GetOwnableCarData(idx, OC_NUMBER)) != 6)
			strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

		vehicleid = CreateVehicle
		(
			GetOwnableCarData(idx, OC_MODEL_ID),
			GetOwnableCarData(idx, OC_POS_X),
			GetOwnableCarData(idx, OC_POS_Y),
			GetOwnableCarData(idx, OC_POS_Z),
			GetOwnableCarData(idx, OC_ANGLE),
			GetOwnableCarData(idx, OC_COLOR_1),
			GetOwnableCarData(idx, OC_COLOR_2),
			-1,
			0,
			VEHICLE_ACTION_TYPE_OWNABLE_CAR,
			idx
		);
		LinkVehicleToInterior(vehicleid, GetOwnableCarData(idx, OC_Int));
		SetVehicleVirtualWorld(vehicleid, GetOwnableCarData(idx, OC_World));
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
			SetVehicleParam(vehicleid, V_LOCK, bool: cache_get_field_content_int(idx, "status"));

			SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(idx, "mileage"));
		}
	}
	g_ownable_car_loaded = rows;
	cache_delete(result);

	printf("[OwnableCars]: Личных авто загружено: %d", g_ownable_car_loaded);
}

public: LoadOwnableCar(oc_id)
{
	if(g_ownable_car_loaded + 1 > MAX_OWNABLE_CARS)
	{
		print("[OwnableCars]: Ошибка в загрузке. Превышен лимит личного транспорта (MAX_OWNABLE_CARS)");
		return -1;
	}

	new query[55],
		Cache: result,
		vehicleid;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE id='%d' LIMIT 1", oc_id);
	result = mysql_query(mysql, query, true);

	new idx = GetFreeOwnableCarID();

	SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(0, "id"));
	SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(0, "owner_id"));

	SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(0, "model_id"));
	SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(0, "color_1"));
	SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(0, "color_2"));

	SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(0, "pos_x"));
	SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(0, "pos_y"));
	SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(0, "pos_z"));
	SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(0, "angle"));

	cache_get_field_content(0, "number", g_ownable_car[idx][OC_NUMBER], mysql, 8);

	SetOwnableCarData(idx, OC_KEY_IN, 		bool: cache_get_field_content_int(0, "key_in"));

	SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(0, "create_time"));

	SetOwnableCarData(idx, OC_FUEL, 		cache_get_field_content_float(0, "fuel"));

	SetOwnableCarData(idx, OC_PT_ENGINE, 	cache_get_field_content_int(0, "pt_engine"));
	SetOwnableCarData(idx, OC_PT_BRAKE, 	cache_get_field_content_int(0, "pt_brake"));
	SetOwnableCarData(idx, OC_PT_STABILITY, cache_get_field_content_int(0, "pt_stability"));

	SetOwnableCarData(idx, OC_World, cache_get_field_content_int(0, "World"));
	SetOwnableCarData(idx, OC_Int, cache_get_field_content_int(0, "Inter"));


	// cache_get_field_content(0, "owner_name", g_ownable_car[idx][OC_OWNER_NAME], mysql, 21);

	// ----------------------------------------------------------------------------------------

	if(strlen(GetOwnableCarData(idx, OC_NUMBER)) != 6)
	strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);
 	vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID),
		GetOwnableCarData(idx, OC_POS_X),
		GetOwnableCarData(idx, OC_POS_Y),
		GetOwnableCarData(idx, OC_POS_Z),
		GetOwnableCarData(idx, OC_ANGLE),
		GetOwnableCarData(idx, OC_COLOR_1),
		GetOwnableCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_OWNABLE_CAR,
		idx
	);
	SetVehicleParam(vehicleid, V_ENGINE, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF);

	LinkVehicleToInterior(vehicleid, GetOwnableCarData(idx, OC_World));
	SetVehicleVirtualWorld(vehicleid, GetOwnableCarData(idx, OC_Int));

	printf("WORLD %i Int %i",GetOwnableCarData(idx, OC_World),GetOwnableCarData(idx, OC_Int));

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
		SetVehicleParam(vehicleid, V_LOCK, bool: cache_get_field_content_int(0, "status"));

		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(0, "mileage"));

		SetVehicleData(vehicleid, V_FUEL, cache_get_field_content_float(0, "fuel"));

		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());
		SetVehicleData(vehicleid, V_HEALTH, cache_get_field_content_float(0, "health"));

		// SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, V_HEALTH));
	}

	cache_delete(result);

	LoadOwnableCarTrunk(vehicleid);

	return 1;
}

stock GetFreeOwnableCarID()
{
	for(new idx; idx < sizeof g_ownable_car; idx ++)
	{
		if(GetOwnableCarData(idx, OC_CREATE)) continue;

		return idx;
	}

	return -1;
}

stock UnloadPlayerOwnableCar(playerid, bool: ignore_time = false)
{
	new vehicleid = GetPlayerOwnableCar(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
		return -1;
	}

	if((GetVehicleData(vehicleid, V_LAST_LOAD_TIME) > gettime() - 300) && !ignore_time)
	{
		return 0;
	}

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	SetOwnableCarData(index, OC_CREATE, 0);

	DestroyVehicleLabel(vehicleid);

	DestroyVehicle(vehicleid);
	UnloadOwnableCarTrunk(vehicleid);

	SetVehicleData(vehicleid, V_LAST_LOAD_TIME, 0);

	SetPlayerData(playerid, P_OWNABLE_CAR, INVALID_VEHICLE_ID);

	foreach(new idx : Player)
	{
		if(!IsPlayerConnected(idx)) continue;
		else if(!IsPlayerLogged(idx)) continue;
		else if(GetPlayerAllowedCar(idx) != vehicleid) continue;

		if(ignore_time)
			SendClientMessage(idx, 0xFF5533FF, "Владелец доверенного Вам транспорта отключился. Транспорт выгружен с сервера");
		else
			SendClientMessage(idx, 0xFF5533FF, "Владелец доверенного Вам транспорта выгрузил транспорт с сервера");

		SetPlayerData(idx, P_ALLOWED_CAR, INVALID_VEHICLE_ID);
	}

	return 1;
}

public: LoadTrunks()
{
	new Cache: result, rows;
	new vehicleid, slot, buffer;

	result = mysql_query(mysql, "SELECT * FROM trunks ORDER BY owner_id ASC, id ASC", true);
	rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		vehicleid = GetOwnableCarBySqlID(cache_get_field_content_int(idx, "owner_id"));
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			for(slot = 0; slot < MAX_VEHICLE_TRUNK_SLOTS; slot ++)
			{
				if(GetTrunkData(vehicleid, slot, VT_SQL_ID)) continue;

				SetTrunkData(vehicleid, slot, VT_SQL_ID,		cache_get_field_content_int(idx, "id"));
				SetTrunkData(vehicleid, slot, VT_ITEM_TYPE, 	cache_get_field_content_int(idx, "item_id"));
				SetTrunkData(vehicleid, slot, VT_ITEM_AMOUNT, 	cache_get_field_content_int(idx, "amount"));
				SetTrunkData(vehicleid, slot, VT_ITEM_VALUE,	cache_get_field_content_int(idx, "value"));
			}
			buffer ++;
		}
	}

	cache_delete(result);
	printf("[Trunks]: Предметов загружено: %d", buffer);
}

public: LoadOwnableCarTrunk(vehicleid)
{
	new query[60],
		slot,
		index,
		rows,
		Cache: result;

	index = GetVehicleData(vehicleid, V_ACTION_ID);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM trunks WHERE oc_id='%d' ORDER BY id ASC", index);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows > MAX_VEHICLE_TRUNK_SLOTS)
		rows = MAX_VEHICLE_TRUNK_SLOTS;

	for(slot = 0; slot < rows; slot ++)
	{
		if(GetTrunkData(vehicleid, slot, VT_SQL_ID)) continue;

		SetTrunkData(vehicleid, slot, VT_SQL_ID,		cache_get_field_content_int(slot, "id"));
		SetTrunkData(vehicleid, slot, VT_ITEM_TYPE, 	cache_get_field_content_int(slot, "item_id"));
		SetTrunkData(vehicleid, slot, VT_ITEM_AMOUNT, 	cache_get_field_content_int(slot, "amount"));
		SetTrunkData(vehicleid, slot, VT_ITEM_VALUE,	cache_get_field_content_int(slot, "value"));
	}

	cache_delete(result);
}

stock UnloadOwnableCarTrunk(vehicleid)
{
	for(new slot = 0; slot < MAX_VEHICLE_TRUNK_SLOTS; slot ++)
	{
		RemoveTrunkItem(vehicleid, slot);
	}
}

public: LoadHotels()
{
	new query[64], idx;
	new Cache: result, rows;
	new hotel_id, room_id;

	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') AS owner_name FROM hotels h LEFT JOIN accounts a ON a.id = h.owner_id ORDER BY h.hotel_id ASC, h.id ASC", true);
	rows = cache_num_rows();

	if(rows > MAX_HOTELS * MAX_HOTEL_ROOMS)
	{
		rows = MAX_HOTELS * MAX_HOTEL_ROOMS;
		print("[Hotels]: DB rows > MAX_HOTELS * MAX_HOTEL_ROOMS");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		hotel_id = cache_get_field_content_int(idx, "hotel_id");
		if(0 <= hotel_id <= MAX_HOTELS-1)
		{
			room_id = g_hotel_rooms_loaded[hotel_id];
			if(0 <= room_id <= MAX_HOTEL_ROOMS-1)
			{
				SetHotelData(hotel_id, room_id, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
				SetHotelData(hotel_id, room_id, H_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
				SetHotelData(hotel_id, room_id, H_RENT_DATE, 	cache_get_field_content_int(idx, "rent_time"));
				SetHotelData(hotel_id, room_id, H_STATUS, 		bool: cache_get_field_content_int(idx, "status"));

				cache_get_field_content(idx, "owner_name", g_hotel[hotel_id][room_id][H_OWNER_NAME], mysql, 21);

				// ----------------------------------------------------------------------------------------------
				if(IsHotelRoomOwned(hotel_id, room_id) && !strcmp(GetHotelData(hotel_id, room_id, H_OWNER_NAME), "None", true))
				{
					SetHotelData(hotel_id, room_id, H_OWNER_ID, 0);

					mysql_format(mysql, query, sizeof query, "UPDATE hotels SET owner_id=0 WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_SQL_ID));
					mysql_query(mysql, query, false);
				}

				if(!IsHotelRoomOwned(hotel_id, room_id))
				{
					SetHotelData(hotel_id, room_id, H_STATUS, false);
				}
				g_hotel_rooms_loaded[hotel_id] ++;
			}
		}
	}
	cache_delete(result);

	// ----------------------------------
	CreatePickup(1318, 23, 2227.9436,-1150.6353,1029.7969, -1);
	CreatePickup(1318, 23, 2241.1584,-1153.9369,1029.8043, -1);

	g_hotel_lift_CP[0] = CreateDynamicCP(2241.1584,-1153.9369,1029.8043, 1.0, _, _, _, 5.0);
	g_hotel_lift_CP[1] = CreateDynamicCP(2227.9436,-1150.6353,1029.7969, 1.0, _, _, _, 5.0);

	// ----------------------------------

	for(idx = 0; idx < 12; idx ++)
	{
		CreatePickup(1277, 23, g_hotel_room_pos[idx][0], g_hotel_room_pos[idx][1], g_hotel_room_pos[idx][2], -1, PICKUP_ACTION_TYPE_HOTEL_ROOM, idx);

		format(query, sizeof query, "Комната\n{FFFFFF}Номер: %d \n\n\n\n\n {1E90FF}Войти в комнату /enter", idx + 1);
		CreateDynamic3DTextLabel(query, 0x1E90FFFF, g_hotel_room_pos[idx][0], g_hotel_room_pos[idx][1], g_hotel_room_pos[idx][2] + 1.4, 6.0);
	}

	for(idx = 0; idx < MAX_HOTEL_FLOORS; idx ++)
	{
		format(query, sizeof query, "Этаж: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0xffff00FF, 2241.1584,-1153.9369,1029.8043 + 1.3, 8.0, _, _, _, _, idx + 1);
	}

	// ----------------------------------
	for(idx = 0; idx < MAX_HOTELS; idx ++)
	{
		if(g_hotel_rooms_loaded[idx])
		{
			g_hotel_loaded ++;
		}
	}
	printf("[Hotels]: Отелей загружено: %d / Номеров: %d", g_hotel_loaded, rows);
}

public: LoadFamily()
{
	new idx;
	//new query[85];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM family", true);
	rows = cache_num_rows();

	if(rows > MAX_FAMILY)
	{
		rows = MAX_FAMILY;
		print("[Family]: DB rows > MAX_FAMILY");
	}


	for(idx = 0; idx < rows; idx ++)
	{
		SetFamilyData(idx, F_SQL_ID, 		cache_get_field_content_int(idx, "id"));

		cache_get_field_content(idx, "name", g_family[idx][F_NAME], mysql, 64);

		SetFamilyData(idx, F_USER_ID,		cache_get_field_content_int(idx, "u_id"));
		SetFamilyData(idx, F_TIME,			cache_get_field_content_int(idx, "time"));
		SetFamilyData(idx, F_COLOR,			cache_get_field_content_int(idx, "color"));

		SetFamilyData(idx, F_LEVEL,			cache_get_field_content_int(idx, "level"));
		SetFamilyData(idx, F_EXP,			cache_get_field_content_int(idx, "exp"));

		cache_get_field_content(idx, "rank1", g_family[idx][F_RANK1], mysql, 32);
		cache_get_field_content(idx, "rank2", g_family[idx][F_RANK2], mysql, 32);
		cache_get_field_content(idx, "rank3", g_family[idx][F_RANK3], mysql, 32);
		cache_get_field_content(idx, "rank4", g_family[idx][F_RANK4], mysql, 32);
		cache_get_field_content(idx, "rank5", g_family[idx][F_RANK5], mysql, 32);
		cache_get_field_content(idx, "rank6", g_family[idx][F_RANK6], mysql, 32);
		cache_get_field_content(idx, "rank7", g_family[idx][F_RANK7], mysql, 32);
		cache_get_field_content(idx, "rank8", g_family[idx][F_RANK8], mysql, 32);
		cache_get_field_content(idx, "rank9", g_family[idx][F_RANK9], mysql, 32);
		cache_get_field_content(idx, "rank10", g_family[idx][F_RANK10], mysql, 32);

		SetFamilyData(idx, F_MONEY,			cache_get_field_content_int(idx, "money"));
		SetFamilyData(idx, F_DRUGS,			cache_get_field_content_int(idx, "drugs"));
		SetFamilyData(idx, F_TREE,			cache_get_field_content_int(idx, "tree"));
		SetFamilyData(idx, F_METAL,			cache_get_field_content_int(idx, "metal"));
		SetFamilyData(idx, F_AMMO,			cache_get_field_content_int(idx, "ammo"));
		SetFamilyData(idx, F_HOUSE_ID,		cache_get_field_content_int(idx, "house_id"));

		// -------------------------
	}
	g_family_loaded = rows;
	cache_delete(result);

    printf("[Family]: Семьи : %d", g_family_loaded);
}

/*public: LoadGift()
{
	new idx;
	//new query[85];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM gift", true);
	rows = cache_num_rows();

	if(rows > MAX_GIFT)
	{
		rows = MAX_GIFT;
		print("[Gift]: DB rows > MAX_GIFT");
	}


	for(idx = 0; idx < rows; idx ++)
	{
		SetGiftData(idx, G_SQL_ID, 		cache_get_field_content_int(idx, "id"));

		SetGiftData(idx, G_POS_X,		cache_get_field_content_float(idx, "x"));
		SetGiftData(idx, G_POS_Y,		cache_get_field_content_float(idx, "y"));
		SetGiftData(idx, G_POS_Z,		cache_get_field_content_float(idx, "z"));

	 	CreatePickup
		(
			954,
			23,
			g_gift[idx][G_POS_X], g_gift[idx][G_POS_Y], g_gift[idx][G_POS_Z],
			-1,
			PICKUP_ACTION_TYPE_GIFT,
			idx
		);
	}


	g_gift_loaded = rows;
	cache_delete(result);

    printf("[Gift]: Подковы : %d", g_gift_loaded);
}*/

public: LoadHouses()
{
	new idx;
	new query[85], buffer[2];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses h LEFT JOIN accounts a ON a.id=h.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_HOUSES)
	{
		rows = MAX_HOUSES;
		print("[Houses]: DB rows > MAX_HOUSES");
	}

	for(idx = 0; idx < rows; idx ++)
	{
		SetHouseData(idx, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetHouseData(idx, H_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_house[idx][H_NAME], mysql, 20);

		SetHouseData(idx, H_CITY,			cache_get_field_content_int(idx, "city"));
		SetHouseData(idx, H_ZONE,			cache_get_field_content_int(idx, "zone"));
		SetHouseData(idx, H_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));

		SetHouseData(idx, H_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetHouseData(idx, H_PRICE,			cache_get_field_content_int(idx, "price")*3);
		SetHouseData(idx, H_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price")*3);
		SetHouseData(idx, H_TYPE,			cache_get_field_content_int(idx, "type"));
		SetHouseData(idx, H_LOCK_STATUS,	bool: cache_get_field_content_int(idx, "lock"));

		SetHouseData(idx, H_POS_X,			cache_get_field_content_float(idx, "x"));
		SetHouseData(idx, H_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetHouseData(idx, H_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetHouseData(idx, H_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetHouseData(idx, H_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetHouseData(idx, H_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetHouseData(idx, H_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));

		SetHouseData(idx, H_CAR_POS_X,		cache_get_field_content_float(idx, "car_x"));
		SetHouseData(idx, H_CAR_POS_Y,		cache_get_field_content_float(idx, "car_y"));
		SetHouseData(idx, H_CAR_POS_Z,		cache_get_field_content_float(idx, "car_z"));
		SetHouseData(idx, H_CAR_ANGLE,		cache_get_field_content_float(idx, "car_angle"));

		SetHouseData(idx, H_STORE_X,		cache_get_field_content_float(idx, "store_x"));
		SetHouseData(idx, H_STORE_Y,		cache_get_field_content_float(idx, "store_y"));
		SetHouseData(idx, H_STORE_Z,		cache_get_field_content_float(idx, "store_z"));

		SetHouseData(idx, H_STORE_METALL,	cache_get_field_content_int(idx, "store_metall"));
		SetHouseData(idx, H_STORE_DRUGS,	cache_get_field_content_int(idx, "store_drugs"));
		SetHouseData(idx, H_STORE_WEAPON,	cache_get_field_content_int(idx, "store_weapon"));
		SetHouseData(idx, H_STORE_AMMO,		cache_get_field_content_int(idx, "store_ammo"));
		SetHouseData(idx, H_STORE_SKIN,		cache_get_field_content_int(idx, "store_skin"));
		SetHouseData(idx, H_MEBEL_1,		cache_get_field_content_int(idx, "mebel_1"));

		SetHouseData(idx, H_FAMILY_ID,		cache_get_field_content_int(idx, "family_id"));

		if(GetHouseData(idx, H_FAMILY_ID) != 0)
		{
		    g_house[idx][H_OWNER_NAME] = GetFamilyData(GetHouseData(idx, H_FAMILY_ID), F_NAME);
		}
		else
		{
		    cache_get_field_content(idx, "owner_name", g_house[idx][H_OWNER_NAME], mysql, 21);
		}

		// -------------------------
		SetHouseData(idx, H_STORE_LABEL, Text3D:-1);
		if(GetHouseData(idx, H_MEBEL_1))
		{
		    new fmt_text[128];
			format(fmt_text, sizeof(fmt_text), "%d Load House",GetHouseData(idx, H_SQL_ID)-1);
			printf(fmt_text);
		    CreateMebel(GetHouseData(idx, H_TYPE), idx);
		}
		buffer[0] = GetHouseData(idx, H_TYPE);
		if(!strlen(GetHouseData(idx, H_NAME)))
		format(g_house[idx][H_NAME], 20, GetHouseTypeInfo(buffer[0], HT_NAME), 0);


		if(GetHouseData(idx, H_CITY) == -1 || GetHouseData(idx, H_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));
			buffer[1] = Get2DZone(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));

			SetHouseData(idx, H_CITY, buffer[0]);
			SetHouseData(idx, H_ZONE, buffer[1]);

			mysql_format(mysql, query, sizeof query, "UPDATE houses SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetHouseData(idx, H_SQL_ID));
			mysql_query(mysql, query, false);
		}
		if(IsHouseOwned(idx) && IsHouseFamily(idx) && !strcmp(GetHouseData(idx, H_OWNER_NAME), "None", true))
		{
			SetHouseData(idx, H_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE houses SET owner_id=0,improvements=0 WHERE id=%d", GetHouseData(idx, H_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsHouseOwned(idx) && !IsHouseFamily(idx))
		{
			SetHouseData(idx, H_IMPROVEMENTS, 	0);
			SetHouseData(idx, H_LOCK_STATUS, 	false);
		}
		UpdateHouse(idx);

		HouseHealthInit(idx);
		HouseStoreInit(idx);
	}
	g_house_loaded = rows;
	cache_delete(result);

	printf("[Houses]: Домов загружено: %d", g_house_loaded);
}

public: LoadHousesRenters()
{
	new sql_id;
	new owner_id;
	new house_id;
	new room_id;
	new rent_time;
	new time;
	new owner_name[21];

	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses_renters h LEFT JOIN accounts a ON a.id=h.owner_id", true);
	rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		sql_id = 	cache_get_field_content_int(idx, "id");

		owner_id = 	cache_get_field_content_int(idx, "owner_id");
		house_id = 	cache_get_field_content_int(idx, "house_id");
		room_id =	cache_get_field_content_int(idx, "room_id");
		rent_time =	cache_get_field_content_int(idx, "rent_time");
		time = 		cache_get_field_content_int(idx, "time");

		cache_get_field_content(idx, "owner_name", owner_name, mysql, 21);
		if(!strlen(owner_name))
			owner_name[0] = '\1';

		CallLocalFunction("HouseRenterInit", "iiiiiis", sql_id, owner_id, house_id, room_id, rent_time, time, owner_name);
	}
	cache_delete(result);

	printf("[Houses]: Арендаторов загружено: %d", rows);
}

public: HouseRenterInit(id, owner_id, house_id, room_id, rent_time, time, owner_name[])
{
	new houseid = GetHouseIndexBySQLID(house_id);
	if(houseid != -1)
	{
		if(0 <= room_id <= MAX_HOUSE_ROOMS-1)
		{
			SetHouseRenterInfo(houseid, room_id, HR_SQL_ID, id);
			SetHouseRenterInfo(houseid, room_id, HR_OWNER_ID, owner_id);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_DATE, rent_time);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_TIME, time);

			format(g_house_renters[houseid][room_id][HR_OWNER_NAME], 21, owner_name, 0);

			AddHouseRentersCount(houseid, +, 1);
		}
	}
}

public: ShowPlayerHouseInfo(playerid, houseid)
{
	if(0 <= houseid <= g_house_loaded-1)
	{
		if(GetPlayerInHouse(playerid) == -1)
		{
			SetPlayerUseListitem(playerid, houseid);

			new fmt_str[60];
			new string[256];
			new type = GetHouseData(houseid, H_TYPE);

            if(IsHouseFamily(houseid))
            {
				format(fmt_str, sizeof fmt_str, "{FFFFFF}Владелец:\t\t\t{33CCFF}%s\n\n", GetFamilyData(GetHouseData(houseid, H_FAMILY_ID), F_NAME));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Номер дома:\t\t\t%d\n", houseid);
				strcat(string, fmt_str);

				if(!IsHouseFamily(houseid)) strcat(string, "\n");

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Тип:\t\t\t\t%s\n", GetHouseTypeInfo(type, HT_NAME));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Количество комнат:\t\t%d\n", GetHouseTypeInfo(type, HT_ROOMS));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Стоимость:\t\t\t$%d\n", GetHouseData(houseid, H_PRICE));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Ежедневная квартплата:\t$%d", GetHouseData(houseid, H_RENT_PRICE));
				strcat(string, fmt_str);

				if(IsHouseFamily(houseid))
				{
					if(GetHouseData(houseid, H_IMPROVEMENTS) >= 4)
					{
						format(fmt_str, sizeof fmt_str, "{FFFFFF}($%d)", GetHouseData(houseid, H_RENT_PRICE) / 2);
						strcat(string, fmt_str);
					}
					Dialog(playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "Дом занят", string, "Войти", "Отмена");
				}
				else Dialog(playerid, DIALOG_HOUSE_BUY, DIALOG_STYLE_MSGBOX, "Дом свободен", string, "Купить", "Отмена");
				return 1;
            }
			if(IsHouseOwned(houseid))
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}Владелец:\t\t\t{33CCFF}%s\n\n", GetHouseData(houseid, H_OWNER_NAME));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Номер дома:\t\t\t%d\n", houseid);
				strcat(string, fmt_str);

				if(!IsHouseOwned(houseid)) strcat(string, "\n");

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Тип:\t\t\t\t%s\n", GetHouseTypeInfo(type, HT_NAME));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Количество комнат:\t\t%d\n", GetHouseTypeInfo(type, HT_ROOMS));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Стоимость:\t\t\t$%d\n", GetHouseData(houseid, H_PRICE));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Ежедневная квартплата:\t$%d", GetHouseData(houseid, H_RENT_PRICE));
				strcat(string, fmt_str);

				if(IsHouseOwned(houseid))
				{
					if(GetHouseData(houseid, H_IMPROVEMENTS) >= 4)
					{
						format(fmt_str, sizeof fmt_str, "{FFFFFF}($%d)", GetHouseData(houseid, H_RENT_PRICE) / 2);
						strcat(string, fmt_str);
					}
					Dialog(playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "Дом занят", string, "Войти", "Отмена");
				}
				else Dialog(playerid, DIALOG_HOUSE_BUY, DIALOG_STYLE_MSGBOX, "Дом свободен", string, "Купить", "Отмена");
			}
			else
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}Номер дома:\t\t\t%d\n", houseid);
				strcat(string, fmt_str);

				if(!IsHouseOwned(houseid)) strcat(string, "\n");

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Тип:\t\t\t\t%s\n", GetHouseTypeInfo(type, HT_NAME));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Количество комнат:\t\t%d\n", GetHouseTypeInfo(type, HT_ROOMS));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Стоимость:\t\t\t$%d\n", GetHouseData(houseid, H_PRICE));
				strcat(string, fmt_str);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}Ежедневная квартплата:\t$%d", GetHouseData(houseid, H_RENT_PRICE));
				strcat(string, fmt_str);

				if(IsHouseOwned(houseid))
				{
					if(GetHouseData(houseid, H_IMPROVEMENTS) >= 4)
					{
						format(fmt_str, sizeof fmt_str, "{FFFFFF}($%d)", GetHouseData(houseid, H_RENT_PRICE) / 2);
						strcat(string, fmt_str);
					}
					Dialog(playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "Дом занят", string, "Войти", "Отмена");
				}
				else Dialog(playerid, DIALOG_HOUSE_BUY, DIALOG_STYLE_MSGBOX, "Дом свободен", string, "Купить", "Отмена");
			}
		}
	}
	return 1;
}

public: ShowPlayerHouseDialog(playerid, operationid)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		switch(operationid)
		{
			case HOUSE_OPERATION_PARAMS:
			{
				Dialog
				(
					playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
					"Изменение параметров дома",
					"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
					"2. Улучшить дом\n"\
					"3. Доставить транспорт в гараж {ffff00}550$\n"\
					"4. Отметить транспорт на GPS Навигаторе.\n"\
					"5. Список арендаторов\n"\
					"{ffff00}5. NEW {FFFFFF}Сменить интерьер дома\n",
					"Выбрать", "Назад"
				);
			}
			case HOUSE_OPERATION_LOCK:
			{
				if(GetHouseData(houseid, H_LOCK_STATUS))
				{
					SetHouseData(houseid, H_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x32a44bFF, "Дом открыт");
				}
				else
				{
					SetHouseData(houseid, H_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xCECECEFF, "Дом закрыт");
				}

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE `houses` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				new string[512];

				new str_numeric[14 + 1];
				new i_level = GetHouseData(houseid, H_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_house_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "{FFFFFF}%d уровень:\t%s\t\t", idx + 1, g_house_improvements[idx][I_NAME]);

					switch(idx)
					{
						case 1,4,5:
							strcat(fmt_str, "\t");

						case 6:
							strcat(fmt_str, "\t\t");
					}

					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);

						valfmt(str_numeric, g_house_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "{FFFFFF}%s$", str_numeric);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_HOUSE_IMPROVEMENTS, DIALOG_STYLE_LIST, "Улучшения для дома", string, "Купить", "Назад");
			}
			case HOUSE_OPERATION_CAR_DELIVERY:
			{
				if(GetHouseData(houseid, H_IMPROVEMENTS) != 6)
				    return SendClientMessage(playerid, -1,"У вас нет гаража!");
				if(IsPlayerDriver(playerid)) return SendClientMessage(playerid,0xCECECEFF,"Невозможно использовать в транспорте");
				new vehicleid = GetPlayerOwnableCar(playerid);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					new price = 550;
					if(GetPlayerMoneyEx(playerid) >= price)
					{
						GivePlayerMoneyEx(playerid, -price, "Доставка ТС в гараж (/home)", true, true);
						SetVehiclePos
						(
							vehicleid,
						 	1697.1901,
						 	1415.8605,
						 	1415.6683
						);
						SetVehicleZAngle(vehicleid, 0);
						SetVehicleParam(vehicleid, V_ENGINE, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF);

						LinkVehicleToInterior(vehicleid, GetPlayerData(playerid, P_HOUSE) + 10);
						SetVehicleVirtualWorld(vehicleid, GetPlayerData(playerid, P_HOUSE) + 10);

						return SendClientMessage(playerid, 0x3399FFFF, "Транспорт был доставлен к Вашему дому");
						}
					else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
					}
				else SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");

				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_CAR_GPS:
			{
				if(!cmd::getmycar(playerid, ""))
				{
					CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case HOUSE_OPERATION_RENTERS:
			{
				if(GetHouseRentersCount(houseid) > 0)
				{
					new type = GetHouseData(houseid, H_TYPE);
					new rooms = GetHouseTypeInfo(type, HT_ROOMS);

					new fmt_str[21 + 1];
					new string[MAX_HOUSE_ROOMS * (sizeof fmt_str) + 1];

					for(new idx, count; idx < rooms; idx ++)
					{
						if(!IsHouseRoomOwned(houseid, idx)) continue;

						format(fmt_str, sizeof fmt_str, "{FFFFFF}%s\n", GetHouseRenterInfo(houseid, idx, HR_OWNER_NAME));
						strcat(string, fmt_str);

						SetPlayerListitemValue(playerid, count ++, idx);
					}
					Dialog(playerid, DIALOG_HOUSE_RENTERS, DIALOG_STYLE_LIST, "Список арендаторов", string, "Выбрать", "Назад");
				}
				else
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX,
						"Список арендаторов",
						"{FFFFFF}В Вашем доме, кроме Вас, сейчас никто не проживает",
						"Назад", ""
					);
				}
			}
			case HOUSE_OPERATION_TYPE:
			{
				new fmt_str[75];
				new string[512];

				new str_numeric[14 + 1];
				new i_level = GetHouseData(houseid, H_TYPE);

				for(new idx; idx < sizeof g_house_type-1; idx ++)
				{
					format(fmt_str, sizeof fmt_str, "{FFFFFF}%d уровень:\t%s\t\t", idx + 1, g_house_type[idx][HT_NAME]);

					strcat(fmt_str, "\t");

					if(i_level == idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level != idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);

						valfmt(str_numeric, g_house_type[idx][HT_PRICE]);
						format(fmt_str, sizeof fmt_str, "{FFFFFF}%s$", str_numeric);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_HOUSE_TYPE, DIALOG_STYLE_LIST, "Смена интерьера", string, "Купить", "Назад");
			}
		}
	}
	return 1;
}

public: UpdateRealtorHomeInfo()
{
	new count = -1;
	new fmt_str[128];
	new free_houses = GetFreeHousesCount();

	new new_line = floatround((float(free_houses) / 10) + 2, floatround_ceil);
	if(new_line > 28)
	{
		new_line = 28;
	}

	g_house_realtor_list = "{FFFFFF}";
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;
		if(++count > new_line)
		{
			count = -1;
		}

		format(fmt_str, sizeof fmt_str, "%d%s", idx, count != -1 ? ("\t") : ("\n"));
		strcat(g_house_realtor_list, fmt_str);
	}

	format
	(
		fmt_str, sizeof fmt_str,
		"Состояние недвижимости\n"\
		"{FFFFFF}(обновляется каждый час)\n\n"\
		"{FFFFFF}Куплено домов: {CECECE}%d\n"\
		"{FFFFFF}Свободно домов: {32a44b}%d",
		g_house_loaded - free_houses,
		free_houses
	);
	UpdateDynamic3DTextLabelText(g_house_realtor_label, 0xffff00FF, fmt_str);
}

public: UpdateHouseStore(houseid)
{
	if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"Шкаф\n"\
			"{FFFFFF}Металл: {6699FF}%d из 700 кг\n"\
			"{FFFFFF}Наркотики: {6699FF}%d из 2000 г\n"\
			"{FFFFFF}Оружие: {6699FF}%s\n"\
			"{FFFFFF}Патроны: {6699FF}%d из 3000 шт\n"\
			"{FFFFFF}Одежда: {CECECE}%s",
			GetHouseData(houseid, H_STORE_METALL),
			GetHouseData(houseid, H_STORE_DRUGS),
			GetHouseData(houseid, H_STORE_WEAPON) ? GetWeaponName(GetHouseData(houseid, H_STORE_WEAPON)) : ("нет"),
			GetHouseData(houseid, H_STORE_AMMO),
			GetHouseData(houseid, H_STORE_SKIN) ? ("есть") : ("нет")
		);
		UpdateDynamic3DTextLabelText(GetHouseData(houseid, H_STORE_LABEL), 0xFFFF00FF, fmt_str);
	}
}

public: EvictHouseRentersAll(houseid)
{
	new query[128];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE house=%d AND house_type=%d", GetHouseData(houseid, H_SQL_ID), HOUSE_TYPE_ROOM);
	mysql_tquery(mysql, query, "", "");

	mysql_format(mysql, query, sizeof query, "DELETE FROM houses_renters WHERE house_id=%d", GetHouseData(houseid, H_SQL_ID));
	mysql_tquery(mysql, query, "", "");

	for(new idx; idx < MAX_HOUSE_ROOMS; idx ++)
	{
		if(!IsHouseRoomOwned(houseid, idx)) continue;

		SetHouseRenterInfo(houseid, idx, HR_SQL_ID, 	0);
		SetHouseRenterInfo(houseid, idx, HR_OWNER_ID, 	0);
	}

	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) != houseid) continue;

		SetPlayerData(playerid, P_HOUSE, -1);
		SetPlayerData(playerid, P_HOUSE_ROOM, -1);
		SetPlayerData(playerid, P_HOUSE_TYPE, -1);

		SendClientMessage(playerid, 0x1E90FFFF, "Вы были выселены из дома");
	}
}
public: LoadBoard()
{
    new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM board", true);
	rows = cache_num_rows();
	if(rows > MAX_BOARD)
    {
        rows = MAX_BOARD;
		print("[BOARD]: DB rows > MAX_BOARD");
	}
	new fmt_text[110];
	for(new idx; idx < rows; idx ++)
	{
        g_radars_created ++;
	 	SetBoardData(idx, B_ID,	     cache_get_field_content_int(idx, "id", mysql));
	  	SetBoardData(idx, B_POS_X,	 cache_get_field_content_float(idx, "x", mysql));
	   	SetBoardData(idx, B_POS_Y,	 cache_get_field_content_float(idx, "y", mysql));
	   	SetBoardData(idx, B_POS_Z,	 cache_get_field_content_float(idx, "z", mysql));
	   	SetBoardData(idx, B_TEXT_X,	 cache_get_field_content_float(idx, "x_angle", mysql));
	   	SetBoardData(idx, B_TEXT_Y,	 cache_get_field_content_float(idx, "y_angle", mysql));
	   	SetBoardData(idx, B_TEXT_Z,	 cache_get_field_content_float(idx, "z_angle", mysql));
	    SetBoardData(idx, B_OWNER,	 cache_get_field_content_int(idx, "owner", mysql));
	    SetBoardData(idx, B_OBJECT,  cache_get_field_content_int(idx, "model", mysql));
	    cache_get_field_content(0, "text", g_board[idx][B_TEXT], mysql, 61);
	    g_board_created ++;
	    if(GetBoardData(idx, B_OWNER) == -1)
	    {
	        format(fmt_text, sizeof fmt_text, "- Щит № %d свободен -\n{FFFFFF}Вы можете занять его в здание Los-Santos Radio", idx);
		}
	    else format(fmt_text, sizeof fmt_text, "- Щит № %d занят -\n\n{FFFFFF}%e\n", GetBoardData(idx, B_ID), GetBoardData(idx, B_TEXT));
        SetBoardData(idx, B_OBJECT, CreateDynamicObject(GetBoardData(idx, B_OBJECT),GetBoardData(idx, B_POS_X),GetBoardData(idx, B_POS_Y),GetBoardData(idx, B_POS_Z),GetBoardData(idx, B_TEXT_X),GetBoardData(idx, B_TEXT_Y),GetBoardData(idx, B_TEXT_Z)));
		SetBoardData(idx, B_LABEL, CreateDynamic3DTextLabel(fmt_text, 0x1E90FFFF, GetBoardData(idx, B_POS_X),GetBoardData(idx, B_POS_Y),GetBoardData(idx, B_POS_Z)+5.7153, 50.0));
	}
	cache_delete(result);
	return 1;
}
public: LoadRadar()
{
    new Cache: result, rows;

	result = mysql_query(mysql, "SELECT * FROM radar", true);
	rows = cache_num_rows();
	if(rows > MAX_RADARS)
    {
        rows = MAX_BUSINESS;
		print("[Business]: DB rows > MAX_BUSINESS");
	}
	new fmt_text[110];
	for(new idx; idx < rows; idx ++)
	{
        g_radars_created ++;
	 	SetRadarData(idx, R_ID,	     cache_get_field_content_int(idx, "id", mysql));
	  	SetRadarData(idx, R_POS_X,	 cache_get_field_content_float(idx, "x", mysql));
	   	SetRadarData(idx, R_POS_Y,	 cache_get_field_content_float(idx, "y", mysql));
	   	SetRadarData(idx, R_POS_Z,	 cache_get_field_content_float(idx, "z", mysql));
	    SetRadarData(idx, R_LIMIT,	 cache_get_field_content_int(idx, "limit", mysql));
	    SetRadarData(idx, R_ZONE,	 CreateDynamicSphere(GetRadarData(idx, R_POS_X), GetRadarData(idx, R_POS_Y), GetRadarData(idx, R_POS_Z), 40.0)); //Iter_Add
	    format(fmt_text, sizeof fmt_text, "- Регистратор скорости №%d -\n\n{FFFFFF}Ограничение: %d км/ч\n", GetRadarData(idx, R_ID), GetRadarData(idx, R_LIMIT));
        //SetRadarData(idx, R_OBJECT, CreateDynamicObject(18880, GetRadarData(idx, R_POS_X), GetRadarData(idx, R_POS_Y), GetRadarData(idx, R_POS_Z),000.0000, 000.0000, 000.0000));
		SetRadarData(idx, R_LABEL,	CreateDynamic3DTextLabel(fmt_text, 0x1E90FFFF, GetRadarData(idx, R_POS_X), GetRadarData(idx, R_POS_Y), GetRadarData(idx, R_POS_Z)+5, 50.0));
	}
	cache_delete(result);
	return 1;
}
public: LoadBusinesses()
{
	new query[85], buffer[2];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT b.*, IFNULL(a.name, 'None') AS owner_name FROM business b LEFT JOIN accounts a ON a.id=b.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_BUSINESS)
	{
		rows = MAX_BUSINESS;
		print("[Business]: DB rows > MAX_BUSINESS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessData(idx, B_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetBusinessData(idx, B_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_business[idx][B_NAME], mysql, 24);

		SetBusinessData(idx, B_CITY,			cache_get_field_content_int(idx, "city"));
		SetBusinessData(idx, B_ZONE,			cache_get_field_content_int(idx, "zone"));
		SetBusinessData(idx, B_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetBusinessData(idx, B_PRODS,			cache_get_field_content_int(idx, "products"));
		SetBusinessData(idx, B_PROD_PRICE,		cache_get_field_content_int(idx, "prod_price"));
		SetBusinessData(idx, B_BALANCE,			cache_get_field_content_int(idx, "balance"));
		SetBusinessData(idx, B_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetBusinessData(idx, B_PRICE,			cache_get_field_content_int(idx, "price")*3);
		SetBusinessData(idx, B_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price")*3);

		SetBusinessData(idx, B_TYPE,			cache_get_field_content_int(idx, "type"));
		SetBusinessData(idx, B_INTERIOR,		cache_get_field_content_int(idx, "interior"));

		SetBusinessData(idx, B_ENTER_PRICE,		cache_get_field_content_int(idx, "enter_price"));
		SetBusinessData(idx, B_ENTER_MUSIC,		cache_get_field_content_int(idx, "enter_music"));

		SetBusinessData(idx, B_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));

		SetBusinessData(idx, B_POS_X,			cache_get_field_content_float(idx, "x"));
		SetBusinessData(idx, B_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetBusinessData(idx, B_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetBusinessData(idx, B_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetBusinessData(idx, B_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetBusinessData(idx, B_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetBusinessData(idx, B_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));

		SetBusinessData(idx, B_PRICE_1,			cache_get_field_content_int(idx, "price_1"));
		SetBusinessData(idx, B_PRICE_2,			cache_get_field_content_int(idx, "price_2"));
		SetBusinessData(idx, B_PRICE_3,			cache_get_field_content_int(idx, "price_3"));
		SetBusinessData(idx, B_PRICE_4,			cache_get_field_content_int(idx, "price_4"));
		SetBusinessData(idx, B_PRICE_5,			cache_get_field_content_int(idx, "price_5"));
		SetBusinessData(idx, B_PRICE_6,			cache_get_field_content_int(idx, "price_6"));
		SetBusinessData(idx, B_PRICE_7,			cache_get_field_content_int(idx, "price_7"));
		SetBusinessData(idx, B_PRICE_8,			cache_get_field_content_int(idx, "price_8"));
		SetBusinessData(idx, B_PRICE_9,			cache_get_field_content_int(idx, "price_9"));
		SetBusinessData(idx, B_PRICE_10,		cache_get_field_content_int(idx, "price_10"));


		cache_get_field_content(idx, "owner_name", g_business[idx][B_OWNER_NAME], mysql, 21);
		// -------------------------

		SetBusinessData(idx, B_LABEL, CreateDynamic3DTextLabel(GetBusinessInteriorInfo(GetBusinessData(idx, B_INTERIOR), BT_NAME), 0xFFFF00FF, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z) + 0.3, 6.50));

		if(GetBusinessData(idx, B_CITY) == -1 || GetBusinessData(idx, B_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));
			buffer[1] = Get2DZone(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));

			SetBusinessData(idx, B_CITY, buffer[0]);
			SetBusinessData(idx, B_ZONE, buffer[1]);

			mysql_format(mysql, query, sizeof query, "UPDATE business SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(IsBusinessOwned(idx) && !strcmp(GetBusinessData(idx, B_OWNER_NAME), "None", true))
		{
			SetBusinessData(idx, B_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE business SET owner_id=0,improvements=0 WHERE id=%d", GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsBusinessOwned(idx))
		{
			SetBusinessData(idx, B_PRODS,		0);
			SetBusinessData(idx, B_PROD_PRICE, 	0);
			SetBusinessData(idx, B_LOCK_STATUS, false);

			SetBusinessData(idx, B_ENTER_MUSIC, 0);
			SetBusinessData(idx, B_ENTER_PRICE, 0);

			if(GetBusinessData(idx, B_IMPROVEMENTS) >= 6)
			{
				mysql_format(mysql, query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", idx);
				mysql_query(mysql, query, false);
			}
		}
		CallLocalFunction("UpdateBusinessLabel", "i", idx);

		BusinessHealthPickupInit(idx);

		CreatePickup(1318, 23, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
		CreateDynamicMapIcon(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 52, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);

	}
	g_business_loaded = rows;
	cache_delete(result);

	for(new idx; idx < sizeof g_business_interiors; idx ++)
	{
		CreatePickup(1318, 23, GetBusinessInteriorInfo(idx, BT_EXIT_POS_X), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Y), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_EXIT, idx);
		buffer[0] = -1;

		switch(idx)
		{
			case BUSINESS_INTERIOR_SHOP_24_7:
			{
				CreateDynamic3DTextLabel
				(
					"Список\n"\
					"товаров\n"\
					"Введите /buy",
					0x32a44bEE,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_SHOP_247, idx);
			}
			case BUSINESS_INTERIOR_CLUB:
			{
				CreateDynamic3DTextLabel
				(
					"Меню бара:\n\n"\
					"{6699FF}1. Лимонад\n"\
					"2. Пиво\n"\
					"3. Вино\n"\
					"4. Шампанское\n"\
					"5. Водка\n"\
					"6. Коньяк\n"\
					"7. Виски\n"\
					"8. Абсент\n"\
					"{00CC66}9. Закуска\n"\
					"10. Сигара",
					0xFFFFFFCC,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					9.0
				);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.0, _, _, _, 8.0);
			}
			case BUSINESS_INTERIOR_CASINO:
			{
			    CreateDynamic3DTextLabel
				(
					"Рулетка\n\n"\
					"Ставки от{6699FF}1000000$ 3 Уровень\n",
					0xFFFFFFCC,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					9.0
				);
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_CASINO_FORT, idx);
			}
			case BUSINESS_INTERIOR_REALTOR_BIZ:
			{
				g_business_realtor_label = CreateDynamic3DTextLabel
				(
					"Состояние бизнеса",
					0xCCFF66FF,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					10.0
				);
				//CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) - 1.0, 1.2, _, _, _, 10.0);

				CallLocalFunction("UpdateRealtorBizInfo", "");

				g_house_realtor_label = CreateDynamic3DTextLabel
				(
					"Состояние недвижимости",
					0xCCFF66FF,
					436.5991,-175.9601,1001.8047,
					10.0
				);
				buffer[1] = CreateDynamicCP(436.5991,-175.9601,1001.8047, 0.7, _, _, _, 5.0);

				CallLocalFunction("UpdateRealtorHomeInfo", "");
			}
			case BUSINESS_INTERIOR_REALTOR_HOME:
			{
				g_house_realtor_label = CreateDynamic3DTextLabel
				(
					"Состояние недвижимости",
					0xCCFF66FF,
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z),
					10.0
				);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 0.7, _, _, _, 5.0);

				CallLocalFunction("UpdateRealtorHomeInfo", "");
			}
			case BUSINESS_INTERIOR_CLOTHING_SHOP:
			{
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CLOTHING, idx);
			}
			case BUSINESS_INTERIOR_HOTEL:
			{
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);

				CreateDynamic3DTextLabel("Услуги\n{FFFFFF}гост. комплекса", 0x1E90FFFF, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 5.0);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.2, _, _, _, 20.0);
			}
			case BUSINESS_INTERIOR_CAR_MARKET:
			{
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CAR_MARK, idx);
				CreateDynamic3DTextLabel("Покупка\nтранспорта", 0xCC6600FF, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 5.0);
			}
			case BUSINESS_INTERIOR_CELL_SALON:
			{
				CreateDynamic3DTextLabel
				(
					"Сотовый\n"\
					"салон\n"\
					"Введите /buy",
					0x32a44bFF,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_CELL_SALON, idx);
			}
			case BUSINESS_INTERIOR_CAR_TUNING:
			{
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CAR_TUN, idx);
				CreateDynamic3DTextLabel("Обслуживание\nтранспорта", 0xCC6600EE, GetBusinessInteriorInfo(idx, BT_LABEL_POS_X), GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y), GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z), 5.0);
			}
			case BUSINESS_INTERIOR_MCDONALDS:
			{
				CreateDynamic3DTextLabel
				(
					"Список\n"\
					"товаров\n"\
					"Введите /buy",
					0x32a44bFF,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_MC, idx);
			}
			case BUSINESS_INTERIOR_SHOP_GUN:
			{
				CreateDynamic3DTextLabel
				(
					"Список\n"\
					"оружия\n"\
					"Введите /buy",
					0x32a44bFF,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_SHOP_GUN, idx);
			}
			case BUSINESS_INTERIOR_SPORTZAL:
			{
				CreatePickup(1275, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_SPORTZAL, idx);
			}
			case BUSINESS_INTERIOR_MEBEL:
			{
				CreateDynamic3DTextLabel
				(
					"- Магазин мебели -\n",
					0x1E90FFFF,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_SET_HINT, idx);
			}
			case BUSINESS_INTERIOR_AUTOSCHOOL:
			{
				CreateDynamic3DTextLabel
				(
					"- Центр лицензирования -\n"\
					"сдача экзамена",
					0x1E90FFFF,
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8,
					8.0
				);
				CreatePickup(1274, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_DRIVER, idx);
			}
		}
		SetBusinessInteriorInfo(idx, BT_BUY_CHECK_ID, buffer[0]);
	}
	BusinesGPSListInit();

	printf("[Business]: Бизнесов загружено: %d", g_business_loaded);
}

public: UpdateBusinessLabel(businessid)
{
	new fmt_str[265 + 1];

	if(!IsBusinessOwned(businessid))
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s\n"\
			"{FFFFFF}Владелец: {32a44b}государство\n"\
			"{FFFFFF}Стоимость: {32a44b}$%d\n",
			GetBusinessInteriorInfo(GetBusinessData(businessid, B_INTERIOR), BT_NAME),
			GetBusinessData(businessid, B_PRICE)
		);
 		if(!GetBusinessData(businessid, B_LOCK_STATUS))
		{
			if(GetBusinessData(businessid, B_ENTER_PRICE) > 0)
			{
				format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Вход: {32a44b}$%d", fmt_str, GetBusinessData(businessid, B_ENTER_PRICE));
			}
			else strcat(fmt_str, "{32a44b}Вход бесплатный \n {ffffff} Чтобы купить используйте {32a44b} /buybiz");
		}
		else strcat(fmt_str, "{F4504F}Вход закрыт");
	}
	else
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s %s\n"\
			"{FFFFFF}Владелец: {32a44b}%s\n"\
			"{FFFFFF}Стоимость: {32a44b}$%d\n",
			GetBusinessInteriorInfo(GetBusinessData(businessid, B_INTERIOR), BT_NAME),
			GetBusinessData(businessid, B_NAME),
			GetBusinessData(businessid, B_OWNER_NAME),
			GetBusinessData(businessid, B_PRICE)
		);

		if(!GetBusinessData(businessid, B_LOCK_STATUS))
		{
			if(GetBusinessData(businessid, B_ENTER_PRICE) > 0)
			{
				format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Вход: {32a44b}$%d", fmt_str, GetBusinessData(businessid, B_ENTER_PRICE));
			}
			else strcat(fmt_str, "{32a44b}Вход бесплатный");
		}
		else strcat(fmt_str, "{F4504F}Вход закрыт");
	}
	UpdateDynamic3DTextLabelText(GetBusinessData(businessid, B_LABEL), 0x32a44bFF, fmt_str);
}
public: UpdateBoardLabel(board)
{
    	new fmt_str[256];
		if(GetBoardData(board, B_OWNER) == -1)
		{
			format(fmt_str, sizeof fmt_str, "- Щит № %d свободен-\n{FFFFFF}Вы можете его занять в здание Los Santos Radio",board);
			UpdateDynamic3DTextLabelText(GetBoardData(board, B_LABEL), 0x1E90FFFF, fmt_str);
			return 1;
		}
		else
		{
        	format(fmt_str, sizeof fmt_str, "- Щит № %d занят-\n{FFFFFF}%s ",board, GetBoardData(board,B_TEXT));
        	UpdateDynamic3DTextLabelText(GetBoardData(board, B_LABEL), 0x1E90FFFF, fmt_str);
        	return 1;
        }
}
public: UpdateRealtorBizInfo()
{
	new count = 0;

	new fmt_str[256];

	g_business_realtor_list = "";
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;
		g_business_realtor_list_idx[count ++] = idx;

		format(fmt_str, sizeof fmt_str, "%d\n", idx);
		strcat(g_business_realtor_list, fmt_str);
	}

	count = GetFreeBusinessCount();
	format
	(
		fmt_str, sizeof fmt_str,
		"Состояние недвижимости\n"\
		"{FFFFFF}(обновляется каждый час)\n\n"\
		"{FFFFFF}Куплено бизнесов: {CECECE}%d\n"\
		"{FFFFFF}Свободно бизнесов: {32a44b}%d",
		g_business_loaded - count,
		count
	);
	UpdateDynamic3DTextLabelText(g_business_realtor_label, 0xffff00FF, fmt_str);

}

public: SetRealtorMakePhoto(playerid, type, index)
{
	if(GetPlayerData(playerid, P_REALTOR_TYPE) == type)
	{
		new Float: angle;
		new Float: pos_x, Float: pos_y, Float: pos_z;
		new Float: exit_x, Float: exit_y, Float:cam_x, Float:cam_y;

		switch(type)
		{
			case REALTOR_TYPE_HOUSE:
			{
				pos_x = GetHouseData(index, H_POS_X);
				pos_y = GetHouseData(index, H_POS_Y);
				pos_z = GetHouseData(index, H_POS_Z);

				exit_x = GetHouseData(index, H_EXIT_POS_X);
				exit_y = GetHouseData(index, H_EXIT_POS_Y);
			}
			case REALTOR_TYPE_BIZ:
			{
				pos_x = GetBusinessData(index, B_POS_X);
				pos_y = GetBusinessData(index, B_POS_Y);
				pos_z = GetBusinessData(index, B_POS_Z);

				exit_x = GetBusinessData(index, B_EXIT_POS_X);
				exit_y = GetBusinessData(index, B_EXIT_POS_Y);
			}
		}
		angle = GetAngleToPoint(exit_x, exit_y, pos_x, pos_y);
		SetPlayerPos(playerid, pos_x, pos_y, pos_z);

		cam_x = pos_x + 15.0 * -floatsin(angle, degrees);
		cam_y = pos_y + 15.0 * floatcos(angle, degrees);

		SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
		SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);

		SetPlayerData(playerid, P_REALTOR_TYPE, type);
	}
}

public:	LoadFuelStations()
{
	new query[85], buffer[2];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT fs.*, IFNULL(a.name, 'None') AS owner_name FROM fuel_stations fs LEFT JOIN accounts a ON a.id=fs.owner_id", true);
	rows = cache_num_rows();

	if(rows > MAX_FUEL_STATIONS)
	{
		rows = MAX_FUEL_STATIONS;
		print("[FuelST]: DB rows > MAX_FUEL_STATIONS");
	}

	for(new idx; idx < rows; idx ++)
	{
		SetFuelStationData(idx, FS_SQL_ID,		cache_get_field_content_int(idx, "id"));
		SetFuelStationData(idx, FS_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));

		cache_get_field_content(idx, "name", g_fuel_station[idx][FS_NAME], mysql, 20);

		SetFuelStationData(idx, FS_CITY, 			cache_get_field_content_int(idx, "city"));
		SetFuelStationData(idx, FS_ZONE, 			cache_get_field_content_int(idx, "zone"));
		SetFuelStationData(idx, FS_IMPROVEMENTS, 	cache_get_field_content_int(idx, "improvements"));
		SetFuelStationData(idx, FS_FUELS, 			cache_get_field_content_int(idx, "fuels"));
		SetFuelStationData(idx, FS_FUEL_PRICE,		cache_get_field_content_int(idx, "fuel_price"));
		SetFuelStationData(idx, FS_BUY_FUEL_PRICE,	cache_get_field_content_int(idx, "buy_fuel_price"));
		SetFuelStationData(idx, FS_BALANCE,			cache_get_field_content_int(idx, "balance"));
		SetFuelStationData(idx, FS_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));

		SetFuelStationData(idx, FS_PRICE,			cache_get_field_content_int(idx, "price"));
		SetFuelStationData(idx, FS_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));

		SetFuelStationData(idx, FS_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));

		SetFuelStationData(idx, FS_POS_X,			cache_get_field_content_float(idx, "x"));
		SetFuelStationData(idx, FS_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetFuelStationData(idx, FS_POS_Z,			cache_get_field_content_float(idx, "z"));

		cache_get_field_content(idx, "owner_name", g_fuel_station[idx][FS_OWNER_NAME], mysql, 21);
		// -------------------------

		SetFuelStationData(idx, FS_LABEL, CreateDynamic3DTextLabel(GetFuelStationData(idx, FS_NAME), 0x1E90FFFF, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z) + 0.5, 15.0));
		SetFuelStationData(idx, FS_AREA, CreateDynamicSphere(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 15.0));

		if(GetFuelStationData(idx, FS_CITY) == -1 || GetFuelStationData(idx, FS_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y));
			buffer[1] = Get2DZone(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y));

			SetFuelStationData(idx, FS_CITY, buffer[0]);
			SetFuelStationData(idx, FS_ZONE, buffer[1]);

			mysql_format(mysql, query, sizeof query, "UPDATE fuel_stations SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetFuelStationData(idx, FS_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(IsFuelStationOwned(idx) && !strcmp(GetFuelStationData(idx, FS_OWNER_NAME), "None", true))
		{
			SetFuelStationData(idx, FS_OWNER_ID, 0);

			mysql_format(mysql, query, sizeof query, "UPDATE fuel_stations SET owner_id=0 WHERE id=%d", GetFuelStationData(idx, FS_SQL_ID));
			mysql_query(mysql, query, false);
		}

		if(!IsFuelStationOwned(idx))
		{
			SetFuelStationData(idx, FS_FUELS, 1000);
			SetFuelStationData(idx, FS_FUEL_PRICE, 3);

			SetFuelStationData(idx, FS_LOCK_STATUS, false);
		}
		CallLocalFunction("UpdateFuelStationLabel", "i", idx);

		/*#if defined FUEL_ST_CREATED_PICKUP
			CreatePickup(1650, 23, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 0, PICKUP_ACTION_TYPE_FUEL_STATION, idx);
		#endif*/

		CreateDynamicMapIcon(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 47, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
	}
	g_fuel_station_loaded = rows;
	cache_delete(result);

	printf("[FuelST]: Заправок загружено: %d", g_fuel_station_loaded);
}

public: UpdateFuelStationLabel(stationid)
{
	new fmt_str[128 + 56];

	if(!IsFuelStationOwned(stationid))
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s\n"\
			"{FFFFFF}Цена за 10 литров: {ffff00}$%d\n\n"\
			"Заправка продается\n"\
			"Используйте /buyfuelst\n"\
			"Цена: $%d",
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 10,
			GetFuelStationData(stationid, FS_PRICE)
		);

	}
	else
	{
		format
		(
			fmt_str, sizeof fmt_str,
			"%s\n"\
			"{FFFFFF}Владелец: {32a44b}%s\n",
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_OWNER_NAME),
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 10
		);

		if(GetFuelStationData(stationid, FS_LOCK_STATUS))
		{
			strcat(fmt_str, "{CECECE}Станция закрыта");
		}
		else format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Цена за 10 литров: {ffff00}$%d\n{ffffff} Чтобы заправить 10 литров введите {ffff00} /fuel", fmt_str, GetFuelStationData(stationid, FS_FUEL_PRICE) * 10);
	}
	UpdateDynamic3DTextLabelText(GetFuelStationData(stationid, FS_LABEL), 0x1E90FFFF, fmt_str);
}

public: OnGiveReferBonus(refer_id)
{
	new fmt_str[155];
	new playerid = GetPlayerIDBySqlID(refer_id);

	if(playerid != INVALID_PLAYER_ID)
	{
		GivePlayerMoneyEx(playerid, REFER_BONUS_MONEY, "Реферальная программа 'Пригласи друга'", true, false);

		format(fmt_str, sizeof fmt_str, "Поздравляем! Приглашенный Вами игрок достиг 5 уровня, Вы получаете $%d", REFER_BONUS_MONEY);
		SendClientMessage(playerid, 0x32a44bFF, fmt_str);
	}
	else
	{
		format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", refer_id, "system", gettime(), REFER_BONUS_MONEY, "Реферальная программа 'Пригласи друга'");
		mysql_query(mysql, fmt_str, false);

		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=money+%d WHERE id=%d LIMIT 1", REFER_BONUS_MONEY, refer_id);
		mysql_query(mysql, fmt_str, false);

		if(mysql_errno() != 0)
			printf("[Referal System]: Произошла ошибка при выдаче бонуса реферу №%d", refer_id);
	}
}
public: OnSecondTimer()
{
	new minute;
	gettime(_, minute);

	foreach(new playerid : Player)
	{
		CallLocalFunction("OnPlayerTimer", "i", playerid);
	}
	for(new carriageid; carriageid < sizeof miner_carriage; carriageid ++)
		MinerCarriageUpdate(carriageid);

	if(g_capture[C_STATUS] && g_capture[C_TIME] > 0)
	{
	    if(g_capture[C_TIME] <= 2*60 && copwarning == 0)
		{
		    SendMessageToPoliceTeam("В бедном районе началась перестрелка. Введите /graid, чтобы начать рейд", -1);
		    copwarning = 1;
		}
		-- g_capture[C_TIME];

		if(g_capture[C_TIME] == 0)
			EndCapture();
	}
    UpdateReporterText();
}


public: OnMinuteTimer()
{
	new time;
	new hour, minute, second;
	time = gettime();
	gettime(hour, minute, second);

//	UpdateBet();

	switch(minute)
	{
	    case 28:
		{
 			SendClientMessageToAll(-1,"{ffff00} Через 2 минуты произойдёт респавн незанятых транспортных средств. Займите нужное т/с");
		}
		case 30:
		{
			for(new i = 1; i < MAX_VEHICLES; i++)
			{
			    if(!IsValidVehicle(i)) continue;
			    else if(IsVehicleOccupied(i)) continue;
			    else if(IsTrailerAttachedToAnyVehicle(i)) continue;
			    else if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCK_TRAIL) continue;

			    SetVehicleToRespawn(i);
			}
		}
		case 0:
		{
			    ClearBoardRent();
				SendClientMessageToAll(-1,"Аренда борда слет!");
				for(new i = GetMaxPlayers() - 1; i != -1; i--)
				{
				    TestPayDay(i);
				}

				for(new fam_id = g_family_loaded - 1; fam_id != -1; fam_id--)
				{
					new fmt_text[348];
					AddFamilyData(fam_id, F_EXP, +, g_doubling[DOUBLING_EXP] * 5);

					if(GetFamilyData(fam_id, F_EXP) > 500)
					{
						SetFamilyData(fam_id, F_EXP, 0);
						AddFamilyData(fam_id, F_LEVEL, +, 1);
					}

					mysql_format(mysql, fmt_text, sizeof fmt_text, "UPDATE family SET score='%d',exp='%d' WHERE id='%d' LIMIT 1", GetFamilyData(fam_id + 1, F_LEVEL), GetFamilyData(fam_id + 1, F_EXP), fam_id + 1);
					mysql_query(mysql, fmt_text, false);
				}
			}
		case 16:
		{
		    if(hour == 12)
			{
	 			printf("slet vsego");
		 		SendClientMessageToAll(-1,"тест слет всего!");
		   		SellDebtorsHome();
			    SellDebtorsFuel();
		   		SellDebtorsBusiness();
			    SellDebtorsHotels();
			    mysql_query(mysql, "UPDATE accounts SET loginday='0' WHERE bonusget = '0'", false);
				mysql_query(mysql, "UPDATE accounts SET bonusget = '0' WHERE 1", false);
			}
		}
		case 2:
		{
			if(GetElapsedTime(time, g_last_lottery_time) >= 1)
			{
				OnLottery();
			}
		}
	}

	SetWorldTime(hour);
	OnPlayersWorldTimeInit(hour, minute);

	return 1;
}



public: OnPlayersWorldTimeInit(hour, minute)
{
	foreach(new playerid : Player)
	{
		SetPlayerTime(playerid, hour, minute);
	}
}

public: OnLottery()
{
	new fmt_str[85];
	new buffer[4];

	new lottery_str[4];
	new lottery_number;
	new buy_tickets_count;
	new hour, count;

	gettime(hour);
	lottery_number = random(900) + 100;

	valstr(lottery_str, lottery_number);
	buy_tickets_count = LotteryBuyTicketCount();

	static const
		lottery_pay[3] = {2000, 15_000, 50_000};

	foreach(new playerid : Player)
	{
		if(IsPlayerLogged(playerid))
		{
			if(GetPlayerData(playerid, P_LOTTERY))
			{
				format(fmt_str, sizeof fmt_str, "Сейчас %d:02! Начинаем лотерейный розыгрыш. Ваше счастливое число: %d", hour, GetPlayerData(playerid, P_LOTTERY));
				SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

				format(fmt_str, sizeof fmt_str, "За этот час было куплено %d билетов. Счастливое число этого часа: {FF9900}%d", buy_tickets_count, lottery_number);
				SendClientMessage(playerid, 0x32a44bFF, fmt_str);

				valfmt(buffer, GetPlayerData(playerid, P_LOTTERY));

				for(count = 0; count < 3; count ++)
					if(lottery_str[count] != buffer[count]) break;

				switch(count)
				{
					case 0:
					{
						SendClientMessage(playerid, 0xFFFFFFFF, "К сожалению в вашем билете не совпала первая цифра");
						SendClientMessage(playerid, 0xFFFFFFFF, "Не расстраивайтесь. В следующий раз Вам обязательно повезёт");
					}
					case 1..3:
					{
						GivePlayerMoneyEx(playerid, lottery_pay[count-1], "Выигрыш в лотереи", true, true);

						format(fmt_str, sizeof fmt_str, "В вашем билете совпали %d цифры! Выигрыш: $%d", count, lottery_pay[count-1]);
						SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
					}
				}
				SetPlayerData(playerid, P_LOTTERY, 0);
			}
		}
	}
	g_last_lottery_time = gettime();
}

public: OnPayDay()
{
	new fmt_str[144];
	new hour, minute, second;

	gettime(hour, minute, second);

	SetWorldTime(hour);

 	format(fmt_str, sizeof fmt_str, "Текущее время: {1E90FF}%02d:00", hour);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);

 	/*for(new i = GetMaxPlayers() - 1; i != -1; i--)
	{
		if(IsPlayerLogged(i))
		{
			SendClientMessage(i, 0xFFFFFFFF, "   БАНКОВСКИЙ ЧЕК");
			SendClientMessage(i, 0xFFFFFFFF, "______________________");
			SendClientMessage(i, 0xFFFFFFFF, " ");

			level = GetPlayerLevel(i);
			if(!IsPlayerAFK(i) || GetPlayerAFKTime(i) < 60)
			{
				if(GetPlayerTeamEx(i))
				{
					new team_wage;

					if(GetPlayerTeamEx(i) < TEAM_GANG_GROVE)
					{
						new team_id = GetPlayerTeamEx(i),
							rank = GetPlayerJob(i);

						team_wage = rank_wages[ team_id - 1 ][ rank - 1 ];
					}
					else
					{
						new gang_id = GetPlayerTeamEx(i) - TEAM_GANG_GROVE;

						team_wage = GetGangZonesCount(gang_id + 1) * 70 + 1000;
					}

					AddPlayerData(i, P_WAGE, +, team_wage);
				}

				AddPlayerData(i, P_BANK, +, GetPlayerData(i, P_WAGE));

				BankLog(i, GetPlayerData(i, P_WAGE), "Зарплата");

				format(fmt_str, sizeof fmt_str, "Зарплата: {32a44b}%d руб", GetPlayerData(i, P_WAGE));
				SendClientMessage(i, 0xFFFFFFFF, fmt_str);

				format(fmt_str, sizeof fmt_str, "Текущий баланс счета: {%s}%d руб", GetPlayerBankMoney(i) > 0 ? ("32a44b") : ("FF3300"), GetPlayerBankMoney(i));
				SendClientMessage(i, 0xFFFFFFFF, fmt_str);

				SetPlayerData(i, P_WAGE, 0);
				AddPlayerData(i, P_EXP, +, g_doubling[DOUBLING_EXP] ? 2 : 1);

				if(GetPlayerExp(i) > GetExpToNextLevel(i))
				{
					SetPlayerData(i, P_EXP, 0);
					AddPlayerData(i, P_LEVEL, +, 1);

					SetPlayerLevelInit(i);
				}
			}
			else SendClientMessage(i, 0xFFBB00FF, "Вы не должны находиться на паузе для получения зарплаты");

			SendClientMessage(i, 0xFFFFFFFF, "______________________");

			if(GetPlayerLevel(i) > level)
							return SendClientMessage(i, 0x1E90FFFF, "Поздравляем! Ваш уровень повышен");

			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET level=%d,exp=%d,bank=%d,wage=0,last_login=%d,game_for_hour=0 WHERE id=%d LIMIT 1", GetPlayerLevel(i), GetPlayerExp(i), GetPlayerBankMoney(i), cur_time, GetPlayerAccountID(i));
			mysql_query(mysql, fmt_str, false);

			if(mysql_errno() != 0)
				SendClientMessage(i, 0xCECECEFF, "Ошибка сохранения аккаунта {FF0000}(equ-code 100)");

		}
		SetPlayerData(i, P_GAME_FOR_HOUR, 0);
	}*/

	CallLocalFunction("UpdateRealtorHomeInfo", "");
	CallLocalFunction("UpdateRealtorBizInfo", "");

	return 1;
}

public: TestPayDay(i)
{
    new hour, minute, second;
	gettime(hour, minute, second);
	if(IsPlayerLogged(i))
	{
		new fmt_str[256];
		new level;

		SendClientMessage(i, 0xFFFFFFFF, "   БАНКОВСКИЙ ЧЕК");
		SendClientMessage(i, 0xFFFFFFFF, "______________________");
		SendClientMessage(i, 0xFFFFFFFF, " ");

		level = GetPlayerLevel(i);
		if(GetPlayerTeamEx(i))
		{
			new team_wage;

			if(GetPlayerTeamEx(i) < TEAM_GANG_GROVE)
			{
				new team_id = GetPlayerTeamEx(i),
					rank = GetPlayerJob(i);

				if(rank > 0)
					team_wage = rank_wages[ team_id - 1 ][ rank - 1 ];
			}
			else
			{
				new gang_id = GetPlayerTeamEx(i) - TEAM_GANG_GROVE;

				team_wage = GetGangZonesCount(gang_id + 1) * 70;
			}
            if(GetPlayerPremium(i))
			{
			    AddPlayerData(i, P_PAYDAY_X, +, 1);
    			UpdatePlayerDatabaseInt(i, "PDX", GetPlayerData(i, P_PAYDAY_X));
				team_wage += 1000;
				if(GetPlayerData(i, P_PAYDAY_X) == 3) AddPlayerData(i, P_EXP, +, 1), SetPlayerData(i, P_PAYDAY_X, 0);
			}
			AddPlayerData(i, P_WAGE, +, team_wage);
		}

		if(GetPlayerData(i, P_DEPOSIT) > 0)
		{
		    new money = (GetPlayerData(i, P_DEPOSIT) / 1000) * 1;
			AddPlayerData(i, P_DEPOSIT, +, money);
			format(fmt_str, sizeof fmt_str, "Процент депозита: {ffff00}$%d", money);
			SendClientMessage(i, 0xFFFFFFFF, fmt_str);
		}

		if(GetPlayerAdminEx(i) >= 1)
		{
		    new admin_money = GetPlayerAdminEx(i) * 500;
			AddPlayerData(i, P_BANK, +, admin_money);
			format(fmt_str, sizeof fmt_str, "Зарплата администратора: {ffff00}$%d", admin_money);
			SendClientMessage(i, 0xFFFFFFFF, fmt_str);
		}

		AddPlayerData(i, P_BANK, +, GetPlayerData(i, P_WAGE));

		BankLog(i, GetPlayerData(i, P_WAGE), "Зарплата");

		format(fmt_str, sizeof fmt_str, "Зарплата: {ffff00}$%d", GetPlayerData(i, P_WAGE));
		SendClientMessage(i, 0xFFFFFFFF, fmt_str);

		format(fmt_str, sizeof fmt_str, "Текущий баланс счета: {%s}$%d", GetPlayerBankMoney(i) > 0 ? ("ffff00") : ("FF0000"), GetPlayerBankMoney(i));
		SendClientMessage(i, 0xFFFFFFFF, fmt_str);

		SetPlayerData(i, P_WAGE, 0);
		AddPlayerData(i, P_EXP, +, g_doubling[DOUBLING_EXP]);
		if(GetPlayerExp(i) >= GetExpToNextLevel(i))
		{
			SetPlayerData(i, P_EXP, 0);
			AddPlayerData(i, P_LEVEL, +, 1);

			SetPlayerLevelInit(i);
		}

		UpdatePlayerDatabaseInt(i, "exp", GetPlayerData(i, P_EXP));
		UpdatePlayerDatabaseInt(i, "score", GetPlayerData(i, P_LEVEL));

		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET bank=%d,wage=0,deposit=%d,game_for_hour=0 WHERE id=%d LIMIT 1", GetPlayerBankMoney(i),GetPlayerData(i, P_DEPOSIT), GetPlayerAccountID(i));
		mysql_query(mysql, fmt_str, false);

		SendClientMessage(i, 0xFFFFFFFF, "______________________");

		if(GetPlayerLevel(i) > level)
			return SendClientMessage(i, 0x1E90FFFF, "Поздравляем! Ваш уровень повышен");

		if(mysql_errno() != 0)
			SendClientMessage(i, 0xCECECEFF, "Ошибка сохранения аккаунта {FF0000}(equ-code 100)");
	}
	return 1;
}


public: OnPlayerTimer(playerid)
{
	if(IsPlayerLogged(playerid))
	{
		new fmt_str[128];
		new speed = GetPlayerSpeed(playerid);
		if(GetPlayerData(playerid, P_USE_DRUGS) != 0)
		{
			AddPlayerData(playerid, P_USE_DRUGS, -, 1);
		}
		if(g_capture[C_STATUS])
		{
		    new fmt_text[125];

		    if(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS)
		    {
		        format
				(
					fmt_text, sizeof fmt_text,
					"~n~~n~~n~~n~~n~~g~~h~~h~Time: %d:%02d~n~"\
					"~w~%s__~r~~h~%d~n~"\
					"~w~%s__~r~~h~%d",
					g_capture[C_TIME] / 60,
					g_capture[C_TIME] % 60,
					GetTeamName( (g_capture[C_ATTACK_TEAM] + TEAM_GANG_GROVE) - 1 ),
					g_capture[C_ATTACKER_KILLS],
					GetTeamName( (g_capture[C_PROTECT_TEAM] + TEAM_GANG_GROVE) - 1 ),
					g_capture[C_PROTECTOR_KILLS]
				);

				GameTextForPlayer(playerid, fmt_text, 1000, 3);
		    }
		}

        if(!IsPlayerInRangeOfPoint(playerid,250.0,2570.7031,-1301.9629,1044.1250) && GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
        {
            EndPlayerTempJob(playerid, TEMP_JOB_FACTORY);
		}

		if(GetPlayerSpectateData(playerid, S_PLAYER) != -1)
		{
			new spec_player = GetPlayerSpectateData(playerid, S_PLAYER),
				fmt_text[150];

			format(fmt_text, sizeof fmt_text, "~n~~n~~n~~n~~n~~n~~n~~n~~y~%s(%d)~n~ping: %d", g_player[spec_player][P_NAME], spec_player, GetPlayerPing(spec_player));
			GameTextForPlayer(playerid, fmt_text, 1000, 3);
		}

		AddPlayerData(playerid, P_AFK_TIME, +, 1);
		if(IsPlayerAFK(playerid))
		{
			new afk_minutes = ConvertUnixTime(GetPlayerAFKTime(playerid), CONVERT_TIME_TO_MINUTES);
			new afk_seconds = ConvertUnixTime(GetPlayerAFKTime(playerid));

			if(afk_minutes > 0)
			{
				format(fmt_str, sizeof fmt_str, "На паузе %d:%02d", afk_minutes, afk_seconds);
			}
			else format(fmt_str, sizeof fmt_str, "На паузе %d сек.", afk_seconds);

			SetPlayerChatBubble(playerid, fmt_str, 0xFF0000FF, 7.0, 1500);

			if(afk_minutes >= MAX_AFK_TIME && GetPlayerAdminEx(playerid) < 5)
				Kick:(playerid, "Превышено максимально допустимое время паузы");
		}
		else
		{
			AddPlayerData(playerid, P_GAME_FOR_HOUR, +, 1);
			AddPlayerData(playerid, P_GAME_FOR_DAY, +, 1);

			UpdatePlayerDatabaseInt(playerid, "game_for_hour", GetPlayerData(playerid, P_GAME_FOR_HOUR));
			UpdatePlayerDatabaseInt(playerid, "game_for_day", GetPlayerData(playerid, P_GAME_FOR_DAY));
		}

		if(GetPlayerData(playerid, P_MUTE) > 0)
		{
			AddPlayerData(playerid, P_MUTE, -, 1);
			UpdatePlayerDatabaseInt(playerid, "mute", GetPlayerData(playerid, P_MUTE));
			if(GetPlayerData(playerid, P_MUTE) <= 0)
				SendClientMessage(playerid, 0x32a44bFF, "Срок действия бана чата закончился");
		}

		if(GetPlayerData(playerid, P_JAIL) > 0)
		{
			AddPlayerData(playerid, P_JAIL, -, 1);
			UpdatePlayerDatabaseInt(playerid, "jail", GetPlayerData(playerid, P_JAIL));

			if(GetPlayerData(playerid, P_JAIL) <= 0)
				SendClientMessage(playerid, 0x32a44bFF, "Срок заключения закончился"),
				UnjailPlayer(playerid);
		}

		if(GetPlayerData(playerid, P_MASK) >= 2)
		{
			AddPlayerData(playerid, P_MASK, -, 1);
			if(GetPlayerData(playerid, P_MASK) <= 2)
			{
				GameTextForPlayer(playerid, "~y~invisible off", 2500, 4);

				SetPlayerColorInit(playerid);
				SetPlayerData(playerid, P_MASK, 0);
			}
		}

		if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, GetPlayerGPSInfo(playerid, G_POS_X), GetPlayerGPSInfo(playerid, G_POS_Y), GetPlayerGPSInfo(playerid, G_POS_Z)))
			{
				DisablePlayerGPS(playerid);
			}
		}

		new Float: player_health;

		GetPlayerHealth(playerid, player_health);

		if(player_health > GetPlayerHealthEx(playerid))
		{
			//SetPlayerHealthEx(playerid, GetPlayerHealthEx(playerid));

			//SetPVarInt(playerid, "anti_health_cheat", GetPVarInt(playerid, "anti_health_cheat")+1);

			if(GetPVarInt(playerid, "anti_health_cheat") >= 10)
			{
				SendClientMessage(playerid, 0xCECECEFF, "Вы кикнуты по подозрению в читерстве {FF0000}(gac-code 01)");
				Kick:(playerid);
			}
		}
		else
		{
			SetPlayerData(playerid, P_HEALTH, player_health);
		}

		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1370.0732, -173.6992, 968.5089))
			{
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			}
			else if(GetPlayerHealthEx(playerid) >= 95.0)
			{
				SetPlayerData(playerid, P_HOSPITAL, false);

//				SendClientMessage(playerid, 0x32a44bFF, "Курс лечения пройден");
//				SendClientMessage(playerid, -1, "Вы были выписаны из больницы");

				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));

//				SetPlayerChatBubble(playerid, "Выписан", 0x32a44bFF, 10.0, 2000);
				new query[90];
				mysql_format(mysql, query, sizeof query, "UPDATE accounts SET hospital=0 WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);
			}
		}

		new weapon_slot = player_weapon_slot[playerid];

		if(weapon_slot != -1)
		{
		    new fmt_text[150];

		    format(fmt_text, sizeof fmt_text, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~%s~n~%d/%d", weapon_info[GetWeaponIndex(player_weapon[playerid][weapon_slot][PW_WEAPON])][WI_NAME], player_weapon[playerid][weapon_slot][PW_CHARGED], player_weapon[playerid][weapon_slot][PW_AMMO]);

		    GameTextForPlayer(playerid, fmt_text, 1000, 3);
		}

		if(IsPlayerDriver(playerid))
		{
			//new Float: health;
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!IsABike(vehicleid))
			{
				new	Float: fuels = GetVehicleData(vehicleid, V_FUEL);

				SetVehicleParamsInit(vehicleid);
				SetVehicleData(vehicleid, V_MILEAGE, GetVehicleData(vehicleid, V_MILEAGE) + (float(speed) / 3600.0));

				if(vehicleid == GetPlayerData(playerid, P_TRUCK_ID))
				{
				    SetPlayerData(playerid, P_TRUCK_MILEAGE, GetVehicleData(vehicleid, V_MILEAGE) + (float(speed) / 3600.0));

			    	new query[90];

					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET truck_mileage=%f WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_TRUCK_MILEAGE), GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);
				}

				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
				{
					if(fuels <= 0.0)
					{
						SetVehicleParam(vehicleid, V_ENGINE, false);
						GameTextForPlayer(playerid, "~r~no fuel", 4000, 1);
					}
					else
					{
						if(IsAOwnableCar(vehicleid))
						{
							new index = GetVehicleData(vehicleid, V_ACTION_ID);
							SetVehicleData(vehicleid, V_FUEL, fuels - 0.02);
							SetOwnableCarData(index, OC_FUEL, GetVehicleData(vehicleid, V_FUEL));

						}
						else
						{
							SetVehicleData(vehicleid, V_FUEL, fuels - 0.02);
						}
					}
				}

				format(fmt_str, sizeof fmt_str, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~~h~~h~Speed:~y~~y~_%03i_~w~~w~Fuel:~y~~y~_%.1f l.~n~~y~~h~~h~~w~~w~Mileage:~y~~y~ %.1f km", speed,  GetVehicleData(vehicleid, V_FUEL), GetVehicleData(vehicleid, V_MILEAGE));
				GameTextForPlayer(playerid, fmt_str, 1000, 3);

				CheckRadars(playerid);

			}
		}
		else if(IsPlayerPassenger(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new driver = GetVehicleData(vehicleid, V_DRIVER_ID);

			if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
			{
				if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
				{
					if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
					{
						g_taxi_mileage[playerid] += (float(speed) / 3600.0);
						if(g_taxi_mileage[playerid] > 0.1)
						{
							g_taxi_mileage[playerid] = 0.0;

							new tariff = GetPlayerData(driver, P_JOB_TARIFF);
							if(GetPlayerMoneyEx(playerid) >= tariff)
							{
								GivePlayerMoneyEx(driver, tariff, "- Оплата тарифа такси", false, true);
								GivePlayerMoneyEx(playerid, -tariff, "+ Оплата тарифа такси", false, true);

								AddPlayerData(playerid, P_JOB_WAGE, +, tariff);

								format(fmt_str, sizeof fmt_str, "~r~-$%d~n~~b~+100 m", tariff);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);

								format(fmt_str, sizeof fmt_str, "~g~+$%d~n~~b~+100 m", tariff);
								GameTextForPlayer(driver, fmt_str, 4000, 1);
							}
							else
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для дальнейшей оплаты тарифа");
							}
						}
					}
				}
			}
		}

		if(GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
		{
			CheckPlayerTempJobState(playerid);
		}

		if(GetPVarInt(playerid, "player_in_ammo_cp"))
		{
			new army_ammo = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT),
				rand_ammo = random(4)+1,
				soldiers_count;

			foreach(new i : Player)
			{
				if(!IsPlayerConnected(i)) continue;
				else if(!IsPlayerLogged(i)) continue;
				else if(GetPlayerTeamEx(i) != TEAM_ARMY) continue;

				soldiers_count++;
			}

			if(soldiers_count < 3 && GetPlayerTeamEx(playerid) != TEAM_ARMY)
				SendClientMessage(playerid, 0xCECECEFF, "Чтобы воровать патроны со склада, должно быть хотя бы 3 военнослужащих в сети");

			else
			{
				if(army_ammo == 0)
					GameTextForPlayer(playerid, "~g~loading...", 1100, 6);
				else
				{
					if(!IsPlayerAFK(playerid))
					{
						if((army_ammo - rand_ammo) < 0)
							rand_ammo = 200000 - army_ammo;

						if((GetPlayerData(playerid, P_AMMO) + rand_ammo) > 500)
							SendClientMessage(playerid, 0x66CC33FF, "Взять больше патронов не получается");
						else
						{
							AddPlayerData(playerid, P_AMMO, +, rand_ammo);
							UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

							SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT, army_ammo - rand_ammo);

							new fmt_text[128];

							format(fmt_text, sizeof fmt_text, "~g~+%d patr.~n~~b~total %d patr.", rand_ammo, GetPlayerData(playerid, P_AMMO));
							GameTextForPlayer(playerid, fmt_text, 1100, 6);

							format(fmt_text, sizeof fmt_text, "+%d шт.", rand_ammo);
							SetPlayerChatBubble(playerid, fmt_text, 0xffff00FF, 10.0, 1100);

							UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);
						}
					}
				}
			}
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_AUTH_TIME) >= 0)
		{
			if(GetPlayerData(playerid, P_AUTH_TIME) >= MAX_AUTHORIZATION_TIME)
			{
				HidePlayerDialog(playerid);

				SendClientMessage(playerid, 0xCECECEFF, "Время на авторизацию ограничено");
				Kick:(playerid);
			}
			else AddPlayerData(playerid, P_AUTH_TIME, +, 1);
		}
	}
}


public: FixedKick(playerid)
{
	Kick(playerid);
}

public: LoadPlayerData(playerid)
{
	new query[128];
	new Cache: result;
	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		new
			buffer = 0,
			time = gettime();

		cache_get_field_content(0, "email", g_player[playerid][P_EMAIL], mysql, 61);
		SetPlayerData(playerid, P_CONFIRM_EMAIL, bool: cache_get_field_content_int(0, "confirm_email"));

		SetPlayerData(playerid, P_REFER, 	cache_get_field_content_int(0, "refer"));
		SetPlayerData(playerid, P_SEX, 		bool: cache_get_field_content_int(0, "sex"));
		SetPlayerData(playerid, P_SKIN, 	cache_get_field_content_int(0, "skin"));
		SetPlayerData(playerid, P_MONEY, 	cache_get_field_content_int(0, "money"));
		SetPlayerData(playerid, P_BANK, 	cache_get_field_content_int(0, "bank"));
		SetPlayerData(playerid, P_ADMIN, 	cache_get_field_content_int(0, "admin"));

		SetPlayerData(playerid, P_DRIVING_A, 	cache_get_field_content_int(0, "driving_a"));
		SetPlayerData(playerid, P_DRIVING_B, 	cache_get_field_content_int(0, "driving_b"));
		SetPlayerData(playerid, P_DRIVING_C, 	cache_get_field_content_int(0, "driving_c"));
		SetPlayerData(playerid, P_DRIVING_D, 	cache_get_field_content_int(0, "driving_d"));
		SetPlayerData(playerid, P_LIC_FLY, 		cache_get_field_content_int(0, "lic_fly"));
		SetPlayerData(playerid, P_LIC_WATER, 	cache_get_field_content_int(0, "lic_water"));
		SetPlayerData(playerid, P_LIC_BIZ, 		cache_get_field_content_int(0, "lic_biz"));
		SetPlayerData(playerid, P_LIC_WEAPON, 	cache_get_field_content_int(0, "lic_weapon"));

		SetPlayerData(playerid, P_SUSPECT, 		cache_get_field_content_int(0, "suspect"));
		SetPlayerData(playerid, P_PHONE, 		cache_get_field_content_int(0, "phone"));
		SetPlayerData(playerid, P_PHONE_BALANCE,cache_get_field_content_int(0, "phone_balance"));
		SetPlayerData(playerid, P_PHONE_COLOR,	cache_get_field_content_int(0, "phone_color"));

		SetPlayerData(playerid, P_LAW_ABIDING,	cache_get_field_content_int(0, "law_abiding"));
		SetPlayerData(playerid, P_IMPROVEMENTS, cache_get_field_content_int(0, "improvements"));
		SetPlayerData(playerid, P_POWER, 		cache_get_field_content_int(0, "power"));

		SetPlayerData(playerid, P_DRUGS, 		cache_get_field_content_int(0, "drugs"));
		SetPlayerData(playerid, P_AMMO, 		cache_get_field_content_int(0, "ammo"));
		SetPlayerData(playerid, P_METALL, 		cache_get_field_content_int(0, "metall"));
		SetPlayerData(playerid, P_WIFE, 		cache_get_field_content_int(0, "wife"));
		SetPlayerData(playerid, P_TEAM, 		cache_get_field_content_int(0, "team"));
		SetPlayerData(playerid, P_SUBDIVISON,	cache_get_field_content_int(0, "subdivison"));
		SetPlayerData(playerid, P_WAGE,			cache_get_field_content_int(0, "wage"));
		SetPlayerData(playerid, P_JOB, 			cache_get_field_content_int(0, "job"));

		SetPlayerData(playerid, P_HOUSE_TYPE,	cache_get_field_content_int(0, "house_type"));
		SetPlayerData(playerid, P_HOUSE_ROOM,	cache_get_field_content_int(0, "house_room"));
		SetPlayerData(playerid, P_HOUSE, 		cache_get_field_content_int(0, "house"));
		SetPlayerData(playerid, P_BUSINESS,		cache_get_field_content_int(0, "business"));
		SetPlayerData(playerid, P_FUEL_ST,		cache_get_field_content_int(0, "fuel_st"));
		SetPlayerData(playerid, P_ADMIN_WARN,		cache_get_field_content_int(0, "admin_warn"));

		SetPlayerData(playerid, P_FIGHT_STYLE_BOXING,		cache_get_field_content_int(0, "fight_1"));
		SetPlayerData(playerid, P_FIGHT_STYLE_KUNGFU,		cache_get_field_content_int(0, "fight_2"));
		SetPlayerData(playerid, P_FIGHT_STYLE_KNEEHEAD,		cache_get_field_content_int(0, "fight_3"));
		SetPlayerData(playerid, P_FIGHT_STYLE_GRABKICK,		cache_get_field_content_int(0, "fight_4"));
		SetPlayerData(playerid, P_FIGHT_STYLE_ELBOW,		cache_get_field_content_int(0, "fight_5"));

		SetPlayerData(playerid, P_PASS_PHOTO,		cache_get_field_content_int(0, "photo"));
		SetPlayerData(playerid, P_PASS,				cache_get_field_content_int(0, "pass"));
		SetPlayerData(playerid, P_PASS_CASH,		cache_get_field_content_int(0, "toll"));
		SetPlayerData(playerid, P_MED_REFERENCE,	cache_get_field_content_int(0, "med"));

		SetPlayerData(playerid, P_LAST_X,	cache_get_field_content_float(0, "last_x"));
		SetPlayerData(playerid, P_LAST_Y,	cache_get_field_content_float(0, "last_y"));
		SetPlayerData(playerid, P_LAST_Z,	cache_get_field_content_float(0, "last_z"));
		SetPlayerData(playerid, P_LAST_FA,	cache_get_field_content_float(0, "last_fa"));


		SetPlayerData(playerid, P_REG_TIME, 	cache_get_field_content_int(0, "reg_time"));
		cache_get_field_content(0, "reg_ip", g_player[playerid][P_REG_IP], mysql, 16);

		buffer = SetPlayerData(playerid, P_LAST_LOGIN_TIME,	cache_get_field_content_int(0, "last_login"));
		SetPlayerData(playerid, P_GAME_FOR_DAY,			cache_get_field_content_int(0, "game_for_day"));
		SetPlayerData(playerid, P_GAME_FOR_DAY_PREV,	cache_get_field_content_int(0, "game_for_day_prev"));

		buffer = GetElapsedTime(time, buffer, CONVERT_TIME_TO_DAYS);
		if(buffer == 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, GetPlayerData(playerid, P_GAME_FOR_DAY));
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
		}
		else if(buffer > 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, 0);
		}

		SetPlayerSettingData(playerid, S_TEAM_CHAT, 	cache_get_field_content_int(0, "setting1"));
		SetPlayerSettingData(playerid, S_CHANGE_NAME, 	cache_get_field_content_int(0, "setting3"));

		SetPlayerData(playerid, P_WARN, 				cache_get_field_content_int(0, "warn"));
		SetPlayerData(playerid, P_WARN_TIME,			cache_get_field_content_int(0, "warn_time"));
		SetPlayerData(playerid, P_MUTE, 				cache_get_field_content_int(0, "mute"));

		SetPlayerData(playerid, P_SKILL_COLT, 			cache_get_field_content_int(0, "skill_colt"));
		SetPlayerData(playerid, P_SKILL_SDPISTOL,		cache_get_field_content_int(0, "skill_sdpistol"));
		SetPlayerData(playerid, P_SKILL_DEAGLE, 		cache_get_field_content_int(0, "skill_deagle"));
		SetPlayerData(playerid, P_SKILL_SHOTGUN, 		cache_get_field_content_int(0, "skill_shotgun"));
		SetPlayerData(playerid, P_SKILL_MP5, 			cache_get_field_content_int(0, "skill_mp5"));
		SetPlayerData(playerid, P_SKILL_AK47, 			cache_get_field_content_int(0, "skill_ak47"));
		SetPlayerData(playerid, P_SKILL_M4, 			cache_get_field_content_int(0, "skill_m4"));
		SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, 	cache_get_field_content_int(0, "skill_sniper_rifle"));
		SetPlayerData(playerid, P_SKILL_SAWNOFF, 		cache_get_field_content_int(0, "skill_sawnoff"));
		SetPlayerData(playerid, P_SKILL_COMBAT_SG, 		cache_get_field_content_int(0, "skill_combat_sg"));
		SetPlayerData(playerid, P_SKILL_MICRO_UZI, 		cache_get_field_content_int(0, "skill_micro_uzi"));

		SetPlayerData(playerid, P_DONATE_CURRENT, 		cache_get_field_content_int(0, "donate"));
		SetPlayerData(playerid, P_DONATE_TOTAL, 		cache_get_field_content_int(0, "donate_total"));

		SetPlayerData(playerid, P_OSKIN,		 		cache_get_field_content_int(0, "org_skin"));

		SetPlayerData(playerid, P_SPAWN,		 		cache_get_field_content_int(0, "setting_spawn"));

		SetPlayerData(playerid, P_HOSPITAL,				bool: cache_get_field_content_int(0, "hospital"));

		SetPlayerData(playerid, P_HEALTH,				cache_get_field_content_float(0, "health"));

		SetPlayerData(playerid, P_CAR_SLOTS,			cache_get_field_content_int(0, "car_slots"));

		SetPlayerData(playerid, P_JAIL,					cache_get_field_content_int(0, "jail"));

		SetPlayerData(playerid, P_PREMIUM,				cache_get_field_content_int(0, "premium"));
		SetPlayerData(playerid, P_PREMIUM_DATE,				cache_get_field_content_int(0, "premium_date"));

		SetPlayerData(playerid, P_LOAD_SKILL,			cache_get_field_content_int(0, "load_skill"));
		SetPlayerData(playerid, P_LUMBERG_SKILL,		cache_get_field_content_int(0, "lumberg_skill"));

		SetPlayerData(playerid, P_DEPOSIT,              cache_get_field_content_int(0, "deposit"));

		SetPlayerData(playerid, P_FAMILY,              	cache_get_field_content_int(0, "family"));
		SetPlayerData(playerid, P_FAMILY_RANK,        	cache_get_field_content_int(0, "family_rank"));

		SetPlayerData(playerid, P_FISH_MAS,        		cache_get_field_content_int(0, "fish_mas"));

		SetPlayerData(playerid, P_NEED_EAT,        		cache_get_field_content_int(0, "eat"));
		SetPlayerData(playerid, P_NEED_WATER,        	cache_get_field_content_int(0, "water"));

		SetPlayerData(playerid, P_LEVEL, 	cache_get_field_content_int(0, "score"));
		SetPlayerData(playerid, P_EXP, 		cache_get_field_content_int(0, "exp"));

		SetPlayerData(playerid, P_NEED_EAT,        		cache_get_field_content_int(0, "eat"));
		SetPlayerData(playerid, P_NEED_WATER,        	cache_get_field_content_int(0, "water"));

		SetPlayerData(playerid, P_TRUCK_ROAD,        	cache_get_field_content_int(0, "truck_road"));
		SetPlayerData(playerid, P_TRUCK_WAGE,        	cache_get_field_content_int(0, "truck_wage"));
		SetPlayerData(playerid, P_TRUCK_MILEAGE,        cache_get_field_content_float(0, "truck_mileage"));

		SetPlayerData(playerid, P_GIFTS,        		cache_get_field_content_int(0, "gifts"));

		SetPlayerData(playerid, P_BONUS_GET,        	cache_get_field_content_int(0, "bonusget"));
        SetPlayerData(playerid, P_BONUS_DAY,        	cache_get_field_content_int(0, "loginday"));

		SetTimerEx("NeedEatPlayer", 1000*60*20, true, "i", playerid);
		SetTimerEx("NeedWaterPlayer", 1000*60*30, true, "i", playerid);

		SendClientMessageTip(playerid, "У Вас не подключена защита Google Authenticator");
		SendClientMessageTip(playerid, "Рекомендуем подключить данный вид защиты. /mm > Безопасность > Google Authenticator");
		// -------------------------------------------------------------------------
		SelectPlayerSpawn(playerid, 0);
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET online = '1' WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
		mysql_query(mysql, query);
	}
	cache_delete(result);
}

stock ShowSelectSpawnDialog(playerid)
{
    Dialog
	(
	    playerid,
	    DIALOG_SELECT_SPAWN,
	    DIALOG_STYLE_LIST,
	    "Выберите место спавна",
	    "1. На месте выхода из игры\n"\
	    "2. На Ж/Д вокзале или автостанции\n"\
		"3. В собственном доме\n"\
		"4. В гостиничном номере\n"\
		"5. На базе организации\n"\
		"6. В гостях (совместное проживание)\n"\
		"7. В особняке семьи",
	    "Выбор", ""
	);

	return 1;
}

stock SelectPlayerSpawn(playerid, spawntype)
{
	new query[128],
		time = gettime();
	if(spawntype == 0)
	{
    	SetPlayerSpawnInit(playerid);
	}
	else if(spawntype != 0)
	{
        SetSpawnInfo
		(
			playerid,
			0,
			GetPlayerSkinEx(playerid),
			GetPlayerData(playerid, P_LAST_X),
			GetPlayerData(playerid, P_LAST_Y),
			GetPlayerData(playerid, P_LAST_Z),
			GetPlayerData(playerid, P_LAST_FA),
			0, 0, 0, 0, 0, 0
		);
		SetPlayerData(playerid, P_POS_X, 0.0);
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET last_x = '0.0' , last_y = '0.0', last_z = '0.0' , last_fa = '0.0' WHERE id = '%d'", GetPlayerAccountID(playerid));
		mysql_tquery(mysql, query, "", "");

	}
	SpawnPlayer(playerid);

	if(GetPlayerData(playerid, P_SKIN))
	{
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET last_ip='%e',last_login=%d WHERE id=%d LIMIT 1", GetPlayerIpEx(playerid), time, GetPlayerAccountID(playerid));
		mysql_tquery(mysql, query, "", "");

		new player_admin_rank = GetPlayerAdminEx(playerid);

		if(player_admin_rank)
		{
			new admin_rank[6][32] =
			{
				"администратор первого уровня",
				"администратор второго уровня",
				"администратор третьего уровня",
				"администратор четвёртого уровня",
				"администратор пятого уровня",
				"администратор шестого уровня"
			};

			format(query, sizeof query, "Вы вошли как %s", admin_rank[ player_admin_rank - 1 ]);
			SendClientMessage(playerid, 0xFFFF00FF, query);
		}

		new player_premium = GetPlayerData(playerid, P_PREMIUM_DATE);

		if(player_premium)
		{
			if((player_premium - time) > 0)
			{
			    new premium_day,
			        premium_month,
			        premium_year;

				timestamp_to_date(player_premium, premium_year, premium_month, premium_day);

				format
				(
					query, sizeof query,
					"Ваш VIP статус действует до {FFFFFF}%02d.%02d.%d",
					premium_day, premium_month, premium_year
				);
				SendClientMessage(playerid, 0xEC174FFF, query);
			}
			else
			{
			    format(query, sizeof query, "Срок действия VIP статуса истёк. Для продления подписки используйте: {FFFFFF}/mn > Дополнительно");
				SendClientMessage(playerid, 0xEC174FFF, query);

				SetPlayerData(playerid, P_PREMIUM, 					0);

				UpdatePlayerDatabaseInt(playerid, "premium", 		0);
			}
		}

		if(GetPlayerData(playerid, P_WARN) > 0)
		{
			if(time > GetPlayerData(playerid, P_WARN_TIME))
			{
				SetPlayerData(playerid, P_WARN, 0);
				SetPlayerData(playerid, P_WARN_TIME, 0);
			}
			else
			{
				format(query, sizeof query, "Количество предупреждений: %d из 3", GetPlayerData(playerid, P_WARN));
				SendClientMessage(playerid, 0xCECECEFF, query);
				SendClientMessage(playerid, 0xCECECEFF, "После 3 предупреждения аккаунт будет заблокирован");
			}
		}
		format(query, sizeof query, "Текущий онлайн: {FFFF00}%d человек",online);
		SendClientMessage(playerid, -1, "Добро пожаловать на сервер {ffff00}SAMP Mobile!");
		SendClientMessage(playerid, -1, "Сообщество ВКонтакте:{ffff00} vk.com/samp.mobile");
		SendClientMessage(playerid, -1, "{ffffff}Сайт:{ffff00} samp-mobile.com");
		SendClientMessage(playerid, -1, query);

		SetPlayerInit(playerid);
		if(GetPlayerData(playerid,P_BONUS_GET) == 1) return false;
		{
			SetPlayerData(playerid,P_BONUS_DAY,GetPlayerData(playerid,P_BONUS_DAY)+1);
			new fmt_text[256];
			new bonus = GetPlayerData(playerid,P_BONUS_DAY) * 1500;
			printf("Взял бонус %s , до бонуса банк счет %d",GetPlayerNameEx(playerid),GetPlayerData(playerid, P_BANK));
			AddPlayerData(playerid, P_BANK, +, bonus);
			SetPlayerData(playerid,P_BONUS_GET,1);
			printf("Взял бонус %s , после бонуса банк счет %d",GetPlayerNameEx(playerid),GetPlayerData(playerid, P_BANK));
			format(fmt_text, sizeof fmt_text, "{ffffff}Добро пожаловать{FFFF00} %s\n{ffffff}Ежедневная награда {FFFF00}%d/7\n{ffffff}Награда:{FFFF00}%d$\n\n{6d6d6d}Бонус зачислен на основной банковский счёт.", GetPlayerNameEx(playerid), GetPlayerData(playerid,P_BONUS_DAY),bonus);
			Dialog(playerid,0,DIALOG_STYLE_MSGBOX,"Ежедневный бонус",fmt_text,"Далее","");
			format(fmt_text, sizeof fmt_text, "UPDATE `accounts` SET loginday = '%d', bonusget = '1' WHERE id = '%d' LIMIT 1", GetPlayerData(playerid, P_BONUS_DAY), GetPlayerAccountID(playerid));
			mysql_query(mysql, fmt_text);
		    if(GetPlayerData(playerid,P_BONUS_DAY) >= 7) return SetPlayerData(playerid,P_BONUS_DAY,0),UpdatePlayerDatabaseInt(playerid, "loginday", 0);
		}
	}
	else
	{
		SetPlayerData(playerid, P_ACCOUNT_STATE, ACCOUNT_STATE_REG_SKIN);
		SendClientMessage(playerid, 0x32a44bFF, "Выберите внешность Вашего персонажа");
	}
	return 1;
}

public: ShowPlayerLoginDialog(playerid, step, wrong_pass)
{
	if(GetPlayerData(playerid, P_ACCOUNT_STATE) != ACCOUNT_STATE_LOGIN) return 0;

	/*
	new request_type = REQUEST_TYPE_OFF;
	if(strcmp(GetPlayerIpEx(playerid), GetPlayerData(playerid, P_LAST_IP)) != 0)
	{
		request_type = REQUEST_TYPE_IP;
	}
	else
	{
		new subnet_last_ip[16], subnet_cur_ip[16];

		GetSubnet(subnet_cur_ip, GetPlayerIpEx(playerid));
		GetSubnet(subnet_last_ip, GetPlayerData(playerid, P_LAST_IP));

		if(strcmp(subnet_cur_ip, subnet_last_ip) != 0)
		{
			request_type = REQUEST_TYPE_SUBNET;
		}
	}
	*/

	new fmt_str[256];
	switch(step)
	{
		case LOGIN_STATE_CHECK_BAN:
		{
			new Cache: result;

			format(fmt_str, sizeof fmt_str, "SELECT * FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, fmt_str, true);

			if(cache_num_rows())
			{
				new unban_time = cache_get_field_content_int(0, "ban_time");
				new ban_days = GetElapsedTime(unban_time, gettime(), CONVERT_TIME_TO_DAYS);

				if(ban_days)
				{
					new reason[32];
					new admin_name[21];

					new year, month, day;
					new hour, minute, second;
					new ban_time = cache_get_field_content_int(0, "time");

					cache_get_field_content(0, "description", reason);
					cache_get_field_content(0, "admin", admin_name);

					timestamp_to_date(ban_time, year, month, day, hour, minute, second);
					format
					(
						fmt_str, sizeof fmt_str,
						"{FFFFFF}Этот аккаунт заблокирован на {FF3333}%d дней\n\n"\
						"{FFFFFF}Ник администратора: %s\n"\
						"Причина блокировки: %s\n"\
						"Дата и время: %d-%02d-%02d %02d:%02d:%02d\n\n"\
						"Введите {ffff00}/q (/quit) {FFFFFF}чтобы выйти",
						ban_days,
						admin_name,
						reason,
						year, month, day, hour, minute, second
					);
					Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, ""SERVER_NAME"", fmt_str, "Закрыть", "");

					Kick:(playerid, " ", 3000);
				}
				else
				{
					format(fmt_str, sizeof fmt_str, "DELETE FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
					mysql_tquery(mysql, fmt_str, "", "");

					CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
				}
			}
			else CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);

			return cache_delete(result);
		}
		case LOGIN_STATE_PASSWORD:
		{
			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Добро пожаловать на сервер "SERVER_NAME"\n"\
				"Аккаунт с Вашим ником зарегистрирован\n\n"\
				"Логин: {32a44b}%s\n",
				GetPlayerNameEx(playerid)
			);
			if(wrong_pass)
			{
				new ch[3];
				new attemps = GetPlayerData(playerid, P_PASS_ATTEMPS);

				valstr(ch, attemps);

				strcat(fmt_str, "{FF3300}Неверный пароль! Осталось попыток: ");
				strcat(fmt_str, ch);

				AddPlayerData(playerid, P_PASS_ATTEMPS, -, 1);
				switch(attemps)
				{
					case 0:
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{FF9933}Лимит попыток авторизации",
							"{FFFFFF}Вы ввели неправильный пароль 3 раза подряд", // . Ваш IP адрес забанен на сутки
							"Закрыть", ""
						);
						Kick:(playerid, " ");

						return 1;

						// BanEx(playerid, "Лимит попыток авторизации");
						// return AddBan(0, gettime(), 1, GetPlayerIpEx(playerid), "Лимит попыток авторизации", "Система безопасности");
					}
					case 1:
					{
						SendClientMessage(playerid, 0xCECECEFF, "При неправильном вводе пароля Вы будете забанены");
					}
				}
				PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
			}
			else strcat(fmt_str, "{FFFFFF}Введите пароль от аккаунта:");

			Dialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Авторизация", fmt_str, "Войти", "Отмена");
		}
		case LOGIN_STATE_MAIL: // ввод части E-Mail адреса
		{
		    new now_time = gettime();

		    if((now_time - GetPlayerData(playerid, P_LAST_LOGIN_TIME) > 86400 * 3))
			{
				if(!wrong_pass)
				{
				    new at_chars[31] = "******************************";

					new email[64],
					    email_at = strfind(GetPlayerData(playerid, P_EMAIL), "@");

					if(email_at != -1)
					{
					    strcat(email, at_chars[30 - (random(4) + 1)]);

					    strmid(fmt_str, GetPlayerData(playerid, P_EMAIL), strlen(email), email_at + 1);
					    strcat(email, fmt_str);

					    strcat(email, at_chars[30 - (strlen(GetPlayerData(playerid, P_EMAIL)) - strlen(email))]);

						format
						(
							fmt_str, sizeof fmt_str,
							"{1E90FF}Вы не заходили на аккаунт более 3-ёх дней\n\n"\
							"{FFFFFF}Система безопасности запрашивает ввод\n"\
							"Вашей электронной почты\n\n{ffff00}%s\n\n"\
							"{FFFFFF}Введите полный адрес, заполнив пропуски:",
							email
						);

						Dialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Электронная почта", fmt_str, "Ввести", "Выход");
					}
				}
				else
				{
					SendClientMessage(playerid, 0xFF0000FF, "Адрес электронной почты введён неверно. Доступ запрещен");
					Kick:(playerid);
				}
			}
			else
			{
				return CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
			}
		}
		case LOGIN_STATE_PHONE: // ввод 5 послед. цифр телефона
		{
			if(GetPlayerData(playerid, P_REQUEST_PHONE))
			{
				if(!wrong_pass)
				{
					new phone[13];

					strmid(phone, GetPlayerData(playerid, P_SETTING_PHONE), 0, strlen(GetPlayerData(playerid, P_SETTING_PHONE)) - 5);
					strcat(phone, "*****");

					format
					(
						fmt_str, sizeof fmt_str,
						"{FFFFFF}Система безопасности запрашивает ввод\n"\
						"Вашего мобильного телефона\n\n{ffff00}%s\n\n"\
						"{FFFFFF}Введите последние 5 цифр номера:",
						phone
					);
					Dialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Мобильный телефон", fmt_str, "Ввести", "Выход");
				}
				else
				{
					SendClientMessage(playerid, 0xFF0000FF, "Номер мобильного телефона введен неверно. Доступ запрещен");
					Kick:(playerid);
				}
			}
			else
			{
				return CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
			}
		}
		case LOGIN_STATE_PIN_CODE: // ввод пин кода
		{
			if(GetPlayerData(playerid, P_REQUEST_PIN))
			{
				if(wrong_pass)
				{
					SendClientMessage(playerid, 0xFF0000FF, "PIN-код введен неверно. Доступ запрещен");
					Kick:(playerid);
				}
				else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_LOGIN_CHECK);
			}
			else
			{
				return CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
			}
		}
		case LOGIN_STATE_LOAD_ACC:
		{
			SetPlayerData(playerid, P_AUTH_TIME, -1);
			LoadPlayerData(playerid);
		}
	}
	SetPlayerData(playerid, P_ACCOUNT_STEP_STATE, step);

	return 1;
}

public: ClearPlayerAnim(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
}


public: ClearPlayerChatAnim(playerid)
{
	if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_CHAT)
	{
		ClearPlayerAnim(playerid);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
	}
}

public: SetPlayerLoaderJobLoad(playerid) // брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_LOAD)
		{
			new rand = random(2);

			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 1);

			switch(rand)
			{
			    case 0: SetPlayerAttachedObject(playerid, 1 ,3052, A_OBJECT_BONE_SPINE,0.11,0.36,0.0,0.0,90.0);
			    case 1: SetPlayerAttachedObject(playerid, 1 ,2060, A_OBJECT_BONE_SPINE,0.11,0.36,0.0,0.0,90.0);
			}
			SetPlayerLoaderJobUnLoadCP(playerid);
		}
	}
}

public: SetPlayerLoaderArmyJobLoad(playerid) // брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADERA)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADERARMY_LOAD)
		{
			new rand = random(2);

			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 1);

			switch(rand)
			{
			    case 0: SetPlayerAttachedObject(playerid, 1 ,3052, A_OBJECT_BONE_SPINE,0.11,0.36,0.0,0.0,90.0);
			    case 1: SetPlayerAttachedObject(playerid, 1 ,2060, A_OBJECT_BONE_SPINE,0.11,0.36,0.0,0.0,90.0);
			}
			SetPlayerLoaderArmyJobUnLoadCP(playerid);
		}
	}
}

public: SetPlayerMinerJobTakeOre(playerid, step)
{
	DisablePlayerCheckpoint(playerid);
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		new time = 1000;

		switch(step)
		{
			case 1:
			{
				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);

				ClearAnimations(playerid);
				ApplyAnimation(playerid, "CARRY", "liftup", 8.0, 0, 0, 0, 0, 0, 1);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 905, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.05, -0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 2936, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.05, 0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 1, 1, 1, 2250, 1);

				time = 2500;
			}
			case 3:
			{
				RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE, 1458, A_OBJECT_BONE_SPINE, -0.9, 0.7, 0.02, 0.0, 90.0, 0.0, 0.58, 0.6, 0.4, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE + 1, 816, A_OBJECT_BONE_SPINE, -0.63, 1.3, 0.0, 270.0, 75.0, 0.0, 0.5, 0.4, 0.8, 0);

				SetPlayerMinerJobUnLoadCP(playerid);
				return ;
			}
			default:
				return ;
		}
		SetTimerEx("SetPlayerMinerJobTakeOre", time, false, "ii", playerid, step + 1);
	}
}

public: SetPlayerLumberJackTakeWood(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LUMBERJACK)
	{
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_PUT);

		SetPlayerLumberUnJackChopCP(playerid);

		RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 1, 0, 1, 0, 1500, 1);

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 0, 1, 1, 1);
		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1463, A_OBJECT_BONE_RIGHT_HAND, 0.006, 0.138, -0.192, -109.8, -2.2, -102.9, 0.505, 0.328, 0.57);
	}
}

public: LumberJackPlayerDrop(playerid, bool: message)
{
	SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LUMBERJACK_CHOP);

	if(message)
		SendClientMessage(playerid, 0xCECECEFF, "Вы уронили дрова");

	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
	SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 326, A_OBJECT_BONE_RIGHT_HAND, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);

	ApplyAnimation(playerid, "MISC", "Idle_Chat_02", 4.1, 0, 0, 0, 0, 1, 1);

	SetPlayerLumberJackChopCP(playerid);

	return 1;
}

public: MinerCarriageUpdate(carriageid)
{
	if(miner_carriage[carriageid][MC_STATUS] && !miner_carriage[carriageid][MC_IN_MOVE])
	{
		if(miner_carriage[carriageid][MC_ORE_COUNT] >= 500)
		{
			new fmt_str[55],
				items = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);

			miner_carriage[carriageid][MC_ORE_COUNT] -= 500;

			SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, items + 500);
			UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);

			format(fmt_str, sizeof fmt_str, "Разгрузка\n\n{ffff00}Количество руды\n%d / 10000 кг", miner_carriage[carriageid][MC_ORE_COUNT]);
			UpdateDynamic3DTextLabelText(miner_carriage[carriageid][MC_LABEL], 0x66CCFFFF, fmt_str);
		}

		else if(miner_carriage[carriageid][MC_ORE_COUNT] <= 0)
		{
			miner_carriage[carriageid][MC_IN_MOVE] = true;

			SetTimerEx("MinerCarriageMove", 7_000, false, "i", carriageid);
			UpdateDynamic3DTextLabelText(miner_carriage[carriageid][MC_LABEL], 0xFFFF00FF, "Ожидание...");
		}
	}
}

public: MinerCarriageMove(carriageid)
{
	new bool: status = miner_carriage[carriageid][MC_STATUS];
	if(status)
	{
		MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_START_POS_X], miner_carriage[carriageid][MC_START_POS_Y], miner_carriage[carriageid][MC_START_POS_Z], 10.0, 0.0, 0.0, 90.0);
	}
	else
	{
		MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_END_POS_X], miner_carriage[carriageid][MC_END_POS_Y], miner_carriage[carriageid][MC_END_POS_Z], 10.0, 0.0, 0.0, 90.0);
	}

	DestroyDynamic3DTextLabel(miner_carriage[carriageid][MC_LABEL]);

	miner_carriage[carriageid][MC_IN_MOVE] = true;

	miner_carriage[carriageid][MC_STATUS] = (status ^ true);
}

public: MinerCarriageSetState(carriageid)
{
	if(miner_carriage[carriageid][MC_STATUS]) // вагонетка
	{
		miner_carriage[carriageid][MC_LABEL] = CreateDynamic3DTextLabel("Разгрузка\n\n{ffff00}Количество руды\n10000 / 10000 кг", 0x66CCFFFF, -2548.1213, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[carriageid][MC_ORE_COUNT] = 10_000;
	}
	else
	{
		miner_carriage[carriageid][MC_LABEL] = CreateDynamic3DTextLabel("Загрузка\n\n{ffff00}Количество руды\n0 / 10000 кг", 0x32a44bFF, -2375.1228, 294.7194, -15.4815 + 3.0, 10.0);
		miner_carriage[carriageid][MC_PICKUP_ID] = CreatePickup(1318, 23, -1906.6914,-1620.1650,2.0175, -1, PICKUP_ACTION_TYPE_MINER_CARRI);
		miner_carriage[carriageid][MC_ORE_COUNT] = 0;
	}
}

public: NextBusRouteCP(playerid)
{
	if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
	{
		if(IsPlayerInJob(playerid))
		{
			new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
			new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);
			new next_cp = route_step + 1;

			if(g_bus_route[route_id][next_cp][BRS_POS_X] == 0.0)
			{
				next_cp = 0;
			}

			SetPlayerRaceCheckpoint
			(
				playerid,
				g_bus_route[route_id][route_step][BRS_STOP],
				g_bus_route[route_id][route_step][BRS_POS_X],
				g_bus_route[route_id][route_step][BRS_POS_Y],
				g_bus_route[route_id][route_step][BRS_POS_Z],
				g_bus_route[route_id][next_cp][BRS_POS_X],
				g_bus_route[route_id][next_cp][BRS_POS_Y],
				g_bus_route[route_id][next_cp][BRS_POS_Z],
				4.0,
				RCP_ACTION_TYPE_BUS_ROUTE
			);
			AddPlayerData(playerid, P_BUS_ROUTE_STEP, +, 1);
		}
	}
}

public: NextFarmRouteCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FARM)
	{
		new route_step = GetPlayerData(playerid, P_FARM_ROUTE_STEP);
		new next_cp = route_step + 1;

		if(next_cp == 14)
		{
			SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FARM_PUT);

			AddPlayerData(playerid, P_FARM_ROUTE_STEP, +, 1);

			SetPlayerCheckpoint
			(
				playerid,
				g_farm_route[route_step][FRS_POS_X],
				g_farm_route[route_step][FRS_POS_Y],
				g_farm_route[route_step][FRS_POS_Z],
				4.0,
				CP_ACTION_TYPE_FARM_ROUTE
			);

			ApplyAnimation(playerid, "CARRY", "crry_prtial",4.0,1,0,0,1,1,1);
			SetPlayerAttachedObject(playerid, 1, 2060, 1,0.11,0.36,0.0,0.0,90.0);
		}

		SetPlayerCheckpoint
		(
			playerid,
			g_farm_route[route_step][FRS_POS_X],
			g_farm_route[route_step][FRS_POS_Y],
			g_farm_route[route_step][FRS_POS_Z],
			4.0,
			CP_ACTION_TYPE_FARM_ROUTE
		);
		AddPlayerData(playerid, P_FARM_ROUTE_STEP, +, 1);
	}
}

public: NextCombainRouteCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_COMBAIN)
	{
		new route_step = GetPlayerData(playerid, P_COMBAIN_ROUTE_STEP);
		new next_cp = route_step + 1;

		if(route_step == 34)
		{
			SetPlayerTempJobState(playerid, TEMP_JOB_STATE_COMBAIN_PUT);
		}

		SetPlayerRaceCheckpoint
		(
			playerid,
			g_combain_route[route_step][CRS_STOP],
			g_combain_route[route_step][CRS_POS_X],
			g_combain_route[route_step][CRS_POS_Y],
			g_combain_route[route_step][CRS_POS_Z],
			g_combain_route[next_cp][CRS_POS_X],
			g_combain_route[next_cp][CRS_POS_Y],
			g_combain_route[next_cp][CRS_POS_Z],
			4.0,
			RCP_ACTION_TYPE_COMBAINER_ROUT
		);
		AddPlayerData(playerid, P_COMBAIN_ROUTE_STEP, +, 1);
	}
}

public: StartPlayerJob(playerid, jobid)
{
	if(GetPlayerJob(playerid) == jobid)
	{
		if(!IsPlayerInJob(playerid))
		{
			new job_car = GetPlayerJobCar(playerid);
			if(IsPlayerInVehicle(playerid, job_car))
			{
				new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
				new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1;

				if(jobid == car_type)
				{
					SetPlayerJobLoadItems(playerid, 0);

					SetPlayerData(playerid, P_JOB_WAGE, 0);
					SetPlayerData(playerid, P_IN_JOB, true);
					SetVehicleData(job_car, V_ACTION_ID, true);

					new fmt_str[128];

					switch(jobid)
					{
						case JOB_BUS_DRIVER:
						{
							new route_id = GetPlayerData(playerid, P_BUS_ROUTE);

							format(fmt_str, sizeof fmt_str, "%s\n{FFFFFF}Стоимость проезда: {FF9900}$%d", g_bus_routes[route_id][BR_NAME], GetPlayerData(playerid, P_JOB_TARIFF));
							CreateVehicleLabel(job_car, fmt_str, g_bus_routes[route_id][BR_COLOR], 0.0, 0.0, 2.6, 45.0);

							format(fmt_str, sizeof fmt_str, "начал работу водителя автобуса на маршруте %s", g_bus_routes[route_id][BR_NAME]);
							Action(playerid, fmt_str, _, false);

							NextBusRouteCP(playerid);

							SetPVarFloat(playerid, "car_damage", 1000.0);
						}
						case JOB_TAXI_DRIVER:
						{
							format(fmt_str, sizeof fmt_str, "%s{FFFF00}Тариф: $%d", GetPlayerData(playerid, P_JOB_SERVICE_NAME), GetPlayerData(playerid, P_JOB_TARIFF));
							CreateVehicleLabel(job_car, fmt_str, 0x1E90FFFF, 0.0, 0.0, 1.4, 25.0);

							Action(playerid, "начал работу таксиста", _, false);
						}
						case JOB_MECHANIC:
						{
							SetPlayerData(playerid, P_MECHANIC_FILL_PAY, 0);
							SetPlayerData(playerid, P_MECHANIC_REPAIR_PAY, 0);

							format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{CECECE}Нет топлива", GetPlayerData(playerid, P_JOB_SERVICE_NAME));
							CreateVehicleLabel(job_car, fmt_str, 0xCC9900FF, 0.0, 0.0, 2.0, 25.0);

							Action(playerid, "начал работу автомеханика", _, false);
						}
						case JOB_TRUCKER:
						{
							if(!GetTruckIndex(job_car))
							{
								fmt_str = "Служба\n{FFFFFF}Доставки продуктов";

								SendClientMessage(playerid, 0x32a44bFF, "Используйте {1E90FF}/bizlist {32a44b}чтобы посмотреть заказы от владельцев бизнесов");
								Action(playerid, "начал работу развозчика продуктов", _, false);
							}
							else
							{
								fmt_str = "Служба\n{FFFFFF}Доставки топлива";

								SendClientMessage(playerid, 0x32a44bFF, "Используйте {1E90FF}/fuellist {32a44b}для просмотра заказов от владельцев АЗС");
								Action(playerid, "начал работу развозчика топлива", _, false);
							}

							CreateVehicleLabel(job_car, fmt_str, 0x1E90FFFF, 0.0, 2.1, 2.1, 20.0);
						}
					}
				}
			}
		}
	}
	return 1;
}

public: EndPlayerJob(playerid)
{
    SetPlayerData(playerid, P_IN_JOB, false),SetPlayerTempJob(playerid, TEMP_JOB_NONE);
	if(IsPlayerInJob(playerid))
	{
		new vehicleid = GetPlayerJobCar(playerid);

		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCK_TRAIL) return 1;

		if(vehicleid != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(vehicleid);
			SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
		}
	}
	KillEndJobTimer(playerid);

	new fmt_str[128];
	new wage = GetPlayerJobWage(playerid);
	new items = GetPlayerJobLoadItems(playerid);

	SetPlayerData(playerid, P_JOB_WAGE, 0);
	SendClientMessage(playerid, 0xFFFF00FF, "Рабочий день завершен!");

	SetPlayerData(playerid, P_IN_JOB, false);
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER)
		{
			RemovePlayerAttachedObjects(playerid);
			SetPlayerSkinInit(playerid);

			format(fmt_str, sizeof fmt_str, "Вы успешно закончили рабочий день");
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			SetVehicleToRespawn(GetPlayerData(playerid, P_JOB_CAR));

			SetPlayerData(playerid, P_JOB_CAR , INVALID_VEHICLE_ID);

			SetPlayerJobLoadItems(playerid, 0);
			SetPlayerTempJob(playerid, TEMP_JOB_NONE);
		}
    if(GetPlayerTempJob(playerid) == TEMP_JOB_PIZZA)
		{
			new pay_sum = (items * GetTempJobInfo(TEMP_JOB_PIZZA, TJ_PAY_FOR_LOAD));

			pay_sum *= g_doubling[DOUBLING_WAGE];
		    DisablePlayerCheckpoint(playerid);
			format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Всего доставлено: {FFFFFF}%d", GetPlayerJobLoadItems(playerid));
			SendClientMessage(playerid, 0xffff00FF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Всего заработано {FFFFFF}$%d", pay_sum);
			SendClientMessage(playerid, 0xffff00FF, fmt_str);

			GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на развозчике пиццы", true, false);

			format(fmt_str, sizeof fmt_str, "~b~~h~+$%d", pay_sum);
			GameTextForPlayer(playerid, fmt_str, 4000, 1);
			SetPlayerTempJobState(playerid, false);
			SetPlayerData(playerid, P_CHECK,0);
		}

	switch(GetPlayerData(playerid, P_JOB))
	{
		case JOB_BUS_DRIVER:
		{
			new Float: health = GetPVarFloat(playerid, "car_damage");
			new repair_sum;

			if(health < 1000.0)
				repair_sum = (floatround((1000.0 - health) + float(random(100)+10))) / 6;

			DisablePlayerRaceCheckpoint(playerid);

			format(fmt_str, sizeof fmt_str, "Заработано: {00FF00}$%d", wage + (items * GetPlayerData(playerid, P_JOB_TARIFF)));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Количество пассажиров: {00FF00}%d{FFFFFF}. Куплено билетов на {00FF00}$%d", items, items * GetPlayerData(playerid, P_JOB_TARIFF));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "За ремонт автобуса: {CECECE}-$%d", repair_sum);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			if(repair_sum < wage)
				wage -= repair_sum;

			//GiveMoney(playerid, salary, "Зарплата Водителя Маршрутки", true, true);
		}
		case JOB_TAXI_DRIVER:
		{
		    DestroyVehicleLabel(GetPlayerData(playerid, P_JOB_CAR));
			DisablePlayerRaceCheckpoint(playerid);
			wage = items * GetPlayerData(playerid, P_JOB_TARIFF);

			format(fmt_str, sizeof fmt_str, "Заработано: {00FF00}$%d", wage);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Количество пассажиров: {00FF00}%d", items);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

		}
		case JOB_MECHANIC:
		{
			DisablePlayerRaceCheckpoint(playerid);
			wage = GetPlayerData(playerid, P_MECHANIC_FILL_PAY) + GetPlayerData(playerid, P_MECHANIC_REPAIR_PAY);
            DestroyVehicleLabel(GetPlayerData(playerid, P_JOB_CAR));
			format(fmt_str, sizeof fmt_str, "Получено за ремонт: {00FF00}$%d", GetPlayerData(playerid, P_MECHANIC_REPAIR_PAY));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Получено за заправку: {00FF00}$%d", GetPlayerData(playerid, P_MECHANIC_FILL_PAY));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Всего заработано: {ffff00}$%d", wage);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		}
	}

	SendClientMessage(playerid, 0x32a44bFF, "Деньги будут перечислены на Ваш счет во время зарплаты");

	TransferCoffersMoney(-wage, "Выплата заработной платы работникам", "", false);

	AddPlayerData(playerid, P_WAGE, +, wage);
	SetVehicleToRespawn(GetPlayerData(playerid, P_JOB_CAR));
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);

	format(fmt_str, sizeof fmt_str, "UPDATE accounts SET wage=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_WAGE), GetPlayerAccountID(playerid));
	mysql_query(mysql, fmt_str, false);

	return 1;
}

public: ShowChangeNameHistory(playerid, name[])
{
	new fmt_str[64];
	new rows = cache_num_rows();

	if(!rows)
	{
		format(fmt_str, sizeof fmt_str, "Прошлые имена %s", name);
		return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, "{FFFFFF}История изменения имен персонажа пуста", "Закрыть", "");
	}

	new text[1024] = "{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		strcat(fmt_str, "\n");

		strcat(text, fmt_str);
	}
	format(fmt_str, sizeof fmt_str, "Прошлые имена %s", name);
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "Закрыть", "");
}

public: ShowPlayerPhoneBook(playerid)
{
	if(IsPlayerPhoneBookInit(playerid))
	{
		if(GetPlayerPhoneBookContacts(playerid) > 0)
		{
			new fmt_str[37];
			new string[((sizeof fmt_str) * MAX_PHONE_BOOK_CONTACTS) + 1];

			for(new idx, count; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
			{
				if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;
				SetPlayerListitemValue(playerid, count ++, idx);

				format(fmt_str, sizeof fmt_str, "%s - tel.%s\n", GetPlayerPhoneBook(playerid, idx, PB_NAME), GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
				strcat(string, fmt_str);
			}
			Dialog(playerid, DIALOG_PHONE_BOOK, DIALOG_STYLE_LIST, "Телефонная книга", string, "Варианты", "Отмены");
		}
		else
		{
			SendClientMessage(playerid, 0xCECECEFF, "В телефонной книге нет номеров");
			SendClientMessage(playerid, 0xCECECEFF, "Чтобы добавить новый контакт введите {FFFF00}/add [id игрока]");
		}
	}
	else
	{
		InitPlayerPhoneBook(playerid);
		CallLocalFunction("ShowPlayerPhoneBook", "i", playerid);
	}
	return 1;
}

public: BusinesGPSListInit()
{
	new rows;
	new query[64 + 1];
	new Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM business_gps ORDER BY pos DESC, time ASC LIMIT %d", MAX_BUSINESS_GPS);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessGPSInfo(idx, BG_SQL_ID, 	cache_get_row_int(idx, 0));
		SetBusinessGPSInfo(idx, BG_BIZ_ID, 	cache_get_row_int(idx, 1));
		SetBusinessGPSInfo(idx, BG_POS, 	cache_get_row_int(idx, 2));
		SetBusinessGPSInfo(idx, BG_TIME, 	cache_get_row_int(idx, 3));
	}
	g_business_gps_count = rows;
	g_business_gps_init = true;

	cache_delete(result);
}

public: ShowPlayerGPSBusinessList(playerid)
{
	if(g_business_gps_init)
	{
		new businessid;

		new fmt_str[44];
		new string[(sizeof fmt_str) * MAX_BUSINESS_GPS];

		if(!g_business_gps_count)
			string = "В данный момент в списке нет бизнесов",SendClientMessage(playerid,-1,"бизов нет");

		for(new idx, count; idx < g_business_gps_count; idx ++)
		{
			businessid = GetBusinessGPSInfo(idx, BG_BIZ_ID);

			format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetBusinessInteriorInfo(GetBusinessData(businessid, B_INTERIOR), BT_NAME));
			strcat(string, fmt_str);

			SetPlayerListitemValue(playerid, count ++, idx);
		}
		Dialog(playerid, DIALOG_GPS_BUSINESS, DIALOG_STYLE_LIST, "{FFCD00}Реклама бизнеса", string, "Отметить", "Назад");
	}
	else
	{
		BusinesGPSListInit();
		CallLocalFunction("ShowPlayerGPSBusinessList", "i", playerid);
	}
}

public: ShowPlayerBusinessDialog(playerid, operationid)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		switch(operationid)
		{
			case BIZ_OPERATION_PARAMS: // управление заправкой
			{
				Dialog
				(
					playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
					"Изменение параметров бизнеса",
					"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}бизнес\n"\
					"2. Установить цену на вход\n"\
					"3. Заказать продукты\n"\
					"4. Финансовая статистика\n"\
					"5. Улучшить бизнес\n"\
					"6. Изменить цену на товары\n"\
					"7. Изменить название бизнеса\n",
					"Выбрать", "Назад"
				);
			}
			case BIZ_OPERATION_LOCK: // открыть / закрыть
			{
				if(GetBusinessData(businessid, B_LOCK_STATUS))
				{
					SetBusinessData(businessid, B_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x32a44bFF, "Бизнес открыт");
				}
				else
				{
					SetBusinessData(businessid, B_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xCECECEFF, "Бизнес закрыт");
				}
				UpdateBusinessLabel(businessid);

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE business SET `lock`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
			}
			case BIZ_OPERATION_ENTER_PRICE: // установить цену за вход
			{
				Dialog
				(
					playerid, DIALOG_BIZ_ENTER_PRICE, DIALOG_STYLE_INPUT,
					"Цена за вход",
					"{FFFFFF}Укажите сколько должны платить клиенты\n"\
					"чтобы войти в ваш бизнес\n\n"\
					"{669966}Предел цен: от 0 до 5000$\n"\
					"Установка цены за вход может увеличить ваши доходы,\n"\
					"однако сократит количество клиентов\n"\
					"{CC3333}Выбирайте цену разумно во избежание банкротства вашей фирмы",
					"Сменить", "Назад"
				);
			}
			case BIZ_OPERATION_PROD_ORDER: // заказать продукты
			{
				Dialog
				(
					playerid, DIALOG_BIZ_ORDER_PRODS, DIALOG_STYLE_INPUT,
					"Заказ продуктов",
					"{FFFFFF}Сколько продуктов Вы хотите заказать?",
					"Заказать", "Назад"
				);
			}
			case BIZ_OPERATION_PROFIT_STATS: // финансовая статистика
			{
				new query[256];

				new time = gettime();
				new cur_day = time - (time % 86400);
				new start_day = cur_day - (86400 * 20);

				mysql_format(mysql, query, sizeof query, "SELECT FROM_UNIXTIME(time, '%%Y-%%m-%%d') AS date, SUM(money) as total FROM business_profit WHERE bid=%d AND view=1 AND time >= %d AND time < %d GROUP BY time ORDER BY time DESC LIMIT 7", GetBusinessData(businessid, B_SQL_ID), start_day, cur_day);
				mysql_tquery(mysql, query, "ShowBusinessProfit", "ii", playerid, ++ mysql_race[playerid]);
			}
			case BIZ_OPERATION_IMPROVEMENTS: // Улучшения
			{
				new fmt_str[80];
				new string[512];

				new buffer[14 + 1];
				new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_business_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_business_improvements[idx][I_NAME]);

					switch(idx)
					{
						case 0,1,4:
							buffer = "\t";

						case 5:
							buffer = "\t\t";

						default:
							buffer[0] = 0;
					}
					if(buffer[0] != EOS)
						strcat(fmt_str, buffer);

					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);

						valfmt(buffer, g_business_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s$", buffer);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_BIZ_IMPROVEMENT, DIALOG_STYLE_LIST, "Доступные улучшения", string, "Купить", "Назад");
			}
			case BIZ_OPERATION_PROD_PRICE:
			{
				new fmt_text[1086],
				    query[1086];

				format(fmt_text, sizeof fmt_text, "");

				format(query, sizeof query, "{FFFFFF}Товар №1. {66CC00}$%d\n", GetBusinessData(businessid, B_PRICE_1));
				strcat(fmt_text, query);
				format(query, sizeof query, "{FFFFFF}Товар №2. {66CC00}$%d\n", GetBusinessData(businessid, B_PRICE_2));
				strcat(fmt_text, query);
				format(query, sizeof query, "{FFFFFF}Товар №3. {66CC00}$%d\n", GetBusinessData(businessid, B_PRICE_3));
				strcat(fmt_text, query);
				format(query, sizeof query, "{FFFFFF}Товар №4. {66CC00}$%d\n", GetBusinessData(businessid, B_PRICE_4));
				strcat(fmt_text, query);
				format(query, sizeof query, "{FFFFFF}Товар №5. {66CC00}$%d\n", GetBusinessData(businessid, B_PRICE_5));
				strcat(fmt_text, query);
				format(query, sizeof query, "{FFFFFF}Товар №6. {66CC00}$%d\n", GetBusinessData(businessid, B_PRICE_6));
				strcat(fmt_text, query);
				format(query, sizeof query, "{FFFFFF}Товар №7. {66CC00}$%d\n", GetBusinessData(businessid, B_PRICE_7));
				strcat(fmt_text, query);
				format(query, sizeof query, "{FFFFFF}Товар №8. {66CC00}$%d\n", GetBusinessData(businessid, B_PRICE_8));
				strcat(fmt_text, query);
				format(query, sizeof query, "{FFFFFF}Товар №9. {66CC00}$%d\n", GetBusinessData(businessid, B_PRICE_9));
				strcat(fmt_text, query);
				format(query, sizeof query, "{FFFFFF}Товар №10. {66CC00}$%d\n\n", GetBusinessData(businessid, B_PRICE_10));
				strcat(fmt_text, query);
				format(query, sizeof query, "{FFFFFF}Внимание: изменение стоимости\nподдерживается не у всех бизнесов");
				strcat(fmt_text, query);

				Dialog
				(
					playerid, DIALOG_BIZ_PROD_PRICE_LIST, DIALOG_STYLE_LIST,
					"Выберите номер товара",
					fmt_text,
					"Выбрать", "Отмена"
				);
			}
			case BIZ_OPERATION_SET_NAME:
			{
			    Dialog(playerid,DIALOG_BIZ_SET_NAMES,DIALOG_STYLE_INPUT,"Смена названия","Введите название ниже которое хотите использовать","Далее","Отмена");
			}
		}
	}

	return 1;
}

public: ShowBusinessProfit(playerid, race)
{
	if(race != mysql_race[playerid])
	{
		new string[600];
		new fmt_str[32];
		new rows = cache_num_rows();

		if(rows)
		{
			string = "Дата\t\t\tПрибыль\n\n{FFFFFF}";
		}
		else string = "{FFFFFF}Финансовая статистика Вашего бизнеса еще не сформирована";

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str, mysql, sizeof fmt_str);
			strcat(string, fmt_str);

			format(fmt_str, sizeof fmt_str, "\t\t$%d\n", cache_get_row_int(idx, 1));
			strcat(string, fmt_str);
		}
		Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "Доход бизнеса за неделю", string, "<< Назад", "Закрыть");
	}
}

public: ShowPlayerFuelStationDialog(playerid, operationid)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		switch(operationid)
		{
			case FUEL_ST_OPERATION_PARAMS:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_PARAMS, DIALOG_STYLE_LIST,
					"Параметры заправочной станции",
					"1. {669966}Открыть {FFFFFF}или {CC3333}закрыть {FFFFFF}заправочную станцию\n"\
					"2. Новое название\n"\
					"3. Изменить цену на топливо\n"\
					"4. Заказать топливо\n"\
					"5. Финансовая статистика\n"\
					"6. Улучшить заправочную станцию\n",
					"Выбрать", "Назад"
				);
			}
			case FUEL_ST_OPERATION_LOCK:
			{
				if(GetFuelStationData(stationid, FS_LOCK_STATUS))
				{
					SetFuelStationData(stationid, FS_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x32a44bFF, "Заправочная станция открыта");
				}
				else
				{
					SetFuelStationData(stationid, FS_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xCECECEFF, "Заправочная станция закрыта");
				}
				UpdateFuelStationLabel(stationid);

				new query[75];
				mysql_format(mysql, query, sizeof query, "UPDATE `fuel_stations` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetFuelStationData(stationid, FS_LOCK_STATUS), GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);

				CallLocalFunction("ShowPlayerFuelStationDialog", "ii", playerid, FUEL_ST_OPERATION_PARAMS);
			}
			case FUEL_ST_OPERATION_NEW_NAME:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_NAME, DIALOG_STYLE_INPUT,
					"Смена названия",
					"{FFFFFF}Введите новое название для заправочной станции\n\n"\
					"Требования:\n"\
					"- Длина от 3-х до 15-ти символов\n"\
					"- Название не должно противоречить правилам сервера\n"\
					"- Название должно ассоциироваться с заправочными станциями\n\n"\
					"{CC3333}ПРИМЕЧАНИЕ: Новое название не сохранится после рестарта сервера",
					"Сменить", "Назад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_PRICE:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_PRICE_FUEL, DIALOG_STYLE_INPUT,
					"Цена топлива",
					"{FFFFFF}Укажите отпускную цену за 1 литр\n"\
					"топлива в пределах от 2 до 15$",
					"Готово", "Назад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_ORDER:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_ORDER_FUELS, DIALOG_STYLE_INPUT,
					"Заказ топлива",
					"{FFFFFF}Сколько литров топлива Вы хотите заказать?",
					"Заказать", "Назад"
				);
			}
			case FUEL_ST_OPERATION_PROFIT_STATS:
			{
				new query[256];

				new time = gettime();
				new cur_day = time - (time % 86400);
				new start_day = cur_day - (86400 * 20);

				format(query, sizeof query, "SELECT FROM_UNIXTIME(time, '%%Y-%%m-%%d') AS date, SUM(money) as total FROM fuel_stations_profit WHERE fid=%d AND view=1 AND time >= %d AND time < %d GROUP BY time ORDER BY time DESC LIMIT 20", GetFuelStationData(stationid, FS_SQL_ID), start_day, cur_day);
				mysql_tquery(mysql, query, "ShowFuelStationProfit", "ii", playerid, ++ mysql_race[playerid]);
			}
			case FUEL_ST_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				new string[300];

				new str_numeric[14 + 1];
				new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_fuel_station_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_fuel_station_improvements[idx][I_NAME]);

					if(idx != 2)
						strcat(fmt_str, "\t");

					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, "Куплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);

						valfmt(str_numeric, g_fuel_station_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s$", str_numeric);

						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_FUEL_STATION_IMPROVEMENT, DIALOG_STYLE_LIST, "Улучшения для заправочной станции", string, "Купить", "Назад");
			}
		}
	}
	return 1;
}

public: ShowFuelStationProfit(playerid, race)
{
	if(race != mysql_race[playerid])
	{
		new string[600];
		new fmt_str[32];
		new rows = cache_num_rows();

		if(rows)
		{
			string = "Дата\t\t\tПрибыль\n\n{FFFFFF}";
		}
		else string = "{FFFFFF}Финансовая статистика Вашей заправочной станции еще не сформирована";

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str, mysql, sizeof fmt_str);
			strcat(string, fmt_str);

			format(fmt_str, sizeof fmt_str, "\t\t$%d\n", cache_get_row_int(idx, 1));
			strcat(string, fmt_str);
		}
		Dialog(playerid, DIALOG_FUEL_STATION_INFO, DIALOG_STYLE_MSGBOX, "Доход АЗС за 20 дней", string, "<< Назад", "Закрыть");
	}
}


public: ShowPlayerLotteryDialog(playerid)
{
	if(GetPlayerData(playerid, P_LOTTERY) >= 100)
	{
		new hour;
		new fmt_str[632];

		gettime(hour);
		format
		(
			fmt_str, sizeof fmt_str,
			"Ваше счастливое число: {ffff00}%d\n\n"\
			"{FFFFFF}Вы зарегистрированы в лотерее, результат будет известен во\n"\
			"время ближайшего розыгрыша, который пройдёт в %d:02\n"\
			"Не выходите из игры чтобы принять в нём участие.\n\n"\
			"Выигрыш будет зависеть от того, сколько чисел совпало в\n"\
			"вашем счастливом числе и в числе, которое выпадет во\n"\
			"время розыгрыша (по порядку слева направо):\n\n"\
			"Нет совпадений:\t{FF6633}0$\n"\
			"{FFFFFF}1 число:\t\t{66FF00}2000$\n"\
			"{FFFFFF}2 числа:\t\t{66FF00}15000$\n"\
			"{FFFFFF}Все числа:\t\t{66FF00}50000$\n\n"\
			"{FFFFFF}Если Вы хотите изменить счастливое число, введите новые\n"\
			"3 цифры. В противном случае просто нажмите \"Ок\"",
			GetPlayerData(playerid, P_LOTTERY),
			GetElapsedTime(gettime(), g_last_lottery_time) >= 1 ? hour : hour+1
		);
		Dialog(playerid, DIALOG_BIZ_LOTTERY, DIALOG_STYLE_INPUT, "{32a44b}Лотерея", fmt_str, "Ок", "");
	}
}

public: SetGateStatus(gateid, bool: status, open_time)
{
	if(open_time != -1)
		SetTimerEx("SetGateStatus", open_time * 1000, false, "iii", gateid, status ^ GATE_STATUS_OPEN, -1);

	switch(GetGateData(gateid, G_TYPE))
	{
		case
			GATE_TYPE_BARRIER,
			GATE_TYPE_BARRIER_MSG,
			GATE_TYPE_BARRIER_BUTTON:
		{
			MoveDynamicObject(g_gate[gateid][G_OBJECT_ID][1], GetGateData(gateid, G_POS_X) + (status == GATE_STATUS_CLOSE ? 0.01 : -0.01), GetGateData(gateid, G_POS_Y), GetGateData(gateid, G_POS_Z) + 0.8, 0.01, 0.0, status == GATE_STATUS_CLOSE ? -90.0 : -10.0, GetGateData(gateid, G_ANGLE));
		}
		case GATE_TYPE_NORMAL:
		{
			DestroyDynamicObject(gateid);

			CreateDynamicObject(g_gate[gateid][G_OBJECT_ID][0], GetGateData(gateid, G_POS_X), GetGateData(gateid, G_POS_Y) + (status == GATE_STATUS_CLOSE ? 0.00 : 4.0), GetGateData(gateid, G_POS_Z), 0.0, 0.0, 0.0);
		}
	}
	SetGateData(gateid, G_STATUS, status);
}

public: CheckNearestGate(playerid)
{
	new gateid = GetNearestGate(playerid, 10.0);
	if(gateid != -1)
	{
		new open_time = 8;
		new bool: access = false;

		switch(gateid)
		{
			case GATE_ID_DRIVING_SCHOOL:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new type = GetVehicleData(vehicleid, V_ACTION_TYPE);

				if(type == VEHICLE_ACTION_TYPE_DRIVING_SCH)
				{
					if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
					{
						access = true;
					}
				}
			}
			default:
				access = true;
		}

		if(access)
		{
			OnGateOpened(playerid, gateid, open_time);
		}
		return 1;
	}
	return 0;
}

public: OnGateOpened(playerid, gateid, open_time)
{
	new type = GetGateData(gateid, G_TYPE);
	new bool: status = GetGateData(gateid, G_STATUS);

	switch(type)
	{
		case GATE_TYPE_BARRIER, GATE_TYPE_BARRIER_MSG:
		{
			if(status == GATE_STATUS_OPEN) return 0;

			if(type == GATE_TYPE_BARRIER_MSG)
			{
				new fmt_str[64];

				if(strlen(GetGateData(gateid, G_DESCRIPTION)))
				{
					format(fmt_str, sizeof fmt_str, "[%s] Шлагбаум закроется через %d секунд", GetGateData(gateid, G_DESCRIPTION), open_time - 3);
				}
				else format(fmt_str, sizeof fmt_str, "Шлагбаум закроется через %d секунд", open_time - 3);
				SendClientMessage(playerid, 0x32a44bFF, fmt_str);
			}
		}
		case GATE_TYPE_BARRIER_BUTTON:
		{
			open_time = -1;
		}
		case GATE_TYPE_NORMAL:
		{

		}
	}
	SetGateStatus(gateid, status ^ GATE_STATUS_OPEN, open_time);

	return 1;
}

public: UpdateFactoryDesk(deskid)
{
	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Рабочее место №%d\n%s", deskid + 1, factory_desk[deskid][FD_USED] ? ("{CECECE}Занято") : ("{33CC00}Свободно"));
	UpdateDynamic3DTextLabelText(factory_desk[deskid][FD_LABEl], 0xFFFFFFFF, fmt_str);
}

public: T_RemovePlayerAttachedObject(playerid, slot)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
		RemovePlayerAttachedObject(playerid, slot);
	}
}

public: ClearBanList()
{
	new query[64];
	new time = gettime();

	format(query, sizeof query, "SELECT ip FROM ban_list WHERE ban_time <= %d", time);
	mysql_tquery(mysql, query, "UnBanIPs", "i", time);

	return 1;
}

public: UnBanIPs(time)
{
	new ip[16];
	new query[64];
	new rows = cache_num_rows();

	if(rows)
	{
		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, ip);

			format(query, sizeof query, "unbanip %s", ip);
			SendRconCommand(query);
		}
		SendRconCommand("reloadbans");

		format(query, sizeof query, "DELETE FROM ban_list WHERE ban_time <= %d", time);
		mysql_query(mysql, query, false);
	}
	return 1;
}

public: PlayerOwnableCarInit(playerid)
{
	new index;
	new vehicleid = -1;
	while(vehicleid < MAX_VEHICLES-1)
	{
		vehicleid ++;
		index = GetVehicleData(vehicleid, V_ACTION_ID);

		if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR) continue;
		if(GetOwnableCarData(index, OC_OWNER_ID) != GetPlayerAccountID(playerid)) continue;

		SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);
		SetVehicleData(vehicleid, V_FUEL, GetOwnableCarData(index, OC_FUEL));
		break;
	}
}

public: SaveOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[335];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new Float: health;

		GetVehicleHealth(vehicleid, health);

		format
		(
			query, sizeof query,
			"UPDATE ownable_cars SET "\
			"pos_x=%f,"\
			"pos_y=%f,"\
			"pos_z=%f,"\
			"angle=%f,"\
			"world=%i,"\
			"inter=%i,"\
			"status=%d,"\
			"key_in=%d,"\
			"mileage=%f,"\
			"health=%f,"\
			"fuel=%f,"\
			"number='%s'"\
			" WHERE id=%d LIMIT 1",
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z),
			GetOwnableCarData(index, OC_ANGLE),
			GetOwnableCarData(index, OC_World),
			GetOwnableCarData(index, OC_Int),
			GetVehicleParam(vehicleid, V_LOCK),
			GetOwnableCarData(index, OC_KEY_IN),
			GetVehicleData(vehicleid, V_MILEAGE),
			GetVehicleData(vehicleid, V_HEALTH),
  			GetOwnableCarData(index, OC_FUEL),
			GetOwnableCarData(index, OC_NUMBER),
			GetOwnableCarData(index, OC_SQL_ID)
		);
		printf("mysql %f",GetOwnableCarData(index, OC_ANGLE));
		mysql_query(mysql, query, false);

		printf(query);

		return mysql_errno();
	}
	return -1;
}

public: ShowTrunkDialog(playerid, vehicleid, view)
{
    if(!IsAOwnableCar(vehicleid)) return SendClientMessage(playerid,-1,"Невохможно использовать на данном ТС!");
	new count, type;

	new fmt_str[36];
	new string[(sizeof fmt_str) * MAX_VEHICLE_TRUNK_SLOTS + 1];

	ClearPlayerListitemValues(playerid);
	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(IsTrunkFreeSlot(vehicleid, idx)) continue;

		type = GetTrunkData(vehicleid, idx, VT_ITEM_TYPE);

		format(fmt_str, sizeof fmt_str, "{FFFFFF}%d. %s:\t{32a44b}%d %s\n", count + 1, GetItemInfo(type, I_NAME), GetTrunkData(vehicleid, idx, VT_ITEM_AMOUNT), GetItemInfo(type, I_NAME_COUNT));
		strcat(string, fmt_str);

		SetPlayerListitemValue(playerid, count ++, idx);
	}

	if(!view)
	{
		SetPlayerListitemValue(playerid, count, -1);
		SetPlayerUseTrunk(playerid, vehicleid);

		format(fmt_str, sizeof fmt_str, "{FFFFFF}%d. Положить", count + 1);
		strcat(string, fmt_str);

		Dialog(playerid, DIALOG_VEHICLE_TRUNK, DIALOG_STYLE_LIST, "Содержимое багажника", string, "Выбрать", "Закрыть");
	}
	else
	{
		if(!count)
			strcat(string, "{FFFFFF}Пусто");

		SetPlayerUseTrunk(playerid, INVALID_VEHICLE_ID);
		Dialog(playerid, DIALOG_VEHICLE_TRUNK, DIALOG_STYLE_LIST, "Содержимое багажника", string, "Закрыть", "");
	}
	return 1;
}

// ------------------------------------------
stock GetTrunkFreeSlot(vehicleid, item_type)
{
	new free_slot = -1, comb_slot = -1;
	new bool: comb = GetItemInfo(item_type, I_COMBINATION);

	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(GetTrunkData(vehicleid, idx, VT_ITEM_TYPE) == item_type && comb)
		{
			comb_slot = idx;
		}
		else if(free_slot == -1 && IsTrunkFreeSlot(vehicleid, idx))
		{
			free_slot = idx;
		}
		else continue;
	}
	return comb_slot != -1 ? comb_slot : free_slot;
}

stock GetTrunkBusySlot(vehicleid, item_type)
{
	new busy_slot = -1;

	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(GetTrunkData(vehicleid, idx, VT_ITEM_TYPE) == item_type)
		{
			busy_slot = idx;
		}
		else continue;
	}
	return busy_slot;
}

stock AddTrunkItem(vehicleid, item_id, amount, value = 0)
{
	if(1 <= item_id <= sizeof(g_item_type)-1)
	{
		new free_slot = GetTrunkFreeSlot(vehicleid, item_id);
		if(free_slot != -1)
		{
			SetTrunkData(vehicleid, free_slot, VT_SQL_ID, 1);

			SetTrunkData(vehicleid, free_slot, VT_ITEM_TYPE, item_id);
			SetTrunkData(vehicleid, free_slot, VT_ITEM_VALUE, value);

			new query[100],
				index,
				oc_id;

			index = GetVehicleData(vehicleid, V_ACTION_ID);
			oc_id = GetOwnableCarData(index, OC_SQL_ID);

			if(!IsTrunkFreeSlot(vehicleid, free_slot))
			{
				AddTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT, +, amount);

				if((GetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT) - amount) == 0)
				{
					mysql_format(mysql, query, sizeof query, "INSERT INTO trunks (oc_id,item_id,amount,value) VALUES (%d,%d,%d,%d)", oc_id, item_id, amount, value);
					mysql_query(mysql, query, false);
				}
				else
				{
					mysql_format(mysql, query, sizeof query, "UPDATE trunks SET amount='%d' WHERE item_id='%d' AND oc_id='%d' LIMIT 1", GetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT), item_id, oc_id);
					mysql_query(mysql, query, false);
				}
			}

			else
			{
				SetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT, amount);

				mysql_format(mysql, query, sizeof query, "INSERT INTO trunks (oc_id,item_id,amount,value) VALUES (%d,%d,%d,%d)", oc_id, item_id, amount, value);
				mysql_query(mysql, query, false);
			}

			return 1;
		}
		return -1;
	}
	return 0;
}

stock TakeTrunkItem(vehicleid, item_id, amount)
{
	if(1 <= item_id <= sizeof(g_item_type)-1)
	{
		new busy_slot = GetTrunkBusySlot(vehicleid, item_id);

		new query[100],
			index,
			oc_id;

		index = GetVehicleData(vehicleid, V_ACTION_ID);
		oc_id = GetOwnableCarData(index, OC_SQL_ID);

		if(!IsTrunkFreeSlot(vehicleid, busy_slot))
		{
			AddTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT, -, amount);

			if(GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT) >= 0)
			{
				if(!GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT))
				{
					mysql_format(mysql, query, sizeof query, "DELETE FROM trunks WHERE item_id='%d' AND oc_id='%d'", item_id, oc_id);
					mysql_query(mysql, query, false);

					RemoveTrunkItem(vehicleid, busy_slot);
				}
				else
				{
					mysql_format(mysql, query, sizeof query, "UPDATE trunks SET amount='%d' WHERE item_id='%d' AND oc_id='%d' LIMIT 1", GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT), item_id, oc_id);
					mysql_query(mysql, query, false);
				}
				return 1;
			}
			else
			{
				AddTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT, +, amount);
				return -1;
			}
		}
		return -1;
	}
	return 0;
}

stock RemoveTrunkItem(vehicleid, item_slot)
{
	if(!IsTrunkFreeSlot(vehicleid, item_slot))
	{
		SetTrunkData(vehicleid, item_slot, VT_SQL_ID,	0);

		SetTrunkData(vehicleid, item_slot, VT_ITEM_TYPE, 	0);
		SetTrunkData(vehicleid, item_slot, VT_ITEM_AMOUNT, 	0);
		SetTrunkData(vehicleid, item_slot, VT_ITEM_VALUE, 	0);

		return 1;
	}
	return 0;
}

stock GetCoordVehicle(vehicleid, type, &Float:x, &Float:y, &Float:z, &Float:angle, &Float:distance) // by Essle (багажник / капот)
{
    GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, x, distance, z); // узнаем длину машины
    distance = distance / 2 + 0.1; // полученную длину делим на два

    GetVehiclePos(vehicleid, x, y, z); // узнаем координаты авто
    GetVehicleZAngle(vehicleid, angle); // узнаем угол поворота авто

	switch(type)
	{
		case VEHICLE_COORD_TYPE_BOOT: // багажник
		{
			x += (distance * floatsin(-angle+180, degrees)); // вычитаем координату x бaгажника
			y += (distance * floatcos(-angle+180, degrees)); // вычитаем координату y бaгажника
		}
		case VEHICLE_COORD_TYPE_BONNET: // капот
		{
			x -= (distance * floatsin(-angle+180, degrees)); // вычитаем координату x капота
			y -= (distance * floatcos(-angle+180, degrees)); // вычитаем координату y капота
		}
		default:
		{
			return 0;
		}
	}
	return 1;
}

stock GetVehicleTurnSignalPos(vehicleid, type, &Float:x, &Float:y)
{
	/*

		Типы:
		1 - левый передний
		2 - левый задний
		3 - правый передний
		4 - правый задний

	*/

	new Float: size_x,
		Float: size_y,
		Float: size_z;

	GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, size_x, size_y, size_z);

	switch(type)
	{
		case 1:
		{
			x = -(size_x / 2) + 0.3;
			y = size_y / 2 - 0.5;
		}
		case 2:
		{
			x = -(size_x / 2) + 0.3;
			y = -(size_y / 2) + 0.4;
		}
		case 3:
		{
			x = size_x / 2 - 0.3;
			y = size_y / 2 - 0.5;
		}
		case 4:
		{
			x = size_x / 2 - 0.3;
			y = -(size_y / 2) + 0.4;
		}
	}

	return 1;
}

stock SetVehicleToHotelRespawn(playerid, hotelid, vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		new free_slot = GetHotelFreePark(hotelid);
		if(free_slot != -1)
		{
			g_hotel_car_park_pos[hotelid][free_slot][HC_VEHICLE_ID] = vehicleid;

			SetVehiclePos(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_POS_X], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Y], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Z]);
			SetVehicleZAngle(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_ANGLE]);

			SendClientMessage(playerid,-1,"Ваше Т/С было доставлено на парковку отеля!");
			GivePlayerMoneyEx(playerid, -1000,"Доставка ТС к отелю");

			return 1;
		}
	}
	return 0;
}

stock GetHotelFreePark(hotelid)
{
	new vehicleid, slot = -1;

	for(new idx; idx < sizeof(g_hotel_car_park_pos[]); idx ++)
	{
		vehicleid = g_hotel_car_park_pos[hotelid][idx][HC_VEHICLE_ID];
		if(GetVehicleDistanceFromPoint(vehicleid, g_hotel_car_park_pos[hotelid][idx][HC_POS_X], g_hotel_car_park_pos[hotelid][idx][HC_POS_Y], g_hotel_car_park_pos[hotelid][idx][HC_POS_Z]) >= 8.0) continue;

		slot = idx;
		break;
	}
	return slot;
}

stock ShowOwnableCarPass(playerid, vehicleid)
{
	new model_id = GetVehicleData(vehicleid, V_MODELID);

	if(model_id && IsAOwnableCar(vehicleid))
	{
		new fmt_str[300];
		new Float: health;
		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new description[32];

		format(description, sizeof description, "Документы на ТС №%d", GetOwnableCarData(index, OC_SQL_ID));

		GetVehicleHealth(vehicleid, health);

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t{1E90FF}%s\n\n"\
			"{FFFFFF}Модель:\t\t{1E90FF}%d\n"\
			"{FFFFFF}Состояние:\t\t{1E90FF}%d\n"\
			"{FFFFFF}Пробег:\t\t{1E90FF}%07i\n"\
			"{FFFFFF}Топливо:\t\t{1E90FF}%.1f\n"\
			"{FFFFFF}Цвет:\t\t\t{1E90FF}ID %d, %d\n"\
			"{FFFFFF}Гос. стоимость:\t{1E90FF}$%d\n"\
			"{FFFFFF}Номерные знаки:\t{1E90FF}%s",
			GetVehicleInfo(model_id-400, VI_NAME),
			model_id,
			floatround(health),
			floatround(GetVehicleData(vehicleid, V_MILEAGE), floatround_ceil),
			GetOwnableCarData(index, OC_FUEL),
			GetOwnableCarData(index, OC_COLOR_1),
			GetOwnableCarData(index, OC_COLOR_2),
			GetVehicleInfo(model_id-400, VI_PRICE)*3,
			GetOwnableCarData(index, OC_NUMBER)
		);
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, description, fmt_str, "Закрыть", "");

		return 1;
	}
	return 0;
}

stock ShowOwnableCarLoadDialog(playerid, id, bool: show_menu = false)
{
	SetPVarInt(playerid, "ownablecar_id", id);

	if(show_menu)
		SetPVarInt(playerid, "show_menu", 1);

	Dialog
	(
		playerid, DIALOG_OWNABLE_CAR_LOAD, DIALOG_STYLE_LIST,
		"Система управления транспортом",
		"{ffff00}1. {FFFFFF}Отметить транспорт на GPS {CECECE}(300$)\n"\
		"{ffff00}2. {FFFFFF}Загрузить транспорт",
		"Выбрать", "Закрыть"
	);
}

stock IsAOwnableCar(vehicleid)
{
	if(IsValidVehicleID(vehicleid))
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		{
			return 1;
		}
	}
	return 0;
}

stock IsVehicleSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!IsPlayerInVehicle(i, vehicleid)) continue;
		else if(GetPlayerVehicleSeat(i) != seatid) continue;

		return 1;
	}

	return 0;
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
		if(!IsPlayerInAnyVehicle(i)) continue;

		if(GetPlayerVehicleID(i) == vehicleid)
			return 1;
	}

	return 0;
}

stock IsTrailerAttachedToAnyVehicle(trailerid)
{
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
		if(!IsValidVehicle(i)) continue;

		if(GetVehicleTrailer(i) == trailerid)
			return 1;
	}

	return 0;
}

stock ShowPlayerHotelRoomPayForRent(playerid)
{
	new hotel_id = GetPlayerInHotelID(playerid);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		new rent_days = GetHotelData(hotel_id, room_id, H_RENT_DATE);
		if(rent_days < 0)
		{
			rent_days = 0;
		}

		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Оплаченных дней:\t\t%d из 30\n"\
			"Ежедневная плата:\t\t1000$\n\n"\
			"На сколько дней Вы хотите оплатить номер?",
			rent_days
		);
		Dialog(playerid, DIALOG_HOTEL_PAY_FOR_ROOM, DIALOG_STYLE_INPUT, "{66CC99}Оплата проживания в отеле", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerHotelClientMenu(playerid, hotel_id)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		Dialog
		(
			playerid, DIALOG_HOTEL_CLIENT_MENU, DIALOG_STYLE_LIST,
			"{66CC99}Меню клиента",
			"1. Оплатить проживание\n"\
			"2. Информация о транспорте\n"\
			"3. Подогнать транспорт к отелю (1000$)\n"\
			"4. Продать транспорт\n"\
			"5. Выселиться из отеля",
			"Выбрать", "Назад"
		);
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не проживаете в этой гостинице");
		ShowPlayerHotelDialog(playerid);
	}
}

stock GetHotelFreeRoom(hotelid)
{
	new free_room = -1;
	if(0 <= hotelid <= MAX_HOTELS-1)
	{
		new max_rooms = g_hotel_rooms_loaded[hotelid]; // / 12

		for(new idx; idx < max_rooms; idx ++)
		{
			if(IsHotelRoomOwned(hotelid, idx)) continue;

			free_room = idx;
			break;
		}
	}
	return free_room;
}

stock ExitPlayerFromHotelRoom(playerid)
{
	new room_id = GetPlayerData(playerid, P_IN_HOTEL_ROOM);
	if(room_id != -1)
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 243.7187,304.9933,999.1484))
			{
				new floor = (room_id / 12) + 1;
				new index = room_id % 12;

				SetPlayerPosEx
				(
					playerid,
					g_hotel_room_exit_pos[index][0],
					g_hotel_room_exit_pos[index][1],
					g_hotel_room_exit_pos[index][2],
					180.0,
					15,
					((hotel_id + 1) * 200) + (floor + 1000)
				);
				SetPlayerData(playerid, P_IN_HOTEL_ROOM, -1);
			}
		}
	}
}

stock EnterPlayerToHotelRoom(playerid, hotel_id, room_id)
{
	if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) == -1)
	{
		if(!GetHotelData(hotel_id, room_id, H_STATUS) || GetPlayerAccountID(playerid) == GetHotelData(hotel_id, room_id, H_OWNER_ID))
		{
			SetPlayerPosEx(playerid, 243.7187,304.9933,999.1484, 0.0, 1, ((hotel_id + 1) * 400) + (room_id + 2000));
			SetPlayerData(playerid, P_IN_HOTEL_ROOM, room_id);

			SetPlayerData(playerid, P_IN_HOTEL_FLOOR, (room_id / 12) + 1);
		}
		else GameTextForPlayer(playerid, "~r~Closed", 2500, 1);
	}
	return 1;
}

stock ShowPlayerHotelFloorsInfo(playerid, hotel_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];

	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx; idx < max_floors; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d этаж\n", idx + 1);
		strcat(string, fmt_str);
	}
	Dialog(playerid, DIALOG_HOTEL_FLOOR_SELECT, DIALOG_STYLE_LIST, "Выберите этаж", string, "Выбрать", "Отмена");
}

stock ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];

	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx, count; idx <= max_floors; idx ++)
	{
		if(idx == floor_id) continue;
		if(idx)
		{
			format(fmt_str, sizeof fmt_str, "%d этаж\n", idx);
			strcat(string, fmt_str);
		}
		else strcat(string, "Выход\n");

		SetPlayerListitemValue(playerid, count ++, idx);
	}
	Dialog(playerid, DIALOG_HOTEL_FLOOR_LIFT, DIALOG_STYLE_LIST, "Выберите этаж", string, "Выбрать", "Отмена");
}

stock ShowPlayerHotelFloorInfo(playerid, hotel_id, floor_id)
{
	if(0 <= hotel_id <= MAX_HOTELS-1)
	{
		if(0 <= floor_id <= MAX_HOTEL_FLOORS-1)
		{
			new string[512];
			new fmt_str[45 + 1];

			new rent_time;

			new s_idx = floor_id * 12;
			new e_idx = s_idx + 12;

			string = "Номер\t\tСтатус\t\tОплаченные дни\tПостоялец\n\n{FFFFFF}";
			while(s_idx < e_idx)
			{
				if(IsHotelRoomOwned(hotel_id, s_idx))
				{
					rent_time = GetHotelData(hotel_id, s_idx, H_RENT_DATE);
					if(rent_time < 0)
						rent_time = 0;

					format(fmt_str, sizeof fmt_str, "%d\t\t%s\t\t%d\t\t%s\n", (s_idx % 12) + 1, rent_time > 0 ? ("Занят\t") : ("Выселение"), rent_time, GetHotelData(hotel_id, s_idx, H_OWNER_NAME));
				}
				else format(fmt_str, sizeof fmt_str, "%d\t\tСвободен\n", (s_idx % 12) + 1);
				strcat(string, fmt_str);

				s_idx ++;
			}

			format(fmt_str, sizeof fmt_str, "{66CC99}Список номеров на %d этаже", floor_id + 1);
			Dialog(playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX, fmt_str, string, "Назад", "Закрыть");
		}
	}
}

stock ShowPlayerHotelDialog(playerid)
{
	if(GetPlayerInHotelID(playerid) != -1)
	{

		Dialog
		(
			playerid, DIALOG_HOTEL, DIALOG_STYLE_LIST,
			"Отель",
			"1. Список номеров\n"\
			"2. Регистрация\n"\
			"3. Меню клиента",
			"Выбрать", "Закрыть"
		);
	}
}

stock GetPlayerInHotelID(playerid)
{
	new hotel_id = -1;
	new businessid = GetPlayerInBiz(playerid);

	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_HOTEL)
		{
			switch(businessid)
			{
				case 26:
					hotel_id = 0;

				case 27:
					hotel_id = 1;
				default:
					hotel_id = -1;
			}
		}
	}
	return hotel_id;
}

stock SetPlayerFactoryDeskUse(playerid, deskid, bool: status)
{
	if(!(0 <= deskid <= sizeof factory_desk-1)) return ;

	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(status)
		{
			if(!factory_desk[deskid][FD_USED] && GetPlayerData(playerid, P_FACTORY_USE_DESK) == -1)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATE_P)
				{
					factory_desk[deskid][FD_USED] = true;

					// static const
					//	p_object_id[3] = {1954, 2926, 1718};

					// static const
					//	Float: p_object_z[3] = {0.09, 0.0, 0.06};

					// new rand = random(sizeof(p_object_id));
					// new Float: x, Float: y, Float: z;
					// GetPlayerPos(playerid, x, y, z);

					new Float: angle;

					new take_metall = GetPVarInt(playerid, "factory_take_metall");
					new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

					SetPlayerData(playerid, P_FACTORY_USE_DESK, deskid);
					TogglePlayerFactoryCP(playerid, false);

					if(!((deskid / 3) % 2))
					{
						angle = 180.0;
					}
					else angle = 0.0;
					SetPlayerFacingAngle(playerid, angle);

					//factory_object[playerid] = CreateDynamicObject(p_object_id[rand], x, y, 1044.08 + p_object_z[rand], 0.0, 0.0, angle + 180.0);
					ApplyAnimationEx(playerid, "OTB", "betslp_loop", 4.1, 1, 0, 0, 1, 20_000, 1, USE_ANIM_TYPE_NONE - 1);

					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18644, A_OBJECT_BONE_RIGHT_HAND, 0.06, 0.02, 0.0, 30.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 18635, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.06, -0.1, 180.0, 80.0, 0.0, 1.0, 1.0, 1.0, 0);

					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATED);
					SetTimerEx("CreateFactoryProd", 18_000, false, "i", playerid);

					SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuel - (take_metall * 6));
					UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);
				}
				else
				{
					if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_PUT_PROD)
						SendClientMessage(playerid, 0xCECECEFF, "Возьмите металл у раздаточного стола");
				}
			}
		}
		else
		{
			if(factory_desk[deskid][FD_USED])
			{
				if(GetPlayerData(playerid, P_FACTORY_USE_DESK) == deskid)
				{
					TogglePlayerFactoryCP(playerid, true);
					SetPlayerData(playerid, P_FACTORY_USE_DESK, -1);

					/*
					if(IsValidDynamicObject(factory_object[playerid]))
					{
						DestroyDynamicObject(factory_object[playerid]);
						factory_object[playerid] = -1;
					}
					*/
					factory_desk[deskid][FD_USED] = false;
				}
			}
		}
		UpdateFactoryDesk(deskid);
	}
}

stock AddBan(user_id, time, days, ip[], description[], admin_name[])
{
	new query[200];
	new c_time = time-(time % 86400);

	mysql_format(mysql, query, sizeof query, "INSERT INTO ban_list (user_id,time,ban_time,ip,description,admin) VALUES (%d,%d,%d,'%e','%e','%e')", user_id, c_time, c_time + (days * 86400), ip, description, admin_name);
	mysql_query(mysql, query, false);

	return !mysql_errno();
}

stock GivePlayerDrinkItem(playerid, itemid)
{
	new action_id = -1;
	switch(itemid+1)
	{
		case 1: // Лимонад
		{
			action_id = 23;
		}
		case 2, 6..7: // Пиво, Коньяк, Виски
		{
			action_id = 20;
		}
		case 3..5, 8: // Вино, Шампанское, Водка, Абсент
		{
			action_id = 22;
		}
		case 9: // Закуска
		{
			if(GetPlayerData(playerid, P_DRINK_STEP))
			{
				SetPlayerData(playerid, P_DRINK_STEP, 0);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}

			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 10213, A_OBJECT_BONE_RIGHT_HAND, 0.08, 0.05, 0.06, 180.0, 270.0, -30.0, 1.0, 1.0, 1.0, 0, 0);
			SetPlayerData(playerid, P_SNACK, true);
		}
		case 10: // Сигара
		{
			action_id = 21;
		}
	}
	if(action_id != -1)
	{
		if(GetPlayerData(playerid, P_SNACK))
		{
			SetPlayerData(playerid, P_SNACK, false);
			T_RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		}

		SetPlayerData(playerid, P_DRINK_STEP, 7);
		SetPlayerSpecialAction(playerid, action_id);
	}
	return 1;
}

stock FactoryPlayerDrop(playerid, bool: reject = true)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(reject)
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_CREATED) return ;

			SetPlayerChatBubble(playerid, "Брак", 0xFF0000FF, 10.0, 1500);
			ApplyAnimationEx(playerid, "OTB", "WTCHRACE_LOSE", 4.1, 0, 0, 0, 0, 0, 1, USE_ANIM_TYPE_NONE);
		}

		new bad_prods = GetPVarInt(playerid, "factory_bad_prods") + 1;
		SetPVarInt(playerid, "factory_bad_prods", bad_prods);

		GameTextForPlayer(playerid, "~r~~h~fail", 4000, 1);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);
	}
}

stock ShowPlayerClothingShopPanel(playerid)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(GetPlayerTeamEx(playerid) <= 0)
		{
			new select_skin = GetPlayerSelectSkin(playerid);
			if(select_skin == -1)
			{
				new type = GetBusinessData(businessid, B_INTERIOR);
				new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);

				TogglePlayerControllable(playerid, false);
				SetPlayerPosEx(playerid, 214.5026,-155.6884,1000.5234,90.0, interior, playerid + 32, false);

				SetPlayerCameraPos(playerid, 208.4058,-157.3415,1000.5234);
				SetPlayerCameraLookAt(playerid, 216.9781,-157.2491,1000.5234, 5000);

				SetPlayerSelectClothingSkin(playerid, 0);

				new fmt_text[75];

				format(fmt_text, sizeof fmt_text, "{FFFFFF}Выберите себе подходящую одежду\n\nСтоимость: {66CC33}$%d", g_business_clothing_skins[GetPlayerSex(playerid)][0][1]);

				Dialog(playerid, DIALOG_SELECT_SKIN, DIALOG_STYLE_MSGBOX, "Выбор одежды", fmt_text, "Далее", "Действие");
			}
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы состоите в организации, купить новую внешность нельзя");
	}
}

stock ExitPlayerClothingShopPanel(playerid)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		SetPlayerSkinInit(playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);

		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Магазин одежды", "{FFFFFF}Приходите ещё", "Закрыть", "");

		SetPlayerVirtualWorld(playerid, businessid + 255);

		SetPlayerData(playerid, P_SELECT_SKIN, -1);
	}
	return 1;
}

stock SetPlayerSelectClothingSkin(playerid, index = 0)
{
	new sex = GetPlayerSex(playerid);

	SetPlayerSelectSkin(playerid, index, g_business_clothing_skins[sex][index][0]);
}

stock PlayerTeleportInit(playerid, Float: x, Float: y, Float: z, Float: angle)
{
	new Float: dist = -0.862;
	angle += 90.0; //прибавление угла; можно и отнимать

	for(new idx = 2; idx --; )
	{
		SetPlayerObjectPos(playerid, g_teleport_object[playerid][idx], x + dist * -floatsin(angle, degrees), y + dist * floatcos(angle, degrees), z - 1.02);
		SetPlayerObjectRot(playerid, g_teleport_object[playerid][idx], 90.0, 90.0, angle - 90.0);

		dist = floatabs(dist);
	}
}

stock GetOwnableCarBySqlID(sql_id, buffer[] = {0, 0, 0})
{
	buffer[2] = INVALID_VEHICLE_ID;
	for(buffer[0] = 1; buffer[0] < MAX_VEHICLES; buffer[0] ++)
	{
		if(!IsAOwnableCar(buffer[0])) continue;
		buffer[1] = GetVehicleData(buffer[0], V_ACTION_ID);

		if(GetOwnableCarData(buffer[1], OC_SQL_ID) != sql_id) continue;

		buffer[2] = buffer[0];
		break;
	}
	return buffer[2];
}

stock GetPlayerIDBySqlID(sql_id)
{
	new playerid = INVALID_PLAYER_ID;

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerAccountID(idx) != sql_id) continue;

		playerid = idx;
		break;
	}
	return playerid;
}

stock GetPlayerID(name[], playerid=INVALID_PLAYER_ID)
{
	sscanf(name, "u", playerid);

	return playerid;
}

stock GetPlayerSqlIDByName(name[])
{
	new sql_id,
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM `accounts` WHERE name = '%s' LIMIT 1", name);
	result = mysql_query(mysql, query, true);

	sql_id = cache_num_rows() ? cache_get_row_int(0, 0) : -1;

	cache_delete(result);

	return sql_id;
}

stock GetPlayerNameBySqlID(sql_id)
{
	new name[21] = "none",
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT name FROM `accounts` WHERE id = '%e' LIMIT 1", sql_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		cache_get_row(0, 0, name);

	cache_delete(result);

	return name;
}

stock UpdateHouse(houseid)
{
	if(GetHouseData(houseid, H_ENTER_PICKUP))
		DestroyPickup(GetHouseData(houseid, H_ENTER_PICKUP));

	if(IsValidDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON)))
		DestroyDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON));

	if(GetHouseData(houseid, H_FAMILY_ID) != 0)
	{
		SetHouseData(houseid, H_ENTER_PICKUP, CreatePickup((IsHouseFamily(houseid) ? 1272 : 1273), 23, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), 0, PICKUP_ACTION_TYPE_HOUSE, houseid));
		SetHouseData(houseid, H_MAP_ICON, CreateDynamicMapIcon(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), (IsHouseFamily(houseid) ? 32 : 31), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));
	}
	else
	{
		SetHouseData(houseid, H_ENTER_PICKUP, CreatePickup((IsHouseOwned(houseid) ? 1272 : 1273), 23, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), 0, PICKUP_ACTION_TYPE_HOUSE, houseid));
		SetHouseData(houseid, H_MAP_ICON, CreateDynamicMapIcon(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), (IsHouseOwned(houseid) ? 32 : 31), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));
	}
}

stock HouseHealthInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 2)
	{
		if(!GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			type = GetHouseData(houseid, H_TYPE);
			SetHouseData(houseid, H_HEALTH_PICKUP, CreatePickup(1240, 23, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_HOUSE_HEALTH, houseid));
		}
	}
	else
	{
		if(GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			DestroyPickup(GetHouseData(houseid, H_HEALTH_PICKUP));
			SetHouseData(houseid, H_HEALTH_PICKUP, 0);
		}
	}
}

stock HouseStoreInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
	{
		if(GetHouseData(houseid, H_STORE_LABEL) == Text3D:-1)
		{
			if(GetHouseData(houseid, H_STORE_X) == 0.0 && GetHouseData(houseid, H_STORE_Y) == 0.0 && GetHouseData(houseid, H_STORE_Z) == 0.0)
			{
			    SetHouseData(houseid, H_STORE_METALL, 0);
			    SetHouseData(houseid, H_STORE_DRUGS, 0);
			    SetHouseData(houseid, H_STORE_WEAPON, 0);
			    SetHouseData(houseid, H_STORE_AMMO, 0);
			    SetHouseData(houseid, H_STORE_SKIN, 0);

			    new query[286];
		    	mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_metall = 0, store_drugs = 0, store_weapon = 0, store_ammo = 0, store_skin = 0 WHERE id=%d LIMIT 1", GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				type = GetHouseData(houseid, H_TYPE);
				SetHouseData(houseid, H_STORE_X, GetHouseTypeInfo(type, HT_STORE_POS_X));
				SetHouseData(houseid, H_STORE_Y, GetHouseTypeInfo(type, HT_STORE_POS_Y));
				SetHouseData(houseid, H_STORE_Z, GetHouseTypeInfo(type, HT_STORE_POS_Z));
			}
			SetHouseData(houseid, H_STORE_LABEL, CreateDynamic3DTextLabel("Шкаф", 0xFFFF00FF, GetHouseData(houseid, H_STORE_X), GetHouseData(houseid, H_STORE_Y), GetHouseData(houseid, H_STORE_Z) + 0.5, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));

			CallLocalFunction("UpdateHouseStore", "i", houseid);
		}
	}
	else
	{
		if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
		{
			if(IsValidDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL)))
			{
				DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
				SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);
			}
		}
	}
}

stock SellHouse(playerid, to_player = INVALID_PLAYER_ID, price = 0, fam_id)
{
	if(fam_id != 0)
	{
		new houseid = GetFamilyData(fam_id, F_HOUSE_ID);

		if(houseid != -1)
		{
			new house_price = GetHouseData(houseid, H_PRICE);
			new house_percent = (house_price * 30) / 100;

			new query[200];
			new return_money = house_price - house_percent;

			CallLocalFunction("EvictHouseRentersAll", "i", houseid);

			SetFamilyData(fam_id, F_HOUSE_ID, -1);

			SetPlayerData(playerid, P_HOUSE, -1);
			SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_NONE);

			SetHouseData(houseid, H_OWNER_ID,		0);
			SetHouseData(houseid, H_FAMILY_ID,		0);

			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа дома");

			SetHouseData(houseid, H_IMPROVEMENTS,	0);

			SetHouseData(houseid, H_RENT_DATE,		0);
			SetHouseData(houseid, H_LOCK_STATUS,	false);

			format(query, sizeof query, "UPDATE houses SET owner_id=0,family_id=0,lock=0 WHERE id=%d", GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);

			mysql_format(mysql, query, sizeof query, "UPDATE family SET house_id=-1 WHERE id='%d' LIMIT 1", fam_id + 1);
			mysql_query(mysql, query, false);

			UpdateHouse(houseid);

			HouseHealthInit(houseid);
			HouseStoreInit(houseid);

			GivePlayerMoneyEx(playerid, 0, "Продажа дома государству", false, false);
			SendClientMessage(playerid, 0x32a44bFF, "Вы продали особняк семьи!");

			format(query, sizeof query, "Налог за продажу особняка составил 30 процентов от его стоимости {32a44b}($%d)", house_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "~g~+$%d", (house_price - house_percent));
			GameTextForPlayer(playerid, query, 4000, 1);
		}
	}

	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new house_price = GetHouseData(houseid, H_PRICE);
		new house_percent = (house_price * 30) / 100;
		new house_improvemnts_price = HouseImprovementsPrice(houseid);

		if(house_improvemnts_price)
			house_improvemnts_price = (house_improvemnts_price * 60) / 100;

		new query[200],
			fmt_str[144];
		new return_money = (house_price - house_percent) + house_improvemnts_price;

		CallLocalFunction("EvictHouseRentersAll", "i", houseid);

	    foreach(new idx : Player)
		{
  			if(GetPlayerData(idx,P_HOUSE) == GetPlayerData(playerid,P_HOUSE))
			{
			    format(fmt_str, sizeof(fmt_str),"Владелец дома {D6325B}%s{90FFFF} продал дом госудастрву , и выселил вас на улицу",GetPlayerNameEx(playerid));
			    SendClientMessage(idx,0x1E90FFFF,fmt_str);
		 		SetPlayerData(idx, P_HOUSE, -1);
				SetPlayerData(idx, P_HOUSE_TYPE, -1);
				SetPlayerData(idx, P_HOUSE_ROOM, -1);
			}
		}

		SetPlayerData(playerid, P_HOUSE, -1);
		SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_NONE);

		SetHouseData(houseid, H_OWNER_ID,		0);

		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа дома");

			SetHouseData(houseid, H_IMPROVEMENTS,	0);

			SetHouseData(houseid, H_RENT_DATE,		0);
			SetHouseData(houseid, H_LOCK_STATUS,	false);

			format(query, sizeof query, "UPDATE accounts a,houses h SET a.bank=%d,a.house_type=-1,a.house=-1,h.owner_id=0,h.lock=0 WHERE a.id=%d AND h.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);
			format(query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE house=%d LIMIT 1", GetHouseData(houseid, H_SQL_ID)-1);
			mysql_query(mysql, query, false);

			UpdateHouse(houseid);

			HouseHealthInit(houseid);
			HouseStoreInit(houseid);

			GivePlayerMoneyEx(playerid, 0, "Продажа дома государству", false, false);
			SendClientMessage(playerid, 0x32a44bFF, "Вы продали свой дом!");

			format(query, sizeof query, "%s (%d) продал дом %d",GetPlayerNameEx(playerid), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));

			format(fmt_str, sizeof fmt_str, "%s продал свой дом №%d государству, штат выплатил {32a44b}($%d)", GetPlayerNameEx(playerid), houseid, return_money);

			TransferCoffersMoney(-return_money, query, fmt_str, true);

			format(query, sizeof query, "Налог за продажу дома составил 30 процентов от его стоимости {32a44b}($%d)", house_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}$%d", house_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {1E90FF}$%d", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
		}
		else
		{
			if(BuyPlayerHouse(to_player, houseid, true, price) == 1)
			{
				new total_price = price + house_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}$%d", house_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts SET money=%d,house=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				GivePlayerMoneyEx(playerid, total_price, "Продажа дома игроку", false, false);

				house_price = price;
				house_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+$%d~n~+$%d", (house_price - house_percent), house_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1);
	}
}

stock BuyPlayerHouse(playerid, houseid, bool: buy_from_owner = false, price = -1)
{
    if(!GetPlayerData(playerid, P_PASS))
	    return SendClientMessage(playerid, 0xCECECEFF, "У вас нет паспорта,получите его в мэрии");
	if(!IsHouseOwned(houseid) && !IsHouseFamily(houseid) && GetPlayerHouse(playerid) == -1)
	{
		if(price <= 0)
			price = GetHouseData(houseid, H_PRICE);

		if(GetPlayerMoneyEx(playerid) >= price)
		{
		    new query[256],
				fmt_str[256];

		    if(GetHouseData(houseid, H_TYPE) == 3)
			{
				new fam_id = GetPlayerData(playerid, P_FAMILY) + 1;
				format(query, sizeof query, "UPDATE family f, houses h SET f.house_id=%d,h.family_id=%d WHERE f.id=%d AND h.id=%d", houseid, fam_id - 1, fam_id, GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				if(!mysql_errno())
				{
					SetHouseData(houseid, H_FAMILY_ID, 		fam_id - 1);
					SetHouseData(houseid, H_IMPROVEMENTS, 	0);

					SetHouseData(houseid, H_STORE_X, 0.0);
					SetHouseData(houseid, H_STORE_Y, 0.0);
					SetHouseData(houseid, H_STORE_Z, 0.0);

					SetFamilyData(fam_id - 1, F_HOUSE_ID, houseid);

					new rent_time = 30;

					if(!buy_from_owner)
					{
						SetHouseData(houseid,	H_RENT_DATE,	rent_time);
						SetHouseData(houseid,	H_LOCK_STATUS,	false);
					}
					else
					{
						if(GetHouseData(houseid, H_RENT_DATE) <= 0)
						{
							SetHouseData(houseid, H_RENT_DATE, rent_time);
						}
					}
					format(g_house[houseid][H_OWNER_NAME], 64, GetFamilyData(fam_id - 1, F_NAME), 0);

					UpdateHouse(houseid);

					HouseHealthInit(houseid);
					HouseStoreInit(houseid);

					GivePlayerMoneyEx(playerid, -price, "Покупка дома", false, true);

					format(query, sizeof query, "UPDATE houses SET improvements=0,rent_time=%d,`lock`=%d,store_x=0.0,store_y=0.0,store_z=0.0 WHERE id=%d LIMIT 1", GetHouseData(houseid, H_RENT_DATE), GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
					mysql_query(mysql, query, false);

					return 1;
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 34)");

				return 0;
			}
			else
			{

				format(query, sizeof query, "UPDATE accounts a, houses h SET a.money=%d,a.house_type=%d,a.house=%d,h.owner_id=%d WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOME, houseid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				if(!mysql_errno())
				{
					SetPlayerData(playerid, P_HOUSE, 		houseid);
					SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_HOME);

					SetHouseData(houseid, H_OWNER_ID, 		GetPlayerAccountID(playerid));
					SetHouseData(houseid, H_IMPROVEMENTS, 	0);

					SetHouseData(houseid, H_STORE_X, 0.0);
					SetHouseData(houseid, H_STORE_Y, 0.0);
					SetHouseData(houseid, H_STORE_Z, 0.0);

					new rent_time = 1;

					if(!buy_from_owner)
					{
						SetHouseData(houseid,	H_RENT_DATE,	rent_time);
						SetHouseData(houseid,	H_LOCK_STATUS,	false);
					}
					else
					{
						if(GetHouseData(houseid, H_RENT_DATE) <= 0)
						{
							SetHouseData(houseid, H_RENT_DATE, rent_time);
						}
					}
					format(g_house[houseid][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);

					UpdateHouse(houseid);

					HouseHealthInit(houseid);
					HouseStoreInit(houseid);

					GivePlayerMoneyEx(playerid, -price, "Покупка дома", false, true);
					SendClientMessage(playerid, 0x32a44bFF, "Напишите {1E90FF}/home {32a44b},чтобы узнать о возможностях");
					SendClientMessage(playerid, 0xffff00FF, "Используйте {1E90FF}/exit {ffff00}для выхода из дома");

					format(query, sizeof query, "%s (%d) купил дом %d",GetPlayerNameEx(playerid), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));

					format(fmt_str, sizeof fmt_str, "%s купил дом №%d у государства, штат получил {32a44b}($%d)", GetPlayerNameEx(playerid), houseid, price);

					TransferCoffersMoney(price, query, fmt_str, true);

					format(query, sizeof query, "UPDATE houses SET improvements=0,rent_time=%d,`lock`=%d,store_x=0.0,store_y=0.0,store_z=0.0 WHERE id=%d LIMIT 1", GetHouseData(houseid, H_RENT_DATE), GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
					mysql_query(mysql, query, false);

					return 1;
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 34)");

				return 0;
			}
		}
		return 0;
	}
	return -1;
}

stock EnterPlayerToHouse(playerid, houseid)
{
	if(GetPlayerInHouse(playerid) == -1 || IsPlayerInRangeOfPoint(playerid, 3.0, -2615.2668, 1424.7080, 908.9077))
	{
		new type = GetHouseData(houseid, H_TYPE);
		SetPlayerPosEx
		(
			playerid,
			GetHouseTypeInfo(type, HT_ENTER_POS_X),
			GetHouseTypeInfo(type, HT_ENTER_POS_Y),
			GetHouseTypeInfo(type, HT_ENTER_POS_Z),
			GetHouseTypeInfo(type, HT_ENTER_POS_ANGLE),
			GetHouseTypeInfo(type, HT_INTERIOR),
			houseid + 2000
		);
		SetPVarInt(playerid, "HOUSEID", houseid + 2000);
		printf("%i SSS",houseid);
		SetPlayerInHouse(playerid, houseid);
	}
}

stock ExitPlayerFromHouse(playerid, Float: radius = 8.0)
{
	new houseid = GetPlayerInHouse(playerid);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
		{
            if(GetHouseData(houseid, H_IMPROVEMENTS) != 6)
            {
            	SetPlayerInHouse(playerid, -1);
				SetPlayerPosEx
				(
					playerid,
					GetHouseData(houseid, H_EXIT_POS_X),
					GetHouseData(houseid, H_EXIT_POS_Y),
					GetHouseData(houseid, H_EXIT_POS_Z),
					GetHouseData(houseid, H_EXIT_ANGLE),
					0,
					0
				);
				GameTextForPlayer(playerid, "~g~Street", 3000, 1);
				return 1;
			}

			Dialog(playerid,DIALOG_HOUSE_OUT,DIALOG_STYLE_LIST,
			"Выход из дома",
			"Чердак\n\
			Улица\n\
			Гараж",
			"Выбор",""
			);
			ClearAnimations(playerid);
		}
		if(IsPlayerInRangeOfPoint(playerid, radius, 1699.6826,1413.3649,1416.0548) || IsPlayerInRangeOfPoint(playerid, 3.0,532.0135,-234.5101,763.2584))
	    {
	        SetPlayerInHouse(playerid, -1);
	        EnterPlayerToHouse(playerid,GetPlayerData (playerid, P_HOUSE));
	        GameTextForPlayer(playerid, "~g~Home", 3000, 1);
		}
	}
	return 0;
}

stock GetPlayerHouse(playerid, type = -1)
{
	new houseid = GetPlayerData(playerid, P_HOUSE);
	if(houseid != -1)
	{
		switch(type)
		{
			case HOUSE_TYPE_HOME:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_HOME)
				{
					if(GetHouseData(houseid, H_OWNER_ID) == GetPlayerAccountID(playerid))
					{
						return houseid;
					}
				}
			}
			case HOUSE_TYPE_ROOM:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_ROOM)
				{
					new room = GetPlayerData(playerid, P_HOUSE_ROOM);
					if(room != -1)
					{
						if(GetHouseRenterInfo(houseid, room, HR_OWNER_ID) == GetPlayerAccountID(playerid))
						{
							return houseid;
						}
					}
				}
			}
			case HOUSE_TYPE_HOTEL:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_HOTEL)
				{
					new room = GetPlayerData(playerid, P_HOUSE_ROOM);
					if(room != -1)
					{
						if(GetHotelData(houseid, room, H_OWNER_ID) == GetPlayerAccountID(playerid))
						{
							return houseid;
						}
					}
				}
			}
			default:
				return houseid;
		}
	}
	return -1;
}

stock HouseImprovementsPrice(houseid)
{
	new price;
	new level = GetHouseData(houseid, H_IMPROVEMENTS);

	if(1 <= level <= sizeof g_house_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_house_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock IsPlayerInRangeOfHouse(playerid, houseid, Float: radius = 10.0)
{
	new result;

	result = IsPlayerInRangeOfPoint(playerid, radius, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z));

	return result;
}

stock BuyOwnableCar(playerid, marketid, ownablecar, color_1, color_2)
{
	RemovePlayerFromVehicle(playerid);
    new modelid, query[256], time = gettime();
 	printf("player_cars: %d / player_slots: %d", GetPlayerOwnableCars(playerid), GetPlayerCarSlots(playerid));

	printf("BuyOwnableCar(%d, %d, %d, %d, %d)", playerid, marketid, ownablecar, color_1, color_2);


	if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
	{
		SendClientMessage(playerid, 0x1E90FFFF, "Все слоты для транспорта заняты. Вы можете увеличить их: {FFFF00}/menu > Дополнительно");
		return -1;
	}

	if(ownablecar < 1000)
		modelid = car_market_data[marketid][ownablecar][0];
	else
		modelid = ownablecar - 1000;

	if(marketid != 0 && marketid != 2)
	{
		if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1 &&
		GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1 &&
		GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1)
		{
			SendClientMessage(playerid, 0xCECECEFF, "Для покупки транспорта этого класса нужно иметь недвижимость");
			return -1;
		}
	}

	if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
	{
		SendClientMessage(playerid, 0xCECECEFF, "Для покупки транспорта нужно выгрузить уже загруженный транспорт с сервера");
		return -1;
	}

	if(GetPlayerMoneyEx(playerid) < GetVehicleInfo(modelid - 400, VI_PRICE)*3)
	{
		SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки этого транспорта");
		return -1;
	}

	GivePlayerMoneyEx(playerid, -GetVehicleInfo(modelid - 400, VI_PRICE)*3, "Покупка ТС в автосалоне", true, true);


	new biz_id = marketid + 27,
	take_prods = random(5) + 6;

	if(GetBusinessData(biz_id, B_PRODS) >= take_prods)
	{
		AddBusinessData(biz_id, B_PRODS, -, take_prods);
		AddBusinessData(biz_id, B_BALANCE, +, (GetVehicleInfo(modelid - 400, VI_PRICE) * 20 / 100));
		AddBusinessData(biz_id, B_BALANCE_DAY, +, (GetVehicleInfo(modelid - 400, VI_PRICE) * 20 / 100));

		format(query, sizeof query, "UPDATE business SET balance=%d WHERE id=%d LIMIT 1", GetBusinessData(biz_id, B_BALANCE), GetBusinessData(biz_id, B_SQL_ID));
		mysql_query(mysql, query, false);


		mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(biz_id, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), time, (GetVehicleInfo(modelid - 400, VI_PRICE) * 20 / 100), IsBusinessOwned(biz_id));
		mysql_query(mysql, query, false);
	}

  	TransferCoffersMoney((GetVehicleInfo(modelid - 400, VI_PRICE) * 80 / 100), "Покупка авто", "", false);

	new buy_cars_count = cars_after_purchase_count[marketid]++;

	if(buy_cars_count >= 3)
		cars_after_purchase_count[marketid] = 0;

	new Float: pos_x = cars_pos_after_purchase[marketid][buy_cars_count][0];
	new Float: pos_y = cars_pos_after_purchase[marketid][buy_cars_count][1];
	new Float: pos_z = cars_pos_after_purchase[marketid][buy_cars_count][2];
	new Float: angle = cars_pos_after_purchase[marketid][buy_cars_count][3];

	new Cache: result,
		idx;

	idx = GetFreeOwnableCarID();

	SetOwnableCarData(idx, OC_OWNER_ID, 	GetPlayerAccountID(playerid));

	SetOwnableCarData(idx, OC_MODEL_ID, 	modelid);
	SetOwnableCarData(idx, OC_COLOR_1, 		color_1);
	SetOwnableCarData(idx, OC_COLOR_2, 		color_2);

	SetOwnableCarData(idx, OC_POS_X, 		pos_x);
	SetOwnableCarData(idx, OC_POS_Y, 		pos_y);
	SetOwnableCarData(idx, OC_POS_Z, 		pos_z);
	SetOwnableCarData(idx, OC_ANGLE, 		angle);

	strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

	SetOwnableCarData(idx, OC_KEY_IN, 		false);

	SetOwnableCarData(idx, OC_CREATE, 		gettime());

	SetOwnableCarData(idx, OC_FUEL, 		50.0);

	format(g_ownable_car[idx][OC_OWNER_NAME], 21, GetPlayerNameEx(playerid));
	// ----------------------------------------------------------------------------------------

	new vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID),
		GetOwnableCarData(idx, OC_POS_X),
		GetOwnableCarData(idx, OC_POS_Y),
		GetOwnableCarData(idx, OC_POS_Z),
		GetOwnableCarData(idx, OC_ANGLE),
		GetOwnableCarData(idx, OC_COLOR_1),
		GetOwnableCarData(idx, OC_COLOR_2),
		-1,
		0,
		VEHICLE_ACTION_TYPE_OWNABLE_CAR,
		idx
	);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
		SetVehicleParam(vehicleid, V_LOCK, false);

		SetVehicleData(vehicleid, V_MILEAGE, 0.0);
		SetVehicleData(vehicleid, V_FUEL, 50.0);
	}
	SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);
	format
	(
		query, sizeof query,
		"INSERT INTO ownable_cars \
		(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
		VALUES \
		('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
		GetPlayerAccountID(playerid),
		modelid,
		color_1,
		color_2,
		pos_x,
		pos_y,
		pos_z,
		angle,
		gettime()
	);
	result = mysql_query(mysql, query, true);

	SetOwnableCarData(idx, OC_SQL_ID, cache_insert_id());
	cache_delete(result);

	SendClientMessage(playerid, 0x32a44bFF, "Поздравляем с покупкой нового транспорта!");
	SendClientMessage(playerid, -1, "Вы можете улучшить свой автомобиль! Введите {ffff00}/car {ffffff} и прокачайте его прямо сейчас");

	return 1;
}


stock GetFreeHousesCount()
{
	new count;
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;

		count ++;
	}
	return count;
}

stock ShowHouseRenterInfo(playerid, houseid, roomid)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid)
	{
		if(0 <= roomid <= MAX_HOUSE_ROOMS-1)
		{
			if(IsHouseRoomOwned(houseid, roomid))
			{
				SetPlayerUseListitem(playerid, roomid);

				new string[144];
				new time = gettime();

				new s_year, s_month, s_day; // поселение
				timestamp_to_date(GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), s_year, s_month, s_day);

				//new e_year, e_month, e_day;	// выселение
				//timestamp_to_date(GetHouseRoomInfo(houseid, roomid, HR_RENT_DATE), e_year, e_month, e_day);

				format
				(
					string, sizeof string,
					"1. Арендатор\t\t\t{CCCC00}%s\n"\
					"2. Поселился\t\t\t%02d-%02d-%d\n"\
					"3. Проживает\t\t\t{66BB33}%d дней\n"\
					"{888888}4. Выселить",
					GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME),
					s_day, s_month, s_year,
					GetElapsedTime(time, GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), CONVERT_TIME_TO_DAYS)
				);
				Dialog(playerid, DIALOG_HOUSE_RENTER_INFO, DIALOG_STYLE_LIST, "Информация о арендаторе", string, "Действие", "Назад");
			}
			else SendClientMessage(playerid, 0xCECECEFF, "В этой комнате уже никто не проживает");
		}
	}
}

stock AddHouseRenter(houseid, roomid, playerid)
{
	if(!IsHouseRoomOwned(houseid, roomid))
	{
		new query[128];
		new Cache: result;

		new time = gettime();

		format(query, sizeof query, "UPDATE accounts SET house_type=%d,house_room=%d,house=%d WHERE id=%d LIMIT 1", HOUSE_TYPE_ROOM, roomid, houseid, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "INSERT INTO houses_renters (owner_id,house_id,room_id,rent_time,time) VALUES (%d,%d,%d,%d,%d)", GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID), roomid, 0, time);
		result = mysql_query(mysql, query, true);

		SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 		cache_insert_id());
		SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	GetPlayerAccountID(playerid));
		SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
		SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	time);

		format(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME), 21, GetPlayerNameEx(playerid));

		SetPlayerData(playerid, P_HOUSE, 		houseid);
		SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_ROOM);
		SetPlayerData(playerid, P_HOUSE_ROOM, 	roomid);

		AddHouseRentersCount(houseid, +, 1);

		cache_delete(result);
	}
}

stock EvictHouseRenter(houseid, roomid, renter_id = INVALID_PLAYER_ID, ownerid = INVALID_PLAYER_ID)
{
	if(IsHouseRoomOwned(houseid, roomid))
	{
		new query[90];

		format(query, sizeof query, "DELETE FROM houses_renters WHERE owner_id=%d AND house_id=%d", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID), GetHouseData(houseid, H_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE id=%d LIMIT 1", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			if(renter_id == INVALID_PLAYER_ID)
				renter_id = GetPlayerID(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME));

			if(renter_id != INVALID_PLAYER_ID)
			{
				if(GetPlayerHouse(renter_id, HOUSE_TYPE_ROOM) == houseid)
				{
					if(ownerid != INVALID_PLAYER_ID)
					{
						format(query, sizeof query, "%s выселил Вас из своего дома", GetPlayerNameEx(ownerid));
						SendClientMessage(renter_id, 0x1E90FFFF, query);
					}

					SetPlayerData(renter_id, P_HOUSE, -1);
					SetPlayerData(renter_id, P_HOUSE_TYPE, -1);
					SetPlayerData(renter_id, P_HOUSE_ROOM, -1);
				}
			}

			SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 	0);
			SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	0);

			AddHouseRentersCount(houseid, -, 1);
			return 1;
		}
		return -1;
	}
	return 0;
}

stock GetHouseIndexBySQLID(sql_id)
{
	new index = -1;

	for(new idx; idx < MAX_HOUSES; idx ++)
	{
		if(GetHouseData(idx, H_SQL_ID) != sql_id) continue;

		index = idx;
		break;
	}
	return index;
}

stock GetHouseFreeRoom(houseid)
{
	new roomid = -1;

	for(new idx; idx < MAX_HOUSE_ROOMS; idx ++)
	{
		if(IsHouseRoomOwned(houseid, idx)) continue;

		roomid = idx;
		break;
	}
	return roomid;
}

stock LotteryBuyTicketCount()
{
	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(!GetPlayerData(playerid, P_LOTTERY)) continue;

		count ++;
	}
	return count;
}

stock IsPlayerHaveWeapon(playerid, weaponid)
{
	new weapon, ammo;
	new bool: is_have = false;

	for(new idx; idx <= 12; idx ++)
	{
		GetPlayerWeaponData(playerid, idx, weapon, ammo);
		if(weapon != weaponid) continue;

		is_have = true;
		break;
	}
	return is_have;
}

stock IsAJobCar(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
	{
		case
			VEHICLE_ACTION_TYPE_BUS_DRIVER,
			VEHICLE_ACTION_TYPE_TAXI_DRIVER,
			VEHICLE_ACTION_TYPE_MECHANIC,
			VEHICLE_ACTION_TYPE_TRUCKER:
		{
			return 1;
		}
	}
	return 0;
}

stock GetNearestVehicleID(playerid, Float: radius = 0.0)
{
	if(radius == 0.0)
		radius = FLOAT_INFINITY;

	new vehicleid = INVALID_VEHICLE_ID;

	new Float: dist;
	new Float: pos_x, Float: pos_y, Float: pos_z;

	GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	for(new idx; idx < MAX_VEHICLES; idx ++)
	{
		if(!IsValidVehicle(idx)) continue;
		if(!IsVehicleStreamedIn(idx, playerid)) continue;

		dist = GetVehicleDistanceFromPoint(idx, pos_x, pos_y, pos_z);
		if(dist < radius)
		{
			radius = dist,
			vehicleid = idx;
		}
	}
	return vehicleid;
}

stock ShowPlayerBuyJerricanDialog(playerid, stationid)
{
	if(stationid != -1)
	{
		SetPVarInt(playerid, "buy_jerrican_in_fuelst", stationid);

		new fmt_str[70];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Канистра на этой заправке стоит $%d\n"\
			"Вы хотите купить ее?",
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 15
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY_JERRICA, DIALOG_STYLE_MSGBOX, "Покупка канистры", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Канистру с топливом можно купить на любой АЗС");
}

stock SellFuelStation(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fuel_st_price = GetFuelStationData(stationid, FS_PRICE);
		new fuel_st_percent = (fuel_st_price * 30) / 100;
		new fuel_st_improvemnts_price = FuelStationImprovementsPrice(stationid);

		if(fuel_st_improvemnts_price)
			fuel_st_improvemnts_price = (fuel_st_improvemnts_price * 60) / 100;

		new query[170];
		new return_money = (fuel_st_price - fuel_st_percent) + fuel_st_improvemnts_price;

		SetPlayerData(playerid, P_FUEL_ST, -1);

		SetFuelStationData(stationid, FS_OWNER_ID, 0);

		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа АЗС");

			SetFuelStationData(stationid, FS_IMPROVEMENTS, 	0);

			SetFuelStationData(stationid, FS_FUELS, 		1000);
			SetFuelStationData(stationid, FS_FUEL_PRICE,	3);
			SetFuelStationData(stationid, FS_BUY_FUEL_PRICE,0);

			SetFuelStationData(stationid, FS_BALANCE,		0);
			SetFuelStationData(stationid, FS_RENT_DATE,		0);
			SetFuelStationData(stationid, FS_LOCK_STATUS,	false);

			format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.bank=%d,a.fuel_st=-1,f.owner_id=0,f.fuels=1000,f.fuel_price=3,f.lock=0 WHERE a.id=%d AND f.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
			mysql_query(mysql, query, false);

			//format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(stationid, FS_SQL_ID));
			//mysql_query(mysql, query, false);

			GivePlayerMoneyEx(playerid, 0, "Продажа заправочной станции государству", false, false);
			CallLocalFunction("UpdateFuelStationLabel", "i", stationid);

			SendClientMessage(playerid, 0x32a44bFF, "Вы продали свою заправочную станцию!");

			format(query, sizeof query, "Налог за продажу заправочной станции составил 30 процентов от ее стоимости {32a44b}($%d)", fuel_st_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}$%d", fuel_st_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {1E90FF}$%d", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);

		}
		else
		{
			if(BuyPlayerFuelStation(to_player, stationid, true, price) == 1)
			{
				new total_price = price + fuel_st_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}$%d", fuel_st_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts SET money=%d,fuel_st=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				GivePlayerMoneyEx(playerid, total_price, "Продажа заправочной станции игроку", false, false);

				fuel_st_price = price;
				fuel_st_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+$%d~n~+$%d", (fuel_st_price - fuel_st_percent), fuel_st_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1);
	}
}

stock BuyPlayerFuelStation(playerid, stationid, bool: buy_from_owner = false, price = -1)
{
	if(!IsFuelStationOwned(stationid) && GetPlayerFuelStation(playerid) == -1)
	{
		if(price <= 0)
			price = GetFuelStationData(stationid, FS_PRICE);

		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];

			format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,a.fuel_st=%d,f.owner_id=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, stationid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
			mysql_query(mysql, query, false);

			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_FUEL_ST, stationid);

				SetFuelStationData(stationid, FS_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetFuelStationData(stationid, FS_IMPROVEMENTS, 	0);

				new time = gettime();
				new rent_time = 1;

				if(!buy_from_owner)
				{
					SetFuelStationData(stationid, FS_FUELS, 		50);
					SetFuelStationData(stationid, FS_FUEL_PRICE,	3);
					SetFuelStationData(stationid, FS_BUY_FUEL_PRICE,0);

					SetFuelStationData(stationid, FS_BALANCE,		0);
					SetFuelStationData(stationid, FS_RENT_DATE,		rent_time);
					SetFuelStationData(stationid, FS_LOCK_STATUS,	false);
				}
				else
				{
					if(GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetFuelStationData(stationid, FS_RENT_DATE, rent_time);
					}
				}
				format(g_fuel_station[stationid][FS_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateFuelStationLabel", "i", stationid);

				GivePlayerMoneyEx(playerid, -price, "Покупка заправочной станции", false, true);
				SendClientMessage(playerid, 0x32a44bFF, "Напишите {1E90FF}/fuelst {32a44b}чтобы узнать о возможностях");

				format(query, sizeof query, "UPDATE fuel_stations SET improvements=0,fuels=%d,fuel_price=%d,buy_fuel_price=%d,balance=%d,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_FUEL_PRICE), GetFuelStationData(stationid, FS_BUY_FUEL_PRICE), GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_RENT_DATE), GetFuelStationData(stationid, FS_LOCK_STATUS), GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}

			SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 16)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock FuelStationFillCar(playerid, vehicleid, stationid)
{
	if(IsPlayerDriver(playerid) && IsPlayerInVehicle(playerid, vehicleid))
	{
		if(0 <= stationid <= g_fuel_station_loaded)
		{
			if(!GetFuelStationData(stationid, FS_LOCK_STATUS))
			{
				new fmt_str[150];

				new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay");
				new buy_fuel_count = GetPVarInt(playerid, "buy_fuel_count");

				new price = GetFuelStationData(stationid, FS_FUEL_PRICE) * 10;

				if(GetPlayerMoneyEx(playerid) >= price)
				{
					if((GetVehicleData(vehicleid, V_FUEL) + 10.0) <= 150.0)
					{
						if(GetFuelStationData(stationid, FS_FUELS) >= 10)
						{
							if(IsFuelStationOwned(stationid))
							{
								AddFuelStationData(stationid, FS_FUELS, -, 10);
								AddFuelStationData(stationid, FS_BALANCE, +, price);
							}
							SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + 10);

							buy_fuel_count += 10;
							buy_fuel_pay += price;

							SetPVarInt(playerid, "buy_fuel_pay", buy_fuel_pay);
							SetPVarInt(playerid, "buy_fuel_count", buy_fuel_count);

                            new index = GetVehicleData(vehicleid, V_ACTION_ID);
							format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f,ownable_cars o SET a.money=%d,f.fuels=%d,f.balance=%d,o.fuel=%f WHERE a.id=%d AND f.id=%d AND o.id", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE),GetVehicleData(vehicleid, V_FUEL), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID),GetOwnableCarData(index, OC_SQL_ID));
							mysql_query(mysql, fmt_str, false);

							fmt_str = "";
							GivePlayerMoneyEx(playerid, -price, "Покупка топлива на заправке", false, false);
						}
						else strcat(fmt_str, "~n~~r~~h~no fuel");
					}
					else strcat(fmt_str, "~n~~r~~h~benzobak full");

					format(fmt_str, sizeof fmt_str, "~w~summa: ~g~~h~$%d~n~~w~litres: ~b~%d%s", buy_fuel_pay, buy_fuel_count, fmt_str);
					GameTextForPlayer(playerid, fmt_str, 3000, 4);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для заправки");
			}
			else
			{
				GameTextForPlayer(playerid, "~w~fuel station~n~~r~~h~is closed", 3000, 4);
				//SendClientMessage(playerid, 0xCECECEFF, "Заправочная станция закрыта");
			}
		}
	}
}

stock GetFuelStationMaxFuel(stationid)
{
	new max_fuels = 2500;
	new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

	if(i_level > 3)
		i_level = 3;

	max_fuels += i_level * 2500;
	return max_fuels;
}

stock GetNearestFuelStation(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new stationid = -1;
	new Float: my_dist;

	for(new idx; idx < g_fuel_station_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			stationid = idx;
		}
	}
	return stationid;
}

stock GetNearestBiz(playerid, type, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new biz_id = -1;
	new Float: my_dist;

	for(new idx; idx < g_business_loaded; idx ++)
	{
	    if(GetBusinessData(idx, B_TYPE) != type) continue;
		my_dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			biz_id = idx;
		}
	}
	return biz_id;
}

stock GetPlayerFuelStation(playerid)
{
	new stationid = GetPlayerData(playerid, P_FUEL_ST);

	if(stationid != -1)
	{
		if(GetFuelStationData(stationid, FS_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return stationid;
		}
	}
	return -1;
}

stock FuelStationImprovementsPrice(stationid)
{
	new price;
	new level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

	if(1 <= level <= sizeof g_fuel_station_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_fuel_station_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock ShowPlayerFuelStationPayForRent(playerid)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Заправочная станция:\t\t№%d (%s)\n"\
			"Оплаченных дней арендны:\t\t%d из 30\n"\
			"Ежедневная арендная плата:\t$%d\n"\
			"Тип аренды:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите арендовать заправочную станцию?",
			stationid,
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_RENT_DATE),
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2,
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? ("Полная") : ("Пониженная")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_FUEL_ST, DIALOG_STYLE_INPUT, "{32a44b}Аренда заправочной станции", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerBusinessPayForRent(playerid)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Бизнес:\t\t\t\t№%d (%s)\n"\
			"Оплаченных дней арендны:\t\t%d из 30\n"\
			"Ежедневная арендная плата:\t$%d\n"\
			"Тип аренды:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите арендовать бизнес?",
			businessid,
			GetBusinessData(businessid, B_NAME),
			GetBusinessData(businessid, B_RENT_DATE),
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2,
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("Полная") : ("Пониженная")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_BIZ, DIALOG_STYLE_INPUT, "{32a44b}Аренда бизнеса", fmt_str, "Оплатить", "Назад");
	}
}

stock ShowPlayerHousePayForRent(playerid)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new fmt_str[256];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Дом:\t\t\t\t\t№%d (%s)\n"\
			"Оплаченных дней арендны:\t\t%d из 30\n"\
			"Ежедневная квартплата:\t\t$%d\n"\
			"Субсидия:\t\t\t\t%s\n\n"\
			"На сколько дней Вы хотите оплатить дом?",
			houseid,
			GetHouseData(houseid, H_NAME),
			GetHouseData(houseid, H_RENT_DATE),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? GetHouseData(houseid, H_RENT_PRICE) : GetHouseData(houseid, H_RENT_PRICE) / 2,
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? ("Нет") : ("Есть")
		);
		Dialog(playerid, DIALOG_PAY_FOR_RENT_HOUSE, DIALOG_STYLE_INPUT, "{32a44b}Оплата дома", fmt_str, "Оплатить", "Назад");
	}
}

stock SellBusiness(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new businessid = GetPlayerBusiness(playerid);

	if(businessid != -1)
	{
		new biz_price = GetBusinessData(businessid, B_PRICE);
		new biz_percent = (biz_price * 30) / 100;
		new biz_improvemnts_price = BusinessImprovementsPrice(businessid);

		if(biz_improvemnts_price)
			biz_improvemnts_price = (biz_improvemnts_price * 60) / 100;

		new query[200],
			fmt_str[200];

		new return_money = (biz_price - biz_percent) + biz_improvemnts_price;

		SetPlayerData(playerid, P_BUSINESS, 		-1);

		SetBusinessData(businessid, B_OWNER_ID, 	0);

		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);

			BankLog(playerid, return_money, "Продажа бизнеса");

			SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

			SetBusinessData(businessid, B_PRODS, 			0);
			SetBusinessData(businessid, B_PROD_PRICE,		0);

			SetBusinessData(businessid, B_BALANCE,			0);
			SetBusinessData(businessid, B_RENT_DATE,		0);
			SetBusinessData(businessid, B_ENTER_MUSIC,		0);
			SetBusinessData(businessid, B_LOCK_STATUS,	false);

			BusinessHealthPickupInit(businessid);

			format(query, sizeof query, "UPDATE accounts a,business b SET a.bank=%d,a.business=-1,b.owner_id=0,b.products=0,b.prod_price=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
			mysql_query(mysql, query, false);

			g_business_gps_init = false;

			//format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
			//mysql_query(mysql, query, false);

			GivePlayerMoneyEx(playerid, 0, "Продажа бизнеса государству", false, false);
			CallLocalFunction("UpdateBusinessLabel", "i", businessid);

			format(query, sizeof query, "%s (%d) продал бизнес %d",GetPlayerNameEx(playerid), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));

			format(fmt_str, sizeof fmt_str, "%s продал свой бизнес №%d государству, штат выплатил {32a44b}($%d)", GetPlayerNameEx(playerid), businessid, return_money);

			TransferCoffersMoney(-return_money, query, fmt_str, true);

			SendClientMessage(playerid, 0x32a44bFF, "Вы продали свой бизнес!");

			format(query, sizeof query, "Налог за продажу бизнеса составил 30 процентов от его стоимости {32a44b}($%d)", biz_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}$%d", biz_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);

			format(query, sizeof query, "Итого на банковский счет перечислено: {1E90FF}$%d", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
		}
		else
		{
			if(BuyPlayerBusiness(to_player, businessid, true, price) == 1)
			{
				new total_price = price + biz_improvemnts_price;

				format(query, sizeof query, "Вам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}$%d", biz_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);

				format(query, sizeof query, "UPDATE accounts SET money=%d,business=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
				mysql_query(mysql, query, false);

				g_business_gps_init = false;
				GivePlayerMoneyEx(playerid, total_price, "Продажа бизнеса игроку", false, false);

				biz_price = price;
				biz_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+$%d~n~+$%d", (biz_price - biz_percent), biz_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1);
	}
}

stock BuyPlayerBusiness(playerid, businessid, bool: buy_from_owner = false, price = -1)
{
    if(!GetPlayerData(playerid, P_PASS))
	    return SendClientMessage(playerid, 0xCECECEFF, "У вас нет паспорта,получите его в мэрии");
   	if(GetPlayerBusiness(playerid) != -1)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть бизнес. Чтобы купить другой необходимо продать старый");
	if(GetPlayerData(playerid,P_LIC_BIZ) == 0) return SendClientMessage(playerid,-1,"{F81414}У вас нету лицензии на бизнес!");
	if(!IsBusinessOwned(businessid) && GetPlayerBusiness(playerid) == -1)
	{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{1E90FF}Новый бизнес", "{FFFFFF}Вам нужно заплатить за аренду бизнеса в ближайшем отделением банка {ffff00}(/gps)", "Ок", "");
		if(price <= 0)
			price = GetBusinessData(businessid, B_PRICE);

		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256],
				fmt_str[200];

			format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,a.business=%d,b.owner_id=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, businessid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);

			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_BUSINESS, businessid);

				SetBusinessData(businessid, B_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

				new rent_time = 1;

				if(!buy_from_owner)
				{
					SetBusinessData(businessid,	B_PRODS, 		20);
					SetBusinessData(businessid,	B_PROD_PRICE, 	0);

					SetBusinessData(businessid,	B_ENTER_MUSIC, 	0);
					SetBusinessData(businessid,	B_ENTER_PRICE, 	0);

					SetBusinessData(businessid,	B_BALANCE, 		0);
					SetBusinessData(businessid,	B_RENT_DATE,	rent_time);
					SetBusinessData(businessid,	B_LOCK_STATUS,	false);
				}
				else
				{
					if(GetBusinessData(businessid, B_RENT_DATE) <= 0)
					{
						SetBusinessData(businessid, B_RENT_DATE, rent_time);
					}
				}
				format(g_business[businessid][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", businessid);

				format(query, sizeof query, "%s (%d) купил бизнес %d",GetPlayerNameEx(playerid), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));

				format(fmt_str, sizeof fmt_str, "%s купил бизнес №%d у государства, штат получил {32a44b}($%d)", GetPlayerNameEx(playerid), businessid, price);

				TransferCoffersMoney(price, query, fmt_str, true);

				GivePlayerMoneyEx(playerid, -price, "Покупка бизнеса", false, true);
				SendClientMessage(playerid, 0x32a44bFF, "Напишите {ffff00}/business {32a44b}чтобы узнать о возможностях");

				format(query, sizeof query, "UPDATE business SET improvements=0,products=%d,prod_price=%d,balance=%d,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_RENT_DATE), GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}

			SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 21)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock BusinessHealthPickupInit(businessid)
{
	if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 2)
	{
		if(!GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			new interior = GetBusinessData(businessid, B_INTERIOR);
			SetBusinessData(businessid, B_HEALTH_PICKUP, CreatePickup(1240, 23, GetBusinessInteriorInfo(interior, BT_HEALTH_POS_X), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Y), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Z), businessid + 255, PICKUP_ACTION_TYPE_BIZ_HEALTH, businessid));
		}
	}
	else
	{
		if(GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			DestroyPickup(GetBusinessData(businessid, B_HEALTH_PICKUP));
			SetBusinessData(businessid, B_HEALTH_PICKUP, 0);
		}
	}
}

stock GetBusinessEnterProdCount(businessid)
{
	new take_prods = 0;
	new enter_price = GetBusinessData(businessid, B_ENTER_PRICE);

	if(enter_price > 0)
	{
		if(enter_price < 150)
		{
			take_prods = 1;
		}
		else if(enter_price < 500)
		{
			take_prods = 2;
		}
		else take_prods = 3;
	}
	return take_prods;
}

stock GetBusinessMaxProd(businessid)
{
	new max_prods = 500;
	new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

	if(i_level >= 5)
	{
		max_prods = 10_000;
	}
	else if(i_level >= 1)
	{
		max_prods = 3_000;
	}
	else max_prods = 500;

	return max_prods;
}

stock GetNearestBusiness(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new businessid = -1;
	new Float: my_dist;

	for(new idx; idx < g_business_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			businessid = idx;
		}
	}
	return businessid;
}

stock BusinessImprovementsPrice(businessid)
{
	new price;
	new level = GetBusinessData(businessid, B_IMPROVEMENTS);

	if(1 <= level <= sizeof g_business_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_business_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock EnterPlayerToBiz(playerid, businessid)
{
	if(GetPlayerInBiz(playerid) == -1)
	{
		new type = GetBusinessData(businessid, B_TYPE),
			buffer = GetBusinessData(businessid, B_INTERIOR);

		if(type == BUSINESS_TYPE_CAR_TUNING)
		{
			new vehicleid = GetPlayerOwnableCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return 1;

			GetVehiclePos(vehicleid, vehicle_temp_position[playerid][0], vehicle_temp_position[playerid][3], vehicle_temp_position[playerid][2]);
			GetVehicleZAngle(vehicleid, vehicle_temp_position[playerid][3]);

			SetVehiclePos(vehicleid, 870.7346, 1334.1289, 1008.4175);
			SetVehicleZAngle(vehicleid, 90.0);

			LinkVehicleToInterior(vehicleid, GetBusinessInteriorInfo(buffer, BT_ENTER_INTERIOR));
			SetVehicleVirtualWorld(vehicleid, businessid + 255);
		}

		SetPlayerPosEx
		(
			playerid,
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_X),
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Y),
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Z),
			GetBusinessInteriorInfo(buffer, BT_ENTER_ANGLE),
			GetBusinessInteriorInfo(buffer, BT_ENTER_INTERIOR),
			businessid + 255, false
		);
		SetPlayerInBiz(playerid, businessid);

		buffer = GetBusinessData(businessid, B_ENTER_MUSIC);
		if(1 <= buffer <= sizeof g_business_sound)
		{
			PlayerPlaySound(playerid, g_business_sound[buffer - 1], 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

stock GetPlayerBusiness(playerid)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS);

	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return businessid;
		}
	}
	return -1;
}

stock GetFreeBusinessCount()
{
	new count;
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;

		count ++;
	}
	return count;
}

stock IsPlayerInBuyPosBiz(playerid, businessid, type, Float: radius = 50.0)
{
	if(GetBusinessData(businessid, B_TYPE) == type)
	{
		new interior = GetBusinessData(businessid, B_INTERIOR);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetBusinessInteriorInfo(interior, BT_BUY_POS_X), GetBusinessInteriorInfo(interior, BT_BUY_POS_Y), GetBusinessInteriorInfo(interior, BT_BUY_POS_Z)))
		{
			return 1;
		}
	}
	return 0;
}

stock ShowPlayerRealtorHomeDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_BIZ_REALTOR_HOME_GET, DIALOG_STYLE_INPUT,
		"Информация о доме",
		"{FFFFFF}Введите номер дома, информацию\n"\
		"о котором Вы хотите получить\n\n"\
		"Стоимость услуги 50$",
		"Далее", "Отмена"
	);
}

stock IsABike(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_MODELID))
	{
		case 481, 509, 510:
		{
			return 1;
		}
	}
	return 0;
}

stock IsBusinessNoEnter(action_id)
{
	switch(GetBusinessData(action_id, B_SQL_ID))
	{
		case 28, 29, 30, 31:
		{
			return 1;
		}
	}
	return 0;
}

stock IsModelHasBootAndBonnet(modelid)
{
	switch(modelid)
	{
		case 481,509,510,417,425,447,460,469,464,465,476,487,489,497,501,511,512,513,519,520,530,548,553,563,577,592,593: return 0;
	}
	return 1;
}

stock SetPlayerPhoneUseState(playerid, bool: use = true, bool: bubble = true)
{
	if(use)
	{
		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, GetPlayerData(playerid, P_PHONE_COLOR) + 18865, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.001, 0.0, 280.0, 0.0, 200.0, 1.0, 1.0, 1.0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE - 1);

		if(bubble)
			Action(playerid, "достал телефон", _, false);
	}
	else
	{
		RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
}

stock GetNearestAtm(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new atmid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_atm-1; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, g_atm[idx][A_POS_X], g_atm[idx][A_POS_Y], g_atm[idx][A_POS_Z]);
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}

stock GetElapsedTime(time, to_time, type = CONVERT_TIME_TO_HOURS)
{
	new result;

	switch(type)
	{
		case CONVERT_TIME_TO_MINUTES:
		{
			result = ((time - (time % 60)) - (to_time - (to_time % 60))) / 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			result = ((time - (time % 3600)) - (to_time - (to_time % 3600))) / 3600;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			result = ((time - (time % 86400)) - (to_time - (to_time % 86400))) / 86400;
		}
		default:
			result = -1;
	}
	return result;
}

stock ConvertUnixTime(unix_time, type = CONVERT_TIME_TO_SECONDS)
{
	switch(type)
	{
		case CONVERT_TIME_TO_SECONDS:
		{
			unix_time %= 60;
		}
		case CONVERT_TIME_TO_MINUTES:
		{
			unix_time = (unix_time / 60) % 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			unix_time = (unix_time / 3600) % 24;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			unix_time = (unix_time / 86400) % 30;
		}
		case CONVERT_TIME_TO_MONTHS:
		{
			unix_time = (unix_time / 2629743) % 12;
		}
		case CONVERT_TIME_TO_YEARS:
		{
			unix_time = (unix_time / 31556926) + 1970;
		}
		default:
			unix_time %= 60;
	}
	return unix_time;
}

stock CheckPlayerFlood(playerid, bool:inc = true, max_rate = MAX_FLOOD_RATE, rate_inc = FLOOD_RATE_INC, kick_rate = FLOOD_RATE_KICK)
{
	new tick = GetTickCount();

	AddPlayerAntiFloodData(playerid, AF_RATE, +, inc ? rate_inc : 0);
	AddPlayerAntiFloodData(playerid, AF_RATE, -, (GetTickCount() - GetPlayerAntiFloodData(playerid, AF_LAST_TICK)));
	SetPlayerAntiFloodData(playerid, AF_LAST_TICK, tick);

	if(GetPlayerAntiFloodData(playerid, AF_RATE) < 0)
		SetPlayerAntiFloodData(playerid, AF_RATE, 0);

	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= max_rate)
	{
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= kick_rate)
		{
			Kick:(playerid, _, 10);
		}
		return 1;
	}
	return 0;
}

stock ShowPhoneBookOperation(playerid, operationid, contactid=0)
{
	switch(operationid)
	{
		case PHONE_BOOK_OPERATION_OPTIONS:
		{
			SetPlayerPhoneBookSelectContact(playerid, GetPlayerListitemValue(playerid, contactid));

			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_OPTION, DIALOG_STYLE_LIST,
				"Варианты",
				"1. Позвонить\n"\
				"2. Отправить SMS сообщение\n"\
				"3. Изменить имя контакта\n"\
				"4. Изменить номер контакта\n"\
				"5. Удалить контакт",
				"Выбрать", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CALL:
		{
			new number[11]; // TODO
			format(number, sizeof number, "%d", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER));
			cmd::c(playerid, number);
		}
		case PHONE_BOOK_OPERATION_SEND_SMS:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_SEND_SMS, DIALOG_STYLE_INPUT,
				"Отправка SMS сообщения",
				"{FFFFFF}-\t\t\tВведите текст SMS сообщения:\t\t-",
				"Отправить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NAM:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NAME, DIALOG_STYLE_INPUT,
				"Изменение имени контакта",
				"{FFFFFF}Введите новое имя для контакта:",
				"Изменить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NUM:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NUMBER, DIALOG_STYLE_INPUT,
				"Изменение номера контакта",
				"{FFFFFF}Введите новый номер для контакта:",
				"Изменить", "Назад"
			);
		}
		case PHONE_BOOK_OPERATION_DELETE_CON:
		{
			if(GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID))
			{
				new query[80];

				format(query, sizeof query, "DELETE FROM phone_books WHERE id=%d LIMIT 1", GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
				mysql_query(mysql, query, false);

				SetPlayerPhoneBookInitStatus(playerid, false);
				SendClientMessage(playerid, 0xFF9030FF, "Контакт удален с памяти телефона");
			}
		}
	}
}

stock AddPhoneBookContact(playerid, name[], number[])
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		InitPlayerPhoneBook(playerid);
	}
	if(GetPlayerPhoneBookContacts(playerid) < MAX_PHONE_BOOK_CONTACTS)
	{
		if(!CheckPhoneBookUsedNumber(playerid, number))
		{
			new fmt_str[128];
			SetPlayerPhoneBookInitStatus(playerid, false);

			format(fmt_str, sizeof fmt_str, "Вы добавили %s (тел. %s) в свой список контактов", name, number);
			SendClientMessage(playerid, 0x33FF66FF, fmt_str);

			mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO phone_books (owner_id,name,number,time) VALUES (%d,'%e','%e',%d)", GetPlayerAccountID(playerid), name, number, gettime());
			mysql_query(mysql, fmt_str, false);
		}
	}
	return 1;
}

stock CheckPhoneBookUsedNumber(playerid, number[])
{
	for(new idx, len; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
	{
		if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;

		len = strlen(GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
		if(len && !strcmp(GetPlayerPhoneBook(playerid, idx, PB_NUMBER), number, true))
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Номер %s уже записан для контакта %s", number, GetPlayerPhoneBook(playerid, idx, PB_NAME));
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6633}Ошибка", fmt_str, "Закрыть", "");

			return 1;
		}
	}
	return 0;
}

stock InitPlayerPhoneBook(playerid)
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		new query[80];
		new Cache: result, rows;

		format(query, sizeof query, "SELECT * FROM phone_books WHERE owner_id=%d ORDER BY id DESC LIMIT %d", GetPlayerAccountID(playerid), MAX_PHONE_BOOK_CONTACTS);
		result = mysql_query(mysql, query);

		rows = cache_num_rows();
		for(new idx; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
		{
			if(idx < rows)
			{
				SetPlayerPhoneBook(playerid, idx, PB_SQL_ID, cache_get_row_int(idx, 0));

				cache_get_row(idx, 2, g_player_phone_book[playerid][idx][PB_NAME], mysql, 21);
				cache_get_row(idx, 3, g_player_phone_book[playerid][idx][PB_NUMBER], mysql, 9);

				SetPlayerPhoneBook(playerid, idx, PB_TIME, cache_get_row_int(idx, 4));
				continue;
			}
			ClearPlayerPhoneBookContact(playerid, idx);
		}
		cache_delete(result);

		SetPlayerPhoneBookContacts(playerid, rows);
		SetPlayerPhoneBookInitStatus(playerid, true);
	}
	return 1;
}

stock ClearPlayerPhoneBookContact(playerid, contactid)
{
	SetPlayerPhoneBook(playerid, contactid, PB_SQL_ID, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NAME, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NUMBER, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_TIME, 	0);
}

stock GetPlayerIDByPhone(number)
{
	new playerid = INVALID_PLAYER_ID;

	if(1000 <= number <= 999999)
	{
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(number != GetPlayerPhone(i)) continue;

			playerid = i;
			break;
		}
	}
	return playerid;
}

stock CheckPlayerTempJobState(playerid)
{
	new job = GetPlayerTempJob(playerid);
	new j_state = GetPlayerTempJobState(playerid);

	//new s_action = GetPlayerSpecialAction(playerid);

	switch(job)
	{
		case TEMP_JOB_MINER:
		{
			if(j_state == TEMP_JOB_STATE_MINER_DROP_LOAD) // || s_action != SPECIAL_ACTION_NONE
			{
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);

				RemovePlayerAttachedObjects(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1);

				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);

				SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
				SetPlayerMinerJobLoadCP(playerid);

				SendClientMessage(playerid, 0xCECECEFF, "Вы сломали тележку");
			}
		}
		case TEMP_JOB_FACTORY:
		{
			if(j_state == TEMP_JOB_STATE_FACTORY_DROP_P)
			{
				FactoryPlayerDrop(playerid, false);
			}
		}
	}
}

stock ChangePlayerName(playerid, name[], bool: non_rp_nick = false)
{
	new query[128];
	new Cache: result, rows;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	rows = cache_num_rows();
	cache_delete(result);

	if(3 <= strlen(name) <= 20 && !rows)
	{
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET name='%e' WHERE id=%d LIMIT 1", name, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		if(!mysql_errno())
		{
			mysql_format(mysql, query, sizeof query, "INSERT INTO change_names (owner_id,name,time,ip) VALUES (%d,'%e',%d,'%e')", GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), gettime(), GetPlayerIpEx(playerid));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "%s сменил %s на %s", GetPlayerNameEx(playerid), non_rp_nick ? "нон-рп имя" : "имя", name);

			format(g_player[playerid][P_NAME], 21, "%s", name);
			//SetPlayerName(playerid, GetPlayerNameEx(playerid));

			SendClientMessageToAll(0xCCFF00FF, query);
			UpdateCharity();

			new buffer;
			if((buffer = GetPlayerFuelStation(playerid)) != -1)
			{
				format(g_fuel_station[buffer][FS_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateFuelStationLabel", "i", buffer);
			}
			if((buffer = GetPlayerBusiness(playerid)) != -1)
			{
				format(g_business[buffer][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", buffer);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME)) != -1)
			{
				format(g_house[buffer][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_house_renters[buffer][room][HR_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_hotel[buffer][room][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			return 1;
		}
	}
	return 0;
}

stock EndPlayerTempJob(playerid, job, bool:annul = false)
{
	if(GetPlayerTempJob(playerid) == job)
	{

		RemovePlayerAttachedObjects(playerid);
		SetPlayerSkinInit(playerid);

		new items = GetPlayerJobLoadItems(playerid);
		new pay_sum = (items * GetTempJobInfo(job, TJ_PAY_FOR_LOAD));

		pay_sum *= g_doubling[DOUBLING_WAGE];

		new fmt_str[128];
		switch(job)
		{
			case TEMP_JOB_LOADER:
			{
				DisablePlayerCheckpoint(playerid);
				DisablePlayerRaceCheckpoint(playerid);

				TogglePlayerDynamicCP(playerid, help_info_CP, true);

				if(annul)
				    SendClientMessage(playerid, 0xCECECEFF, "Вы покинули территорию склада.");

				new ts_pay = false;

				pay_sum = items * (2 * GetPlayerData(playerid, P_LOAD_SKILL) + GetTempJobInfo(job, TJ_PAY_FOR_LOAD));

				if(pay_sum > 0)
					format(fmt_str, sizeof fmt_str, ". Заработано {FFFFFF}$%d", pay_sum);

				strins(fmt_str, "Рабочий день завершен", 0, sizeof fmt_str);
				SendClientMessage(playerid, 0xffff00FF, fmt_str);

				if(ts_pay)
				{
					format(fmt_str, sizeof fmt_str, "{FFFFFF}$%d {ffff00}за работу на погрузчике", pay_sum);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);
				}

				if(pay_sum > 0)
					GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе грузчика", true, false);

				format(fmt_str, sizeof fmt_str, "~b~~h~+$%d", pay_sum);
				GameTextForPlayer(playerid, fmt_str, 4000, 1);
			}
			case TEMP_JOB_LOADERA:
			{
				DisablePlayerCheckpoint(playerid);
				DisablePlayerRaceCheckpoint(playerid);

				TogglePlayerDynamicCP(playerid, help_info_CP, true);

				if(annul)
				    SendClientMessage(playerid, 0xCECECEFF, "Вы покинули территорию склада.");

				new ts_pay = false;

				pay_sum = items * (2 * GetPlayerData(playerid, P_LOAD_SKILL) + GetTempJobInfo(job, TJ_PAY_FOR_LOAD));

				if(pay_sum > 0)
					format(fmt_str, sizeof fmt_str, ". Заработано {FFFFFF}$%d", pay_sum);

				strins(fmt_str, "Рабочий день завершен", 0, sizeof fmt_str);
				SendClientMessage(playerid, 0xffff00FF, fmt_str);

				if(ts_pay)
				{
					format(fmt_str, sizeof fmt_str, "{FFFFFF}$%d {ffff00}за работу на погрузчике", pay_sum);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);
				}

				if(pay_sum > 0)
					GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе грузчика", true, false);

				format(fmt_str, sizeof fmt_str, "~b~~h~+$%d", pay_sum);
				GameTextForPlayer(playerid, fmt_str, 4000, 1);
			}
			case TEMP_JOB_MINER:
			{
				DisablePlayerCheckpoint(playerid);

				if(!annul)
				{
					if(items > 0)
					{
						format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Всего добыто кг. руды: {FFFFFF}%d", items);
						SendClientMessage(playerid, 0xffff00FF, fmt_str);

						format(fmt_str, sizeof fmt_str, "Всего заработано {FFFFFF}$%d", pay_sum);
						SendClientMessage(playerid, 0xffff00FF, fmt_str);

						GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе шахтера", true, false);

						format(fmt_str, sizeof fmt_str, "~b~~h~+$%d", pay_sum);
						GameTextForPlayer(playerid, fmt_str, 4000, 1);
					}
					else SendClientMessage(playerid, 0xffff00FF, "Рабочий день завершен");
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Вы покинули территорию шахты. Заработок был аннулирован");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_PIZZA:
			{
				DisablePlayerCheckpoint(playerid);
				if(items > 0)
				{
					format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Всего доставлено: {FFFFFF}%d", items);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Всего заработано {FFFFFF}$%d", pay_sum);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на развозчике пиццы", true, false);

					format(fmt_str, sizeof fmt_str, "~b~~h~+$%d", pay_sum);
					GameTextForPlayer(playerid, fmt_str, 4000, 1);
					SetPlayerTempJobState(playerid, false);
					SetPlayerData(playerid, P_CHECK,0);
				}
				else
				{
					SendClientMessage(playerid, 0xffff00FF, "Рабочий день завершен");
					SetPlayerData(playerid, P_CHECK,0);
					SetPlayerTempJobState(playerid, false);
				}
			}
			case TEMP_JOB_FACTORY:
			{
				pay_sum = GetPlayerJobWage(playerid);

				new bad_items = GetPVarInt(playerid, "factory_bad_prods");
				new skill = GetPVarInt(playerid, "factory_skill");
				new waste_sum = bad_items * (random(3) + 5);

				if(annul)
				    SendClientMessage(playerid, 0xCECECEFF, "Вы покинули территорию завода.");

				SendClientMessage(playerid, 0xffff00FF, "Рабочий день завершен");
				if(pay_sum > 0 && waste_sum < pay_sum)
				{
					format(fmt_str, sizeof fmt_str, "Всего создано {FFFFFF}%d {ffff00}продуктов, забракованно {FFFFFF}%d шт.", items, bad_items) ;
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					if(skill > 0)
					{
						format(fmt_str, sizeof fmt_str, "Рабочий навык увеличился {66CCFF}на %d единиц(ы)", skill);
					}
					else fmt_str = "Рабочий навык не изменился";
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Заработано {FFFFFF}$%d, {ffff00}из них {FFFFFF}$%d {ffff00}- штраф за брак продуктов", pay_sum, waste_sum);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					pay_sum -= waste_sum;
					format(fmt_str, sizeof fmt_str, "~b~~h~+$%d", pay_sum);
					GameTextForPlayer(playerid, fmt_str, 4000, 1);

					GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе в цеху (завод)", true, false);
				}

				skill = GetPlayerData(playerid, P_FACTORY_USE_DESK);
				SetPlayerFactoryDeskUse(playerid, skill, false);
			}
			case TEMP_JOB_LUMBERJACK:
			{
				DisablePlayerCheckpoint(playerid);

				if(annul)
				    SendClientMessage(playerid, 0xCECECEFF, "Вы покинули территорию лесопилки.");

				if(items > 0)
				{
				    pay_sum = items * (2 * GetPlayerData(playerid, P_LUMBERG_SKILL) + GetTempJobInfo(job, TJ_PAY_FOR_LOAD));

					format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы принесли {FFFFFF}%d шт дров", items);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Всего заработано {FFFFFF}$%d", pay_sum);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе лесоруба", true, false);

					format(fmt_str, sizeof fmt_str, "~b~~h~+$%d", pay_sum);
					GameTextForPlayer(playerid, fmt_str, 4000, 1);
				}
				else SendClientMessage(playerid, 0xffff00FF, "Рабочий день завершен");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_FARM:
			{
				DisablePlayerCheckpoint(playerid);

				if(annul)
				    SendClientMessage(playerid, 0xCECECEFF, "Вы покинули территорию фермы.");

				if(items > 0)
				{
				    pay_sum = items * GetTempJobInfo(job, TJ_PAY_FOR_LOAD);

					pay_sum *= g_doubling[DOUBLING_WAGE];

					format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы принесли {FFFFFF}%d стогов пшеницы", items);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Всего заработано {FFFFFF}$%d", pay_sum);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе фермера", true, false);

					format(fmt_str, sizeof fmt_str, "~b~~h~+$%d", pay_sum);
					GameTextForPlayer(playerid, fmt_str, 4000, 1);
				}
				else SendClientMessage(playerid, 0xffff00FF, "Рабочий день завершен");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 1, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_COMBAIN:
			{
			    SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
				DisablePlayerRaceCheckpoint(playerid);
				if(IsPlayerInAnyVehicle(playerid))
				{
				    SetVehicleParam(GetPlayerVehicleID(playerid), V_LOCK, VEHICLE_PARAM_OFF);
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				}
				if(annul)
				    SendClientMessage(playerid, 0xCECECEFF, "Вы покинули территорию фермы.");

				if(items > 0)
				{
				    pay_sum = items * GetTempJobInfo(job, TJ_PAY_FOR_LOAD);

				    pay_sum *= g_doubling[DOUBLING_WAGE];

					format(fmt_str, sizeof fmt_str, "Рабочий день завершен. Вы разгрузили {FFFFFF}%d тонн пшеницы", items*1000);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Всего заработано {FFFFFF}$%d", pay_sum);
					SendClientMessage(playerid, 0xffff00FF, fmt_str);

					GivePlayerMoneyEx(playerid, pay_sum, "Зарплата на работе комбайнера", true, false);

					format(fmt_str, sizeof fmt_str, "~b~~h~+$%d", pay_sum);
					GameTextForPlayer(playerid, fmt_str, 4000, 1);
				}
				else SendClientMessage(playerid, 0xffff00FF, "Рабочий день завершен");
			}
		}

		SetPlayerJobLoadItems(playerid, 0);
		SetPlayerData(playerid, P_JOB_WAGE, 0);
		SetPlayerTempJob(playerid, TEMP_JOB_NONE);

		TransferCoffersMoney(-pay_sum, "Выплата заработной платы работникам", "", false);
	}
}

stock TogglePlayerFactoryCP(playerid, toggle)
{
	for(new idx; idx < sizeof factory_desk; idx ++)
	{
		TogglePlayerDynamicCP(playerid, factory_desk[idx][FD_CHEK_ID], toggle);
	}
}

stock KillEndJobTimer(playerid)
{
	KillTimer(GetPlayerData(playerid, P_END_JOB_TIMER));
	SetPlayerData(playerid, P_END_JOB_TIMER, -1);
}

stock StartEndJobTimer(playerid, time = 60_000)
{
	if(GetPlayerData(playerid, P_END_JOB_TIMER) == -1)
		SetPlayerData(playerid, P_END_JOB_TIMER, SetTimerEx("EndPlayerJob", time, false, "i", playerid));
}

stock ShowPlayerBuyMetalDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_MINER_BUY_METALL, DIALOG_STYLE_INPUT,
		"Покупка металла",
		"{FFFFFF}Сколько кг металла вы хотите купить?\n"\
		"Цена за кг: 15$",
		"Купить", "Отмена"
	);
}

stock SetPlayerMinerJobLoadCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
 		new rand = random(sizeof miner_job_chop_cp);
		SetPlayerCheckpoint(playerid, miner_job_chop_cp[rand][0], miner_job_chop_cp[rand][1], miner_job_chop_cp[rand][2], 2.0, CP_ACTION_TYPE_MINER_JOB_TAKE);


	/*	for(new i; i < sizeof miner_job_load_cp; i ++)
			TogglePlayerDynamicCP(playerid, miner_job_load_cp[i], status ^ true);

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
	*/
	}
}

stock SetPlayerMinerJobUnLoadCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		SetPlayerCheckpoint(playerid, -1906.6914,-1620.1650,2.0175, 2.0, CP_ACTION_TYPE_MINER_JOB_PUT);

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_UNLOAD);
	}
}

stock SetPlayerLoaderJobUnLoadCP(playerid) // установить чекпоинт где ложить груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		new rand = random(sizeof loader_job_unload_cp);

		SetPlayerCheckpoint(playerid, loader_job_unload_cp[rand][0], loader_job_unload_cp[rand][1], loader_job_unload_cp[rand][2], 2.0, CP_ACTION_TYPE_LOADER_JOB_PUT);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_UNLOAD);

	}
}

stock SetPlayerLoaderArmyJobUnLoadCP(playerid) // установить чекпоинт где ложить груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADERA)
	{
		new rand = random(sizeof loaderarmy_job_unload_cp);

		SetPlayerCheckpoint(playerid, loaderarmy_job_unload_cp[rand][0], loaderarmy_job_unload_cp[rand][1], loaderarmy_job_unload_cp[rand][2], 2.0, CP_ACTION_TYPE_LOADERA_JOB_PUT);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADERA_UNLOAD);

	}
}

public: SetPlayerLoaderJobLoadCP(playerid) // установить чекпоинт где брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_LOAD);
		SetPlayerCheckpoint(playerid, 2171.6577, -2251.1946, 13.3024, 2.0, CP_ACTION_TYPE_LOADER_JOB_TAKE);
	}
}

public: SetPlayerLoaderArmyJobLoadCP(playerid) // установить чекпоинт где брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADERA)
	{

		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADERARMY_LOAD);
		SetPlayerCheckpoint(playerid, 2733.9883,-2465.8601,13.6484, 2.0, CP_ACTION_TYPE_LOADERA_JOB_TAKE);
	}
}

stock SetPlayerLumberUnJackChopCP(playerid)
{
	SetPlayerCheckpoint(playerid, -543.6469,-197.0561, 78.4063, 2.0, CP_ACTION_TYPE_LUMBERJACK_PUT);
}

stock SetPlayerLumberJackChopCP(playerid)
{
	new rand = random(sizeof lumberjack_job_chop_cp);

	SetPlayerCheckpoint(playerid, lumberjack_job_chop_cp[rand][0], lumberjack_job_chop_cp[rand][1], lumberjack_job_chop_cp[rand][2], 2.0, CP_ACTION_TYPE_LUMBERJACK_TAKE);
}

stock ShowPlayerDrivingTutorial(playerid)
{
	Dialog
	(
		playerid, DIALOG_DRIVING_TUTORIAL_START, DIALOG_STYLE_MSGBOX,
		"Введение",
		"{FFFFFF}Это пособие поможет вам хорошо подготовиться\n"\
		"к экзамену по вождению\n\n"\
		"Для того, чтобы начать обучение нажмите \"Далее\"",
		"Далее", "Отмена"
	);
	return 1;
}

stock ShowDrivingTutorialSection(playerid, step)
{
	if(0 <= step <= sizeof driving_tutorial-1)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_TUTORIAL, DIALOG_STYLE_MSGBOX,
			driving_tutorial[step][DT_TITLE],
			driving_tutorial[step][DT_INFO],
			"Далее", "Назад"
		);
		SetPVarInt(playerid, "driving_tutorial_step", step);
	}
}

stock ShowPlayerDrivingExam(playerid, step)
{
	if(0 <= step <= sizeof driving_exam - 1)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM, DIALOG_STYLE_LIST,
			driving_exam[step][DE_TITLE],
			driving_exam[step][DE_LIST_ITEMS],
			"Ответить", ""
		);
		SetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP, step);
	}
	else if(step >= sizeof driving_exam)
	{
		new points = GetPlayerDrivingExamInfo(playerid, DE_POINTS);
		SetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP, 0);
		SetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP, 0);

		if(points >= 9)
			SetPlayerData(playerid, P_DRIVING_B, 1);

		new fmt_str[256];
		format(fmt_str, sizeof fmt_str, "{FFFFFF}Количество правильных ответов: {32a44b}%d\n\n", points);

		if(points == 9)
		{
			strcat
			(
				fmt_str,
				"{6699FF}Поздравляем!\n"\
				"Вы набрали минимальное количество баллов, чтобы приступить ко второй части экзамена!"
			);
		}
		else if(points >= 10)
		{
			static const
				medal_name[3][12] = {"бронзовую", "серебрянную", "золотую"};

			format(fmt_str, sizeof fmt_str, "%s{6699FF}Поздравляем!\nВы получаете %s медаль за теоретическую часть экзамена!", fmt_str, medal_name[points - 10]);
		}
		else
		{
			ClearPlayerDrivingExamInfo(playerid);
			strcat
			(
				fmt_str,
				"{CECECE}К сожалению вы не набрали необходимого количества баллов\n"\
				"В следующий раз внимательно прочитайте обучающий раздел\n"\
				"Ждем вас на пересдаче!"
			);
		}

		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM_RESULT, DIALOG_STYLE_MSGBOX,
			"{FFFF00}Результаты теоретической части",
			fmt_str,
			"Ок", ""
		);
	}
	return 1;
}

stock NextDrivingExamRouteCP(playerid)
{
	new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 473 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 593)
	{
		SetPlayerRaceCheckpoint
		(
			playerid,
			0,
			driving_exam_new[step][0],
			driving_exam_new[step][1],
			driving_exam_new[step][2],
			driving_exam_new[step + 1][0],
			driving_exam_new[step + 1][1],
			driving_exam_new[step + 1][2],
			4.0,
			RCP_ACTION_TYPE_DRIVING_EXAM
		);
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 473)
	{
	    SetPlayerRaceCheckpoint
		(
			playerid,
			0,
			driving_exam_route[step][0],
			driving_exam_route[step][1],
			driving_exam_route[step][2],
			driving_exam_route[step + 1][0],
			driving_exam_route[step + 1][1],
			driving_exam_route[step + 1][2],
			4.0,
			RCP_ACTION_TYPE_DRIVING_EXAM
		);
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 593)
	{
	    SetPlayerRaceCheckpoint
		(
			playerid,
			6,
			driving_exam_fly[step][0],
			driving_exam_fly[step][1],
			driving_exam_fly[step][2],
			driving_exam_fly[step + 1][0],
			driving_exam_fly[step + 1][1],
			driving_exam_fly[step + 1][2],
			4.0,
			RCP_ACTION_TYPE_DRIVING_EXAM
		);
	}
	SetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP, step + 1);
}

/*stock NextDrivingExamRouteCP(playerid)
{
	new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);

	SetPlayerRaceCheckpoint
	(
		playerid,
		0,
		driving_exam_route[step][0],
		driving_exam_route[step][1],
		driving_exam_route[step][2],
		driving_exam_route[step + 1][0],
		driving_exam_route[step + 1][1],
		driving_exam_route[step + 1][2],
		4.0,
		RCP_ACTION_TYPE_DRIVING_EXAM
	);
	SetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP, step + 1);
}
*/
stock GetPlayerSpeed(playerid)
{
	new Float: x, Float: y, Float: z;
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	}
	else GetPlayerVelocity(playerid, x, y, z);

	return floatround(floatsqroot(x*x+y*y+z*z)*100);
}

stock SetVehicleSpeed(vehicleid, Float: speed)
{
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: angle;

		GetVehicleVelocity(vehicleid, x, y, z);
		GetVehicleZAngle(vehicleid, angle);

		speed /= 100.0;
        x = speed * floatsin(-angle, degrees);
        y = speed * floatcos(-angle, degrees);

        return SetVehicleVelocity(vehicleid, x, y, z - speed / 1000.0);

/*
		speed = floatsqroot(x*x+y*y+z*z);

		if(speed > 0)
		{
			multiple = (kmh / (speed * 100));

			return SetVehicleVelocity(vehicleid, x * multiple, y * multiple, z * multiple);
		}
*/
	}

	return 0;
}

/*
stock SetVehicleSpeed(vehicleid, Float: kmh)
{
      new Float:Vx, Float:Vy, Float:Vz ,Float:speeds, Float:multiple;
      GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
      speeds = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
      if(speeds > 0)
      {
          multiple = (mph / (speeds * 250));
          return SetVehicleVelocity(vehicleid, Vx*multiple, Vy*multiple, Vz*multiple);
      }
      return 0;
}

stock SetVehicleSpeed(vehicleid, Float:Speed)
{
        new
            Float:X,
            Float:Y,
            Float:Z,
            Float:Angle;

        GetVehicleZAngle(vehicleid, Angle);
        Speed = Speed/200;
        X = Speed * floatsin(-Angle, degrees);
        Y = Speed * floatcos(-Angle, degrees);
        SetVehicleVelocity(vehicleid, X, Y, Z);
}
*/
stock IsPlayerDriver(playerid) // сидит ли игрок за рулем ТС
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER);
}

stock IsPlayerPassenger(playerid) // сидит ли игрок как пассажир
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER);
}

stock IntToString(integer)
{
	new string[sizeof integer + 5];

	format(string, sizeof string, "%d", integer);

	return string;
}

stock SendMessageInChat(playerid, text[], Float: radius = 30.0)
{
	new Float: dist, type;
	new Float: x, Float: y, Float: z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerChatBubble(playerid, text, 0x00CCFFFF, 30.0, 8000);

	ChatMessageInit(playerid, text);
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		dist = GetPlayerDistanceFromPoint(idx, x, y, z);

		if(dist > radius) continue;
		type = GetPlayerChatType(idx);
		if(dist < (radius / 4))
		{
			SendClientMessage(idx, 0xCECECEFF, chat_message[type]);
		}
		else if(dist < (radius / 2))
		{
			SendClientMessage(idx, 0xCECECEFF, chat_message[type]);
		}
		else
		{
			SendClientMessage(idx, 0x6B6B6BFF, chat_message[type]);
		}
	}
	if(!IsPlayerDriver(playerid))
	{
		if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_NONE)
		{
			ApplyAnimationEx(playerid, "PED", "IDLE_chat", 4.100, 0, 1, 1, 1, 1, 1, USE_ANIM_TYPE_CHAT);
			SetTimerEx("ClearPlayerChatAnim", strlen(text) * 400, false, "i", playerid);
		}
	}
	return 1;
}


stock ChatMessageInit(playerid, text[])
{
	format(chat_message[0], 129, "- %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);
	format(chat_message[1], 129, "- %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);
	format(chat_message[2], 129, "- %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);

	format(chat_message[3], 129, "- %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);
	format(chat_message[4], 129, "- %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);
}

/*stock SetPlayerChatInit(playerid)
{
	new type = 0;
	switch(GetPlayerSettingData(playerid, S_CHAT_TYPE))
	{
		case SETTING_CHAT_ADVANCE:
		{
			if(GetPlayerSettingData(playerid, S_NICK_IN_CHAT) == SETTING_TYPE_ON)
			{
				if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
				{
					type = 0;
				}
				else type = 1;
			}
			else type = 2;
		}
		case SETTING_CHAT_STANDART:
		{
			if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
			{
				type = 3;
			}
			else type = 4;
		}
		default: type = 0;
	}
	SetPlayerChatType(playerid, type);
}
*/
stock SetPlayerSpawnInit(playerid)
{
	new spawn_id = 0,
		level = GetPlayerData(playerid, P_LEVEL);

	if(1 <= level <= 5)
 		spawn_id = random(2);

	if(6 <= level)
 		spawn_id = 2;

	SetSpawnInfo
	(
		playerid,
		0,
		GetPlayerSkinEx(playerid),
		spawn_pos_data[spawn_id][0], // + random(3),
		spawn_pos_data[spawn_id][1], // + random(3),
		spawn_pos_data[spawn_id][2],
		spawn_pos_data[spawn_id][3],
		0, 0, 0, 0, 0, 0
	);

	return 1;
}

stock SetPlayerSpawnPos(playerid)
{
	if(GetPlayerData(playerid, P_JAIL))
	{
		new jail_pos = random(sizeof g_jail_positions);

		SetPlayerPosEx
		(
			playerid,
			g_jail_positions[jail_pos][0],
			g_jail_positions[jail_pos][1],
			g_jail_positions[jail_pos][2],
			g_jail_positions[jail_pos][3],
			6, 0
		);
	}
	else if(GetPlayerData(playerid, P_HOSPITAL))
	{
		new med_pos = random(sizeof g_med_position);

		SetPlayerPosEx
		(
			playerid,
			g_med_position[med_pos][0]+ random(3),
			g_med_position[med_pos][1]+ random(2),
			g_med_position[med_pos][2],
			g_med_position[med_pos][3],
			6, 0
		);
	}
	else
	{
		switch(GetPlayerSpawnSetting(playerid))
		{
			case 1:
			{
				if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				EnterPlayerToHouse(playerid, GetPlayerHouse(playerid, HOUSE_TYPE_HOME));
			}
			case 2:
			{
				if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				new hotel_id = GetPlayerData(playerid, P_HOUSE),
					room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

				SetPlayerData(playerid, P_IN_BUSINESS, hotel_id + 27);
				SetPlayerData(playerid, P_IN_HOTEL_ROOM, room_id);
				EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
			}
			case 3:
			{
				new team_id = GetPlayerTeamEx(playerid);

				if(!team_id)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				SetPlayerPosEx
				(
					playerid,
					GetTeamData(team_id, O_SPAWN)[0],
					GetTeamData(team_id, O_SPAWN)[1],
					GetTeamData(team_id, O_SPAWN)[2],
					GetTeamData(team_id, O_SPAWN)[3],
					GetTeamData(team_id, O_SPAWN_INT),
					GetTeamData(team_id, O_SPAWN_VW)
				);
			}
			case 4:
			{
				if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				EnterPlayerToHouse(playerid, GetPlayerHouse(playerid, HOUSE_TYPE_ROOM));
			}
			case 5:
			{
				if(GetPlayerData(playerid, P_FAMILY) == 0)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				if(GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_HOUSE_ID) != -1)
				{
					EnterPlayerToHouse(playerid, GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_HOUSE_ID));
				}
				else
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}
			}
			case 6:
			{
			    if(GetPlayerData(playerid, P_POS_X) * GetPlayerData(playerid, P_POS_Y) * GetPlayerData(playerid, P_POS_Z) == 0.0)
			    {
			        SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

			        return 1;
			    }
			    else
			    {
			        SetPlayerPosEx(playerid, GetPlayerData(playerid, P_POS_X), GetPlayerData(playerid, P_POS_Y), GetPlayerData(playerid, P_POS_Z), GetPlayerData(playerid, P_ANGLE), GetPlayerData(playerid, P_INTERIOR), GetPlayerData(playerid, P_VIRTUAL_WORLD));
			    }
			}
		}
	}

	return 1;
}

stock SetPlayerInit(playerid)
{
	SetPlayerLevelInit(playerid);
	SetPlayerColorInit(playerid);
	SetPlayerSuspectInit(playerid);
	SetPlayerSkinInit(playerid);
	SetPlayerMoneyInit(playerid);

	SetPlayerLogged(playerid, true);
}

stock GetPlayerSkinEx(playerid)
{
	if(1 <= GetPlayerTeamEx(playerid) <= 6)
	{
	    if(GetPlayerData(playerid, P_ATWORK))
			return GetPlayerData(playerid, P_OSKIN);
		else
		    return GetPlayerData(playerid, P_SKIN);
	}
	else if(7 <= GetPlayerTeamEx(playerid) <= 11)
	    return GetPlayerData(playerid, P_OSKIN);
	else
		return GetPlayerData(playerid, P_SKIN);
}

stock PreLoadPlayerAnims(playerid)
{
	for(new idx; idx < sizeof g_anim_libs; idx ++)
	{
		PreloadAnimLib(playerid, g_anim_libs[idx]);
	}
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0, 1);
}

stock SetPlayerMoneyInit(playerid)
{
	ResetPlayerMoney(playerid);
	return GivePlayerMoney(playerid, GetPlayerMoneyEx(playerid));
}

stock SetPlayerColorInit(playerid)
{
   	if(1 <= GetPlayerTeamEx(playerid) <= 6)
	{
	    if(GetPlayerData(playerid, P_ATWORK))
			return SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
		else
		    return SetPlayerColorEx(playerid, 0xFFFFFF11);
	}
	else if(7 <= GetPlayerTeamEx(playerid) <= 11)
	    return SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
	else
		return SetPlayerColorEx(playerid, 0xFFFFFF11);
}

stock SetPlayerColorEx(playerid, color)
{
	SetPlayerData(playerid, P_COLOR, color);
	return SetPlayerColor(playerid, color);
}

stock SetPlayerHealthEx(playerid, Float: health, bool: inc_health = false)
{
	if(inc_health)
	{
		AddPlayerData(playerid, P_HEALTH, +, health);
	}
	else SetPlayerData(playerid, P_HEALTH, health);

	if(GetPlayerData(playerid, P_HEALTH) > 160.0)
		SetPlayerData(playerid, P_HEALTH, 160.0);

	return SetPlayerHealth(playerid, GetPlayerData(playerid, P_HEALTH));
}

stock GetPlayerTeamColor(playerid)
{
	return team_colors[GetPlayerTeamEx(playerid)];
}

stock GetPlayerFamilyColor(playerid)
{
	return family_colors[GetPlayerData(playerid, P_FAMILY)];
}

stock SetPlayerSuspectInit(playerid)
{
	return SetPlayerWantedLevel(playerid, GetPlayerSuspect(playerid));
}

stock SetPlayerSkinInit(playerid)
{
	return SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));
}

stock SetPlayerLevelInit(playerid)
{
	return SetPlayerScore(playerid, GetPlayerLevel(playerid));
}

stock SetPlayerSkillsInit(playerid)
{
	SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
	SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
	SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
	SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
	SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
	SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
	SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
	SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
	SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
	SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
	SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);

	return 1;
}

stock SetPlayerSelectSkin(playerid, select_skin, skinid)
{
	SetPlayerData(playerid, P_SELECT_SKIN, select_skin);
	SetPlayerSkin(playerid, skinid);
}

stock SetPlayerPosEx(playerid, Float: x, Float: y, Float: z, Float: angle, interior = -1, virtual_world = -1, freeze = true)
{
	if(interior > 0)
		PlayerTeleportInit(playerid, x, y,  z, angle);

	SetPlayerPos(playerid, x, y, z);

	SetPlayerFacingAngle(playerid, angle);
	SetCameraBehindPlayer(playerid);

	if(interior != -1 && GetPlayerInterior(playerid) != interior)
	{
		SetPlayerInterior(playerid, interior);
	}
	if(virtual_world != -1 && GetPlayerVirtualWorld(playerid) != virtual_world)
	{
		SetPlayerVirtualWorld(playerid, virtual_world);
	}
	if(GetPlayerData(playerid, P_LAST_PICKUP) != -1)
	{
		SetPlayerData(playerid, P_LAST_PICKUP, -1);
	}
	if(freeze)
	{
		TeleportFreeze(playerid, 1200);
	}
	return 1;
}

stock TeleportFreeze(playerid, ms)
{
	if(ms <= 0)
		return 0;

	TogglePlayerControllable(playerid, false);

	SetTimerEx("TeleportUnfreeze", ms, false, "d", playerid);

	return 1;
}

public: TeleportUnfreeze(playerid)
{
	TogglePlayerControllable(playerid, true);

	return 1;
}

stock JailPlayer(playerid, jail_time)
{
	new jail_pos = random(sizeof g_jail_positions);

	SetPlayerPosEx
	(
		playerid,
		g_jail_positions[jail_pos][0],
		g_jail_positions[jail_pos][1],
		g_jail_positions[jail_pos][2],
		g_jail_positions[jail_pos][3],
		6, 0
	);

	SetPlayerData(playerid, P_JAIL, jail_time * 60);
	UpdatePlayerDatabaseInt(playerid, "jail", jail_time * 60);
}

stock UnjailPlayer(playerid)
{
	SetPlayerPosEx
	(
		playerid,
		1545.8019,-1675.4666,13.5611,92.3432,
		0, 0
	);

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
	SetPlayerData(playerid, P_CUFFED, 0);

	TogglePlayerControllable(playerid, true);


	SetPlayerData(playerid, P_JAIL, 0);
	UpdatePlayerDatabaseInt(playerid, "jail", 0);
}

stock UpdatePlayerDatabaseInt(playerid, field[], value)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[90];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %s=%d WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return 1;
}

stock UpdatePlayerDatabaseFloat(playerid, field[], Float:value)
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[90];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %s=%f WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return 1;
}

stock UpdatePlayerDatabaseString(playerid, field[], value[])
{
	if(!IsPlayerConnected(playerid)) return 1;

	new query[92];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %s='%s' WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	return 1;
}

stock FixKick(playerid, message[] = "Введите /q (/quit) чтобы выйти", time_ms = 5500)
{
	if(strlen(message) > 1)
		SendClientMessage(playerid, 0xCECECEFF, message);

	if(time_ms == 10)
	{
		new fmt_text[65];

		format(fmt_text, sizeof fmt_text, "[A] %s[%d] кикнут антифлуд-системой", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}
	SetTimerEx("FixedKick", time_ms, false, "i", playerid);

	return 1;
}

stock ClearPlayerInfo(playerid)
{
	g_player[playerid] = g_player_default_values;
	g_player_gps[playerid] = g_gps_default_values;
	g_player_setting[playerid] = g_settings_default_values;
	g_player_driving_exam[playerid] = g_driving_exam_default_values;

	g_pickup_flood[playerid] = 0;
	g_teleport_object[playerid] = {-1, -1};

	SetPlayerPhoneBookInitStatus(playerid, false);
	SetPlayerPhoneBookContacts(playerid, 0);

	ClearPlayerOffer(playerid);
	ClearPlayerListitemValues(playerid);
	ClearPlayerPhoneCall(playerid);

	AntiFloodPlayerInit(playerid);

	SetPlayerSpectateData(playerid, S_PLAYER, -1);

	#if defined _SYSTEM_CP
	ClearPlayerCPInfo(playerid);
	#endif

	#if defined _SYSTEM_RACE_CP
	ClearPlayerRCPInfo(playerid);
	#endif

	SetPlayerPinCodeState(playerid, PIN_CODE_STATE_NONE);

	mysql_race[playerid] ++;
}

stock CreatePlayerAccount(playerid)
{
	new query[256];
	new Cache: result;

	new time = gettime();

	SetPlayerData(playerid, P_REG_TIME, time);
	SetPlayerData(playerid, P_LAST_LOGIN_TIME, time);

	format(g_player[playerid][P_REG_IP], 16, "%s", GetPlayerIpEx(playerid));
	format(g_player[playerid][P_LAST_IP], 16, "%s", GetPlayerIpEx(playerid));

	mysql_format
	(
		mysql, query, sizeof query,
		"INSERT INTO accounts "\
			"(name,password,email,refer,sex,reg_time,reg_ip,last_ip,last_login) "\
			"VALUES "\
			"('%e',MD5('%e'),'%e',%d,%d,%d,'%e','%e',%d)",
		GetPlayerNameEx(playerid),
		GetPlayerData(playerid, P_PASSWORD),
		GetPlayerData(playerid, P_EMAIL),
		GetPlayerData(playerid, P_REFER),
		GetPlayerData(playerid, P_SEX),
		GetPlayerData(playerid, P_REG_TIME),
		GetPlayerData(playerid, P_REG_IP),
		GetPlayerData(playerid, P_LAST_IP),
		GetPlayerData(playerid, P_LAST_LOGIN_TIME)
	);
	result = mysql_query(mysql, query);

	SetPlayerData(playerid, P_ACCOUNT_ID, cache_insert_id());
	cache_delete(result);

	return GetPlayerAccountID(playerid);
}

stock CreateMenus()
{

	print("[Menu]: Все меню созданы");
}

stock CreateVehicles()
{
	new spawn_time = 60 * 5; // 5 минут

	//ТРАНСПОРТ МАРШРУТКИ
	CreateVehicle(431,-1974.1999512,104.8000031,27.8999996,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,-1974.1999512,100.6999969,27.8999996,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,-1974.3000488,96.5000000,27.8999996,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,-1974.3000488,92.3000031,27.8999996,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,-1974.4000244,87.6999969,27.8999996,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.6000977,1326.1999512,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.8000488,1337.4000244,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.8000488,1333.5999756,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.8999023,1345.1999512,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.8000488,1341.5000000,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.6999512,1329.8000488,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.6999512,1365.4000244,11.0000000,269.9998779,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.8000488,1361.4000244,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.8000488,1357.4000244,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.8000488,1353.4000244,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.8000488,1349.3000488,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,2808.6000977,1369.3000488,11.0000000,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1276.8000488,-1796.0000000,13.6000004,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1276.8000488,-1800.0999756,13.6000004,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1276.6999512,-1808.0999756,13.6000004,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1276.6999512,-1804.0999756,13.6000004,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1242.3000488,-1822.0999756,13.6999998,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1242.3000488,-1813.0000000,13.6999998,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1242.4000244,-1817.8000488,13.6999998,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1276.6999512,-1812.0999756,13.6000004,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1200.1999512,-1834.3000488,13.6000004,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1200.1999512,-1830.0999756,13.6999998,270.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1276.5999756,-1824.0999756,13.6000004,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1276.5999756,-1820.0999756,13.6000004,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);
	CreateVehicle(431,1276.6999512,-1816.0000000,13.6000004,90.0000000,3,6, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER);

	//ТРАНСПОРТ ТАКСИ
	CreateVehicle(420,-1977.1999512,171.6000061,27.5000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1977.3000488,175.6000061,27.5000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1977.3000488,179.8999939,27.5000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1977.4000244,184.3999939,27.5000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1977.3000488,189.1000061,27.5000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1977.4000244,194.1999969,27.5000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1970.5000000,171.5000000,27.5000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1970.5000000,175.6000061,27.5000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1970.4000244,180.1000061,27.5000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1970.4000244,184.3000031,27.2999992,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1970.4000244,188.8999939,27.2000008,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1970.4000244,194.3000031,27.0000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1977.5000000,199.0000000,27.5000000,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,-1970.4000244,198.8999939,26.7999992,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,-2724.6999512,408.8999939,4.5999999,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,-2735.0000000,408.8999939,4.5999999,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.9000244,-1737.3000488,13.3000002,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.8000488,-1740.5000000,13.3000002,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.8000488,-1749.1999512,13.3000002,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.8000488,-1752.1999512,13.3000002,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.8000488,-1746.4000244,13.3000002,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.8000488,-1743.4000244,13.3000002,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.8000488,-1766.8000488,13.1999998,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.8000488,-1760.9000244,13.3000002,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.8000488,-1763.9000244,13.1999998,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.8000488,-1758.0000000,13.3000002,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.8000488,-1769.6999512,13.1999998,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.6999512,-1755.1999512,13.3000002,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.6999512,-1772.8000488,13.1999998,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,1062.5999756,-1775.9000244,13.1999998,270.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,1438.9000244,-1699.1999512,13.6999998,180.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,1438.9000244,-1710.8000488,13.6999998,179.9996338,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,1438.9000244,-1685.6999512,13.6999998,180.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,2853.3000488,1348.5999756,10.6999998,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,2853.3999023,1352.0000000,10.6999998,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,2853.5000000,1358.4000244,10.6999998,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,2853.3999023,1355.0999756,10.6999998,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,2853.6000977,1361.5999756,10.6999998,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,2853.6000977,1364.8000488,10.6999998,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(420,2853.6000977,1368.0000000,10.6999998,90.0000000,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,2374.8999023,2435.3000488,11.0000000,179.9996338,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);
	CreateVehicle(438,2374.8999023,2443.6000977,11.0000000,179.9996338,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER);

	//ТРАНСПОРТ ПРАВИТЕЛЬСТВА
	CreateVehicle(579,1406.1680,-1777.0349,13.4792,92.9325,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // 1
	CreateVehicle(579,1406.6605,-1782.3423,13.4790,92.3889,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // 2
	CreateVehicle(421,1407.4417,-1792.9128,13.4407,92.4881,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // 4
	CreateVehicle(579,1407.8241,-1803.2029,13.5150,90.3660,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // end

	//ТРАНСПОРТ ВМФ
	CreateVehicle(470,2743.8020,-2440.8313,13.6716,270.1432,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,2743.8386,-2444.3418,13.6677,270.4145,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,2780.2573,-2438.4077,14.1635,89.7007,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,2780.5530,-2433.8569,14.1634,90.0567,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,2778.0781,-2401.3074,14.1613,89.2880,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,2765.4648,-2385.7854,14.1608,179.5399,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,2744.3369,-2387.7024,13.5250,179.2965,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,2741.0845,-2387.7175,13.6084,179.3586,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,2737.7834,-2387.6902,13.5276,180.0059,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(548,2777.9072,-2352.7852,15.2725,270.0059,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);

	CreateVehicle(595,2724.8904,-2307.5374,0.0082,355.6104,86,86, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(595,2717.9944,-2307.0117,0.0974,355.6104,86,86, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(595,2711.1553,-2306.4902,0.1858,355.6104,86,86, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(595,2703.3176,-2305.8931,0.2871,355.6104,86,86, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);

	//ТРАНСПОРТ БОЛЬНИЦЫ
	CreateVehicle(416,1178.4281,-1338.8206,14.0241,271.1013,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR);
	CreateVehicle(416,1178.6346,-1308.4924,13.9720,271.5380,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR);
	CreateVehicle(421,1190.2234,-1345.4877,13.3599,0.3012,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR);
	CreateVehicle(421,1190.1993,-1335.8083,13.3585,0.1581,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR);

	//ТРАНСПОРТ СМИ

	CreateVehicle(437, 1792.8068, -1689.2511, 13.2843, 90.0000, 6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(405, 1796.7028, -1701.9271, 13.1818, 0.0000, 6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(405, 1792.7028, -1701.9471, 13.1818, 0.0000, 6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(405, 1788.4427, -1701.9471, 13.1818, 0.0000, 6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(405, 1784.4427, -1701.9471, 13.1818, 0.0000, 6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(405, 1780.4427, -1701.9471, 13.1818, 0.0000, 6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(405, 1776.4427, -1701.9471, 13.1818, 0.0000, 6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(582, 1781.6653, -1688.9318, 13.6477, 90.0000, 6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);
	CreateVehicle(582, 1773.4750, -1688.9318, 13.6477, 90.0000, 6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR);


	//ТРАНСПОРТ LSPD
	CreateVehicle(596,1601.3165,-1684.0469,5.6142,90.6186,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(596,1601.4009,-1687.8441,5.6137,90.6045,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(596,1601.2703,-1691.8373,5.6099,91.3598,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(596,1601.2615,-1696.0322,5.6109,89.1848,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(596,1601.4928,-1700.1593,5.5433,89.8693,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(596,1601.4622,-1704.1381,5.5416,90.9111,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(427,1544.6581,-1650.7783,6.0227,90.1434,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(427,1544.5569,-1654.9017,6.0245,90.5801,0,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);

	CreateVehicle(523,1558.6200,-1711.9139,5.4613,0.0380,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(523,1564.2833,-1712.0610,5.4615,0.2894,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(523,1570.6272,-1711.9583,5.4606,357.5779,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(523,1574.7390,-1711.7750,5.4589,358.6533,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(523,1578.3423,-1711.7457,5.4605,358.7262,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);
	CreateVehicle(523,1583.5472,-1711.6859,5.4603,1.1387,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_LSPD_CAR);

	//ТРАНСПОРТ FBI
	CreateVehicle(90,1327.6674,-1172.9233,23.8019,91.5404,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR);
	CreateVehicle(490,1327.7751,-1176.4663,23.7082,90.5082,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR);
	CreateVehicle(490,1327.7515,-1179.5925,23.6840,87.1329,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR);
	CreateVehicle(490,1327.7551,-1182.8613,23.6756,90.2724,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR);
	CreateVehicle(528,1326.8295,-1192.8406,23.5373,359.5010,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR);
	CreateVehicle(528,1330.0011,-1193.0022,23.5399,358.8848,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR);

	//ТРАНСПОРТ ДАЛЬНОБОЙЩИКИ
	CreateVehicle(456, -30.2644, -297.1100, 5.4369, -91.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -30.2644, -290.0710, 5.4369, -91.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -30.2644, -283.4038, 5.4369, -91.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -30.2644, -276.8959, 5.4369, -91.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -60.4378, -324.9235, 5.4369, -91.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -60.4378, -317.7703, 5.4369, -91.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -60.4378, -310.9130, 5.4369, -91.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -60.4378, -303.7692, 5.4369, -91.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -2.4284, -301.1030, 5.4369, 90.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -2.4284, -308.2013, 5.4369, 90.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -2.4284, -315.3040, 5.4369, 90.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -2.4284, -329.4276, 5.4369, 90.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -2.4284, -336.2263, 5.4369, 90.0000, -1,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -2.4284, -343.4310, 5.4369, 90.0000, -1,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -2.4284, -350.5694, 5.4369, 90.0000, -1,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -2.4284, -357.6680, 5.4369, 90.0000, -1,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -2.4284, -364.6278, 5.4369, 90.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(456, -2.4284, -322.3628, 5.4369, 90.0000,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);

	//ТРАНСПОРТ GROVE
	CreateVehicle(439,2502.3362,-1655.6548,13.3606,55.2679,16,16, spawn_time, 0, VEHICLE_ACTION_TYPE_GROVE_CAR);
	CreateVehicle(466,2510.0642,-1669.3331,13.1865,359.8850,16,16, spawn_time, 0, VEHICLE_ACTION_TYPE_GROVE_CAR);
	CreateVehicle(466,2506.8748,-1678.6865,13.2032,319.6007,16,16, spawn_time, 0, VEHICLE_ACTION_TYPE_GROVE_CAR);
	CreateVehicle(482,2498.7410,-1684.3627,13.5320,283.7345,16,16, spawn_time, 0, VEHICLE_ACTION_TYPE_GROVE_CAR);
	CreateVehicle(478,2482.0806,-1683.7710,13.4142,264.3704,16,16, spawn_time, 0, VEHICLE_ACTION_TYPE_GROVE_CAR);
	CreateVehicle(478,2471.1455,-1677.9637,13.3972,212.0966,16,16, spawn_time, 0, VEHICLE_ACTION_TYPE_GROVE_CAR);

	/*ТРАНСПОРТ VAGOS
	CreateVehicle(439,2770.2317,-1615.2208,10.8177,268.3278,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_VAGOS_CAR);
	CreateVehicle(482,2769.6624,-1605.7870,11.0404,273.3578,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_VAGOS_CAR);
	CreateVehicle(478,2779.6611,-1601.9802,10.9120,271.8066,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_VAGOS_CAR);
	CreateVehicle(478,2786.9658,-1601.8651,10.9169,273.1172,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_VAGOS_CAR);
	CreateVehicle(466,2796.2900,-1611.0963,10.7312,337.6676,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_VAGOS_CAR);
	CreateVehicle(466,2799.3154,-1603.7848,10.7496,338.0512,6,6, spawn_time, 0, VEHICLE_ACTION_TYPE_VAGOS_CAR);
	*/
	//ТРАНСПОРТ BALLAS
	CreateVehicle(439,1928.2255,-1130.7660,24.9957,269.9456,85,85, spawn_time, 0, VEHICLE_ACTION_TYPE_BALLAS_CAR);
	CreateVehicle(439,1921.2308,-1130.7291,24.8191,269.9156,85,85, spawn_time, 0, VEHICLE_ACTION_TYPE_BALLAS_CAR);
	CreateVehicle(466,1941.5757,-1130.8660,25.1772,270.5717,85,85, spawn_time, 0, VEHICLE_ACTION_TYPE_BALLAS_CAR);
	CreateVehicle(466,1949.5154,-1130.7775,25.3751,271.8119,85,85, spawn_time, 0, VEHICLE_ACTION_TYPE_BALLAS_CAR);
	CreateVehicle(482,1935.1161,-1117.9071,26.5843,179.9342,85,85, spawn_time, 0, VEHICLE_ACTION_TYPE_BALLAS_CAR);
	CreateVehicle(478,1938.1493,-1141.2334,25.3367,90.9979,85,85, spawn_time, 0, VEHICLE_ACTION_TYPE_BALLAS_CAR);
	CreateVehicle(478,1931.3901,-1141.3271,25.1713,90.8693,85,85, spawn_time, 0, VEHICLE_ACTION_TYPE_BALLAS_CAR);

	/*ТРАНСПОРТ AZTECAS
	CreateVehicle(439,2180.4399,-1778.2058,13.3394,1.0505,2,2, spawn_time, 0, VEHICLE_ACTION_TYPE_AZTECAS_CAR);
	CreateVehicle(482,2189.7908,-1787.1851,13.5734,0.1493,2,2, spawn_time, 0, VEHICLE_ACTION_TYPE_AZTECAS_CAR);
	CreateVehicle(466,2190.0369,-1795.1735,13.2041,0.5557,2,2, spawn_time, 0, VEHICLE_ACTION_TYPE_AZTECAS_CAR);
	CreateVehicle(466,2190.0942,-1803.9036,13.1983,0.5707,2,2, spawn_time, 0, VEHICLE_ACTION_TYPE_AZTECAS_CAR);
	CreateVehicle(478,2168.9915,-1792.2897,13.3556,270.2886,2,2, spawn_time, 0, VEHICLE_ACTION_TYPE_AZTECAS_CAR);
	CreateVehicle(478,2161.4082,-1792.4021,13.3545,270.7499,2,2, spawn_time, 0, VEHICLE_ACTION_TYPE_AZTECAS_CAR);
		*/
	//ТРАНПСПОРТ МЕХАНИКОВ
	CreateVehicle(525,1107.1083,-1227.1740,15.6974,178.3407,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC);
	CreateVehicle(525,1102.3265,-1227.0956,15.6903,179.3088,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC);
	CreateVehicle(525,1097.6742,-1227.1686,15.6975,179.9536,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC);
	CreateVehicle(525,1092.5123,-1227.1740,15.7016,179.9093,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC);

	//ТРАНПСПОРТ МЕХАНИКОВ
	CreateVehicle(414,1242.6833,167.7667,19.8903,337.9575,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FACTORY);
	CreateVehicle(414,1239.3622,158.7945,19.9468,340.7625,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FACTORY);
	CreateVehicle(414,1236.2782,149.6404,20.0281,341.7793,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FACTORY);
	CreateVehicle(414,1233.8350,141.0284,20.1679,344.7876,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_FACTORY);

	//ТРАНСПОРТ КОМБАЙНЕРОВ
	CreateVehicle(532,-106.1523,-21.1925,3.1163,69.0590,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_COMBAIN);
	CreateVehicle(532,-131.2634,-81.0544,3.1209,349.1697,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_COMBAIN);
	CreateVehicle(532,-142.7462,-77.9018,3.1204,350.2812,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_COMBAIN);
	CreateVehicle(532,-134.5515,-26.0917,3.1175,339.7223,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_COMBAIN);
	CreateVehicle(532,-122.6344,7.3323,3.1131,340.3710,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_COMBAIN);

	//Развозчик пиццы
	CreateVehicle(448, 2097.9790, -1812.5050, 12.8353, 90.0000, -1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1814.0850, 12.8353, 90.0000, -1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1815.7450, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1817.2850, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1818.9650, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1820.4850, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1821.8650, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1799.2234, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2098.0190, -1801.1075, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1797.6434, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1796.0435, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1794.5435, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1793.2234, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);
	CreateVehicle(448, 2097.9790, -1791.7634, 12.8353, 90.0000,-1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_PIZZABOY);




	for(new i; i < sizeof rent_cars_data; i++)
	{
		new rent_market_id,
			vehicleid;

		switch(i)
		{
			case 0..7: rent_market_id = 0;
			case 8..23: rent_market_id = 1;
			case 24..35: rent_market_id = 2;
			case 36..50: rent_market_id = 3;
			case 51..57: rent_market_id = 4;
			case 58..61: rent_market_id = 5;
		}

		rent_cars_data[i][rent_car_tenant_id] = INVALID_PLAYER_ID;
		vehicleid = CreateVehicle
		(
			rent_cars_data[i][rent_car_modelid],
			rent_cars_data[i][rent_car_pos_x],
			rent_cars_data[i][rent_car_pos_y],
			rent_cars_data[i][rent_car_pos_z],
			rent_cars_data[i][rent_car_angle],
			3, 3, spawn_time, 0,
			VEHICLE_ACTION_TYPE_RENT_CAR, rent_market_id
		);

		if(i == 0) first_rent_car_id = vehicleid;
	}

	print("[Vehicle]: Все транспортные средства созданы");
}

stock CreateMedBeds()
{
	for(new i; i < sizeof g_med_bed_pos; i ++)
	{
		g_med_bed_label[i] = CreateDynamic3DTextLabel(" ", 0xFFFFFFFF, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2], 5.0, _, _, _, -1, -1, _, 30.0);
		UpdateMedBed(i);
	}
}

stock CreateCasinoTables()
{
	for(new idx; idx < sizeof g_casino_table_pos; idx ++)
	{
		g_casino_area[idx] = CreateDynamicCP
		(
			g_casino_table_pos[idx][0],
			g_casino_table_pos[idx][1],
			g_casino_table_pos[idx][2],
			2.0
		);

		CreateDynamic3DTextLabel
		(
			"/dice",
			0xffff00FF,
			g_casino_table_pos[idx][0], g_casino_table_pos[idx][1], g_casino_table_pos[idx][2],
			8.0,
			_, _, _, -1, -1, _,
			15.0
		);
	}
}

stock CreateArmories()
{
	for(new idx; idx < sizeof g_armory; idx ++)
	{
		CreatePickup
		(
			g_armory[idx][A_TYPE] == ARMORY_TYPE_ARMOR ? 1242 : 1239,
			23,
			g_armory[idx][A_POS_X], g_armory[idx][A_POS_Y], g_armory[idx][A_POS_Z],
			-1,
			PICKUP_ACTION_TYPE_ARMORY, g_armory[idx][A_TYPE]
		);

		new fmt_text[55];

		format(fmt_text, sizeof fmt_text, "- %s -\n{FFFFFF}%s",
		g_armory[idx][A_TYPE] == ARMORY_TYPE_ARMOR ? "Получение бронежилета" : "Оружейный склад",
		g_armory[idx][A_DESCRIPTION]);

		CreateDynamic3DTextLabel
		(
			fmt_text,
			0x1E90FFFF,
			g_armory[idx][A_POS_X], g_armory[idx][A_POS_Y], g_armory[idx][A_POS_Z] + 1.5,
			8.0,
			_, _, _, -1, -1, _,
			15.0
		);
	}
	for(new idx = 0; idx < 6; idx ++)
	{
		CreatePickup
		(
			1275,
			23,
			g_organization[idx][O_CHANGESKIN][0], g_organization[idx][O_CHANGESKIN][1], g_organization[idx][O_CHANGESKIN][2],
			-1,
			PICKUP_ACTION_TYPE_CHANGESKIN, idx + 1
		);
	}
}

stock CreateFish()
{
	for(new i; i < sizeof g_fish_pos; i ++)
	{
		g_fish_pos_label[i] = CreateDynamic3DTextLabel(" ", 0xFFFFFFFF, g_fish_pos[i][0], g_fish_pos[i][1], g_fish_pos[i][2], 5.0, _, _, _, -1, -1, _, 10.0);
		UpdateFish(i);

		g_fish_area[i] = CreateDynamicSphere
		(
			g_fish_pos[i][0],
			g_fish_pos[i][1],
			g_fish_pos[i][2],
			2.0,
			-1,-1,-1
		);
	}

	price_fish = 20;
}

stock CreateShop()
{
	for(new i; i < sizeof g_shop_pos; i ++)
	{
		g_shop_pos_label[i] = CreateDynamic3DTextLabel(" ", 0xFFFFFFFF, g_shop_pos[i][0], g_shop_pos[i][1], g_shop_pos[i][2], 5.0, _, _, _, -1, -1, _, 10.0);
		UpdateShop(i);

		g_shop_area[i] = CreateDynamicSphere
		(
			g_shop_pos[i][0],
			g_shop_pos[i][1],
			g_shop_pos[i][2],
			3.0,
			-1,-1,-1
		);
	}
}

stock IsPlayerInRangeOfAnyCasinoTable(playerid)
{
	for(new idx; idx < sizeof g_casino_table_pos; idx ++)
	{
		if(IsPlayerInDynamicArea(playerid, g_casino_area[idx])) return 1;
	}

	return 0;
}


stock ShowPlayerPayForRentDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_PAY_FOR_RENT, DIALOG_STYLE_LIST,
		"Оплата",
		"{ffff00}1. {FFFFFF}Заплатить за дом\n"\
		"{ffff00}2. {FFFFFF}Оплатить аренду бизнеса\n"\
		"{ffff00}3. {FFFFFF}Оплатить аренду АЗС",
		"Далее", "Отмена"
	);
	return 1;
}

stock ClearBankAccountInfo(playerid, accountid)
{
	strmid(g_bank_account[playerid][accountid][BA_NAME], "None", 0, 21, 21);

	SetBankAccountData(playerid, accountid, BA_ID, 0);
	SetBankAccountData(playerid, accountid, BA_PIN_CODE, 0);

	SetBankAccountData(playerid, accountid, BA_BALANCE, 0);
	SetBankAccountData(playerid, accountid, BA_REG_TIME, 0);
}

stock ClearBankAccountsData(playerid)
{
	for(new idx; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);
	}
}

stock ShowPlayerBankDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_BANK, DIALOG_STYLE_LIST,
		"Банк",
		"{ffff00}1. {FFFFFF}Мои счета\n"\
		"{ffff00}2. {FFFFFF}Открыть новый счет\n"\
		"{ffff00}3. {FFFFFF}Депозит\n"\
		"{ffff00}4. {FFFFFF}Оплата гос пошлины.",
		"Выбрать", "Отмена"

	);
}

stock ShowPlayerBankAccounts(playerid)
{
	new query[64];
	new Cache: result;
	new rows;
	new bank_accounts_list[(37 * MAX_BANK_ACCOUNTS) + 22 + 1];

	format(query, sizeof query, "SELECT * FROM bank_accounts WHERE uid=%d LIMIT %d", GetPlayerAccountID(playerid), MAX_BANK_ACCOUNTS);
	result = mysql_query(mysql, query);
	rows = cache_num_rows();

	bank_accounts_list = "{FFFFFF}1. Основной счет\n";
	for(new idx, count; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);

		if(idx < rows)
		{
			SetBankAccountData(playerid, idx, BA_ID, cache_get_row_int(idx, 0));

			cache_get_row(idx, 2, g_bank_account[playerid][idx][BA_NAME], mysql, 21);
			cache_get_row(idx, 4, g_bank_account[playerid][idx][BA_PIN_CODE], mysql, 9);

			SetBankAccountData(playerid, idx, BA_BALANCE, cache_get_row_int(idx, 3));
			SetBankAccountData(playerid, idx, BA_REG_TIME, cache_get_row_int(idx, 5));

			format(query, sizeof query, "{FFFFFF}%d. %s - №%d\n", idx + 2, GetBankAccountData(playerid, idx, BA_NAME), GetBankAccountData(playerid, idx, BA_ID));
			strcat(bank_accounts_list, query);

			SetPlayerListitemValue(playerid, count ++, idx);
		}
	}
	cache_delete(result);

	return Dialog(playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_LIST, "Ваши счета", bank_accounts_list, "Операции", "Назад");
}

stock IsValidBankAccount(playerid, accountid)
{
	if(0 <= accountid <= MAX_BANK_ACCOUNTS-1)
	{
		if(GetBankAccountData(playerid, accountid, BA_ID) > 0)
		{
			return 1;
		}
	}
	return 0;
}

stock UpdateBankAccountData(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new query[64];
		new Cache: result;

		format(query, sizeof query, "SELECT balance FROM bank_accounts WHERE id=%d LIMIT 1", GetBankAccountData(playerid, accountid, BA_ID));
		result = mysql_query(mysql, query);

		if(cache_num_rows())
			SetBankAccountData(playerid, accountid, BA_BALANCE, cache_get_row_int(0, 0));

		cache_delete(result);
	}
}

stock ShowPlayerBankAccountOperation(playerid)
{
	Dialog
	(
		playerid, DIALOG_BANK_ACCOUNT_OPERATION, DIALOG_STYLE_LIST,
		"Список операций",
		"{ffff00}1. {FFFFFF}Информация о счете\n"\
		"{ffff00}2. {FFFFFF}История операций\n"\
		"{ffff00}3. {FFFFFF}Снять деньги\n"\
		"{ffff00}4. {FFFFFF}Положить деньги\n"\
		"{ffff00}5. {FFFFFF}Перевести на другой счет\n"\
		"{ffff00}6. {FFFFFF}Переименовать счет\n"\
		"{ffff00}7. {FFFFFF}Изменить PIN-код",
		"Выбрать", "Назад"
	);
	return 1;
}

stock ShowPlayerBankAccountTransfer(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Исходный счет:\t%d\n"\
			"{FFFFFF}Назначение:\t\t\"%s\", №%d\n\n"\
			"{FFFFFF}Введите сумму для перевода:",
			GetBankAccountData(playerid, accountid, BA_ID),
			GetPlayerBankTransfer(playerid, BT_NAME),
			GetPlayerBankTransfer(playerid, BT_ID)
		);
		Dialog(playerid, DIALOG_BANK_ACCOUNT_TRANSFER_2, DIALOG_STYLE_INPUT, "Перевод средств", fmt_str, "Перевести", "Отмена");
	}
	return 1;
}

stock ShowPlayerATMTransfer(playerid)
{
	new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
	if(transfer_id)
	{
		new fmt_str[64 + 1];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Вы выполняете перевод на счет №%d\n"\
			"{FFFFFF}Укажите сумму:",
			transfer_id
		);
		Dialog(playerid, DIALOG_ATM_TRANSFER_MONEY_2, DIALOG_STYLE_INPUT, "Безналичный перевод", fmt_str, "Перевести", "Отмена");
	}
	return 1;
}

stock IsABadBankAccountName(dest[], pos=0)
{
	new is_bad_name = false;
	do
	{
		switch(dest[pos])
		{
			case
				'a'..'z', 'A'..'Z', 'а'..'я', 'А'..'Я', '0'..'9': continue;

			default:
				is_bad_name = true;

		}
	}
	while(dest[++pos]);

	return is_bad_name;
}

stock BankAccountLog(playerid, accountid, description[])
{
	new query[180 + 1];

	mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts_log (acc_id,uip,time,description) VALUES (%d,'%e',%d,'%e')", accountid, GetPlayerIpEx(playerid), gettime(), description);
	mysql_query(mysql, query, false);

	return 1;
}

stock ShowPlayerBankAccountLog(playerid, accountid)
{
	new fmt_str[128];
	new Cache: result;
	new rows;

	format(fmt_str, sizeof fmt_str, "SELECT FROM_UNIXTIME(time,'%%Y-%%m-%%d') AS date,description FROM bank_accounts_log WHERE acc_id=%d ORDER BY id DESC LIMIT 10", accountid);
	result = mysql_query(mysql, fmt_str);

	rows = cache_num_rows();

	if(rows)
	{
		new text[900] = "{FFFFFF}";
		new day, month, year;

		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str);
			sscanf(fmt_str, "P<->ddd", year, month, day);

			cache_get_row(idx, 1, fmt_str);

			format(fmt_str, sizeof fmt_str, "{FFFFFF}%d %s %d г.\t\t%s\n", day, GetMonthName(month), year, fmt_str);
			strcat(text, fmt_str);
		}
		Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "Последние 10 операций", text, "Вернуться", "");
	}
	else Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "История", "{FFFFFF}История операций пуста", "Вернуться", "");

	cache_delete(result);
	return 1;
}

stock RemovePlayerAttachedObjects(playerid)
{
	for(new idx; idx < MAX_PLAYER_ATTACHED_OBJECTS; idx ++)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, idx))
		{
			RemovePlayerAttachedObject(playerid, idx);
		}
	}
}

stock RemovePlayerAttachedObjectEx(playerid, ...)
{
	new args = numargs()-1;
	for(new idx; idx < args; idx ++)
		RemovePlayerAttachedObject(playerid, getarg(idx + 1));
}

stock HelpInfoInit()
{
	new fmt_str[64];

	for(new idx; idx < sizeof help_info; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, help_info[idx][H_TITLE]);
		strcat(help_info_items, fmt_str);

		format(fmt_str, sizeof fmt_str, "%d. ", idx + 1);
		strins(help_info[idx][H_TITLE], fmt_str, 0, 64);

		//strins(help_info[idx][H_INFO], "{FFFFFF}", 0, 1024);
	}

	help_info_CP = CreateDynamicCP(1771.2667, -1905.8892, 13.3324, 1.9, _, _, _, 5.0); // арзамас (спавн)
	CreateDynamic3DTextLabel("Раздел для новичков\n{FFFF00}Помощь по игре", 0x1E90FFFF, 1771.2667, -1905.8892, 13.3324 + 0.66, 15.0, _, _, _, 0, 0);

	//help_info_CP[1] = CreateDynamicCP(1763.693, -1885.828, 13.555, 2.1, _, _, _, 23.0); // ЖД-вокзал ЛС
	//CreateDynamic3DTextLabel("Раздел для новичков\n{FFFF00}Помощь по игре", 0x1E90FFFF, 1763.693, -1885.828, 13.555 + 0.66, 26.0, _, _, _, 0, 0);
}

stock ShowPlayerHelpSection(playerid, sectionid)
{
	new next_buttom[9] = "Далее >>";
	if(sectionid >= sizeof help_info - 1)
	{
		next_buttom[0] = '\0';
	}

	Dialog
	(
		playerid, DIALOG_HELP_SECTION, DIALOG_STYLE_MSGBOX,
		GetHelpInfoData(sectionid, H_TITLE),
		GetHelpInfoData(sectionid, H_INFO),
		"<< Меню", next_buttom
	);
	SetPVarInt(playerid, "help_section", sectionid);
}

stock ServerRadioInit()
{
	new fmt_str[64];

	for(new idx; idx < sizeof g_server_radio; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetServerRadioData(idx, SR_CHANNEL_NAME));
		strcat(g_server_radio_items, fmt_str);
	}
}

stock MapIconsInit()
{
	for(new idx; idx < sizeof map_icons; idx ++)
	{
		CreateDynamicMapIcon
		(
			GetMapIconsData(idx, MI_POS_X),
			GetMapIconsData(idx, MI_POS_Y),
			GetMapIconsData(idx, MI_POS_Z),
			GetMapIconsData(idx, MI_TYPE),
			0,
			0,
			0,
			-1,
			MAP_ICON_STREAM_DISTANCE,
			MAPICON_LOCAL
		);
	}
}

stock TeleportPickupsInit()
{
	new Text3D:buffer;
	for(new idx; idx < sizeof g_teleport; idx ++)
	{
		if(strlen(GetTeleportData(idx, T_NAME)) && !GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD))
		{
			buffer = CreateDynamic3DTextLabel
			(
				GetTeleportData(idx, T_NAME),
				0xFFFFFFFF,
				GetTeleportData(idx, T_PICKUP_POS_X),
				GetTeleportData(idx, T_PICKUP_POS_Y),
				GetTeleportData(idx, T_PICKUP_POS_Z) + 0.8,
				5.0,
				INVALID_PLAYER_ID,
				INVALID_VEHICLE_ID,
				0,
				0,
				0,
				-1,
				STREAMER_3D_TEXT_LABEL_SD
			);
			SetTeleportData(idx, T_LABEL, buffer);
		}
		CreatePickup(GetTeleportData(idx, T_PICKUP_ID), 23, GetTeleportData(idx, T_PICKUP_POS_X), GetTeleportData(idx, T_PICKUP_POS_Y), GetTeleportData(idx, T_PICKUP_POS_Z), GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD), PICKUP_ACTION_TYPE_TELEPORT, idx);
	}

	print("[TP]: Все входы/выходы созданы");
}

stock DrivingSchoolInit()
{

	driving_exam_CP = CreateDynamicCP(1432.1708, 280.5318, 1038.0863, 1.5, 0, 3, -1, 15.0); // автошкола
	driving_tech = CreateDynamicCP(-2026.7791,-114.3432,1035.1719, 1.5, 0, 3, -1, 15.0); // автошкола обучающий раздел
	CreateDynamic3DTextLabel("- Обучающий -\nраздел", 0x1E90FFFF, -2026.7791,-114.3432,1035.1719 + 0.2, 5.0);

	new fmt_str[64];
	for(new idx; idx < sizeof driving_tutorial; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "Раздел %d: ", idx + 1);
		strins(driving_tutorial[idx][DT_TITLE], fmt_str, 0, 64);
	}

	for(new idx; idx < sizeof driving_exam; idx ++)
	{
		strins(driving_exam[idx][DE_TITLE], "{FFCC00}", 0, 64);
	}
}

stock IsGateButtonID(buttonid)
{
	return (g_gate_button[0][0] <= buttonid <= g_gate_button[g_gate_buttons_count - 1][0]);
}

stock GetNearestGate(playerid, Float: dist = 10.0)
{
	if(!(0.0 <= dist <= 20.0))
	{
		dist = 10.0;
	}
	//if(dist == 0.0)
	//	dist = FLOAT_INFINITY;

	new gateid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_gate; idx ++)
	{
		if(GetGateData(idx, G_TYPE) == GATE_TYPE_BARRIER_BUTTON) continue;

		my_dist = GetPlayerDistanceFromPoint(playerid, GetGateData(idx, G_OPEN_POS_X), GetGateData(idx, G_OPEN_POS_Y), GetGateData(idx, G_OPEN_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			gateid = idx;
		}
	}
	return gateid;
}

stock AtmsInit()
{
	new Float: x, Float: y, Float: z, Float: rot_z;
	new Float: dist = 0.6; // дистацния пикапа от банкомата

	for(new idx; idx < sizeof g_atm; idx ++)
	{
		x = GetATMInfo(idx, A_POS_X);
		y = GetATMInfo(idx, A_POS_Y);
		z = GetATMInfo(idx, A_POS_Z);
		rot_z = GetATMInfo(idx, A_ROT_Z);

		CreateDynamicObject(2942, x, y, z, 0.0, 0.0, rot_z, 0, 0, -1, STREAMER_OBJECT_SD, 100.0);

		CreateDynamic3DTextLabel("Банкомат\n{FFCC33}Подойдите что бы воспользоваться.", 0x32a44bFF, x, y, z + 0.7, 3.0); // 0x32a44bEE

		#if defined ATM_CREATED_PICKUP
		rot_z += 180.0;
		CreatePickup(1212, 23, x + dist * -floatsin(rot_z, degrees), y + dist * floatcos(rot_z, degrees), z, -1, PICKUP_ACTION_TYPE_ATM, idx);
		#endif
	}
	print("[ATM]: Все банкоматы созданы");
}

stock GetPlayerNearestATM(playerid, Float: dist = 1.3)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;

	new atmid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_atm; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetATMInfo(idx, A_POS_X), GetATMInfo(idx, A_POS_Y), GetATMInfo(idx, A_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}

stock ShowPlayerATMDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ATM, DIALOG_STYLE_LIST,
		"Банкомат",
		"1. Снять с банковского счета\n"\
		"2. Положить на банковский счет\n"\
		"3. Баланс банковского счета\n"\
		"4. Снять со счета предприятия\n"\
		"5. Положить на счет предприятия\n"\
		"6. Пополнить мобильный телефон\n"\
		"7. Безналичный перевод\n"\
		"8. Оплата штрафа\n"\
		"9. Благотворительность",
		"Выбрать", "Выйти"
	);
	return 1;
}

stock ShowPlayerATMSelectSumDialog(playerid, bool:take)
{
	Dialog
	(
		playerid, take ? DIALOG_ATM_TAKE_MONEY : DIALOG_ATM_PUT_MONEY, DIALOG_STYLE_LIST,
		"Выберите сумму",
		"100$\n"\
		"200$\n"\
		"500$\n"\
		"1000$\n"\
		"2000$\n"\
		"5000$\n"\
		"10000$\n"\
		"Другая сумма...",
		take ? ("Снять") : ("Положить"), "Назад"
	);
	return 1;
}

stock ShowPlayerATMSelectOtherSum(playerid, bool:take)
{
	Dialog
	(
		playerid, take ? DIALOG_ATM_TAKE_OTHER_MONEY : DIALOG_ATM_PUT_OTHER_MONEY, DIALOG_STYLE_INPUT,
		"Другая сумма",
		"{FFFFFF}Укажите сумму:",
		take ? ("Снять") : ("Положить"), "Назад"
	);
	return 1;
}

stock ShowPlayerATMCharityDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ATM_CHARITY, DIALOG_STYLE_INPUT,
		"Благотворительность",
		"{FFFFFF}Мы предлагаем вам перечислить любую\n"\
		"сумму на благотворительный счет\n"\
		"государства. Все средства пойдут на\n"\
		"развитие нашей страны и поднятие\n"\
		"экономики.\n\n"\
		"Помимо этого, в мэриях время от времени\n"\
		"будут публиковаться списки тех, кто\n"\
		"сделал наибольшие взносы.\n\n"\
		"Этот список можно просмотреть командой\n"\
		"/charity. Там же можно узнать общую\n"\
		"сумму сделанных Вами пожертвований.",
		"Внести", "Закрыть"
	);
	return 1;
}

stock ShowPlayerATMCompanyDialog(playerid, bool: take)
{
	new stationid = GetPlayerFuelStation(playerid);
	new businessid = GetPlayerBusiness(playerid);

	if(stationid != -1 && businessid != -1)
	{
		new fmt_str[64 + 1];

		format
		(
			fmt_str, sizeof fmt_str,
			"1. %s (№%d)\n"\
			"2. %s (№%d)",
			GetBusinessInteriorInfo(GetBusinessData(businessid, B_INTERIOR), BT_NAME), businessid,
			GetFuelStationData(stationid, FS_NAME), stationid
		);
		Dialog(playerid, take ? DIALOG_ATM_SELECT_COMPANY_TAKE : DIALOG_ATM_SELECT_COMPANY_PUT, DIALOG_STYLE_LIST, "Выберите предприятие", fmt_str, "Выбрать", "Назад");
	}
	else if(stationid != -1)
	{
		ShowPlayerATMFuelStationDialog(playerid, take);
	}
	else if(businessid != -1)
	{
		ShowPlayerATMBusinessDialog(playerid, take);
	}
}


stock ShowPlayerATMFuelStationDialog(playerid, bool:take)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		Dialog
		(
			playerid, take ? DIALOG_ATM_FUEL_ST_TAKE_MONEY : DIALOG_ATM_FUEL_ST_PUT_MONEY, DIALOG_STYLE_INPUT,
			GetFuelStationData(stationid, FS_NAME),
			"{FFFFFF}Укажите сумму:",
			take ? ("Снять") : ("Положить"), "Выйти"
		);
	}
}

stock ShowPlayerATMBusinessDialog(playerid, bool:take)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		Dialog
		(
			playerid, take ? DIALOG_ATM_BIZ_TAKE_MONEY : DIALOG_ATM_BIZ_PUT_MONEY, DIALOG_STYLE_INPUT,
			GetBusinessInteriorInfo(GetBusinessData(businessid, B_INTERIOR), BT_NAME),
			"{FFFFFF}Укажите сумму:",
			take ? ("Снять") : ("Положить"), "Выйти"
		);
	}
}
stock DynamicAreaInit()
{
	CreateDynamicPickup(2061,21,2733.9495,-2466.0005,13.6484,0,0);
	gAreas[AR_GUN_LOADING_WMF] = CreateDynamicSphere(2733.9495,-2466.0005,13.6484,1.0,0,0);
	printf("[DYNAMIC PICK] Loaded");
}
stock BanksInit()
{
	CreatePickup(1274, 23, -2159.0479,640.3580,1052.3817, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("Касса 1\n/bank", 0x32a44bFF, -2159.0479,640.3580,1052.3817 + 0.8, 8.0);

	CreatePickup(1274, 23, -2161.2461,640.3593,1052.3817, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("Касса 2\n/bank", 0x32a44bFF, -2161.2461,640.3593,1052.3817 + 0.8, 8.0);

	CreatePickup(1274, 23, -2165.9160,646.1693,1052.3750, -1, PICKUP_ACTION_TYPE_BANK, false);
	CreateDynamic3DTextLabel("Оплата\n{CCCC00}дома\nбизнеса\nАЗС", 0x32a44bFF, -2165.9160,646.1693,1052.3750 + 0.8, 8.0);
}

stock TempJobsInit()
{
	new idx;
	for(idx = 0; idx < sizeof g_temp_jobs; idx ++)
	{
		if(idx == 9) continue; // пикап в заводе (создается отдельно от всех)
  		CreateDynamic3DTextLabel(GetTempJobInfo(idx, TJ_NAME), 0xFFFFFFFF, GetTempJobInfo(idx, TJ_POS_X), GetTempJobInfo(idx, TJ_POS_Y), GetTempJobInfo(idx, TJ_POS_Z) + 0.5, 10.0);
		CreatePickup(1275, 23, GetTempJobInfo(idx, TJ_POS_X), GetTempJobInfo(idx, TJ_POS_Y), GetTempJobInfo(idx, TJ_POS_Z), -1, PICKUP_ACTION_TYPE_TEMP_JOB,idx);
	}

	// шахта
	for(idx = 0; idx < sizeof miner_carriage; idx ++)
	{
		miner_carriage[idx][MC_STATUS] = false;
		//miner_carriage[idx][MC_OBJECT_ID] = CreateDynamicObject(1769, miner_carriage[idx][MC_START_POS_X], miner_carriage[idx][MC_START_POS_Y], miner_carriage[idx][MC_START_POS_Z], 0.0, 0.0, 90.0);

		//Streamer_SetIntData(STREAMER_TYPE_OBJECT, miner_carriage[idx][MC_OBJECT_ID], E_STREAMER_EXTRA_ID, OBJECT_TYPE_CARRIAGE);

		miner_carriage[idx][MC_LABEL] = CreateDynamic3DTextLabel("Загрузка\n\n{FFCC00}Количество руды\n0 / 10000 кг", 0x66CC00FF, -2375.1228, 294.7194, -15.4815 + 3.0, 10.0);
	//	miner_carriage[idx][MC_PICKUP_ID] = CreatePickup(1318, 23, -1818.8396,-1608.0192,23.0156, -1, PICKUP_ACTION_TYPE_MINER_CARRI);
	}


	CreatePickup(19134, 23, 2356.0806, 2025.3385, 15.9900, 0, PICKUP_ACTION_TYPE_MINER_SELL_M);
	CreateDynamic3DTextLabel("Покупка металла", 0x1E90FFFF,  2356.0806, 2025.3385, 15.9900 + 0.3, 10.0);

	CreatePickup(1275, 33, 2570.1919, -1298.2909, 1044.1250, -1, PICKUP_ACTION_TYPE_TEMP_JOB, TEMP_JOB_FACTORY);

	for(idx = 0; idx < sizeof factory_take_metall_pos; idx ++)
	{
		CreatePickup(1575, 23, factory_take_metall_pos[idx][0], factory_take_metall_pos[idx][1], factory_take_metall_pos[idx][2] - 0.4, -1, PICKUP_ACTION_TYPE_FACTORY_MET);
	}

	CreatePickup(1239, 23, 2564.5933,-1292.8503,1044.1250, -1, PICKUP_ACTION_TYPE_PUT_PROD);

	new Float: x = 2558.5176, Float: y = -1291.0043, Float: z = 1044.1250;
	for(idx = 0; idx < sizeof factory_desk; idx ++)
	{
		if(idx && !(idx % 3))
			y -= 4.85;

		factory_desk[idx][FD_POS_X] = x - (float(idx % 3) * 2.5003);
		factory_desk[idx][FD_POS_Y] = y;
		factory_desk[idx][FD_POS_Z] = z;

		factory_desk[idx][FD_USED] = false;
		factory_desk[idx][FD_OBJECT_ID] = -1;

		factory_desk[idx][FD_CHEK_ID] = CreateDynamicCP(factory_desk[idx][FD_POS_X], factory_desk[idx][FD_POS_Y], factory_desk[idx][FD_POS_Z], 0.3, _, _, _, 0.3);
		factory_desk[idx][FD_LABEl] = CreateDynamic3DTextLabel("Рабочее место", 0xFFFFFFFF, factory_desk[idx][FD_POS_X], factory_desk[idx][FD_POS_Y], factory_desk[idx][FD_POS_Z] + 1.0, 5.0);

		CallLocalFunction("UpdateFactoryDesk", "i", idx);
	}
    jobzone[0] = CreateDynamicPolygon(jobzones[0]);
	jobzone[1] = CreateDynamicPolygon(jobzones[1]);
	jobzone[2] = CreateDynamicPolygon(jobzones[2]);
	// --------------- Завод
	//AddStaticVehicleEx(406, -1076.2706, 2204.9490, 38.4303, 180.0, 125, 1, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фургон для перевози металла

	//AddStaticVehicleEx(514, -1116.3119, 2205.5913, 38.2890, 179.9556, 6, 6, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фура для перевозки топлива
}

stock InfoPickupsInit()
{
	new title_color[16];
	for(new idx; idx < sizeof info_pickup; idx ++)
	{
		CreatePickup(1239, 23, GetInfoPickupData(idx, IP_POS_X), GetInfoPickupData(idx, IP_POS_Y), GetInfoPickupData(idx, IP_POS_Z), -1, PICKUP_ACTION_TYPE_INFO_PICKUP, idx);

		format(title_color, sizeof title_color, "{%06x}", GetInfoPickupData(idx, IP_TITLE_COLOR) >>> 8);
		strins(GetInfoPickupData(idx, IP_TITLE), title_color, 0, 64);

		strins(GetInfoPickupData(idx, IP_INFO), "{FFFFFF}", 0, 1024);
		if(strlen(GetInfoPickupData(idx, IP_LABEL_INFO)) > 3)
			CreateDynamic3DTextLabel(GetInfoPickupData(idx, IP_LABEL_INFO), 0x32a44bDD, GetInfoPickupData(idx, IP_POS_X), GetInfoPickupData(idx, IP_POS_Y), GetInfoPickupData(idx, IP_POS_Z) + 0.7, 9.5);
	}
}

stock BusRoutesInit()
{
	new fmt_str[64];

	for(new idx; idx < sizeof g_bus_routes; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d.  %s\n", idx + 1, g_bus_routes[idx][BR_NAME]);
		strcat(g_bus_routes_list, fmt_str);

		if(g_bus_routes[idx][BR_COLOR] > 0)
		{
			g_bus_routes[idx][BR_COLOR] = 0x32a44bFF;
		}
		else g_bus_routes[idx][BR_COLOR] = 0x1E90FFFF;
	}
}

stock AnimListInit()
{
	new fmt_str[64];
	for(new idx; idx < sizeof anim_list; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetAnimListData(idx, AL_DESCRIPTION));
		strcat(anim_list_items, fmt_str);

		if(GetAnimListData(idx, AL_LOOP) > 2)
			anim_list[idx][AL_DESCRIPTION] = 2;
	}
	strcat(anim_list_items, "{33CC00}Информация");
}

stock RepositoriesLoad()
{
	new Cache: result;
	new type, action_id;

	result = mysql_query(mysql, "SELECT * FROM repositories ORDER BY type,action_id ASC");
	new rows = cache_num_rows();

	for(new idx; idx < rows; idx ++)
	{
		type = cache_get_row_int(idx, 1);
		action_id = cache_get_row_int(idx, 2);

		if(0 <= type <= sizeof g_repository-1)
		{
			if(0 <= action_id <= sizeof g_repository[]-1)
			{
				SetRepositoryData(type, action_id, R_AMOUNT, cache_get_row_int(idx, 3));
			}
		}
	}
	cache_delete(result);

	RepositoriesInit();
}

stock RepositoriesInit()
{
	// шахта

	//SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -1891.9476,-1671.4929,23.0156 + 1.0, 20.0));
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -1891.9476,-1671.4929,23.0156, 25.0));

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	// ----------------------
	//SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -2568.2881, 297.3934, -15.7620 + 2.5, 15.0));
	//SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2382.7622, 1720.6998, 4.0, 30.0));

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);

	// ----------------------
	//SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2387.6606, 1752.0416, -1.8463 + 1.0, 20.0));
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI);

	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_NOT_SAVE, true);
	SetTimer("UpdateMinerRemelting", 10_000, false);

	// завод
	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -1046.6550,2208.5771, 41.0, 20.0));
	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2564.5933,-1292.8503,1044.1250, 15.0));

	factory_store_label[0] = CreateDynamic3DTextLabel("На складе:\n{FF9900}Топливо: 0 / 1000000 л\n\n{6699FF}/sellf", 0xFFFFFFFF, 1218.3408,186.1510,20.3540, 20.0); // топливо
	factory_store_label[1] = CreateDynamic3DTextLabel("На складе:\n{FF9900}Металл: 0 / 1000000 кг\n\n{6699FF}/sellm", 0xFFFFFFFF, 1238.0892,177.7890,20.3305, 20.0); // метал

	CreateDynamic3DTextLabel("Склад\nпроизводственного\nцеха\n\n{6699FF}/sellf\n/sellm\n{33CC00}/buyprod", 0xFFFFFFFF, -1046.6550, 2208.5771, 42.0, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, _, _, _, _, 50.0);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);

	// ВМФ
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2] + 1.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 6)); // металл
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 311.9849,-166.1416,999.6010 + 0.7, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 6)); // патроны

	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);

	// лесопилка
	SetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -543.6469,-197.0561,78.4063 + 1.0, 10.0)); // дерево на лесопилке

	// Лесопилка

	UpdateRepository(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD);

	// ферма
	SetRepositoryData(REPOSITORY_TYPE_FARM, REPOSITORY_ACTION_FARM_WOOD, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -78.7266,90.5157,3.1172 + 1.0, 10.0)); // пшеница на ферме

	// ферма

	UpdateRepository(REPOSITORY_TYPE_FARM, REPOSITORY_ACTION_FARM_WOOD);

	// мэрия
	SetRepositoryData(REPOSITORY_TYPE_MAYOR, REPOSITORY_ACTION_COFFERS, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 759.2421, -18.6610, 1019.1791, 20.0)); // деньги в казне мэрии

	// мэрия

	UpdateRepository(REPOSITORY_TYPE_MAYOR, REPOSITORY_ACTION_COFFERS);

	print("[Repositories]: Все склады загружнены");
}

stock UpdateRepository(type, actionid)
{
	new fmt_str[128];
	new amount = GetRepositoryData(type, actionid, R_AMOUNT);
	new Text3D: label = GetRepositoryData(type, actionid, R_LABEL);
	new Text3D: label_2 = GetRepositoryData(type, actionid, R_LABEL_2);

	switch(type)
	{
		case REPOSITORY_TYPE_MINER:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_MINER_METAL:
				{
					format(fmt_str, sizeof fmt_str, "Покупка металла\n(для развозчиков)\n\n{ffff00}На складе %d кг\nКупить: /buym", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Металл\n{0099CC}На складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_ORE:
				{
					format(fmt_str, sizeof fmt_str, "Руда\n{32a44b}На складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);

					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_REMELTI:
				{
					format(fmt_str, sizeof fmt_str, "Кузница\n{CC9900}%d кг руды\nна переплавке", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_FACTORY_METAL..REPOSITORY_ACTION_FACTORY_PROD:
				{
					if(actionid != REPOSITORY_ACTION_FACTORY_PROD)
					{
						format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Топливо: %d / 1000000 л\n\n{6699FF}/sellf", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[0], 0xFFFFFFFF, fmt_str);

						format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Металл: %d / 1000000 кг\n\n{6699FF}/sellm", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[1], 0xFFFFFFFF, fmt_str);
					}

					label = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL);
					label_2 = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL_2);

					format
					(
						fmt_str, sizeof fmt_str,
						"Исходные материалы:\n"\
						"Топливо: %d / 1000000 л\n"\
						"Металл: %d / 1000000 кг\n"\
						"{33CC00}Продукты: %d шт.\n"\
						"/put - чтобы положить",
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT),
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT),
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT)
					);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_OIL_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_OIL_FACTORY_F:
				{
					format(fmt_str, sizeof fmt_str, "Топливо для АЗС\n\n{ffff00}На складе\n%d л топлива\n{33FF00}Купить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);

					format(fmt_str, sizeof fmt_str, "Топливо для завода\n\n{ffff00}На складе\n%d л топлива\n{33FF00}Купить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_ARMY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_ARMY_METAL:
				{
					format(fmt_str, sizeof fmt_str, "Металл на складе:\n{66cc33}%d кг\n\n{9999ff}/takem\n/putm", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_ARMY_AMMO:
				{
					format(fmt_str, sizeof fmt_str, "Патроны на складе:\n%d / 200000 шт.", amount);
					UpdateDynamic3DTextLabelText(label, 0xffff00FF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_SAWMILL:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_SAWMILL_WOOD:
				{
					format(fmt_str, sizeof fmt_str, "На складе:\n{FF9900}Дерево: %d / 1000000 ед", GetRepositoryData(REPOSITORY_TYPE_SAWMILL, REPOSITORY_ACTION_SAWMILL_WOOD, R_AMOUNT));
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FARM:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_FARM_WOOD:
				{
					format(fmt_str, sizeof fmt_str, "На складе:\nПшеница: {ffff00}%d кг.", GetRepositoryData(REPOSITORY_TYPE_FARM, REPOSITORY_ACTION_FARM_WOOD, R_AMOUNT));
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_MAYOR:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_COFFERS:
				{
					format(fmt_str, sizeof fmt_str, "- Казна -\n{FFFFFF}$%d", GetRepositoryData(REPOSITORY_TYPE_MAYOR, REPOSITORY_ACTION_COFFERS, R_AMOUNT));
					UpdateDynamic3DTextLabelText(label, 0xffff00FF, fmt_str);
				}
			}
		}
	}
}

public: UpdateOilFactory()
{
	new add_fuels = (random(2500) + 500);
	new fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT) + add_fuels;

	new time = (random(fuels <= 20_000 ? 1 : 180) + 60) * 1000;

	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, fuels);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);

	SetTimer("UpdateOilFactory", time, false);
}

public: UpdateMinerRemelting()
{
	new remelting = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT);
	new ore = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);
	new metall = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);
	new rand;

	// берем с переплавки руду
	rand = random(90) + 11; // от 10 до 100;
	if(remelting > 0) // если на переплавке есть руда
	{
		if(rand > remelting) // если взяли больше чем было
			rand = remelting; // берем все что осталось

		remelting -= rand;

		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting); // забрали с переплавки
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, metall + rand); // добавили на склад металл
	}

	// берем со склада руду
	rand = random(90) + 11; // от 10 до 100;
	if(remelting < 100) // если на пререплавке меньше 100 кг
	{
		if(rand > ore) // если взяли больше чем на складе
			rand = ore; // берем все что осталось

		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, ore - rand); // взяли со склада
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting + rand); // добавили в переплавку
	}

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI);

	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	SetTimer("UpdateMinerRemelting", (random(16)+15) * 1000, false);
}

stock SaveRepository(type = -1, actionid = -1)
{
	new fmt_str[128];

	if(type != -1 && actionid != -1)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(type, actionid, R_AMOUNT), type, actionid);
		mysql_query(mysql, fmt_str, false);
	}
	else
	{
		for(new idx, idx_2; idx < sizeof g_repository; idx ++)
		{
			for(idx_2 = 0; idx_2 < sizeof g_repository[]; idx_2 ++)
			{
				if(GetRepositoryData(idx, idx_2, R_NOT_SAVE)) continue;

				format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(idx, idx_2, R_AMOUNT), idx, idx_2);
				mysql_query(mysql, fmt_str, false);
			}
		}
	}
}

stock PreLoadPlayerAnimList(playerid)
{
	if(!GetPlayerData(playerid, P_ANIM_LIST_INIT))
	{
		PreLoadPlayerAnims(playerid);
		SetPlayerData(playerid, P_ANIM_LIST_INIT, true);

		return 1;
	}
	return 0;
}

stock SetPlayerAnimation(playerid, animid)
{
	if(0 <= animid <= sizeof anim_list-1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			switch(animid+1)
			{
				case 1..4:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1 + animid);
				}
				default:
				{
					new type = USE_ANIM_TYPE_NONE - 1;
					if(GetAnimListData(animid, AL_LOOP))
					{
						SetPlayerData(playerid, P_USE_ANIM, true);
					}
					else
					{
						if(IsPlayerUseAnim(playerid))
						{
							SetPlayerData(playerid, P_USE_ANIM, false);
						}
						type = USE_ANIM_TYPE_NONE;
					}
					ApplyAnimationEx(playerid, GetAnimListData(animid, AL_LIB), GetAnimListData(animid, AL_NAME), GetAnimListData(animid, AL_DELTA), (GetAnimListData(animid, AL_LOOP) % 2), GetAnimListData(animid, AL_LOCK_X), GetAnimListData(animid, AL_LOCK_Y), GetAnimListData(animid, AL_FREEZE), GetAnimListData(animid, AL_TIME), 1, type);
				}
			}
		}
		return 1;
	}
	return 0;
}

stock ClearPlayerUseAnim(playerid)
{
	if(IsPlayerUseAnim(playerid))
	{
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);

		SetPlayerData(playerid, P_USE_ANIM, false);

		ClearPlayerAnim(playerid);
	}
}

stock IsValidMail(email[], len = sizeof email)
{
    new count[2];
    if(!(5 <= len <= 60)) return 0;
    for(new i; i != len; i++)
    {
		switch(email[i])
		{
			case '@':
			{
				count[0]++;
				if(count[0] != 1 || i == len - 1 || i == 0) return 0;
			}
			case '.':
			{
				if(count[0] == 1 && count[1] == 0 && i != len - 1)
				{
					count[1] = 1;
				}
			}
			case '0'..'9', 'a'..'z', 'A'..'Z', '_', '-':
			{
				continue;
			}
			default:
				return 0;
		}
    }
    if(count[1] == 0) return 0;
    return 1;
}

stock ShowPlayerRegDialog(playerid, step)
{
	if(GetPlayerData(playerid, P_ACCOUNT_STATE) != ACCOUNT_STATE_REGISTER) return 0;

	switch(step)
	{
		case REGISTER_STATE_PASSWORD:
		{
		  //  SendClientMessage(playerid,-1,"Вы не участвуете в ЗБТ");
		  //  Kick(playerid);
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"Регистрация",
				"{FFFFFF}Добро пожаловать на сервер "SERVER_NAME"\n"\
				"Чтобы начать игру сначала необходимо зарегистрироваться\n\n"\
				"Пожалуйста укажите пароль для Вашего аккаунта\n"\
				"Он будет запрашиваться каждый раз, когда вы заходите на сервер\n\n"\
				"\t{32a44b}Примечания:\n"\
				"\t- Пароль может состоять из русских и латинских символов\n"\
				"\t- Пароль чувствителен к регистру\n"\
				"\t- Длина пароля от 6-ти до 15-ти символов",
				"Далее", ""
			);
		}
		case REGISTER_STATE_EMAIL:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"Email",
				"{FFFFFF}Введите адрес Вашей электронной почты\n"\
				"Используя его, вы сможете восстановить доступ к аккаунту\n"\
				"в случае взлома или если забудете пароль.\n\n"\
				"На email мы вышлем ссылку. В течение 14 дней Вы можете\n"\
				"перейти по ней для подтверждения почты.\n\n"\
				"Убедитесь в правильности ввода и нажмите \"Далее\"",
				"Далее", ""
			);
		}
		case REGISTER_STATE_REFER:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"Ник пригласившего игрока",
				"{FFFFFF}Если Вы узнали о нашем сервере от своего друга\n"\
				"который тут играет, укажите его ник в поле ниже\n\n"\
				"{32a44b}При достижении вами 4-го уровня он получит вознаграждение",
				"Ввести", "Пропустить"
			);
		}
		case REGISTER_STATE_SEX:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
				"Пол",
				"{FFFFFF}Выберите пол вашего персонажа",
				"Мужской", "Женский"
			);
		}
		case REGISTER_STATE_RULES:
		{
			ShowServerRules(playerid, true);
		}
		case REGISTER_STATE_CREATE_ACC:
		{
			if(CreatePlayerAccount(playerid))
			{
				SetPlayerData(playerid, P_ACCOUNT_STATE, ACCOUNT_STATE_REG_SKIN);

				SetSpawnInfo(playerid, 0, 0, 332.2033, -174.1066, 999.6743, 1.0, 0, 0, 0, 0, 0, 0);
				SpawnPlayer(playerid);

				SendClientMessage(playerid, 0xFFFFFFFF, "Регистрация завершена!");
				SendClientMessage(playerid, 0xffff00FF, "[Подсказка] {FFFFFF}У Вас не подключена защита Google Authenticator");
				SendClientMessage(playerid, 0xffff00FF, "[Подсказка] {FFFFFF}Рекомендуем подключить данный вид защиты. /mm > Безопасность > Google Authenticator");

			}
			else
			{
				SendClientMessage(playerid, 0xCECECEFF, "Ошибка создания аккаунта, перезайдите и повторите попытку");
				Kick:(playerid);
			}
		}
		default:
			return 1;
	}

	SetPlayerData(playerid, P_ACCOUNT_STEP_STATE, step);
	return 1;
}
stock Obychenie(playerid)
{
	switch(g_player[playerid][P_OBYCH])
	{
	    case 0: format(d_string,sizeof(d_string),"{FFFFFF}Хотите пройти обучение?");
	    case 1: format(d_string, sizeof(d_string),"{FFFFFF}Мы рады приветствовать Вас на {FFFF00}SAMP Mobile{FFFFFF}.\n\
				Основные команды, которые вам понадобятся во время игры:\n\
				{FF8040}/mn{FFFFFF} - меню игрока\n\
				{FF8040}/donate{FFFFFF} - донат меню\n\
				{FF8040}/gps{FFFFFF} - путеводитель по основным местам\n\
				{FF8040}/call{FFFFFF} - позвонить в службы такси/полцию/механикам/скорую\n\
				Список всех доступных команд, вы можете найти в {FF8040}/mn{FFFFFF} - Команды сервера");
	    case 2:
	    {
	        format(d_string,sizeof(d_string),"{FFFFFF}Это мэрия{FFFFFF}, главное место на нашем сервере.\n\
			Тут вы сможете посмотреть список работ, если ваш уровень больше первого.\n\
			Также приобрести лицензию на бизнес, на оружию, создать семью и многое другое.\n\
			Найти ее можно, введя {FF8040}/gps - Государственные организации - Мэрия.{FFFFFF}");
		}
	    case 3:
		{
		    format(d_string,sizeof(d_string),"{FFFFFF}Это {FF8040}центр лицензирования{FFFFFF}. Тут вы сможете получить водительское удостоверение и права всех категорий\n\
			На нашем сервере существуют такие категории прав: {FF8040}A {FFFFFF}- мототранспорт | {FF8040}Б {FFFFFF}- {FF8040}автомобили{FFFFFF} | {FF8040}С {FFFFFF}- {FF8040}грузовики{FFFFFF} | {FF8040}Д {FFFFFF}- {FF8040}автобусы{FFFFFF}\n\
			Также именно там, Вы сможете получить права на управление водным и летным транспортом.\n\
			Найти ее можно будет набрав {FF8040}/gps - Общественные места - Центр лицензирования (LS).");
		}
	    case 4: format(d_string,sizeof(d_string),"{FFFFFF}Заработать свои первые средства, вы можете на одной из предоставленных {FF8040}работ. Наш список работ довольно обширный.\n\
		    Это, например: {FF8040}Шахта{FFFFFF}, {FF8040}лесопилка{FFFFFF}, {FF8040}работа грузчика{FFFFFF}, {FF8040}рабочий на заводе{FFFFFF}, {FF8040}развозчик пиццы{FFFFFF} и другие.\n\
		    Все эти работы, Вы можете найти, набрав {FF8040}/gps - по работе{FFFFFF}.\n\
		    Метка всегда приведет Вас в нужное место.");
	    case 5:
	    {
	        format(d_string,sizeof(d_string),"{FFFFFF}На этом наше обучение окончено. Кликай на далее, чтобы начать играть на {FFFF00}SAMP Mobile{FFFFFF}.\n\
	        \t\tПриятной игры на {FFFF00}SAMP Mobile.");
	    }
	    case 6: return 1;
	}
	Dialog(playerid, DIALOG_NEWBEE,DIALOG_STYLE_MSGBOX,"Обучение",d_string,"Далее","Закрыть");
	return 1;
}
stock ShowServerRules(playerid, bool: reg = false)
{
	Dialog
	(
		playerid, reg ? DIALOG_REGISTER : DIALOG_PLAYER_STATS, DIALOG_STYLE_MSGBOX,
		"Правила сервера",
		"1. Основное\n"\
		"{FFFFFF}- Запрещено использовать любые читы, трейнеры, моды или CLEO скрипты\n"\
		"- Запрещен DeathMatch (DM) - убийство и нанесение вреда игрокам без причины\n"\
		"- Запрещено убивать игроков на спавне (на месте, где они появляются в игре)\n"\
		"- Запрещены убийства путем наезда на него или стрельбы из авто\n"\
		"- Запрещено уходить на паузу в целях спасения от нападающих\n"\
		"- Запрещено использование возможностей сервера для создания неудобств другим игрокам\n\n"\
		"2. Процесс общения\n"\
		"{FFFFFF}- Запрещен мат, оскорбление других игроков\n"\
		"- Запрещены угрозы другим игрокам (не относящиеся к игровому процессу)\n"\
		"- Запрещено писать транслитом (например \"ya zawel na server\")\n"\
		"- Запрещена любая реклама сторонних ресурсов\n"\
		"- Запрещено флудить (часто повторять одинаковые фразы, или фразы без смысловой нагрузки)\n\n"\
		"3. Администрация\n"\
		"{FFFFFF}- Необходимо сообщать администрации сервера о любых случаях нарушения данных правил\n"\
		"- Администрация самостоятельно выбирает штрафные санкции для каждого конкретного случая\n"\
		"- Санкции могут применяться сразу после нарушения или через время (например, впоследствии поступления жалобы)\n"\
		"- Если штрафная санкция была применена к вам ошибочно, свяжитесь с администрацией",
		"Принять", "Отмена"
	);
}

stock ShowServerTutorial(playerid, step)
{
    AddPlayerData(playerid, P_ACCOUNT_STEP_STATE,-,1);
	switch(step)
	{
	    case 1:
	    {
			format
			(
				d_string, sizeof(d_string),
				"1. Основное\n\
				{FFFFFF}- Запрещено использовать любые читы, трейнеры, моды или CLEO скрипты\n\
				- Запрещен DeathMatch (DM) - убийство и нанесение вреда игрокам без причины\n\
				- Запрещено убивать игроков на спавне (на месте, где они появляются в игре)\n\
				- Запрещены убийства путем наезда на него или стрельбы из авто\n\
				- Запрещено уходить на паузу в целях спасения от нападающих\n\
				- Запрещено использование возможностей сервера для создания неудобств другим игрокам\n\n\
				2. Процесс общения\n\
				{FFFFFF}- Запрещен мат, оскорбление других игроков\n\
				- Запрещены угрозы другим игрокам (не относящиеся к игровому процессу)\n\
				- Запрещено писать транслитом (например \"ya zawel na server\")\n\
				- Запрещена любая реклама сторонних ресурсов\n\
				- Запрещено флудить (часто повторять одинаковые фразы, или фразы без смысловой нагрузки)\n\n\
				3. Администрация\n\
				{FFFFFF}- Необходимо сообщать администрации сервера о любых случаях нарушения данных правил\n\
				- Администрация самостоятельно выбирает штрафные санкции для каждого конкретного случая\n\
				- Санкции могут применяться сразу после нарушения или через время (например, впоследствии поступления жалобы)\n\
				- Если штрафная санкция была применена к вам ошибочно, свяжитесь с администрацией");
		}
	    case 2:
		{
				format(d_string, sizeof(d_string),"{FFFFFF}Мы рады приветствовать Вас на {FFFF00}SAMP Mobile{FFFFFF}.\n\
				Основные команды, которые вам понадобятся во время игры:\n\
				{FF8040}/mn{FFFFFF} - меню игрока\n\
				{FF8040}/donate{FFFFFF} - донат меню\n\
				{FF8040}/gps{FFFFFF} - путеводитель по основным местам\n\
				{FF8040}/call{FFFFFF} - позвонить в службы такси/полцию/механикам/скорую\n\
				Список всех доступных команд, вы можете найти в {FF8040}/mn{FFFFFF} - Команды сервера");
		}
	    case 3:
	    {
	        format(d_string,sizeof(d_string),"{FFFFFF}Это мэрия{FFFFFF}, главное место на нашем сервере.\n\
			Тут вы сможете посмотреть список работ, если ваш уровень больше первого.\n\
			Также приобрести лицензию на бизнес, на оружию, создать семью и многое другое.\n\
			Найти ее можно, введя {FF8040}/gps - Государственные организации - Мэрия.{FFFFFF}");
		}
	    case 4:
		{
		    format(d_string,sizeof(d_string),"{FFFFFF}Это {FF8040}центр лицензирования{FFFFFF}. Тут вы сможете получить водительское удостоверение и права всех категорий\n\
			На нашем сервере существуют такие категории прав: {FF8040}A {FFFFFF}- мототранспорт | {FF8040}Б {FFFFFF}- {FF8040}автомобили{FFFFFF} | {FF8040}С {FFFFFF}- {FF8040}грузовики{FFFFFF} | {FF8040}Д {FFFFFF}- {FF8040}автобусы{FFFFFF}\n\
			Также именно там, Вы сможете получить права на управление водным и летным транспортом.\n\
			Найти ее можно будет набрав {FF8040}/gps - Общественные места - Центр лицензирования (LS).");
		}
	    case 5:
		{
			format(d_string,sizeof(d_string),"{FFFFFF}Заработать свои первые средства, вы можете на одной из предоставленных {FF8040}работ. Наш список работ довольно обширный.\n\
		    Это, например: {FF8040}Шахта{FFFFFF}, {FF8040}лесопилка{FFFFFF}, {FF8040}работа грузчика{FFFFFF}, {FF8040}рабочий на заводе{FFFFFF}, {FF8040}развозчик пиццы{FFFFFF} и другие.\n\
		    Все эти работы, Вы можете найти, набрав {FF8040}/gps - по работе{FFFFFF}.\n\
		    Метка всегда приведет Вас в нужное место.");
		}
	    case 6:
	    {
	        format(d_string,sizeof(d_string),"{FFFFFF}На этом наше обучение окончено. Кликай на далее, чтобы начать играть на {FFFF00}SAMP Mobile{FFFFFF}.\n\
	        \t\tПриятной игры на {FFFF00}SAMP Mobile.");
		}
		default:AddPlayerData(playerid, P_ACCOUNT_STEP_STATE,+,2);
	}
	Dialog(playerid, DIALOG_NEWBEE,DIALOG_STYLE_MSGBOX,"Обучение",d_string,"Далее","");
	AddPlayerData(playerid,P_STATE_REG_INFO,+,1);
}

stock GetPlayerHouseName(playerid)
{
	new name[32];
	new houseid = GetPlayerHouse(playerid);

	if(houseid != -1)
	{
		switch(GetPlayerData(playerid, P_HOUSE_TYPE))
		{
			case HOUSE_TYPE_HOME:
			{
				format(name, sizeof name, "%s (№%d)", GetHouseData(houseid, H_NAME), houseid);
			}
			case HOUSE_TYPE_ROOM:
			{
				format(name, sizeof name, "В гостях (дом №%d)", houseid);
			}
			case HOUSE_TYPE_HOTEL:
			{
				format(name, sizeof name, "Гостиница (№%d на %d этаже)", (GetPlayerData(playerid, P_HOUSE_ROOM) % 12) + 1, (GetPlayerData(playerid, P_HOUSE_ROOM) / 12) + 1);
			}
		}
	}
	else name = "Бездомный";

	return name;
}

stock GetPlayerBizName(playerid)
{
	new name[32];
	new businessid = GetPlayerBusiness(playerid);

	if(businessid != -1)
	{
		format(name, sizeof name, "%s (№%d)", GetBusinessData(businessid, B_NAME),  businessid);
	}
	else name = "Нет";

	return name;
}

stock GetPlayerJobAndRankName(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	new rang = GetPlayerJob(playerid);
	new fmt_rank[32];

	if(TEAM_GOVERNMENT <= team <= TEAM_GANG_AZTECAS)
	{
		if(!(1 <= rang <= 10))
			rang = 1;

		format(fmt_rank, sizeof fmt_rank, rank_names[team - 1][rang - 1]);
	}
	else
	{
	    format(fmt_rank, sizeof fmt_rank, GetPlayerJobName(playerid));
	}

	return fmt_rank;
}

stock GetPlayerTeamName(playerid)
{
	new team_name_id = GetPlayerTeamEx(playerid);
	switch(team_name_id)
	{
		case TEAM_GOVERNMENT..TEAM_GANG_AZTECAS:
			return team_names[team_name_id];

		default:
			return team_names[0];
	}
	return team_names[0];
}

stock GetPlayerTeamStats(playerid)
{
	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Организация:\t\t\t%s\n", GetPlayerTeamName(playerid));

	return fmt_text;
}

stock GetPlayerGameStatus(playerid)
{
	new status[16];

	switch(GetPlayerLevel(playerid))
	{
	    case 0: status = "Ошибка";
	    case 1: status = "Без статуса";
	    case 2..5: status = "Новичок";
	    case 6..9: status = "Развивающийся";
	    case 10..14: status = "Освоившийся";
	    case 15..19: status = "Опытный игрок";
	    case 20..29: status = "Активный игрок";
	    default: status = "Легендарный";
	}

	if(GetPlayerTeamEx(playerid) && (GetPlayerJob(playerid) == 10)) status = "Лидер";
	if(GetPlayerAdminEx(playerid) != 0) status = "Администратор";

	return status;
}

stock ShowPlayerStats(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;

	new fmt_str[1024],
	    rank_value[3] = "—";

    if(1 <= GetPlayerTeamEx(playerid) <= 10)
	{
		if(1 <= GetPlayerJob(playerid) <= 10)
			valstr(rank_value, GetPlayerJob(playerid));
		else
			rank_value = "1";
	}

	format
	(
		fmt_str, sizeof fmt_str,
		"{FFFFFF}Имя:\t\t\t\t{ffff00}%s\n"\
		"{FFFFFF}Уровень:\t\t\t%d\n"\
		"Очки опыта:\t\t\t%d из %d\n"\
		"Номер телефона:\t\t%d\n"\
		"На счету телефона:\t\t$%d\n"\
		"Законопослушность:\t\t%d\n"\
		"Уровень розыска:\t\t%d\n"\
		"Уровень улучшений:\t\t%d\n"\
		"Сила:\t\t\t\t%d\n"\
		"Наркотики:\t\t\t%d\n"\
		"Патроны:\t\t\t%d\n"\
		"Металл:\t\t\t%d\n"\
		"Пол:\t\t\t\t%s\n"\
		"%s:\t\t\t%s\n\n"\
		"%s"\
		"Работа / должность:\t\t%s\n"\
		"Ранг:\t\t\t\t%s\n\n"\
		"Проживание:\t\t\t%s\n"\
		"Бизнес:\t\t\t%s\n"\
		"Игровой статус:\t\t%s",
		GetPlayerNameEx(playerid),
		GetPlayerLevel(playerid),
		GetPlayerExp(playerid),
		GetExpToNextLevel(playerid),
		GetPlayerPhone(playerid),
		GetPlayerData(playerid, P_PHONE_BALANCE),
		GetPlayerData(playerid, P_LAW_ABIDING),
		GetPlayerSuspect(playerid),
		GetPlayerData(playerid, P_IMPROVEMENTS),
		GetPlayerData(playerid, P_POWER),
		GetPlayerData(playerid, P_DRUGS),
		GetPlayerData(playerid, P_AMMO),
		GetPlayerData(playerid, P_METALL),
		GetPlayerSexName(playerid),
		GetPlayerSex(playerid) ? ("Замужем за") : ("Женат на"),
		GetPlayerData(playerid, P_WIFE_NAME),
		GetPlayerTeamStats(playerid), 		// P_TEAM | P_SUBDIVISON
		GetPlayerJobAndRankName(playerid),
		rank_value, 			// P_JOB
		GetPlayerHouseName(playerid),
		GetPlayerBizName(playerid),
		GetPlayerGameStatus(playerid)
	);
	return Dialog(to_player, DIALOG_PLAYER_STATS, DIALOG_STYLE_MSGBOX, "Статистика игрока", fmt_str, "Назад", "Закрыть");
}

stock ShowPlayerCMDSDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_LIST,
		"Список команд",
		"1. Общение с игроками\n"\
		"2. Команды для дома\n"\
		"3. Команды бизнесов\n"\
		"4. Команды работ\n"\
		"5. Команды банды\n"\
		"6. Команды правительства\n"\
		"7. Команды полиции\n"\
		"8. Команды медиков\n"\
		"9. Команды СМИ\n"\
		"10. Команды лидера",
		"Выбрать", "Назад"
	);

	// убрал ВМФ на время
	return 1;
}



stock ShowPlayerSettings(playerid)
{

	new s_info[316];
	format
	(
		s_info, sizeof s_info,
		"{ffff00}1. {FFFFFF}Чат организации\t%s\n"\
		"{ffff00}2. {FFFFFF}Ники над игроками\t%s\n"\
		"{ffff00}3. {FFFFFF}Ввод ника при авторизации\t%s\n"\
		"{ffff00}4. {FFFFFF}Сохранить настройки",
		GetPlayerSettingData(playerid, S_TEAM_CHAT) 	? ("{32a44b}Включен")  : ("{FF3333}Отключен"),
		GetPlayerSettingData(playerid, S_PLAYERS_NICK) 	? ("{32a44b}Включены") : ("{FF3333}Отключены"),
		GetPlayerSettingData(playerid, S_CHANGE_NAME) 	? ("{32a44b}Включены") : ("{FF3333}Отключены")
	);
	return Dialog(playerid, DIALOG_PLAYER_SETTINGS, DIALOG_STYLE_LIST, "Личные настройки", s_info, "Вкл|Выкл", "Назад");
}

stock ShowPlayerSecuritySettings(playerid)
{
	Dialog
	(
		playerid, DIALOG_PLAYER_SECURITY_SETTINGS, DIALOG_STYLE_LIST,
		"Настройки безопасности",
		"{ffff00}1. {FFFFFF}Информация о настройках\n"\
		"{ffff00}2. {FFFFFF}Мобильный телефон\n"\
		"{ffff00}3. {FFFFFF}'Случайный' PIN-код\n"\
		"{ffff00}4. {FFFFFF}Google Authenticator\n"\
		"{ffff00}5. {FFFFFF}Изменить пароль\n"\
		"{ffff00}6. {FFFFFF}Изменить 'случайный' PIN-код\n"\
		"{ffff00}7. {FFFFFF}Статус безопасности\n"\
		"{ffff00}8. {FFFFFF}Подтвердить Email",
		"Выбрать", "Назад"
	);
}

stock ShowCommandDialog(playerid, command_id)
{
	switch(command_id)
	{
		case 1:
		{
			Dialog
			(
				playerid, DIALOG_PLAYER_COMMAND, DIALOG_STYLE_MSGBOX,
				"Команды общения",
				"{00CC33}/c(all) [номер]{FFFFFF} - позвонить\n"\
				"{00CC33}/sms [номер] [текст]{FFFFFF}  - отправить сообщение\n"\
				"{00CC33}/p{FFFFFF} - принять вызов\n"\
				"{00CC33}/h{FFFFFF} - завершить вызов\n"\
				"{00CC33}/f(n) [текст]{FFFFFF} - рация семьи\n"\
				"{00CC33}/r(n) [текст]{FFFFFF} - рация организации\n"\
				"{00CC33}/me [текст]{FFFFFF} - выполнить действие\n"\
				"{00CC33}/do [текст]{FFFFFF} - выполнить действие от 3-го лица\n"\
				"{00CC33}/try [текст]{FFFFFF} - выполнить действие (Удачно/не удачно)\n"\
				"{00CC33}/s [текст]{FFFFFF} - крикнуть\n"\
				"{00CC33}/n [текст]{FFFFFF} - OOC чат\n"\
				"{00CC33}/w [текст]{FFFFFF} - прошептать\n"\
				"{00CC33}/ad [текст]{FFFFFF} - подать объявление\n"\
				"{00CC33}/u [текст]{FFFFFF} - радио-эфир (для гостя)\n"\
				"{00CC33}/gnews [текст]{FFFFFF} - гос. волна\n",
				"Назад", "Закрыть"
			);
		}
		case 2:
		{
			Dialog
			(
				playerid, DIALOG_PLAYER_COMMAND, DIALOG_STYLE_MSGBOX,
				"Команды дома",
				"{00CCFF}/home{FFFFFF} - панель управление\n"\
				"{00CCFF}/sellhome{FFFFFF} - продать дом гос-ву\n"\
				"{00CCFF}/sellmyhome [id игрока] [цена]{FFFFFF} - продать дом игроку\n"\
				"{00CCFF}/exit{FFFFFF} - выйти из дома\n"\
				"{00CCFF}/makestore{FFFFFF} - перенести шкаф\n"\
				"{00CCFF}/use{FFFFFF} - использовать шкаф\n"\
				"{00CCFF}/live [id игрока]{FFFFFF} - прописать игрока\n"\
				"{00CCFF}/liveout [id игрока]{FFFFFF} - выгнать игрока\n"\
				"{00CCFF}/homelock{FFFFFF} - закрыть/открыть дом",
				"Назад", "Закрыть"
			);
		}
		case 3:
		{
			Dialog
			(
				playerid, DIALOG_PLAYER_COMMAND, DIALOG_STYLE_MSGBOX,
				"Команды бизнеса",
				"{33CC66}/business{FFFFFF} - панель управление\n"\
				"{33CC66}/sellbiz{FFFFFF} - продать бизнес гос-ву\n"\
				"{33CC66}/buybiz{FFFFFF} - купить бизнес\n"\
				"{33CC66}/sellmybiz [id игрока] [цена]{FFFFFF} - продать бизнес игроку\n"\
				"{33CC66}/fuelst{FFFFFF} - панель управление\n"\
				"{33CC66}/sellfuelst{FFFFFF} - продать бизнес гос-ву\n"\
				"{33CC66}/buyfuelst{FFFFFF} - купить бизнес\n"\
				"{33CC66}/sellmyfuelst [id игрока] [цена]{FFFFFF} - продать бизнес игроку",
				"Назад", "Закрыть"
			);
		}
		case 4:
		{
			Dialog
			(
				playerid, DIALOG_PLAYER_COMMAND, DIALOG_STYLE_MSGBOX,
				"Команды работ",
				"{6699CC}/getfuel{FFFFFF} - заказать топливо (механик)\n"\
				"{6699CC}/fill [id игрока] [кол-во] [цена]{FFFFFF} - продать топливо игроку\n"\
				"{6699CC}/repair [id игрока]{FFFFFF} - починить транспорт\n"\
				"{6699CC}/job{FFFFFF} - панель дальнобойщика",
				"Назад", "Закрыть"
			);
		}
 		case 5:
		{
			Dialog
			(
				playerid, DIALOG_PLAYER_COMMAND, DIALOG_STYLE_MSGBOX,
				"Команды банды",
				"{CCCC33}/makegun{FFFFFF} - создать оружие (PC)\n"\
				"{CCCC33}/selldrugs{FFFFFF} - продать наркотики\n"\
				"{CCCC33}/capture{FFFFFF} - начать захват\n"\
				"{CCCC33}/(un)tie{FFFFFF} - связать / развязать\n"\
				"{CCCC33}/close{FFFFFF} - закрыть склад",
				"Назад", "Закрыть"
			);
		}
  		case 6:
		{
			Dialog
			(
				playerid, DIALOG_PLAYER_COMMAND, DIALOG_STYLE_MSGBOX,
				"Команды правительства",
				"{99CC33}/smenu{FFFFFF} - меню советника\n"\
				"{99CC33}/givelic{FFFFFF} - выдать лицензию\n"\
				"{99CC33}/free{FFFFFF} - выпустить преступника",
				"Назад", "Закрыть"
			);
		}
 		case 7:
		{
			Dialog
			(
				playerid, DIALOG_PLAYER_COMMAND, DIALOG_STYLE_MSGBOX,
				"Команды полиции",
				"{0066FF}/search{FFFFFF} - произвести обыск\n"\
				"{0066FF}/(un)cuff{FFFFFF} - надеть / снять наручники\n"\
				"{0066FF}/su{FFFFFF} - выдать розыск\n"\
				"{0066FF}/clear{FFFFFF} - очистить розыск\n"\
				"{0066FF}/arrest{FFFFFF} - посадить в кпз\n"\
				"{0066FF}/m [текст]{FFFFFF} - мегафон\n"\
				"{0066FF}/ticket{FFFFFF} - выдать штраф\n"\
				"{0066FF}/takelic{FFFFFF} - отобрать лицензии\n"\
				"{0066FF}/wanted{FFFFFF} - список подозреваемых\n"\
				"{0066FF}/follow{FFFFFF} - вести преступника за собой\n"\
				"{0066FF}/putpl{FFFFFF} - затолкать в транспорт",
				"Назад", "Закрыть"
			);
		}
  		case 8:
		{
			Dialog
			(
				playerid, DIALOG_PLAYER_COMMAND, DIALOG_STYLE_MSGBOX,
				"Команды медиков",
				"{FF66FF}/medhelp [id игрока]{FFFFFF} - предложить лечение в больнице\n"\
				"{FF66FF}/heal [id игрока]{FFFFFF} - предложить лечение на выезде\n"\
				"{FF66FF}/out [id игрока]{FFFFFF} - выписать игрока из больницы\n"\
				"{FF66FF}/changesex [id игрока]{FFFFFF} - сменить пол игроку",
				"Назад", "Закрыть"
			);
		}
  		case 9:
		{
			Dialog
			(
				playerid, DIALOG_PLAYER_COMMAND, DIALOG_STYLE_MSGBOX,
				"Команды СМИ",
				"{FFCC33}/edit{FFFFFF} - редактировать объявление\n"\
				"{FFCC33}/t{FFFFFF} - радио-эфир (СМИ г.Los-Santos)\n"\
				"{FFCC33}/givemic{FFFFFF} - дать доступ к эфиру\n"\
			 	"{FFCC33}/board{FFFFFF} - создать рекламный щит ( доступно с ПК )",
				"Назад", "Закрыть"
			);
		}
   		case 10:
		{
			Dialog
			(
				playerid, DIALOG_PLAYER_COMMAND, DIALOG_STYLE_MSGBOX,
				"Команды лидеров",
				"{ABCDEF}/invite{FFFFFF} - принять в организацию\n"\
				"{ABCDEF}/uninvite{FFFFFF} - уволить игрока\n"\
				"{ABCDEF}/rang{FFFFFF} - выдать ранг игроку\n"\
				"{ABCDEF}/changeskin{FFFFFF} - сменить скин\n"\
				"{ABCDEF}/showall{FFFFFF} - список всех сотрудников\n"\
				"{ABCDEF}/uninviteoff{FFFFFF} - уволить в оффлайне\n"\
				"{ABCDEF}/addjobs{FFFFFF} - создать вакансию\n"\
				"{ABCDEF}/deljobs{FFFFFF} - удалить вакансию.\n"\
				"{ABCDEF}/goska{FFFFFF} - государственная волна",
				"Назад", "Закрыть"
			);
		}
		default: SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка, обратитесь в репорт");
	}
}

stock ShowPlayerReportDialog(playerid)
{
	new count;

	foreach(new idx : Player)
	{
	    if(!GetPlayerAdminEx(idx)) continue;

		count++;
	}
	if(!count)
	{
		SendClientMessage(playerid, 0xffff00FF, "Нет администраторов в сети");
	}
	else
	{
	    if(IsPlayerMuted(playerid) > 0)
		{
			SendClientMessage(playerid, 0xCECECEFF, "Доступ в репорт заблокирован. Время до разблокировки: {66CC33}/time");
		}
		else
		{
		    Dialog
			(
				playerid, DIALOG_REPORT, DIALOG_STYLE_INPUT,
				"Связь с администрацией",
				"{FFFFFF}Введите свое сообщение для администрации сервера\n"\
				"Оно должно быть кратким и ясным\n\n"\
				"{32a44b}Если вы хотите подать жалобу на игрока,\n"\
				"обязательно укажите его ID и причину жалобы",
				"Отправить", "Назад"
			);
		}
	}
}

stock ShowPlayerChangeNameDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_CHANGE_NAME, DIALOG_STYLE_INPUT,
		"Изменение имени",
		"{FFFFFF}Вы можете изменить имя своего персонажа, если оно не соответствует RP правилам\n"\
		"Во всех остальных случаях смена имени осуществляется в {6699FF}/menu > Дополнительно.\n\n"\
		"{FFFFFF}RP ник имеет формат Имя_Фамилия.\n"\
		"Например: Andrey_Ivanov, Nikolas_Ryan, Kate_Valente и т. п.\n\n"\
		"Введите новое имя в поле ниже. Допустимы только латинские символы:",
		"Изменить", "Закрыть"
	);
}

stock ShowPlayerImprovementsDialog(playerid)
{
	new fmt_str[67 + 1];
	new dest[((sizeof(fmt_str)-1) * (sizeof(g_player_improvements))) + 10 + 1];

	new str_numeric[14 + 1];
	new my_i_level = GetPlayerData(playerid, P_IMPROVEMENTS);

	for(new idx = 0; idx < sizeof g_player_improvements; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\t\t", idx + 1, GetPlayerImprovementInfo(idx, I_NAME));
		if(idx == 2)
			strcat(fmt_str, "\t");

		if(my_i_level > idx)
		{
			strins(fmt_str, "", 0);
			strcat(fmt_str, "Активно\n");
			strcat(dest, fmt_str);

			continue;
		}
		else if(my_i_level < idx)
		{
			strins(fmt_str, "{FF3333}", 0);
		}
		else
		{
			strcat(fmt_str, "");
		}
		strcat(dest, fmt_str);
		valfmt(str_numeric, GetPlayerImprovementInfo(idx, I_PRICE));

		format(fmt_str, sizeof fmt_str, "требуется %d уровень и %s$\n", GetPlayerImprovementInfo(idx, I_LEVEL), str_numeric);
		strcat(dest, fmt_str);
	}
	strcat(dest, "Информация");

	return Dialog(playerid, DIALOG_PLAYER_IMPROVEMENTS, DIALOG_STYLE_LIST, "Улучшения", dest, "Выбрать", "Назад");
}

stock SendMessageToAdmins(message[], color, a_level = 1)
{
	if(a_level < 1)
		a_level = 1;

	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerAdminEx(playerid) < a_level) continue;

		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}
stock SetJobCheckpoint(job, Float:x, Float:y, Float:z, Float:size)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerJob(i) != job) continue;

		SetPlayerCheckpoint(i, Float:x, Float:y, Float:z, Float:size);
	}
	return 1;
}
stock SetTeamCheckpoint(team, Float:x, Float:y, Float:z, Float:size)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerTeamEx(i) != team) continue;

		SetPlayerCheckpoint(i, Float:x, Float:y, Float:z, Float:size);
	}
	return 1;
}
stock SendMessageToTeam(team, message[], color = -1, playerid = -1)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerSettingData(i, S_TEAM_CHAT) == 0) continue;
		else if(GetPlayerTeamEx(i) != team) continue;
		else if(i == playerid) continue;

		SendClientMessage(i, color, message);
	}
	return 1;
}

stock SendMessageToPoliceTeam(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_LSPD, message, color, playerid);
	SendMessageToTeam(TEAM_FBI, message, color, playerid);

	return 1;
}

stock SendMessageToGang(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_GANG_GROVE, message, color, playerid);
	SendMessageToTeam(TEAM_GANG_VAGOS, message, color, playerid);
	SendMessageToTeam(TEAM_GANG_BALLAS, message, color, playerid);
	SendMessageToTeam(TEAM_GANG_AZTECAS, message, color, playerid);

	return 1;
}

stock SendMessageToJob(to_job, message[], color = -1, playerid = -1)
{

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerTeamEx(i)) continue;
		else if(GetPlayerJob(i) != to_job) continue;
		else if(playerid == i) continue;

		SendClientMessage(i, color, message);
	}
	return 1;
}

stock HidePlayerDialog(playerid)
{
	return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, "NULL", "NULL", "NULL", "NULL");
}

stock Shuffle(array[], size = sizeof array)
{
	new
		index,
		rand,
		buffer;

	for(index = 0; index < size; index ++)
	{
		rand = random(size);
		buffer = array[index];

		array[index] = array[rand];
		array[rand] = buffer;
	}
}

stock ShowPlayerPinCodePTD(playerid, s_state)
{
	if(GetPlayerPinCodeState(playerid) != PIN_CODE_STATE_NONE) return ;
	pin_code_input[playerid][0] = 0;

	switch(s_state)
	{
		case PIN_CODE_STATE_SET:
		{
			Dialog(playerid,DIALOG_TYPE_ADD_PIN,DIALOG_STYLE_INPUT,
			"Настройки безопасности",
			"Придумайте свой PIN-код и наберите его\n\
			В окошко ниже , не сообщайте этот PIN-код никому!",
			"Далее","Отмена");
		}
		case PIN_CODE_STATE_CHECK:
			SendClientMessage(playerid, 0xFFFF00FF, "Наберите Ваш текущий PIN-код");

		case PIN_CODE_STATE_CHANGE:
			SendClientMessage(playerid, 0xFFFF00FF, "Наберите новый PIN-код");

		case PIN_CODE_STATE_LOGIN_CHECK:
			SendClientMessage(playerid, 0xFFFFFFFF, "Система безопасности запрашивает ввод Вашего случайного PIN-кода");

		default:
			return ;

	}

	SetPlayerPinCodeState(playerid, s_state);
}

stock ShowCurrentTime(playerid)
{
	new
		hour, minute,
		year, month, day;

	gettime(hour, minute);
	getdate(year, month, day);

	SetPlayerChatBubble(playerid, "звонит в службу точного времени...", 0xDD90FFFF, 25.0, 7000);
	if(!IsPlayerInAnyVehicle(playerid))
		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, false, 0, 0, 0, 0, 1);

	new fmt_str[350];

	format(fmt_str, sizeof fmt_str, "~y~%d:%02d~n~~b~~h~%02d.%02d.%d", hour, minute, day, month, year);
	GameTextForPlayer(playerid, fmt_str, 3000, 1);

	format
	(
		fmt_str, sizeof fmt_str,
		"{FFFFFF}Здравствуйте!\n"\
		"Вы позвонили в службу точного времени\n\n"\
		"Сегодняшняя дата:\t\t{32a44b}%d %s %d г.\n"\
		"{FFFFFF}День недели:\t\t\t{32a44b}%s\n"\
		"{FFFFFF}Текущее время:\t\t{1E90FF}%d:%02d\n\n"\
		"{FFFFFF}Время в игре за час:\t\t{FF7000}%d мин\n"\
		"{FFFFFF}Время в игре сегодня:\t{FF7000}%d ч %d мин\n"\
		"{FFFFFF}Время в игре вчера:\t\t{FF7000}%d ч %d мин",
		day,
		GetMonthName(month),
		year,
		GetDayName(GetDayOfWeek(year, month, day)),
		hour,
		minute,
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_MINUTES)
	);
	SendClientMessage(playerid, 0x32a44bFF, "Вы позвонили в службу точного времени");

	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Точное время", fmt_str, "Закрыть", "");
}

stock ShowTime(playerid)
{
	new
		hour, minute,
		year, month, day;

	gettime(hour, minute);
	getdate(year, month, day);

	if(!IsPlayerInAnyVehicle(playerid))
		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, false, 0, 0, 0, 0, 1);

	new fmt_str[350];

	format(fmt_str, sizeof fmt_str, "~y~%d:%02d~n~~b~~h~%02d.%02d.%d", hour, minute, day, month, year);
	GameTextForPlayer(playerid, fmt_str, 3000, 1);

	return 1;
}

stock GetDayOfWeek(year, month, day)
{
    new a = (14 - month) / 12;
    new y = year + 4800 - a;
	new m = month + 12 * a - 3;
	new c_date = day + (153 * m + 2) / 5 + 365 * y + y / 4 - y / 100 + y / 400 - 32045;
	new day_of_week = c_date % 7 + 1;

    return day_of_week;
}

stock UpdateCharity()
{
	if(cache_is_valid(charity_cache_data))
	{
		cache_delete(charity_cache_data);
	}
	new Cache: result;

	result = mysql_query(mysql, "SELECT (SELECT a.name FROM accounts a WHERE a.id = c.uid) as name, SUM(c.money) as total FROM charity c GROUP BY c.uid ORDER BY total DESC LIMIT 25", true);
	charity_cache_data = result;
}

stock Dialog(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	if(GetPVarInt(playerid, "buycar_dialog"))
	{
	    TogglePlayerControllable(playerid, true);
		RemovePlayerFromVehicle(playerid);

		DeletePVar(playerid, "buycar_dialog");
	}

	SetPlayerData(playerid, P_LAST_DIALOG, dialogid);

	new fix_style = style;

	if(!GetPlayerData(playerid, P_USER_PC) && style == DIALOG_STYLE_LIST)
	{
	    fix_style = DIALOG_STYLE_INPUT;

	    SetPVarInt(playerid, "fix_style", 1);
	}

	return ShowPlayerDialog(playerid, dialogid, fix_style, caption, info, button1, button2);
}

stock abs(value)
{
	return value = -value;
}

stock IsNumeric(dest[], pos=0)
{
	new is_numeric = true;
	do
	{
		switch(dest[pos])
		{
			case '0'..'9': continue;
			default:
			{
				is_numeric = false;
				break;
			}
		}
	}
	while(dest[++pos]);

	return is_numeric;
}

stock valfmt(dest[], value, size = sizeof dest)
{
	new buffer[15 + 1];
	valstr(buffer, value);

	new pos = strlen(buffer);
	while((pos -= 3) > 0)
	{
		strins(buffer, ".", pos);
	}
	format(dest, size, "%s", buffer);
}

stock GetSubnet(dest[], ip[], size = sizeof dest)
{
	new pos, dots;
	do
	{
		if(ip[pos] == '.')
		{
			if(++dots == 2)
			{
				ip[pos] = 0;
				break;
			}
		}
	}
	while(ip[++pos]);

	format(dest, size, "%s", ip);
}

stock GetFamilyChatID(team)
{
	if(TEAM_GOVERNMENT <= team <= TEAM_RADIO)
	{
		return 1;
	}
	else if(TEAM_LSPD <= team <= TEAM_FBI)
	{
		return 2;
	}
	else if(TEAM_GANG_GROVE <= team <= TEAM_GANG_AZTECAS)
	{
		return team;
	}
	return 0;
}

stock GivePlayerMoneyEx(playerid, money, description[]="None", bool:save=true, bool:game_text=true)
{
	if(money < 0 && GetPlayerMoneyEx(playerid) < money) return -1;

	new fmt_str[185];
	AddPlayerData(playerid, P_MONEY, +, money);
	GivePlayerMoney(playerid, money);

	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), money, description);
	mysql_query(mysql, fmt_str, false);

	if(save) save = false;

	format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid), GetPlayerAccountID(playerid));
	mysql_query(mysql, fmt_str, false);

	if(game_text)
	{
		format(fmt_str, sizeof fmt_str, "%s$%d", money < 0 ? ("~r~") : ("~g~+"), money);
		GameTextForPlayer(playerid, fmt_str, 4000, 1);
	}

	return 1;
}

stock GivePlayerDonate(playerid, donate, description[]="None", bool:save=true)
{
	new fmt_str[185];
	AddPlayerData(playerid, P_DONATE_CURRENT, +, donate);
	if(donate > 0) AddPlayerData(playerid, P_DONATE_TOTAL, +, donate);

	format(fmt_str, sizeof fmt_str, "INSERT INTO donate_log (uid,uip,time,donate,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), donate, description);
	mysql_query(mysql, fmt_str, false);

	if(save)
	{
		UpdatePlayerDatabaseInt(playerid, "donate", GetPlayerCurrentDonate(playerid));
		UpdatePlayerDatabaseInt(playerid, "donate_total", GetPlayerTotalDonate(playerid));
	}
	return 1;
}

stock BankLog(playerid, money, description[] = "None")
{
	new fmt_str[185];

	format(fmt_str, sizeof fmt_str, "[BANK] %s", description);

	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), money, fmt_str);
	mysql_query(mysql, fmt_str, false);

	return 1;
}

stock SendMessageInLocal(playerid, message[], color, Float: radius = 30.0)
{
	new virtual_world = GetPlayerVirtualWorld(playerid);
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerVirtualWorld(idx) != virtual_world) continue;
		if(!IsPlayerInRangeOfPoint(idx, radius, x, y, z)) continue;

		SendClientMessage(idx, color, message);
	}
	return 1;
}

stock Action(playerid, message[], Float:radius=25.0, bool:bubble=true)
{
	if(bubble)
		SetPlayerChatBubble(playerid, message, 0xDD90FFFF, radius, 7000);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerNameEx(playerid), message);
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, radius);

	return 1;
}

stock EnablePlayerGPS(playerid, Float: x, Float: y, Float: z, message[] = "Место отмечено у Вас на GPS")
{
	SetPlayerGPSInfo(playerid, G_POS_X, x);
	SetPlayerGPSInfo(playerid, G_POS_Y, y);
	SetPlayerGPSInfo(playerid, G_POS_Z, z);

	SetPlayerCheckpoint(playerid, x, y, z, 3.0);

//	SetPlayerMapIcon(playerid, 98, x, y, z, markertype, 0, MAPICON_GLOBAL);

	if(strlen(message))
		SendClientMessage(playerid, 0xFFFF00FF, message);

	SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_ON);

	return 1;
}

stock DisablePlayerGPS(playerid)
{
	if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
	{
		DisablePlayerCheckpoint(playerid);

		SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_OFF);
	}
	return 1;
}

stock IsPlayerInRangeOfPlayer(playerid, to_player, Float: distance)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(to_player, x, y, z);

	return IsPlayerInRangeOfPoint(playerid, distance, x, y, z);
}

stock GetPlayerMaxStorage(playerid, storage)
{
	new amount;

	switch(storage)
	{
		case STORAGE_METALL: amount = 500;
		case STORAGE_AMMO: amount = 500;
		case STORAGE_DRUGS: amount = 250;
	}

	return GetPlayerData(playerid, P_IMPROVEMENTS) >= 3 ? amount * 2 : amount;
}

stock GetPlayerOwnableCars(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock IsPlayerHasDonations(playerid)
{
	new query[80];
	new Cache: result;
	new rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `donations` WHERE acc_id = '%d' AND activated = 0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return 1;

	return 0;
}

stock GetPlayerLastDonation(playerid)
{
	new query[100],
		Cache: result,
		count;

	mysql_format(mysql, query, sizeof query, "SELECT amount FROM `donations` WHERE acc_id = '%d' AND activated = 1 ORDER BY id DESC LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		count = cache_get_row_int(0, 0);

	cache_delete(result);

	return count;
}

stock GetPlayerDonationCurrency(playerid)
{
	new query[100],
		Cache: result,
		currency[64];

	mysql_format(mysql, query, sizeof query, "SELECT currency FROM `donations` WHERE acc_id = '%d' AND activated = 1 ORDER BY id DESC LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		cache_get_row(0, 0, currency);

	cache_delete(result);

	return currency;
}

stock ShowPlayerDonateDialog(playerid)
{
	new fmt_text[610];

	format
	(
	    fmt_text,
	    sizeof fmt_text,
	    "{FFFFFF}\
	    В этом разделе вы можете использовать дополнительные\n\
	    возможности сервера. Чтобы получить к ним доступ,\n\
	    необходимо пополнить свой игровой счёт. Описание всех\n\
	    дополнительных возможностей, а также о способах\n\
		пополнения счёта вы можете узнать на нашем сайте:\n\
		{33cc66}"#SERVER_SITE" (раздел \"Донат\")\n\n\
		{6699cc}Информация:{FFFFFF}\n\
		Номер аккаунта:\t\t\t%d\n\
		Текущее состояние счёта:\t\t%d. Рублей\n\
		Последнее пополнение:\t\t%d. Рублей\n\
		Общая сумма пополнений:\t\t%d. Рублей\
		",
		GetPlayerAccountID(playerid),
		GetPlayerCurrentDonate(playerid),
		GetPlayerLastDonation(playerid),
		GetPlayerTotalDonate(playerid)
	);

	Dialog
	(
	    playerid, DIALOG_DONATE_INFO, DIALOG_STYLE_MSGBOX,
	    "Дополнительные возможности",
	    fmt_text,
	    "Просмотр", "Назад"
	);
	return 1;
}

stock ShowPlayerDonateMenu(playerid)
{
	new fmt_text[1000];

	format
	(
		fmt_text,
		sizeof fmt_text,
		"{ffff00}1. {FFFFFF}Посмотреть последние пополнения\n"\
		"{ffff00}2. Обменять на $ (1 руб = $%d)\n"\
		"{ffff00}3. {FFFFFF}Сменить ник %d руб.\n"\
		"{ffff00}4. {FFFFFF}Снять все предупреждения %d руб.\n"\
		"{ffff00}5. {FFFFFF}Получить наркотик (8 доз) %d руб.\n"\
		"{ffff00}6. {FFFFFF}Законопослушность +10 %d руб.\n"\
		"{ffff00}7. {FFFFFF}4-х значный номер телефона %d руб.\n"\
		"{ffff00}8. {FFFFFF}Навыки владения оружием %d руб./1 ед.\n"\
		"{ffff00}9. {FFFFFF}Номер для личного авто от %d руб.\n"\
		"{ffff00}10. {FFFFFF}Слоты для транспорта %d руб./слот\n"\
		"{ffff00}11. {FFFFFF}Покупка всех лицензий %d руб.\n"\
		"{ffff00}12. {FFFFFF}+1 уровень %d руб.\n"\
		"{ffff00}13. VIP аккаунт от %d руб.\n"\
		"{ffff00}14. Кейсы "SERVER_NAME"+ %d руб.\n"\
		"{ffff00}15. {FFFFFF}Уникальный скин %d руб.",
		GetDonatePrice(DONATE_PRICE_MONEY),
		GetDonatePrice(DONATE_PRICE_NAME),
		GetDonatePrice(DONATE_PRICE_WARNS),
		GetDonatePrice(DONATE_PRICE_DRUGS),
		GetDonatePrice(DONATE_PRICE_LAW_ABIDING),
		GetDonatePrice(DONATE_PRICE_PHONE_NUMBER),
		GetDonatePrice(DONATE_PRICE_SKILLS),
		GetDonatePrice(DONATE_PRICE_CAR_NUMBER),
		GetDonatePrice(DONATE_PRICE_CAR_SLOT),
		GetDonatePrice(DONATE_PRICE_LIC_PACK),
		GetDonatePrice(DONATE_PRICE_LEVEL),
		GetDonatePrice(DONATE_PRICE_BRONSE),
		GetDonatePrice(DONATE_PRICE_CASE),
		GetDonatePrice(DONATE_PRICE_SKIN)
	);

	Dialog
	(
		playerid, DIALOG_DONATE_MENU, DIALOG_STYLE_LIST,
		"Донат",
		fmt_text,
		"Выбрать", "Закрыть"
	);

	return 1;
}

stock ShowPlayerDonations(playerid, sql_id)
{
	new query[80],
		fmt_text[1400],
		Cache: result,
		player_sql_id = GetPlayerAccountID(playerid);

	if(sql_id == -1) return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `freekassa_payments` WHERE account = '%s'", GetPlayerNameBySqlID(sql_id));
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	if(!rows)
	{
		if(sql_id == player_sql_id)
			format
			(
				fmt_text, sizeof fmt_text,
				"{FFFFFF}\
				Вы еще ни разу не пополняли свой аккаунт.\n\
				Это можно сделать на сайте {33cc66}"#SERVER_SITE" {FFFFFF}в разделе {6699cc}\"Донат\".\
				"
			);

		else
			format
			(
				fmt_text, sizeof fmt_text,
				"{FFFFFF}\
				Игрок еще ни разу не пополнял свой аккаунт.\
				"
			);

		Dialog
		(
			playerid, sql_id == player_sql_id ? DIALOG_DONATIONS : INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			"Последние пополнения",
			fmt_text,
			sql_id == player_sql_id ? "Назад" : "Закрыть", ""
		);

		cache_delete(result);
		return 1;
	}

	format(fmt_text, sizeof(fmt_text), "Дата и время\t\t\tСумма\n{FFFFFF}");

	for(new i = 0; i < rows; i++)
	{
	    new tmp_text[128],
			tmp_date[16],
			tmp_amount;

	    cache_get_field_content(i, "dateCreate", tmp_date);
	    tmp_amount = cache_get_field_content_int(i, "itemsCount");

	    format(tmp_text, sizeof tmp_text, "\n%s\t\t%d Рублей",
		tmp_date, tmp_amount);

	    strcat(fmt_text, tmp_text);
	}

	Dialog
	(
	    playerid,
	    sql_id == player_sql_id ? DIALOG_DONATIONS : INVALID_DIALOG_ID,
	    DIALOG_STYLE_MSGBOX,
	    "20 последних операций пополнения",
	    fmt_text,
	    sql_id == player_sql_id ? "Назад" : "Закрыть", ""
	);

	return 1;
}

stock ShowPlayerConvertDialog(playerid)
{
	new
		donate_price = g_doubling[DOUBLING_DONATE] * GetDonatePrice(DONATE_PRICE_MONEY);

	new fmt_text[200];
	format
	(
		fmt_text,
		sizeof fmt_text,
		"{FFFFFF}\
		Ставка:\t\t1 кредит = %d виртов\n\
		Введите количество $, которые Вы\n\
		хотите конвертировать в игровые деньги:\
		",
		donate_price
	);

	Dialog(playerid, DIALOG_DONATE_CONVERT, DIALOG_STYLE_INPUT, "Обмен валют", fmt_text, "Далее", "Назад");
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync, anim_type=USE_ANIM_TYPE_NONE)
{
	SetPlayerData(playerid, P_USE_ANIM_TYPE, anim_type);
	return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock ResetSkin(playerid)
{
	if(GetPlayerData(playerid, P_OSKIN) && 1 <= GetPlayerTeamEx(playerid) <= 10)
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_OSKIN));
	else
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
	return 1;
}

stock InvitePlayer(playerid, org_id, give_rang = 1, bool: save = false)
{
	if(!(1 <= give_rang <= 10))
		give_rang = 1;

	if(1 <= org_id <= 10)
	{
		SetPlayerTeamEx(playerid, org_id);
		SetPlayerData(playerid, P_JOB, give_rang);
	}
	else
	{
		SetPlayerTeamEx(playerid, 0);
		SetPlayerData(playerid, P_JOB, 0);
		//SetPlayerData(playerid, P_JOB, 0);
	}

	SetPlayerColorEx(playerid, team_colors[org_id]);

	if(save)
	{
		new query[80];

		//SetPlayerData(playerid, P_JOB, 0);

		if(1 <= org_id <= 10)
		{
			if(!GetPlayerSex(playerid))
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id - 1][O_SKINS][1]);
			else
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id - 1][O_WOMEN_SKIN]);
		}
		else SetPlayerData(playerid, P_OSKIN, 0);

		format(query, sizeof query, "UPDATE accounts SET team=%d,org_skin=%d,job=%d WHERE id=%d",\
			GetPlayerTeamEx(playerid), GetPlayerData(playerid, P_OSKIN), GetPlayerData(playerid, P_JOB), GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);

		ResetSkin(playerid);
	}

	return 1;
}

stock FInvitePlayer(playerid, fam_id, give_rang = 1, bool: save = false)
{
	if(!(1 <= give_rang <= 10))
		give_rang = 1;


	SetPlayerData(playerid, P_FAMILY, fam_id);
	SetPlayerData(playerid, P_FAMILY_RANK, give_rang);

	if(save)
	{
		new query[80];

		format(query, sizeof query, "UPDATE accounts SET family=%d,family_rank=%d WHERE id=%d",\
			GetPlayerData(playerid, P_FAMILY), GetPlayerData(playerid, P_FAMILY_RANK), GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);
	}

	return 1;
}

stock UnInvite(playerid, to_player, reason[] = "")
{
	if(!(1 <= GetPlayerTeamEx(to_player) <= 10)) return 0;

	new fmt_msg[110];

	if(playerid != to_player)
	{
		format(fmt_msg, sizeof fmt_msg, "%s[%d] уволил Вас из организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0xCECECEFF, fmt_msg);

		if(GetPlayerTeamEx(playerid) == GetPlayerTeamEx(to_player))
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из своей организации", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
		}
		else
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из организации \"%s\"", GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
			SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
		}

		if(GetPlayerTeamEx(to_player) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL)))
		{
			DestroyDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL));
			SetPlayerData(to_player, P_ADVISOR_LABEL, Text3D: -1);
		}

		format(fmt_msg, sizeof fmt_msg, "Уволил %s[acc:%d] из организации %s. Причина: %s",
		GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetPlayerTeamName(to_player), reason);

		SendLog(playerid, LOG_TYPE_FRACTION, fmt_msg);
	}
	else
	{
		format(fmt_msg, sizeof fmt_msg, "Покинул организацию %s по собственному желанию", GetPlayerTeamName(to_player));
		SendLog(to_player, LOG_TYPE_FRACTION, fmt_msg);
	}

	InvitePlayer(to_player, 0, 0, true);

	return 1;
}

stock FUnInvite(playerid, to_player, reason[] = "")
{
	new fmt_msg[110];

	if(playerid != to_player)
	{
		format(fmt_msg, sizeof fmt_msg, "%s[%d] уволил Вас из семьи \"%s\"", GetPlayerNameEx(playerid), playerid, GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME));
		SendClientMessage(to_player, 0xCECECEFF, fmt_msg);

		if(GetPlayerTeamEx(playerid) == GetPlayerTeamEx(to_player))
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из своей семьи", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
		}
		else
		{
			format(fmt_msg, sizeof fmt_msg, "Вы уволили %s[%d] из семьи \"%s\"", GetPlayerNameEx(to_player), to_player, GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME));
			SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
		}

		format(fmt_msg, sizeof fmt_msg, "Уволил %s[acc:%d] из семьи %s. Причина: %s",
		GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetFamilyData(GetPlayerData(to_player, P_FAMILY), F_NAME), reason);

		SendLog(playerid, LOG_TYPE_FRACTION, fmt_msg);
	}
	else
	{
		format(fmt_msg, sizeof fmt_msg, "Покинул семью %s по собственному желанию", GetPlayerTeamName(to_player));
		SendLog(to_player, LOG_TYPE_FRACTION, fmt_msg);
	}

	FInvitePlayer(to_player, 0, 0, true);

	return 1;
}

stock SendPlayerOffer(playerid, to_player, type, value_1 = 0, value_2 = 0)
{
	if(GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER) == INVALID_PLAYER_ID)
	{
		new fmt_str[144];
		switch(type)
		{
			case OFFER_TYPE_HANDSHAKE:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}Игрок %s предлагает пожать Вам руку", GetPlayerNameEx(playerid));
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}пожать руку", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_FUEL_ST:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам купить заправочную станцию №%d \"%s\" по цене $%d", GetPlayerNameEx(playerid), value_1, GetFuelStationData(value_1, FS_NAME), value_2);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}купить Вашу заправочную станцию \"%s\" за $%d", GetPlayerNameEx(to_player), GetFuelStationData(value_1, FS_NAME), value_2);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_FILL_CAR:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает заправить Ваш транспорт на %d л за $%d", GetPlayerNameEx(playerid), value_1, value_2);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}заправку транспорта на %d л за $%d", GetPlayerNameEx(to_player), value_1, value_2);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_REPAIR_CAR:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает починить Ваш транспорт за $%d", GetPlayerNameEx(playerid), value_1);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}сделать ремонт транспорта за $%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_BUSINESS:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам купить бизнес №%d \"%s\" по цене $%d", GetPlayerNameEx(playerid), value_1, GetBusinessData(value_1, B_NAME), value_2);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}купить Ваш бизнес \"%s\" за $%d", GetPlayerNameEx(to_player), GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_BUSINESS_MANAGER:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам стать сотрудником его предприятия (%s)", GetPlayerNameEx(playerid), GetBusinessData(value_1, B_NAME));
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "%s получил предложение стать вашим сотрудником", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_HOME:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам купить дом №%d по цене $%d", GetPlayerNameEx(playerid), value_1, value_2);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}купить Ваш дом по цене $%d", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_HOME_RENT_ROOM:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам поселиться в своем доме №%d", GetPlayerNameEx(playerid), value_1);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}поселиться в своем доме №%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_OWNABLE_CAR:
			{
				new model_id = GetVehicleData(value_2, V_MODELID);

				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам купить транспорт {33FF66}\"%s\" {1E90FF}по цене $%d", GetPlayerNameEx(playerid), GetVehicleInfo(model_id-400, VI_NAME), value_1);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}купить Ваш транспорт \"%s\" за $%d", GetPlayerNameEx(to_player), GetVehicleInfo(model_id-400, VI_NAME), value_1);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_INVITE:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам вступить в организацию \"%s\"", GetPlayerNameEx(playerid), GetPlayerTeamName(playerid));

				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}вступить в организацию \"%s\"", GetPlayerNameEx(to_player), GetPlayerTeamName(playerid));
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_FINVITE:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам вступить в семью \"%s\"", GetPlayerNameEx(playerid), GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));

				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}вступить в семью \"%s\"", GetPlayerNameEx(to_player), GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME));
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_MEDHELP:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам пройти курс платного лечения за $%d", GetPlayerNameEx(playerid), value_1);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}пройти у Вас курс платного лечения за $%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_HEAL:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам пройти курс лечения за $%d", GetPlayerNameEx(playerid), value_1);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}пройти у Вас курс лечения за $%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_CHANGE_SEX:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает сделать Вам операцию по смене пола за $%d", GetPlayerNameEx(playerid), value_1);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}операцию по смене пола за $%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_SHOW_SKILL:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s хочет показать Вам свои навыки владения оружием", GetPlayerNameEx(playerid));
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}посмотреть на Ваши навыки владения оружием", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_CASINO_DICE:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s хочет сыграть с Вами в кости. Ставка: $%d", GetPlayerNameEx(playerid), value_1);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}сыграть в кости. Ставка: $%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_GETHERE:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s хочет телепортировать Вас к себе", GetPlayerNameEx(playerid));
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы запросили у %s разрешение на телепорт его к Вам", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_GIVE_CAR_KEY:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s хочет дать Вам ключи от своего транспотра", GetPlayerNameEx(playerid));
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}взять ключи от своего транспорта", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_GIVE_MIC:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам подключиться к радио-эфиру", GetPlayerNameEx(playerid));
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}подключиться к радио-эфиру", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
  			case OFFER_TYPE_GIVE_LIC:
			{
				new lic_names[3][34] = {"вождение базового уровня", "вождение профессионального уровня", "оружие"};

				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам купить лицензию на %s за $%d",
				GetPlayerNameEx(playerid), lic_names[value_1 - 1], value_2);

				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}купить у Вас лицензию на %s за $%d",
				GetPlayerNameEx(to_player), lic_names[value_1 - 1], value_2);

				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_JAIL_FREE:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам пересмотреть Ваше дело за $%d", GetPlayerNameEx(playerid), value_1);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}пересмотреть его дело за $%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_SKIN:
			{
				format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам купить его одежду(ID %d) по цене $%d", GetPlayerNameEx(playerid), value_1, value_2);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}купить Вашу одежду по цене $%d", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_DRUGS:
			{
			    format(fmt_str, sizeof fmt_str, "{FFFFFF}%s предлагает Вам купить %d грамм наркотиков по цене $%d", GetPlayerNameEx(playerid), value_1, value_2);
				Dialog(to_player, DIALOG_OFFER_TOPLAYER, DIALOG_STYLE_MSGBOX, "Предложение", fmt_str, "Согласиться", "Отказаться");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}купить %d наркотиков за   $%d", GetPlayerNameEx(to_player),value_1, value_2);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			/*
			case PROPOSITION_TYPE_SELL_GOODS:
			{
				new marketid = player_use_market[playerid];

				format(fmt_str, sizeof fmt_str, "%s предлагает Вам купить %s по цене $%d", GetPlayerNameEx(playerid), market[marketid][m_name], value_1);
				SendClientMessage(to_player, 0x1E90FFFF, fmt_str);

				SendClientMessage(to_player, -1, "Нажмите {32a44b}Y {FFFFFF}чтобы сделать покупку или {CECECE}N {FFFFFF}для отказа");

				format(fmt_str, sizeof fmt_str, "Вы предложили игроку {ffff00}%s {1E90FF}купить %s по цене $%d", GetPlayerNameEx(to_player), market[marketid][m_name], value_1);
				SendClientMessage(playerid, 0x1E90FFFF, fmt_str);
			}
			*/
			default: return 1;
		}

		SetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER, to_player);

		SetPlayerOfferInfo(to_player, O_INCOMING_PLAYER, playerid);
		SetPlayerOfferInfo(to_player, O_INCOMING_TYPE, type);

		SetPlayerOfferValue(to_player, 0, value_1);
		SetPlayerOfferValue(to_player, 1, value_2);
	}
	else SendClientMessage(playerid, 0xFFFFFFFF, "Используйте {FF9900}/cancel {FFFFFF}чтобы отозвать предыдущее предложение");

	return 1;
}

// ------------------------------------------
CMD:yes(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_INCOMING_PLAYER);
	new offer_type = GetPlayerOfferInfo(playerid, O_INCOMING_TYPE);

	new value_1 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[0];
	new value_2 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[1];

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(offer_id) && IsPlayerLogged(offer_id))
		{
			if(GetPlayerOfferInfo(offer_id, O_OUTCOMIG_PLAYER) == playerid)
			{
				ClearPlayerOffer(offer_id);
			}
			else offer_type = -1;

			new Float: x, Float: y, Float: z;
			new Float: dist;

			GetPlayerPos(offer_id, x, y, z);

			if(offer_type != OFFER_TYPE_GETHERE)
				dist = GetPlayerDistanceFromPoint(playerid, x, y, z);

			else dist = 5.0;

			if(dist <= 10.0)
			{
				new fmt_str[144];

				switch(offer_type)
				{
					case OFFER_TYPE_SHOW_SKILL:
					{
						ShowPlayerSkills(offer_id, playerid);
						Action(offer_id, "показал свои навыки владения оружием", _, false);
					}

					case OFFER_TYPE_INVITE:
					{
						new team_id = GetPlayerTeamEx(offer_id);
						if((1 <= team_id <= 10) || !(1 <= GetPlayerTeamEx(playerid) <= 10))
						{
							InvitePlayer(playerid, team_id, 1, true);

							new fmt_msg[120];
							format(fmt_msg, sizeof fmt_msg, "Поздравляем! Вы вступили в организацию \"%s\"", GetPlayerTeamName(offer_id));

							SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
							SendClientMessage(playerid, 0x1E90FFFF, "Используйте {ffff00}/menu > Команды сервера{1E90FF}, чтобы узнать о новых возможностях");

							format(fmt_msg, sizeof fmt_msg, "%s принял Ваше предложение вступить в организацию", GetPlayerNameEx(playerid), value_1);
							SendClientMessage(offer_id, 0x32a44bFF, fmt_msg);

							format(fmt_msg, sizeof fmt_msg, "Принял %s[acc:%d] в организацию %s", GetPlayerNameEx(playerid), GetPlayerAccountID(playerid), GetPlayerTeamName(offer_id));
							SendLog(offer_id, LOG_TYPE_FRACTION, fmt_msg);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При вступлении в организацию произошла ошибка");
					}

					case OFFER_TYPE_FINVITE:
					{
						new fam_id = GetPlayerData(offer_id, P_FAMILY);

						FInvitePlayer(playerid, fam_id, 1, true);

						new fmt_msg[120];
						format(fmt_msg, sizeof fmt_msg, "Поздравляем! Вы вступили в семью \"%s\"", GetFamilyData(fam_id, F_NAME));

						SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
						SendClientMessage(playerid, 0x1E90FFFF, "Используйте {ffff00}/fmenu > помощь по семье{1E90FF}, чтобы узнать о новых возможностях");

						format(fmt_msg, sizeof fmt_msg, "%s принял Ваше предложение вступить в семью", GetPlayerNameEx(playerid), value_1);
						SendClientMessage(offer_id, 0x32a44bFF, fmt_msg);

						format(fmt_msg, sizeof fmt_msg, "Принял %s[acc:%d] в семью %s", GetPlayerNameEx(playerid), GetPlayerAccountID(playerid), GetPlayerTeamName(offer_id));
						SendLog(offer_id, LOG_TYPE_FRACTION, fmt_msg);

					}

					case OFFER_TYPE_HANDSHAKE:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(offer_id)))
						{
							if(0.5 <= dist <= 1.5)
							{
								new Float: to_x, Float: to_y;
								new Float: angle;

								GetPlayerPos(playerid, to_x, to_y, z);
								angle = GetAngleToPoint(x, y, to_x, to_y);

								SetPlayerFacingAngle(playerid, angle);
								SetPlayerFacingAngle(offer_id, angle + 180.0);

								format(fmt_str, sizeof fmt_str, "пожал(а) руку %s", GetPlayerNameEx(offer_id));
								Action(playerid, fmt_str, _, false);

								ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
								ApplyAnimation(offer_id, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
							}
							else
							{
								valstr(fmt_str, offer_id);
								cmd::hi(playerid, fmt_str);
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы либо игрок не должны находиться в транспорте");
					}
					case OFFER_TYPE_SELL_FUEL_ST:
					{
						if(GetPlayerFuelStation(offer_id) == value_1 && GetPlayerFuelStation(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								new Float: f_pos_x = GetFuelStationData(value_1, FS_POS_X);
								new Float: f_pos_y = GetFuelStationData(value_1, FS_POS_Y);
								new Float: f_pos_z = GetFuelStationData(value_1, FS_POS_Z);

								if(IsPlayerInRangeOfPoint(playerid, 10.0, f_pos_x, f_pos_y, f_pos_z) && IsPlayerInRangeOfPoint(offer_id, 10.0, f_pos_x, f_pos_y, f_pos_z))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свою АЗС игроку %s за $%d", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x32a44bFF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам заправочную станцию \"%s\" за $%d", GetPlayerNameEx(offer_id), GetFuelStationData(value_1, FS_NAME), value_2);
									SendClientMessage(playerid, 0x32a44bFF, fmt_str);

									SellFuelStation(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xffff00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с заправкой которую хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_FILL_CAR:
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						new offer_vehicleid = GetPlayerVehicleID(offer_id);

						if(IsPlayerDriver(playerid))
						{
							if(GetPlayerJob(offer_id) == JOB_MECHANIC && IsPlayerInJob(offer_id) && IsPlayerInVehicle(offer_id, GetPlayerJobCar(offer_id)))
							{
								if((GetVehicleData(vehicleid, V_FUEL) + float(value_1)) <= 150.0)
								{
									if(GetPlayerMoneyEx(playerid) >= value_2)
									{
										if(GetPlayerJobLoadItems(offer_id) >= value_1)
										{
											GivePlayerMoneyEx(playerid, -value_2, "Заправка транспорта от механика", true, true);

											SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + float(value_1));
											SetPlayerJobLoadItems(offer_id, GetPlayerJobLoadItems(offer_id) - value_1);

											AddPlayerData(offer_id, P_MECHANIC_FILL_PAY, +, value_2);

											format(fmt_str, sizeof fmt_str, "Автомеханик %s заправил Ваш транспорт на %d л", GetPlayerNameEx(offer_id), value_1);
											SendClientMessage(playerid, 0x32a44bFF, fmt_str);

											format(fmt_str, sizeof fmt_str, "Вы заправили транспорт %s на %d л", GetPlayerNameEx(playerid), value_1);
											SendClientMessage(offer_id, 0x32a44bFF, fmt_str);

											format(fmt_str, sizeof fmt_str, "~g~+$%d", value_2);
											GameTextForPlayer(offer_id, fmt_str, 4000, 1);

											format(fmt_str, sizeof fmt_str, "%s{FFFFFF}Автомеханик\n{CECECE}Топливо: %d л", GetPlayerData(offer_id, P_JOB_SERVICE_NAME), GetPlayerJobLoadItems(offer_id));
											UpdateVehicleLabel(offer_vehicleid, 0xCC9900FF, fmt_str);
										}
										else SendClientMessage(playerid, 0xCECECEFF, "При заправке произошла ошибка");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег чтобы заплатить автомеханику");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "В бензобак этого транспорта столько не поместится");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Автомеханик должен находиться в рабочем транспорте");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте за рулем");
					}
					case OFFER_TYPE_REPAIR_CAR:
					{
						new vehicleid = GetPlayerVehicleID(playerid);

						if(IsPlayerDriver(playerid))
						{
							if(GetPlayerJob(offer_id) == JOB_MECHANIC && IsPlayerInJob(offer_id) && IsPlayerInVehicle(offer_id, GetPlayerJobCar(offer_id)))
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
								    GivePlayerMoneyEx(playerid, -value_1, "Починка транспорта от механика", true, true);
									AddPlayerData(offer_id, P_MECHANIC_REPAIR_PAY, +, value_1);

									RepairVehicle(vehicleid);
									if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

									SetPlayerChatBubble(playerid, "Repair", 0x1E90FFFF, 10.0, 2000);
									SetPlayerChatBubble(offer_id, "Repair", 0x1E90FFFF, 10.0, 2000);

									format(fmt_str, sizeof fmt_str, "Автомеханик %s починил Ваш транспорт за $%d", GetPlayerNameEx(offer_id), value_1);
									SendClientMessage(playerid, 0x32a44bFF, fmt_str);

									format(fmt_str, sizeof fmt_str, "Вы починили транспорт %s за $%d", GetPlayerNameEx(playerid), value_1);
									SendClientMessage(offer_id, 0x32a44bFF, fmt_str);

									format(fmt_str, sizeof fmt_str, "~g~+$%d", value_1);
									GameTextForPlayer(offer_id, fmt_str, 4000, 1);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег чтобы заплатить автомеханику");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Автомеханик должен находиться в рабочем транспорте");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте за рулем");
					}
					case OFFER_TYPE_SELL_BUSINESS:
					{
						if(GetPlayerBusiness(offer_id) == value_1 && GetPlayerBusiness(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								new Float: b_pos_x = GetBusinessData(value_1, B_POS_X);
								new Float: b_pos_y = GetBusinessData(value_1, B_POS_Y);
								new Float: b_pos_z = GetBusinessData(value_1, B_POS_Z);

								if(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z) && IsPlayerInRangeOfPoint(offer_id, 7.0, b_pos_x, b_pos_y, b_pos_z))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свой бизнес игроку %s за $%d", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x32a44bFF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам бизнес \"%s\" за $%d", GetPlayerNameEx(offer_id), GetBusinessData(value_1, B_NAME), value_2);
									SendClientMessage(playerid, 0x32a44bFF, fmt_str);

									SellBusiness(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xffff00FF, "Проверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с бизнесом который хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_BUSINESS_MANAGER:
					{
						if(GetPlayerBusiness(offer_id) == value_1)
						{
							SetPVarInt(playerid, "biz_worker", value_1 + 1);

							format(fmt_str, sizeof fmt_str, "Вы приняли предложение от %s", GetPlayerNameEx(offer_id));
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);

							format(fmt_str, sizeof fmt_str, "%s принял Ваше предложение", GetPlayerNameEx(playerid));
							SendClientMessage(offer_id, 0x32a44bFF, fmt_str);
						}
					}
					case OFFER_TYPE_SELL_HOME:
					{
						if(GetPlayerHouse(offer_id, HOUSE_TYPE_HOME) == value_1 && GetPlayerHouse(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								if(IsPlayerInRangeOfHouse(playerid, value_1, 10.0) && IsPlayerInRangeOfHouse(offer_id, value_1, 10.0))
								{
									format(fmt_str, sizeof fmt_str, "Вы продали свой дом игроку %s за $%d", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x32a44bFF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам cвой дом за $%d", GetPlayerNameEx(offer_id), value_2);
									SendClientMessage(playerid, 0x32a44bFF, fmt_str);

									SellHouse(offer_id, playerid, value_2, 0);
									SendClientMessage(playerid, 0xffff00FF, "Настоятельно рекомендуем проверить квартплату, при необходимости заплатить за дом в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с домом который хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "При заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_HOME_RENT_ROOM:
					{
						if(GetPlayerHouse(offer_id, HOUSE_TYPE_HOME) == value_1 && GetPlayerHouse(playerid) == -1)
						{
							if(IsPlayerInRangeOfHouse(playerid, value_1, 10.0) && IsPlayerInRangeOfHouse(offer_id, value_1, 10.0))
							{
								new free_room = GetHouseFreeRoom(value_1);
								if(free_room != -1)
								{
									AddHouseRenter(value_1, free_room, playerid);

									format(fmt_str, sizeof fmt_str, "Вы поселили %s в своем доме", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x32a44bFF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s поселил Вас в своем доме", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x32a44bFF, fmt_str);

									GameTextForPlayer(offer_id, "~b~~h~Welcome", 4000, 1);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Все комнаты этого дома уже заняты");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы и арендодатель должны находиться рядом с домом в котором хотите снять комнату");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_SELL_OWNABLE_CAR:
					{
						if(GetPlayerOwnableCar(offer_id) == value_2 && GetPlayerOwnableCar(playerid) == INVALID_VEHICLE_ID)
						{
							new  Float: car_x, Float: car_y, Float: car_z;
							GetVehiclePos(value_2, car_x, car_y, car_z);

							if(IsPlayerInRangeOfPoint(playerid, 15.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(offer_id, 15.0, car_x, car_y, car_z))
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									new index = GetVehicleData(value_2, V_ACTION_ID);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a, ownable_cars oc SET a.money=%d, oc.owner_id=%d WHERE a.id=%d AND oc.id=%d", GetPlayerMoneyEx(playerid)-value_1, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetOwnableCarData(index, OC_SQL_ID));
									mysql_query(mysql, fmt_str, false);

									if(!mysql_errno())
									{
										GivePlayerMoneyEx(playerid, -value_1, "Продажа авто с рук", false, true);

										GivePlayerMoneyEx(offer_id, value_1, "Продажа авто с рук", true, true);
										SetPlayerData(offer_id, P_OWNABLE_CAR, INVALID_VEHICLE_ID);

										SetOwnableCarData(index, OC_OWNER_ID, GetPlayerAccountID(playerid));
										SetPlayerData(playerid, P_OWNABLE_CAR, value_2);

										format(fmt_str, sizeof fmt_str, "%s продал Вам свой транспорт за $%d", GetPlayerNameEx(offer_id), value_1);
										SendClientMessage(playerid, 0x32a44bFF, fmt_str);

										SendClientMessage(playerid, 0x32a44bFF, "Напишите {ffff00}/car {32a44b}чтобы узнать о возможностях");
										SendClientMessage(playerid, 0xFFFFFFFF, "Вам были переданы ключи от транспорта. Используйте {BBBB00}/lock 1");

										format(fmt_str, sizeof fmt_str, "Вы продали свой транспорт игроку %s за $%d", GetPlayerNameEx(playerid), value_1);
										SendClientMessage(offer_id, 0x32a44bFF, fmt_str);
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка в базе данных");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для покупки");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы и продавец должны находиться рядом с транспортом который хотите купить");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}

					case OFFER_TYPE_MEDHELP:
					{
						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(IsPlayerInRangeOfPoint(playerid, 70.0, 1362.7057,-166.8792,967.5167))
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									GivePlayerMoneyEx(playerid, -value_1, "Курс лечения (купил)", true, true);
									GivePlayerMoneyEx(offer_id, value_1, "Курс лечения (провел)", true, true);

									SetPlayerHealthEx(playerid, 100.0);

									new fmt_msg[128];
									format(fmt_msg, sizeof fmt_msg, "Медицинский работник %s провел курс платного лечения", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x32a44bFF, fmt_msg);

									format(fmt_msg, sizeof fmt_msg, "Вы провели курс платного лечения у пациента %s", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x32a44bFF, fmt_msg);

									format(fmt_msg, sizeof fmt_msg, "[MED] Медицинский работник %s[%d] провел курс платного лечения у %s[%d] за $%d", GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid, value_1);
									SendMessageToTeam(TEAM_HOSPITAL, fmt_msg, 0x99CC99FF, offer_id);
									if(GetPlayerData(playerid,P_OCCUPIED_BED) != -1)
									{
										ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
									}
									SetPlayerData(playerid, P_HOSPITAL, false);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег, чтобы оплатить лечение");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_HEAL:
					{
						new vehicleid = GetPlayerVehicleID(offer_id);

						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_MED_CAR && GetPlayerVehicleID(playerid) == vehicleid)
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									GivePlayerMoneyEx(playerid, -value_1, "Курс лечения (купил) [veh]", true, true);
									GivePlayerMoneyEx(offer_id, value_1, "Курс лечения (провел) [veh]", true, true);

									SetPlayerHealthEx(playerid, 100.0);

									new fmt_msg[50];
									format(fmt_msg, sizeof fmt_msg, "Вы вылечились у медицинского работника %s", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x32a44bFF, fmt_msg);

									format(fmt_msg, sizeof fmt_msg, "Вы вылечили пациента %s", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x32a44bFF, fmt_msg);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег, чтобы оплатить лечение");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы или медицинский работник находитесь не в машине скорой помощи");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_CHANGE_SEX:
					{
						if(GetPlayerTeamEx(offer_id) == TEAM_HOSPITAL)
						{
							if(IsPlayerInRangeOfPoint(playerid, 70.0, 1362.7057,-166.8792,967.5167))
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									GivePlayerMoneyEx(playerid, -value_1, "Смена пола (купил)", true, true);
									GivePlayerMoneyEx(offer_id, value_1, "Смена пола (провел)", true, true);

									SetPlayerData(playerid, P_SEX, GetPlayerData(playerid, P_SEX) ^ 1);

									new fmt_msg[70];
									format(fmt_msg, sizeof fmt_msg, "Медработник %s сделал Вам операцию по смене пола", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x32a44bFF, fmt_msg);

									format(fmt_msg, sizeof fmt_msg, "Операция у пациента %s была проведена успешно", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x32a44bFF, fmt_msg);
								}
								else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег чтобы оплатить операцию");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_CASINO_DICE:
					{
						new biz_id = GetPlayerInBiz(offer_id);

						if(biz_id != -1)
						{
							if(GetBusinessData(biz_id, B_TYPE) == BUSINESS_TYPE_CASINO)
							{
								new player_dice = random(6) + 1,
									offer_dice = random(6) + 1,
									winner,
									fmt_text[90];

								if(player_dice > offer_dice)
									winner = playerid;
								else if(player_dice < offer_dice)
									winner = offer_id;
								else
									winner = -1;

								format(fmt_text, sizeof fmt_text, "и %s бросили кости. Результат: {ffff00}%d:%d",
								GetPlayerNameEx(offer_id), player_dice, offer_dice);

								Action(playerid, fmt_text, _, false);

								if(winner == -1)
								{
									SetPlayerChatBubble(playerid, "Ничья!", 0xffff00FF, 20.0, 2000);
									SetPlayerChatBubble(offer_id, "Ничья!", 0xffff00FF, 20.0, 2000);

									SendClientMessage(playerid, 0xffff00FF, "Игра закончилась в ничью");
									SendClientMessage(offer_id, 0xffff00FF, "Игра закончилась в ничью");
								}
								else
								{
									new loser = playerid == winner ? offer_id : playerid,
										winner_dice = playerid == winner ? player_dice : offer_dice,
										loser_dice = playerid == winner ? offer_dice : player_dice;

									new percent = value_1 / 100,
										cash = value_1,
										take_prods = random(5) + 6;

									new query[150];

									if(GetBusinessData(biz_id, B_PRODS) >= take_prods)
									{
										cash -= percent;

										AddBusinessData(biz_id, B_PRODS, -, take_prods);
										AddBusinessData(biz_id, B_BALANCE, +, percent);
										AddBusinessData(biz_id, B_BALANCE_DAY, +, percent);

										format(query, sizeof query, "UPDATE business SET products=%d, balance=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_BALANCE), GetBusinessData(biz_id, B_SQL_ID));
										mysql_query(mysql, query, false);

										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(biz_id, B_SQL_ID), GetPlayerAccountID(winner), GetPlayerIpEx(winner), gettime(), percent, IsBusinessOwned(biz_id));
										mysql_query(mysql, query, false);
									}

									SendClientMessage(winner, 0x32a44bFF, "Поздравляем, Вы выиграли");
									GivePlayerMoneyEx(winner, cash, "Игра в кости (выиграл)", true, true);

									SendClientMessage(loser, 0xFF5533FF, "К сожалению, Вы проиграли");
									GivePlayerMoneyEx(loser, -value_1, "Игра в кости (проиграл)", true, true);

									format(fmt_text, sizeof fmt_text, "Выпало: %d", winner_dice);
									SetPlayerChatBubble(winner, fmt_text, 0x66CC33FF, 20.0, 2000);

									format(fmt_text, sizeof fmt_text, "Выпало: %d", loser_dice);
									SetPlayerChatBubble(loser, fmt_text, 0xFF5533FF, 20.0, 2000);
								}
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка. Вы не в казино");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Произошла ошибка");
					}
					case OFFER_TYPE_GETHERE:
					{
						new Float: player_x,
							Float: player_y,
							Float: player_z;

						GetPlayerPos(offer_id, player_x, player_y, player_z);
						SetPlayerPosEx(playerid, player_x + 1, player_y + 1, player_z, 0.0, GetPlayerInterior(offer_id), GetPlayerVirtualWorld(offer_id), false);

						new fmt_msg[105];
						format(fmt_msg, sizeof fmt_msg, "%s %s телепортивал Вас к себе", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, -1, fmt_msg);

						format(fmt_msg, sizeof fmt_msg, "Вы телепортировали %s к себе", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, -1, fmt_msg);

						format(fmt_msg, sizeof fmt_msg, "[A] %s %s[%d] телепортировал к себе %s[%d]", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid);
						SendMessageToAdmins(fmt_msg, 0xCECECEFF);
					}
					case OFFER_TYPE_GIVE_CAR_KEY:
					{
						new vehicleid = GetPlayerOwnableCar(offer_id);

						if(vehicleid != INVALID_VEHICLE_ID)
						{
							new fmt_text[80];

							format(fmt_text, sizeof fmt_text, "%s выдал Вам ключи от своего транспорта", GetPlayerNameEx(offer_id));
							SendClientMessage(playerid, 0x32a44bFF, fmt_text);

							SendClientMessage(playerid, -1, "Вам были переданы ключи от транспорта. Используйте {BBBB00}/lock 4");
							SendClientMessage(playerid, 0xCECECEFF, "После выхода из игры или выгрузки ТС с сервера они пропадут");

							format(fmt_text, sizeof fmt_text, "Вы дали игроку %s ключи от своего транспорта", GetPlayerNameEx(playerid));
							SendClientMessage(offer_id, 0x32a44bFF, fmt_text);

							SetPlayerData(playerid, P_ALLOWED_CAR, vehicleid);
						}
						else
						{
							if(GetPlayerOwnableCars(offer_id) == 0)
								SendClientMessage(playerid, 0xCECECEFF, "У игрока нет личного транспорта");
							else
								SendClientMessage(playerid, 0xCECECEFF, "Личный транспорт игрока не загружен на сервер");
						}
					}
					case OFFER_TYPE_GIVE_MIC:
					{
						SetPVarInt(playerid, "radio_mic", 1);

						new fmt_text[128];

						format(fmt_text, sizeof fmt_text, "%s дал Вам доступ к радио-эфиру", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC33FF, fmt_text);

						SendClientMessage(playerid, -1, "Вам был дан микрофон. Вы имеете доступ к радио-эфиру. Используйте: {BBBB00}/u");

						format(fmt_text, sizeof fmt_text, "Вы дали игроку %s доступ к радио-эфиру", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x66CC33FF, fmt_text);

						format(fmt_text, sizeof fmt_text, "[СМИ г.Los-Santos] %s %s[%d] подключил %s[%d] к радио-эфиру",
						GetPlayerJobAndRankName(offer_id), GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid);

						SendMessageToTeam(GetPlayerTeamEx(offer_id), fmt_text, 0x99CC99FF, offer_id);
					}
					case OFFER_TYPE_GIVE_LIC:
					{
						new lic_names[3][34] = {"вождение базового уровня", "вождение профессионального уровня", "оружие"};

						new fmt_text[85];

						switch(value_1)
						{
							case 1..2:
							{
								AddPlayerData(playerid, P_DRIVING_B, +, 1);
								UpdatePlayerDatabaseInt(playerid, "driving_lic", GetPlayerData(playerid, P_DRIVING_B));
							}
							case 3:
							{
								SetPlayerData(playerid, P_LIC_WEAPON, 1);
								UpdatePlayerDatabaseInt(playerid, "lic_weapon", 1);
							}
						}

						format(fmt_text, sizeof fmt_text, "%s продал Вам лицензию на %s за $%d",
						GetPlayerNameEx(offer_id), lic_names[value_1 - 1], value_2);

						SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Вы продали %s лицензию на %s за $%d",
						GetPlayerNameEx(playerid), lic_names[value_1 - 1], value_2);

						SendClientMessage(offer_id, 0x1E90FFFF, fmt_text);
						SendClientMessage(offer_id, 0x1E90FFFF, "К Вашей зарплате добавлено 10% от стоимости лицензии");

						new wage = value_2 / 10;

						format(fmt_text, sizeof fmt_text, "Покупка лицензии на %s у %s", lic_names[value_1 - 1], GetPlayerNameEx(offer_id));

						GivePlayerMoneyEx(playerid, -value_2, fmt_text, true, true);

						AddPlayerData(offer_id, P_WAGE, +, wage);
						UpdatePlayerDatabaseInt(offer_id, "wage", GetPlayerData(offer_id, P_WAGE));

						format(fmt_text, sizeof fmt_text, "~b~~h~+$%d", wage);
						GameTextForPlayer(offer_id, fmt_text, 4000, 1);
					}
					case OFFER_TYPE_JAIL_FREE:
					{
						new fmt_text[80];

						format(fmt_text, sizeof fmt_text, "%s помог пересмотреть Ваше дело. Вы выпущены на свободу", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC33FF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Вы пересмотрели дело %s. Игрок выпущен на свободу", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x1E90FFFF, fmt_text);

						format(fmt_text, sizeof fmt_text, "Стоимость услуги: $%d 10 процентов этой суммы добавлено к Вашей зарплате", value_1);
						SendClientMessage(offer_id, 0x1E90FFFF, fmt_text);

						GivePlayerMoneyEx(playerid, -value_1, "Оплата адвоката", true, true);

						UnjailPlayer(playerid);

						new wage = value_1 / 10;

						AddPlayerData(offer_id, P_WAGE, +, wage);
						UpdatePlayerDatabaseInt(offer_id, "wage", GetPlayerData(offer_id, P_WAGE));

						format(fmt_text, sizeof fmt_text, "~b~~h~+$%d", wage);
						GameTextForPlayer(offer_id, fmt_text, 4000, 1);
					}
					case OFFER_TYPE_SELL_SKIN:
					{
							//.. sellmyskin
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
									new house_id = GetPlayerData(playerid, P_HOUSE), query[76];
									format(fmt_str, sizeof fmt_str, "Вы продали свою одежду игроку %s за $%d", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x32a44bFF, fmt_str);

									format(fmt_str, sizeof fmt_str, "%s продал Вам cвою одежду за $%d", GetPlayerNameEx(offer_id), value_2);
									SendClientMessage(playerid, 0x32a44bFF, fmt_str);
									if(GetHouseData(house_id, H_IMPROVEMENTS) >= 5)
									{
										SetHouseData(house_id, H_STORE_SKIN, GetPlayerSkinEx(playerid));

										mysql_format(mysql, query, sizeof query, "UPDATE houses SET store_skin=%d WHERE id=%d",
										GetPlayerSkinEx(playerid), GetHouseData(house_id, H_SQL_ID));
										mysql_query(mysql, query, false);
										SendClientMessage(playerid, 0x1E90FFFF, "Ваша старая одежды была перемещена в шкаф");
									}

									SetPlayerData(playerid, P_SKIN, GetPlayerSkinEx(offer_id));
									SetPlayerData(offer_id, P_SKIN, 252);

									SetPlayerSkin(playerid, GetPlayerSkinEx(offer_id));
									SetPlayerSkin(offer_id,252);

									UpdatePlayerDatabaseInt(playerid, "skin", GetPlayerSkinEx(offer_id));
									UpdatePlayerDatabaseInt(offer_id, "skin", 252);

							}
							else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
					}
					case OFFER_TYPE_SELL_DRUGS:
					{
					    if(GetPlayerMoneyEx(playerid) >= value_1)
					    {
							format(fmt_str, sizeof(fmt_str), "Вы продали %d грамм наркотиков за %d игроку %s", value_2, value_1, GetPlayerNameEx(playerid));
							SendClientMessage(offer_id, 0x32a44bFF, fmt_str);
							format(fmt_str, sizeof(fmt_str), "Вы купили %d грамм наркотиков за %d у игрока %s", value_2, value_1, GetPlayerNameEx(offer_id));
							SendClientMessage(playerid, 0x32a44bFF, fmt_str);
							AddPlayerData(playerid, P_DRUGS, +, value_1);
							AddPlayerData(offer_id, P_DRUGS, -, value_1);
							GivePlayerMoneyEx(playerid, -value_1, "Покупка наркотиков", true, true);
							GivePlayerMoneyEx(offer_id, value_1, "Продажа наркотиков", true, true);
							UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));
							UpdatePlayerDatabaseInt(offer_id, "drugs", GetPlayerData(offer_id, P_DRUGS));
						}
						else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для заключения сделки");
					}
					default:
						SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вам ничего не предлагают");
				}
			}
			else SendClientMessage(playerid, 0xCECECEFF, "Игрок слишком далеко");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Игрок вышел из игры");

		ClearPlayerOffer(playerid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вам ничего не предлагают");

	return 1;
}

CMD:no(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_INCOMING_PLAYER);

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(GetPlayerOfferInfo(offer_id, O_OUTCOMIG_PLAYER) == playerid)
		{
			ClearPlayerOffer(offer_id);

			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отказался от Вашего предложения", GetPlayerNameEx(playerid));
			SendClientMessage(offer_id, 0xCECECEFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Вы отказались от предложения игрока %s", GetPlayerNameEx(offer_id));
			SendClientMessage(playerid, 0xCECECEFF, fmt_str);

			GameTextForPlayer(offer_id, "~r~no", 4000, 1);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы отказались от предложения игрока");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "В данный момент Вам ничего не предлагают");

	ClearPlayerOffer(playerid);
	return 1;
}

CMD:cancel(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER);

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(GetPlayerOfferInfo(offer_id, O_INCOMING_PLAYER) == playerid)
		{
			ClearPlayerOffer(offer_id);

			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отозвал свое предложение", GetPlayerNameEx(playerid));
			SendClientMessage(offer_id, 0xCECECEFF, fmt_str);

			format(fmt_str, sizeof fmt_str, "Вы отозвали свое предложение для %s", GetPlayerNameEx(offer_id));
			SendClientMessage(playerid, 0xCECECEFF, fmt_str);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы отозвали свое последнее предложение");

		ClearPlayerOffer(playerid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет активных предложений");

	return 1;
}

CMD:hi(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя использовать в машине");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /hi [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
	if(0.5 <= dist <= 1.5)
	{
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_HANDSHAKE);
	}
	else if(dist < 20.0)
	{
		new fmt_str[35];

		new Float: x, Float: y;
		new Float: angle;

		GetPlayerPos(playerid, x, y, z);
		angle = GetAngleToPoint(to_x, to_y, x, y);

		SetPlayerFacingAngle(playerid, angle);

		format(fmt_str, sizeof fmt_str,"машет рукой %s", GetPlayerNameEx(to_player));
		Action(playerid, fmt_str, _, false);

		ApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 1, 1, 0, 0, 1);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы находитесь слишком далеко от игрока");

	return 1;
}

CMD:me(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /me [текст]");

	return Action(playerid, params);
}

CMD:do(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /do [текст]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xDD90FFFF, 25.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s (%s)", params, GetPlayerNameEx(playerid));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:try(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /try [текст]");

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s %s %s", GetPlayerNameEx(playerid), params, !random(3) ? ("{32a44b}| Удачно") : ("{CECECE}| Неудачно"));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:w(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /w [текст]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xACCE90FF, 3.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s шепчет: %s", GetPlayerNameEx(playerid), params);
	SendMessageInLocal(playerid, fmt_str, 0xACCE90FF, 3.0);

	return 1;
}

CMD:s(playerid, params[])
{
	if(GetPlayerLevel(playerid) < 2)
		return SendClientMessage(playerid, 0xCECECEFF, "Этим можно пользоваться со 2 уровня");

	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /s [текст]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xFFFFFFFF, 37.0, 5000);

	format(fmt_str, sizeof fmt_str, "%s[%d] крикнул: %s", GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_str, 0xACCE90FF, 37.0);

	ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.0, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:n(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /n [нон-рп сообщение]");

	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xCECECEFF, 30.0, 5000);

	format(fmt_str, sizeof fmt_str, "(( %s[%d]: %s ))", GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_str, 0xCCCC99FF, 30.0);

	return 1;
}

CMD:lic(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /lic [id игрока]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 4.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "%s свои лицензии", to_player == playerid ? "просматривает" : "показал");

	Action(playerid, fmt_str, _, false);

	format(fmt_str, sizeof fmt_str, "=============[%s]=============", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Категория A: %s    |    Категория B: %s", GetPlayerData(playerid, P_DRIVING_A) >= 1 ? ("Есть") : ("Нет"), GetPlayerData(playerid, P_DRIVING_B) >= 1 ? ("Есть") : ("Нет"));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);
	format(fmt_str, sizeof fmt_str, "Категория C: %s    |    Категория D: %s", GetPlayerData(playerid, P_DRIVING_C) >= 1 ? ("Есть") : ("Нет"), GetPlayerData(playerid, P_DRIVING_D) >= 1 ? ("Есть") : ("Нет"));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Лицензия на полеты: %s ", GetPlayerData(playerid, P_LIC_FLY) >= 1 ? ("Есть") : ("Нет"));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Лицензия на плавание: %s", GetPlayerData(playerid, P_LIC_WATER) >= 1 ? ("Есть") : ("Нет"));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Лицензия на бизнес: %s", GetPlayerData(playerid, P_LIC_BIZ) >= 1 ? ("Есть") : ("Нет"));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Лицензия на оружие: %s", GetPlayerData(playerid, P_LIC_WEAPON) >= 1 ? ("Есть") : ("Нет"));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	return 1;
}

CMD:job(playerid, params[])
{
	if(!(GetPlayerJob(playerid) == JOB_TRUCKER)) return SendClientMessage(playerid, 0xCECECEFF, "[Ошибка] {FFFFFF}Вы не дальнобойщик! Дальнобойщиками не становятся, дальнобойщиками рождаются");

	Action(playerid, "просматривает свои документы", _, false);

	ShowPlayerDialogJobTruck(playerid, T_MENU);

	return 1;
}

CMD:pass(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pass [id игрока]");

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!GetPlayerData(playerid, P_PASS))
	    return SendClientMessage(playerid, 0xCECECEFF, "У вас нет паспорта,получите его в мэрии");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	new fmt_str[420];
	Action(playerid, "показал свой паспорт", _, false);

	format(fmt_str, sizeof fmt_str,
	"{ffffff}Имя: {ffff00}%s \n\
	{ffffff}Лет в штате: {ffff00}%d\n\
	{ffffff}Пол: {ffff00}%s \n\
	{ffffff}Проживание: {ffff00}%s\n\
	{ffffff}Работа: {ffff00}%s\n\
	{ffffff}Организация: {ffff00}%s\n\
	{ffffff}Телефон: {ffff00}%d\n\
	{ffffff}Уровень розыска: {ffff00}%d\n\
	{ffffff}Законопослушность: {ffff00}%d",
	GetPlayerNameEx(playerid), GetPlayerLevel(playerid), GetPlayerSexName(playerid),
	GetPlayerHouseName(playerid), GetPlayerJobAndRankName(playerid), GetPlayerTeamName(playerid),
	GetPlayerPhone(playerid), GetPlayerSuspect(playerid), GetPlayerData(playerid, P_LAW_ABIDING));

	Dialog(to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,"Паспорт",fmt_str,"Далее","");

	return 1;
}
CMD:open(playerid, params[])
{
	for(new idx = 0; idx < 4; idx ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 15.0,g_shlak[idx][S_CLOSED][0], g_shlak[idx][S_CLOSED][1], g_shlak[idx][S_CLOSED][2]) && (g_shlak[idx][S_FRAC] == GetPlayerTeamEx(playerid) || g_shlak[idx][S_FRAC2] == GetPlayerTeamEx(playerid)) && g_shlak[idx][STATUS] == 1)
		{
  			g_shlak[idx][STATUS] = 0;
			DestroyDynamicObject(g_shlak[idx][S_OBJ]);
 			g_shlak[idx][S_OBJ] = CreateDynamicObject(g_shlak[idx][S_MODEL],g_shlak[idx][S_OPEN][0], g_shlak[idx][S_OPEN][1], g_shlak[idx][S_OPEN][2],g_shlak[idx][S_OPEN][3], g_shlak[idx][S_OPEN][4], g_shlak[idx][S_OPEN][5]);
			SendClientMessage(playerid,-1,"Шлагбаум открыт"),SetTimerEx("ClosedShlak", 10000, false, "i", idx);
		}
	}
	return 1;
}
CMD:gmx(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	server_restart = true;

	return GameModeExit();
}

CMD:add_return(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new money, string:description[64]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /add_return [деньги] [примечание]");

	new fmt_text[256];

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO return_money \
		(uid, money, description, status)\
		VALUES ('%d', '%d', '%s', 0)",
		GetPlayerAccountID(playerid),
		money,
		description
	);

	mysql_query(mysql, fmt_text, true);

	return 1;
}

CMD:return_money(playerid, params[])
{
	new fmt_text[640],
		Cache: result,
		id;

	mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM return_money WHERE uid='%d' AND status=0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_text, true);

	new rows = cache_num_rows();

	if(!rows)
		SendClientMessage(playerid, 0xCECECEFF, "У Вас нет денег которые Вам должны вернуть");

	else
	{

		new query[60],
			money,
			description[64];

		format(fmt_text, sizeof fmt_text, "");

		for(new i = 0; i < rows; i ++)
		{
			id = cache_get_field_content_int(i, "id");
			money = cache_get_field_content_int(i, "money");
			cache_get_field_content(i, "description", description);

			format(query, sizeof query, "{FFFFFF}%d. $%d {32a44b}(%s)\n", i + 1, money, description);
			strcat(fmt_text, query);

			SetPlayerListitemValue(playerid, i, id);
		}

		Dialog
		(
			playerid, DIALOG_RETURN_MONEY, DIALOG_STYLE_LIST,
			"Возврат денег",
			fmt_text,
			"Выбрать", "Закрыть"
		);
	}

	cache_delete(result);

	return 1;
}

CMD:two(playerid, params[])
{
	new job_car = GetPlayerJobCar(playerid);
	if(IsPlayerInVehicle(playerid, job_car))
	{
		new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
		new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1;

		new job_id = GetPlayerJob(playerid);
		if(job_id == car_type)
		{
			switch(job_id)
			{
				case JOB_BUS_DRIVER:
				{
					if(IsPlayerInJob(playerid))
					{
						Dialog
						(
							playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
							"Диспетчер автопарка",
							"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
							"Да", "Нет"
						);
						DisablePlayerCheckpoint(playerid);
					}
					else
					{
						Dialog
						(
							playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT,
							"Стоимость проезда",
							"{FFFFFF}Сколько будет стоить проезд?\n"\
							"Укажите цену от 0 до 20$",
							"Далее", "Отмена"
						);
					}
				}
				case JOB_TAXI_DRIVER:
				{
					if(IsPlayerInJob(playerid))
					{
						Dialog
						(
							playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
							"Диспетчер таксопарка",
							"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
							"Да", "Нет"
						);
						DisablePlayerCheckpoint(playerid);
					}
					else
					{
						Dialog
						(
							playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT,
							"Название такси",
							"{FFFFFF}Придумайте название для вашего такси\n"\
							"Максимальная длина 15 символов\n\n"\
							"Если вы не хотите как-то называться\n"\
							"нажмите кнопку \"Пропустить\"",
							"Далее", "Пропустить"
						);
					}
				}
				case JOB_MECHANIC:
				{
					if(IsPlayerInJob(playerid))
					{
						Dialog
						(
							playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
							"Автомеханик",
							"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
							"Да", "Нет"
						);
						DisablePlayerCheckpoint(playerid);
					}
					else
					{
						Dialog
						(
							playerid, DIALOG_MECHANIC_START_JOB, DIALOG_STYLE_MSGBOX,
							"Диспетчер",
							"{FFFFFF}Вы хотите начать работу автомеханика?",
							"Да", "Нет"
						);
					}
				}
				case JOB_TRUCKER:
				{
					if(IsPlayerInJob(playerid))
					{
						Dialog
						(
							playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
							"Диспетчер автопарка",
							"{FFFFFF}Вы уверены что хотите завершить рабочий день?",
							"Да", "Нет"
						);
						DisablePlayerCheckpoint(playerid);
					}
					else
					{
						Dialog
						(
							playerid, DIALOG_TRUCKER_START_JOB, DIALOG_STYLE_MSGBOX,
							"Дальнобойщик",
							"{FFFFFF}Вы хотите начать работу дальнобойщика?",
							"Да", "Нет"
						);
					}
				}
			}
		}
	}
	return 1;
}
CMD:fish(playerid)
{
		new fishid = -1;

		for(new i; i < sizeof g_fish_pos; i++)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 1.5, g_fish_pos[i][0], g_fish_pos[i][1], g_fish_pos[i][2])) continue;
			fishid = i;
			break;
		}

		if(fishid == -1) return 1;
		else if(GetPlayerData(playerid, P_USED_FISH) != -1) return ClearFish(playerid, GetPlayerData(playerid, P_USED_FISH));
		else if(g_fish_pos_used[fishid]) return SendClientMessage(playerid, 0xCECECEFF, "Здесь уже кто-то ловит рыбу");

		else
		{
			if(GetPlayerMoneyEx(playerid) >= 250)
			{
				GivePlayerMoneyEx(playerid, -250, "аренда удочки", true, true);

				SetPlayerData(playerid, P_USED_FISH, fishid);

				g_fish_pos_used[fishid] = true;

				new fmt_msg[85];

				format(fmt_msg, sizeof fmt_msg, "Удочка {ffff00}№%d\n\n{CECECE}Занята:\n%s", fishid + 1, GetPlayerNameEx(playerid));
				UpdateDynamic3DTextLabelText(g_fish_pos_label[fishid], 0xFFFFFFFF, fmt_msg);

				format(fmt_msg, sizeof fmt_msg, "Вы взяли удочку №%d. Чтобы забросить удочку: /go", fishid + 1);
				SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
			}
			else
			{
			    SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно денег для аренды удочки");
			}
		}
		return 1;
}
CMD:tested(playerid)
{
	SetPlayerInBiz(playerid, -1);
}
CMD:menu(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_PLAYER_MENU, DIALOG_STYLE_LIST,
		"Меню",
		"{ffff00}1. {FFFFFF}Статистика\n"\
		"{ffff00}2. {FFFFFF}Инвентарь\n"\
		"{ffff00}3. {FFFFFF}Список команд\n"\
		"{ffff00}4. {FFFFFF}Личные настройки\n"\
		"{ffff00}5. {FFFFFF}Настройки безопасности\n"\
		"{99cc00}6. Связь с администрацией\n"\
		"{ffff00}7. {FFFFFF}Улучшения\n"\
		"{ffff00}8. {FFFFFF}Правила сервера\n"\
		"{ffff00}9. {FFFFFF}Изменить имя\n"\
		"{ffff00}10. {FFFFFF}Активация промокода\n"\
		"{ffff00}11. Донат (прокачать свой аккаунт)",
		"Выбрать", "Закрыть"
	);
	return 1;
}
ALT:menu:mn;
ALT:menu:mm;

CMD:fmenu(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");

	new fmt_str[128+MAX_PLAYER_NAME];

	format(fmt_str, sizeof fmt_str, "{ffff00}1. {FFFFFF}Статистика {%06x}%s\n{ffff00}2. {FFFFFF}Помощь по семье\n3. Управление семьей\n4. Список участников", family_colors[GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_COLOR)] >>> 8, g_family[GetPlayerData(playerid, P_FAMILY)][F_NAME]);

	Dialog
	(
		playerid, DIALOG_FAMILY_MENU, DIALOG_STYLE_LIST,
		"Меню семьи",
		fmt_str,
		"Выбрать", "Закрыть"
	);
	return 1;
}
ALT:fmenu:fm;

CMD:shop(playerid, params[])
{
	new shopid = -1;

	for(new i; i < sizeof g_shop_pos; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 1.5, g_shop_pos[i][0], g_shop_pos[i][1], g_shop_pos[i][2])) continue;
		shopid = i;
		break;
	}

	if(shopid == -1) return 1;
	else if(GetPlayerData(playerid, P_USED_SHOP) != -1) return ClearShop(playerid, GetPlayerData(playerid, P_USED_SHOP));
	else if(g_shop_pos_used[shopid]) return SendClientMessage(playerid, 0xCECECEFF, "Данная лавка занята");

	else
	{
	    if(GetPlayerMoneyEx(playerid) >= 1000)
	    {
			SetPlayerData(playerid, P_USED_SHOP, shopid);

			g_shop_pos_used[shopid] = true;

			new fmt_msg[300];

			format(fmt_msg, sizeof fmt_msg, "Лавка {ffff00}№%d\n\n{CECECE}Занята:\n%s\n{FFFFFF}Товары: {32a44b}/product\n{FFFFFF}Управление: {32a44b}/setproduct", shopid + 1, GetPlayerNameEx(playerid));
			UpdateDynamic3DTextLabelText(g_shop_pos_label[shopid], 0xFFFFFFFF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы арендовали лавку №%d", shopid + 1);
			SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
			GivePlayerMoneyEx(playerid, -1000, "Аренда лавки", true, true);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет $1000");

	}
	return 1;
}

CMD:setproduct(playerid, params[])
{
	new shopid = -1;

	for(new i; i < sizeof g_shop_pos; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 1.5, g_shop_pos[i][0], g_shop_pos[i][1], g_shop_pos[i][2])) continue;
		shopid = i;
		break;
	}

	if(shopid == -1) return 1;

	return 1;
}

CMD:product(playerid, params[])
{
	new shopid = -1;

	for(new i; i < sizeof g_shop_pos; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, g_shop_pos[i][0], g_shop_pos[i][1], g_shop_pos[i][2])) continue;
		shopid = i;
		break;
	}

	if(shopid == -1) return 1;

	new count;

	new fmt_str[144];
	new string[(sizeof fmt_str) * 3 + 1];

	ClearPlayerListitemValues(playerid);
	for(new idx; idx < g_prodload[shopid]; idx ++)
	{
	    if(GetPlayerData(playerid, g_prod_info[shopid][P_DATA]) == 0) continue;

		format(fmt_str, sizeof fmt_str, "{FFFFFF}%d. %s:\t{32a44b}%d / %d\n", count + 1);
		strcat(string, fmt_str);

		SetPlayerListitemValue(playerid, count ++, idx);
	}

	if(!count)
		strcat(string, "{FFFFFF}Арендатор лавки еще не чего вы выставил на продажу");

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Содержимое лавки", string, "Закрыть", "");

	return 1;
}

CMD:go(playerid, params[])
{
    if(GetPVarInt(playerid, "gofish") == 1) return 1;

	new fishid = -1;

	for(new i; i < sizeof g_fish_pos; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 1.5, g_fish_pos[i][0], g_fish_pos[i][1], g_fish_pos[i][2])) continue;
		fishid = i;
		break;
	}

	if(fishid == -1) return 1;
	else if(GetPlayerData(playerid, P_USED_FISH) == -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны начать ловить рыбу");

	new time_fish = 20000 + random(10000);
	SetTimerEx("FishRandom", time_fish, false, "i", playerid);

	Action(playerid, "забрасывает удочку", _, false);

	SetPVarInt(playerid, "gofish", 1);

	TogglePlayerControllable(playerid, 0);

    ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,1,1);

    GameTextForPlayer(playerid, "~b~~h~~h~fishing started", time_fish, 3);

	return 1;
}

CMD:gps(playerid, params[])
{
	DisablePlayerGPS(playerid);

	Dialog
	(
		playerid, DIALOG_GPS, DIALOG_STYLE_LIST,
		"GPS",
		"{ffff00}1. {FFFFFF}Общественные места\n"\
		"{ffff00}2. {FFFFFF}Государственные организации\n"\
		"{ffff00}3. {FFFFFF}Базы банд\n"\
		"{ffff00}4. {FFFFFF}По работе\n"\
		"{ffff00}5. {FFFFFF}Бизнесы\n"\
		"{ffff00}6. {FFFFFF}Найти ближайшую АЗС\n"\
		"{ffff00}7. {FFFFFF}Найти ближайший банкомат\n"\
		"{ffff00}8. {FFFFFF}Найти ближайший Закусочную\n"\
		"{ffff00}9. {FFFFFF}Найти ближайший Магазин 24/7\n"\
		"{ffff00}10. {FFFFFF}Найти ближайший Магазин одежды\n"\
		"{ffff00}11. {FFFFFF}Найти ближайший Магазин оружия",
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:help(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_HELP, DIALOG_STYLE_LIST,
		"Помощь по игре",
		help_info_items,
		"Выбрать", "Закрыть"
	);

	return 1;
}

CMD:play(playerid, params[])
{
	if(GetPVarInt(playerid, "server_radio_enabled") == 1)
	{
		StopAudioStreamForPlayer(playerid);
		DeletePVar(playerid, "server_radio_enabled");

		SendClientMessage(playerid, 0xCECECEFF, "Радио отключено");
	}

	Dialog
	(
		playerid, DIALOG_SERVER_RADIO, DIALOG_STYLE_LIST,
		"Онлайн радио",
		g_server_radio_items,
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:anim(playerid, params[])
{
	if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Перед использованием анимаций необходимо завершить рабочий день");
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Анимации нельзя использовать в транспорте");

	if(PreLoadPlayerAnimList(playerid))
		return SendClientMessage(playerid, 0xFFFF00FF, "Список анимаций загружен. Введите команду еще раз");

	if(!strlen(params))
	{
		Dialog
		(
			playerid, DIALOG_ANIM_LIST, DIALOG_STYLE_LIST,
			"Анимации",
			anim_list_items,
			"Выбрать", "Закрыть"
		);
	}
	else
	{
		extract params -> new anim_id;

		if(!SetPlayerAnimation(playerid, anim_id-1))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте /anim(list) [номер анимации из списка]");
	}
	return 1;
}
ALT:anim:animlist;


CMD:en(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");
        new Float:healveh;
	    GetVehicleHealth(vehicleid, healveh);
	    if(healveh < 350)
			return SendClientMessage(playerid, -1, "Ваш транспорт неисправен, {F81414}вызовите механика /call");


        if(IsAOwnableCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);
			if(!GetOwnableCarData(index, OC_KEY_IN))
			{
				return GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~NO KEY USE /KEY", 1200, 5);
			}
		}

		if(GetVehicleData(vehicleid, V_FUEL) <= 0.0)
			return GameTextForPlayer(playerid, "~r~no fuel", 4000, 1);

		new engine = (GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_ON);
		SetVehicleParam(vehicleid, V_ENGINE, engine);
	}
	return 1;
}

CMD:l(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new lights = (GetVehicleParam(vehicleid, V_LIGHTS) ^ VEHICLE_PARAM_ON);
		SetVehicleParam(vehicleid, V_LIGHTS, lights);
	}
	return 1;
}

CMD:sl(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new limit = (GetVehicleData(vehicleid, V_LIMIT) ^ VEHICLE_PARAM_ON);
		SetVehicleData(vehicleid, V_LIMIT, limit);
	}
	return 1;
}

CMD:b(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(IsModelHasBootAndBonnet(GetVehicleModel(vehicleid)))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		Dialog
		(
			playerid, DIALOG_OPEN_HOOD_OR_TRUNK, DIALOG_STYLE_MSGBOX,
			" ",
			"\t{CC9900}Управления авто",
			"Капот", "Багажник"
		);
	}
	return 1;
}

CMD:fuel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не за рулем");

		new stationid = GetNearestFuelStation(playerid, 10.0);
		if(stationid != -1)
		{
			FuelStationFillCar(playerid, vehicleid, stationid);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Поблизости нет заправочных станций");
	}
	return 1;
}

CMD:charity(playerid, params[])
{
	new Cache: result;
	new rows;
	new money;
	new fmt_str[75];
	new string[1024];

	cache_set_active(charity_cache_data);
	rows = cache_num_rows();

	string = "Сумма\t\tИмя\n\n{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		money = cache_get_row_int(idx, 1);

		format(fmt_str, sizeof fmt_str, "$%d\t\t%s\n", money, fmt_str);
		strcat(string, fmt_str);
	}
	cache_set_active(Cache:0); //unset active cache

	format(fmt_str, sizeof fmt_str, "SELECT SUM(money) as money FROM charity WHERE uid=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_str, true);

	money = cache_get_row_int(0, 0);
	cache_delete(result);

	format(fmt_str, sizeof fmt_str, "\n{CECECE}Сумма Ваших пожертвований: $%d", money);
	strcat(string, fmt_str);

	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Топ 25 благотворителей", string, "Закрыть", "");
}
CMD:enter(playerid)
{
	new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
	new action_id = GetPickupInfo(pickupid, P_ACTION_ID);

	if(IsPlayerInRangeOfPoint(playerid, 1.7, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
	{
	    new hotel_id = GetPlayerInHotelID(playerid);
		new floor = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);

		if(hotel_id != -1 && floor >= 1)
		{
			new room_id = ((floor-1)*12) + action_id;
			EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
		}
	}
}

CMD:bank(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 35.0, -2165.9160, 646.1693, 1052.3750))
	{
		ShowPlayerBankDialog(playerid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы не в банке");

	return 1;
}

CMD:time(playerid, params[])
{
	new fmt_msg[50];
	if(GetPlayerData(playerid, P_MUTE) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "Время до разблокировки чата: %d:%02d", floatround(GetPlayerData(playerid, P_MUTE) / 60) /* % 60 */, (GetPlayerData(playerid, P_MUTE) % 60));
		SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
	}

	if(GetPlayerData(playerid, P_JAIL) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "Время до конца заключения: %d:%02d", floatround(GetPlayerData(playerid, P_JAIL) / 60) /* % 60 */, (GetPlayerData(playerid, P_JAIL) % 60));
		SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
	}

	ShowTime(playerid);

	return 1;
}

CMD:id(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /id [имя или часть имени игрока]");

	new fmt_str[64];
	new count;

	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;

		if(strfind(GetPlayerNameEx(idx), params, true) != -1)
		{
			count ++;

			format(fmt_str, sizeof fmt_str, "%d. %s {32a44b}id %d", count, GetPlayerNameEx(idx), idx);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

			if(count >= 5)
			{
				SendClientMessage(playerid, 0xCECECEFF, "Показаны первые 5 совпадений");
				break;
			}
		}
	}
	if(!count)
		SendClientMessage(playerid, 0xCECECEFF, "Совпадений не найдено");

	return 1;
}

CMD:buyf(playerid, params[])
{
	new factory_fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT);

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на нефтезаводе в рабочем транспорте");

	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(IsPlayerInRangeOfPoint(playerid, 20.0, 994.1306, 679.8422, 12.0653))  // для завода
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 514)
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете в отделе доставки завода или заняли не ту линию");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, 935.9503, 662.1276, 12.0029))  // для азс
	{
		if(GetPlayerJob(playerid) != JOB_TRUCKER || modelid != 514)
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете развозчиком топлива или заняли не ту линию");
	}
	else
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на нефтезаводе");

	new total_litres = GetPlayerJobLoadItems(playerid);

	if(!IsPlayerInVehicle(playerid, vehicleid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на нефтезаводе в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /buyf [кол-во в литрах]");

	if(!IsTrailerAttachedToVehicle(vehicleid))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вашего транспорта отсутствует цистерна для топлива");

	extract params -> new load_fuel;

	if(!(1 <= load_fuel <= 8000))
		return SendClientMessage(playerid, 0xCECECEFF, "Можно загрузить от 1 до 8000 л топлива");

	if(factory_fuels < load_fuel)
		return SendClientMessage(playerid, 0xCECECEFF, "На нефтезаводе нет такого количества топлива");

	if((total_litres + load_fuel) > 8000)
		return SendClientMessage(playerid, 0xCECECEFF, "В цистерну столько не поместится");

	if(GetPlayerMoneyEx(playerid) < (load_fuel * 10))
		return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки такого количества топлива");

	GivePlayerMoneyEx(playerid, -(load_fuel * 10), "Покупка топлива (нефтезавод)", true, false);

	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, factory_fuels - load_fuel);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);

	SetPlayerJobLoadItems(playerid, total_litres + load_fuel);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы загрузили %d л топлива общей стоимостью $%d", load_fuel, load_fuel * 10);
	SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "~g~+ %d litres~n~~b~total %d litres", load_fuel, total_litres + load_fuel);
	GameTextForPlayer(playerid, fmt_str, 2000, 6);

	format(fmt_str, sizeof fmt_str, "Доставка топлива\n{FFFFFF}Загрузка %d / 8000 л", total_litres + load_fuel);
	UpdateVehicleLabel(vehicleid, 0xCECECEFF, fmt_str);

	return 1;
}

CMD:sellf(playerid, params[])
{
	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 514)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не работаете в службе доставки завода");

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, -1111.9989, 2169.4163, 38.0353))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада топлива завода");

	new total_litres = GetPlayerJobLoadItems(playerid);

	new factory_fuels = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellf [кол-во в литрах]");

	extract params -> new sell_fuels;

	if(!(1 <= sell_fuels <= 8000))
		return SendClientMessage(playerid, 0xCECECEFF, "Можно продать от 1 до 8000 л топлива");

	if(vehicleid == INVALID_VEHICLE_ID || !IsTrailerAttachedToVehicle(vehicleid) || total_litres < sell_fuels)
		return SendClientMessage(playerid, 0xCECECEFF, "В Вашей фуре нет такого количества топлива или цистерна не прицеплена");

	if((factory_fuels + sell_fuels) > 1000000)
		return SendClientMessage(playerid, 0xCECECEFF, "Склад топлива завода заполнен");

	GivePlayerMoneyEx(playerid, (sell_fuels * 12), "Продажа топлива (завод)", true, true);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuels + sell_fuels);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);

	SetPlayerJobLoadItems(playerid, total_litres - sell_fuels);
	AddPlayerData(playerid, P_JOB_WAGE, +, sell_fuels * 2);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы продали заводу %d л топлива на сумму $%d", sell_fuels, sell_fuels * 12);
	SendClientMessage(playerid, 0x32a44bFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Ваша чистая выручка составляет {FF9900}$%d", sell_fuels * 2);
	SendClientMessage(playerid, 0x32a44bFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Доставка топлива\n{FFFFFF}Загрузка %d / 8000 л", total_litres - sell_fuels);
	UpdateVehicleLabel(vehicleid, 0xCECECEFF, fmt_str);

	return 1;
}

CMD:buyprod(playerid, params[])
{
	if(!(GetPlayerJob(playerid) == JOB_TRUCKER && IsPlayerInJob(playerid)))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать дальнобойщиком");

	extract params -> new buy_prod_count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /buyprod [кол-во]. Стоимость 1 продукта 24$");

	if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1238.0892,177.7890,20.3305))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада исходных материалов завода");

	else if(!IsPlayerInVehicle(playerid, GetPlayerJobCar(playerid)))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада исходных материалов завода в рабочем транспорте");

	else if(!(1 <= buy_prod_count <= 10000))
		return SendClientMessage(playerid, 0xCECECEFF, "Можно загрузить от 1 до 10000 шт. продуктов");

	else if(GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT) < buy_prod_count)
		return SendClientMessage(playerid, 0xCECECEFF, "На складе исходных материалов нет такого количества продуктов");

	else if((buy_prod_count + GetPlayerJobLoadItems(playerid)) > 10000)
		return SendClientMessage(playerid, 0xCECECEFF, "В фургон столько не поместится, максимум 10000 шт.");

	if(GetPlayerMoneyEx(playerid) < (buy_prod_count * 24))
		return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки такого количества продуктов");

	GivePlayerMoneyEx(playerid, -(buy_prod_count * 24), "Покупка продуктов (разв. продуктов)", true, true);

	SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + buy_prod_count);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT) - buy_prod_count);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);

	new fmt_msg[64];

	format(fmt_msg, sizeof fmt_msg, "Вы купили %d продуктов на сумму $%d", buy_prod_count, buy_prod_count * 24);
	SendClientMessage(playerid, 0x32a44bFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Текущее кол-во загруженных продуктов: %d из 10000", GetPlayerJobLoadItems(playerid));
	SendClientMessage(playerid, 0xFFFF00FF, fmt_msg);

	return 1;
}

CMD:buym(playerid, params[])
{
	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 414)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник службы доставки завода");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /buym [кол-во в кг]");

	extract params -> new buy_metal_count;

	new metall_loaded_count = GetPlayerJobLoadItems(playerid);
	new miner_metal = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, -1891.9476,-1671.4929,23.0156) || !IsPlayerInVehicle(playerid, vehicleid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада шахты в рабочем транспорте");

	if(!(1 <= buy_metal_count <= 500))
		return SendClientMessage(playerid, 0xCECECEFF, "Можно загрузить от 1 до 500 кг металла");

	if(miner_metal < buy_metal_count)
		return SendClientMessage(playerid, 0xCECECEFF, "На складе шахты нет такого количества металла");

	if((metall_loaded_count + buy_metal_count) > 500)
		return SendClientMessage(playerid, 0xCECECEFF, "В фургон столько не поместится");

	if(GetPlayerMoneyEx(playerid) < (buy_metal_count * 15))
		return SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег для покупки такого количества металла");

	GivePlayerMoneyEx(playerid, -(buy_metal_count * 15), "Покупка металла (развозчик)", true, true);

	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, miner_metal - buy_metal_count);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	SetPlayerJobLoadItems(playerid, metall_loaded_count + buy_metal_count);

	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "Вы загрузили %d кг металла общей стоимостью $%d", buy_metal_count, buy_metal_count * 15);
	SendClientMessage(playerid, 0xFFFF00FF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Доставка металла\n{FFFFFF}Загрузка %d / 500 кг", metall_loaded_count + buy_metal_count);
	UpdateVehicleLabel(vehicleid, 0x1E90FFFF, fmt_str);

	return 1;
}

CMD:sellm(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellm [кол-во в кг]");

	extract params -> new sell_metal_count;

	if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1238.0892,177.7890,20.3305))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада металла завода");

	if(!(1 <= sell_metal_count <= 500))
		return SendClientMessage(playerid, 0xCECECEFF, "Можно продать от 1 до 500 кг металла");

	new factory_metal = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT);

	if((factory_metal + sell_metal_count) > 1_000_000)
		return SendClientMessage(playerid, 0xCECECEFF, "Склад металла завода заполнен");

	new fmt_str[90];

	new modelid;
	new vehicleid = GetPlayerJobCar(playerid);

	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);

	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER && IsPlayerInVehicle(playerid, vehicleid) && modelid == 414)
	{
		new metall_loaded_count = GetPlayerJobLoadItems(playerid);

		if(metall_loaded_count < sell_metal_count)
			return SendClientMessage(playerid, 0xCECECEFF, "В Вашем фургоне нет такого количества металла");

		metall_loaded_count -= sell_metal_count;
		SetPlayerJobLoadItems(playerid, metall_loaded_count);

		format(fmt_str, sizeof fmt_str, "Доставка металла\n{FFFFFF}Загрузка %d / 500 кг", metall_loaded_count);
		UpdateVehicleLabel(vehicleid, 0x1E90FFFF, fmt_str);

		AddPlayerData(playerid, P_JOB_WAGE, +, sell_metal_count * 3);
		GivePlayerMoneyEx(playerid, (sell_metal_count * 18), "Продажа металла заводу (развозчик)", true, true);
	}
	else
	{
		if(GetPlayerData(playerid, P_METALL) < sell_metal_count)
			return SendClientMessage(playerid, 0xCECECEFF, "У Вас с собой нет такого количества металла");

		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,metall=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + (sell_metal_count * 18), GetPlayerData(playerid, P_METALL), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);

		if(!mysql_errno())
		{
			AddPlayerData(playerid, P_METALL, -, sell_metal_count);
			GivePlayerMoneyEx(playerid, (sell_metal_count * 18), "Продажа металла заводу", false, true);
		}
		else
			return SendClientMessage(playerid, 0xCECECEFF, "Ошибка сохранения, повторите попытку {FF0000}(equ-code 13)");

	}
	format(fmt_str, sizeof fmt_str, "Вы продали заводу %d кг металла на сумму $%d", sell_metal_count, sell_metal_count * 18);
	SendClientMessage(playerid, 0x32a44bFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Ваша чистая выручка составляет {FF9900}$%d", sell_metal_count * 3);
	SendClientMessage(playerid, 0x32a44bFF, fmt_str);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, factory_metal + sell_metal_count);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);

	return 1;
}

CMD:takem(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, 0xCECECEFF, "Вы не военнослужащий");

	extract params -> new take_metal_count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /takem [кол-во в кг]");

	if(take_metal_count <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Неверное количество металла");

	new army_metal = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT);

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2]))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада воинской части");

	if(army_metal < take_metal_count)
		return SendClientMessage(playerid, 0xCECECEFF, "На складе воинской части нет такого количества металла");

	if((GetPlayerData(playerid, P_METALL) + take_metal_count) > GetPlayerMaxStorage(playerid, STORAGE_METALL))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете унести с собой столько металла (максимум 20 кг)");

	AddPlayerData(playerid, P_METALL, +, take_metal_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT, army_metal - take_metal_count);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s[%d] взял(а) на военном складе {00cc33}%d кг металла", GetPlayerNameEx(playerid), playerid, take_metal_count);
	SendMessageToTeam(TEAM_ARMY, fmt_str, 0x1E90FFFF);

	return 1;
}
CMD:put(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2564.5933,-1292.8503,1044.1250))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у пикапа");

	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_PUT_PROD)
		{
			new objectid;
			new items = GetPlayerJobLoadItems(playerid);
			new Float: x, Float: y, Float: z, Float: angle;

			ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0, 0, 1, USE_ANIM_TYPE_NONE);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

			TogglePlayerFactoryCP(playerid, true);
			SetPlayerJobLoadItems(playerid, items + 1);

			AddPlayerData(playerid, P_JOB_WAGE, +, random(15)+15);
			SendClientMessage(playerid, 0xFFFF00FF, "Продукт доставлен на склад");

			RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
			SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);

			Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, OBJECT_TYPE_FACTORY);
		}
	}
	return 1;
}
CMD:putm(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, 0xCECECEFF, "Вы не военнослужащий");

	extract params -> new put_metal_count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /putm [кол-во в кг]");

	if(put_metal_count <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Неверное количество металла");

	new army_metal = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT);

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2]))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у склада воинской части");

	if(GetPlayerData(playerid, P_METALL) < put_metal_count)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества металла");

	AddPlayerData(playerid, P_METALL, -, put_metal_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT, army_metal + put_metal_count);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);

	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s[%d] положил(а) на военный склад {00cc33}%d кг металла", GetPlayerNameEx(playerid), playerid, put_metal_count);
	SendMessageToTeam(TEAM_ARMY, fmt_str, 0x1E90FFFF);

	return 1;
}

CMD:givemet(playerid, params[])
{
	extract params -> new to_player, give_metall_count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givemet [id игрока] [кол-во в кг]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(give_metall_count <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Неверное количество металла");

	if(give_metall_count > GetPlayerData(playerid, P_METALL))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества металла");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_METALL) + give_metall_count) > GetPlayerMaxStorage(to_player, STORAGE_METALL))
	{
		format(fmt_text, sizeof fmt_text, "Игрок не может унести с собой столько металла (максимум %d кг)", GetPlayerMaxStorage(to_player, STORAGE_METALL));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_METALL, -, give_metall_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	AddPlayerData(to_player, P_METALL, +, give_metall_count);
	UpdatePlayerDatabaseInt(to_player, "metall", GetPlayerData(to_player, P_METALL));

	format(fmt_text, sizeof fmt_text, "~b~-%d metall", give_metall_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d metall", give_metall_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали металл игроку %s (%d кг.)", GetPlayerNameEx(to_player), give_metall_count);
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам металл (%d кг.)", GetPlayerNameEx(playerid), give_metall_count);
	SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

	return 1;
}

CMD:givepatr(playerid, params[])
{
	extract params -> new to_player, give_ammo_count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givepatr [id игрока] [кол-во патронов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(give_ammo_count <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Неверное количество патронов");

	if(give_ammo_count > GetPlayerData(playerid, P_AMMO))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества патронов");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_AMMO) + give_ammo_count) > GetPlayerMaxStorage(to_player, STORAGE_AMMO))
	{
		format(fmt_text, sizeof fmt_text, "Игрок не может унести с собой столько патронов (максимум %d шт)", GetPlayerMaxStorage(to_player, STORAGE_AMMO));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_AMMO, -, give_ammo_count);
	UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

	AddPlayerData(to_player, P_AMMO, +, give_ammo_count);
	UpdatePlayerDatabaseInt(to_player, "ammo", GetPlayerData(playerid, P_AMMO));

	format(fmt_text, sizeof fmt_text, "~b~-%d patr.", give_ammo_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d patr.", give_ammo_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали патроны игроку %s (%d шт.)", GetPlayerNameEx(to_player), give_ammo_count);
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам патроны (%d шт.)", GetPlayerNameEx(playerid), give_ammo_count);
	SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

	return 1;
}

CMD:givedrugs(playerid, params[])
{
	extract params -> new to_player, give_drugs_count; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givedrugs [id игрока] [кол-во в г]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(give_drugs_count <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Неверное количество наркотиков");

	if(give_drugs_count > GetPlayerData(playerid, P_DRUGS))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества наркотиков");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_DRUGS) + give_drugs_count) > GetPlayerMaxStorage(to_player, STORAGE_DRUGS))
	{
		format(fmt_text, sizeof fmt_text, "Игрок не может унести с собой столько наркотиков (максимум %d г)", GetPlayerMaxStorage(to_player, STORAGE_DRUGS));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_DRUGS, -, give_drugs_count);
	UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

	AddPlayerData(to_player, P_DRUGS, +, give_drugs_count);
	UpdatePlayerDatabaseInt(to_player, "drugs", GetPlayerData(playerid, P_DRUGS));

	format(fmt_text, sizeof fmt_text, "~b~-%d g.", give_drugs_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d g.", give_drugs_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "Вы передали патроны наркотики %s (%d г.)", GetPlayerNameEx(to_player), give_drugs_count);
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Игрок %s передал Вам наркотики (%d г.)", GetPlayerNameEx(playerid), give_drugs_count);
	SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

	return 1;
}

CMD:msg(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 3)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /msg [текст]");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "%s %s: %s", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), params);
		SendClientMessageToAll(0xFFCC00FF, fmt_str);

		SendLog(playerid, LOG_TYPE_OOC_CHAT, params);
	}

	return 1;
}
ALT:msg:o;

CMD:ears(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	g_admin_ears = g_admin_ears ^ true;

	new fmt_text[70];

	format(fmt_text, sizeof fmt_text, "Вы %s прослушку SMS", g_admin_ears ? "включили" : "выключили");
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] %s прослушку SMS", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, g_admin_ears ? "включил" : "выключил");
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "%s прослушку SMS", g_admin_ears ? "Включил" : "Выключил");

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:paylog(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) < 4) return 1;

	g_admin_pay_log = g_admin_pay_log ^ true;

	new fmt_text[120];

	format(fmt_text, sizeof fmt_text, "Вы %s логирование передачи денег", g_admin_pay_log ? "включили" : "выключили");
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] %s логирование передачи денег", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, g_admin_pay_log ? "включил" : "выключил");
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "%s логирование передачи денег", g_admin_pay_log ? "Включил" : "Выключил");

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:ans(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ans [id игрока] [текст]");

		extract params -> new to_player, string: message[144 + 1];

		if(!IsPlayerConnected(to_player))
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(!strlen(message))
			return SendClientMessage(playerid, 0xCECECEFF, "Введите сообщение");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "%s %s[%d] для %s[%d]: %s | Приятной игры :)", GetPlayerAdminEx(playerid) > 1 ? "Администратор" : "Агент поддержки", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, message);
		SendClientMessage(to_player, 0xFF9945FF, fmt_str);
		PlayerPlaySound(to_player, 1085, 0.0, 0.0, 0.0);

		SendMessageToAdmins(fmt_str, 0xFF9945FF);

		format(fmt_str, sizeof fmt_str, "Для %s[acc:%d]: %s", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), message);
		SendLog(playerid, LOG_TYPE_ADMIN_ANSWER, fmt_str);
	}
	return 1;
}

CMD:mp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 2)
	{
		if(!mp[MP_CREATE])
		{
			SendClientMessage(playerid, 0xCECECEFF, "Мероприятие не создано, создайте его");

			Dialog
			(
				playerid, DIALOG_MP_CREATE, DIALOG_STYLE_INPUT,
				"Создание мероприятия",
				"{FFFFFF}Для создания мероприятия введите\n"\
				"следующие параметры в окно ниже:\n\n"\
				"{33CC66}Параметры: Название, приз\n\n"\
				"{888888}Примечание:\n"\
				"{FFFFFF}- Название может содержать от 1 до 30 символов\n"\
				"- Приз от 0 до 40.000 (деньги)",
				"Далее", "Отмена"
			);
		}
		else
		{
			new fmt_str[1026];

		    format(fmt_str, sizeof fmt_str, \
			"{ffff00}1. {FFFFFF}Название: {ffff00}%s\n"\
			"{ffff00}2. {FFFFFF}Приз: {3399FF}$%d\n"\
			"{ffff00}3. {FFFFFF}Выдать всем скины\n"\
			"{ffff00}4. {FFFFFF}%s телепорт\n"\
			"{ffff00}5. {FFFFFF}Завершить мероприятие\n"\
			"{ffff00}6. {FFFFFF}Чат МП (/smp)",
		 	mp[MP_NAME],
		 	mp[MP_PRIZE],
		 	mp[MP_POS_X] ? ("Закрыть") : ("Открыть"));

			Dialog(playerid, DIALOG_MP_MENU, DIALOG_STYLE_LIST, "Панель МП", fmt_str, "Выбрать", "Закрыть");
		}
	}
	return 1;
}

CMD:gotomp(playerid, params[])
{
	if(!mp[MP_CREATE]) return SendClientMessage(playerid, 0xCECECEFF, "Мероптиятие не создано");

	if(!mp[MP_POS_X]) return SendClientMessage(playerid, 0xCECECEFF, "Координаты мероптиятия не выставлены");

	SetPlayerPos(playerid, mp[MP_POS_X], mp[MP_POS_Y], mp[MP_POS_Z]);

	SendClientMessage(playerid, -1, "Вы были телепортированы на мероприятие");

	SetPlayerData(playerid, P_LAST_MP, 1);

	return 1;
}

CMD:smp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 2)
	{
		if(mp[MP_CREATE])
		{
			if(!strlen(params))
				return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /smp [текст]");

            new fmt_str[128];

			for(new i; i < MAX_PLAYERS; i ++)
			{
				if(!IsPlayerConnected(i)) continue;
				else if(!IsPlayerLogged(i)) continue;
				else if(GetPlayerData(i, P_LAST_MP) != 0) continue;

				format(fmt_str, sizeof fmt_str, "[МП] %s %s: %s", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), params);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
		}
	}
	return 1;
}

CMD:okay(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 3)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используй: /okay [id игрока]");

		extract params -> new to_player;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(!GetPVarInt(to_player, "change_name_status"))
			return SendClientMessage(playerid, 0xCECECEFF, "Игрок не подавал запрос на смену ника");

		new player_name[20 + 1];
		GetPVarString(to_player, "change_name", player_name, sizeof(player_name));

		if(ChangePlayerName(to_player, player_name, true))
		{
			Dialog
			(
				to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"Имя изменено",
				"{66FF00}Заявка на изменение имени одобрена, новое имя установлено.\n\n"\
				"{FFFFFF}В следующий раз при входе в игру используйте свое новое имя. Для\n"\
				"этого нужно изменить его в окне клиента SAMP. Рекомендуем прямо\n"\
				"сейчас свернуть игру и сделать это.",
				"Ок", ""
			);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "При смене ника произошла ошибка");

		new fmt_text[75];

		format(fmt_text, sizeof fmt_text, "[A] %s[%d] одобрил заявку на смену никнейма", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);

		DeletePVar(to_player, "change_name");
		DeletePVar(to_player, "change_name_status");

		format(fmt_text, sizeof fmt_text, "Одобрил заявку смены никнейма для %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);
	}

	return 1;
}

CMD:cc(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	for(new i = 0; i < 20; i++)
	{
		SendClientMessageToAll(-1, "");
	}

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		new fmt_text[65];
		format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] очистил чат", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Очистил чат");

	return 1;
}

CMD:vleave(playerid, params[])
{
	if(GetPlayerPremium(playerid) < 1) return 1;
//	if(GetPlayerData(playerid, P_IMPROVEMENTS) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Приобретите улучшение \"Решительность\", чтобы уволиться по собственному желанию");

	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в организации");

	new fmt_text[210];

	format
	(
		fmt_text, sizeof fmt_text,
		"{FFFFFF}Вы состоите в организации \"%s\".\n"\
		"Если Вы уволитесь, то потеряете все свои достижения в ней, такие как ранг.\n\n"\
		"Вы уверены, что хотите покинуть организацию?",
		GetTeamName(GetPlayerTeamEx(playerid))
	);

	Dialog(playerid, DIALOG_TEAM_LEAVE, DIALOG_STYLE_MSGBOX, "Предупреждение", fmt_text, "Да", "Нет");

	return 1;
}

CMD:fleave(playerid, params[])
{
	//if(GetPlayerData(playerid, P_IMPROVEMENTS) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Приобретите улучшение \"Решительность\", чтобы уволиться по собственному желанию");

	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");

	new fmt_text[210];

	format
	(
		fmt_text, sizeof fmt_text,
		"{FFFFFF}Вы состоите в семье \"%s\".\n"\
		"Если Вы уволитесь, то потеряете все свои достижения в ней, такие как ранг.\n\n"\
		"Вы уверены, что хотите покинуть семью?",
		GetFamilyData(GetPlayerData(playerid, P_FAMILY), F_NAME)
	);

	Dialog(playerid, DIALOG_FAMILY_LEAVE, DIALOG_STYLE_MSGBOX, "Предупреждение", fmt_text, "Да", "Нет");

	return 1;
}

CMD:ahelp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 1) SendClientMessage(playerid, 0xFFFF00FF, "Доступные команды:");
	if(GetPlayerAdminEx(playerid) >= 1) SendClientMessage(playerid, 0xCC9900FF, "1 уровень: /az /ans /sp(/re) /weap /stats /a /admins /slap /hp /connect");
	if(GetPlayerAdminEx(playerid) >= 2) SendClientMessage(playerid, 0xCC9900FF, "2 уровень: /get /kick /mute /unmute /money /spawn");
	if(GetPlayerAdminEx(playerid) >= 3) SendClientMessage(playerid, 0xCC9900FF, "3 уровень: /ban /house /biz /fuelstation /inter /worker /warn /skick /lip /respv");
	if(GetPlayerAdminEx(playerid) >= 3) SendClientMessage(playerid, 0xCC9900FF, "3 уровень: /goto /jail /unjail /unwarn /okay /cc /fly /msg");
	if(GetPlayerAdminEx(playerid) >= 4) SendClientMessage(playerid, 0xCC9900FF, "4 уровень: /offban /unban /setfuel /setweather /settime /showst /reloadbans");
	if(GetPlayerAdminEx(playerid) >= 4) SendClientMessage(playerid, 0xCC9900FF, "4 уровень: /ears /paylog /gethere /hp /skin /templeader /veh /spcars /gzcolor");
	if(GetPlayerAdminEx(playerid) >= 4) SendClientMessage(playerid, 0xCC9900FF, "4 уровень: /setprods /setfuels /fullprods /fullfuels /setleader");
	if(GetPlayerAdminEx(playerid) >= 5) SendClientMessage(playerid, 0xCC9900FF, "5 уровень: /deladmin /admdown /saveall /adminsoff /givegun /adeljobs");

	return 1;
}
ALT:spoff:reoff;
ALT:sp:re;
CMD:spoff(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	if(GetPlayerSpectateData(playerid, S_PLAYER) != -1)
	{
		StopSpectate(playerid);
	}

	return 1;
}

CMD:getsp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	new fmt_str[100];

	format(fmt_str, sizeof fmt_str, "%d", GetPlayerSpectateData(playerid, S_PLAYER));
	SendClientMessage(playerid, -1, fmt_str);
	return 1;
}

CMD:sp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sp [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя провести данное действие с администратором выше по рангу");

	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: a,
			skin = GetPlayerSkin(playerid);

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		SetPlayerSpectateData(playerid, S_START_POS_X, x);
		SetPlayerSpectateData(playerid, S_START_POS_Y, y);
		SetPlayerSpectateData(playerid, S_START_POS_Z, z);
		SetPlayerSpectateData(playerid, S_START_ANGLE, a);

		SetPlayerSpectateData(playerid, S_START_INTERIOR, GetPlayerInterior(playerid));
		SetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD, GetPlayerVirtualWorld(playerid));

		SetSpawnInfo(playerid, 0, skin, x, y, z, a, 0, 0, 0, 0, 0, 0);
	}

	StartSpectate(playerid, to_player);

	new fmt_text[90];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] следит за %s[%d]", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Следит за %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:weap(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /weap [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new fmt_text[625],
		text[45];

	format
	(
		fmt_text,
		sizeof fmt_text,
		"\
		Слот\tОружие\t\tПатроны\n{FFFFFF}\
		"
	);

	for(new i = 0; i < 13; i++)
	{
		new weapon_id, weapon_ammo;

		GetPlayerWeaponData(to_player, i, weapon_id, weapon_ammo);

		format(text, sizeof text, "\n%d\t%s%s%d", i+1, GetWeaponName(weapon_id), weapon_dialog_tabulation[weapon_id], weapon_ammo);
		strcat(fmt_text, text);
	}

	Dialog
	(
		playerid,
		INVALID_DIALOG_ID,
		DIALOG_STYLE_MSGBOX,
		"Оружия у игрока",
		fmt_text,
		"Закрыть",
		""
	);

	format(fmt_text, sizeof fmt_text, "Смотрит оружие %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:stats(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /stats [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	ShowPlayerStats(to_player, playerid);

	new fmt_text[55];

	format(fmt_text, sizeof fmt_text, "Смотрит статистику %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:a(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /a [текст]");

		new fmt_str[128];

		format(fmt_str, sizeof fmt_str, "{ffff00}[A] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
		SendMessageToAdmins(fmt_str, 0x99cc00FF);

		SendLog(playerid, LOG_TYPE_ADMIN_CHAT, params);
	}

	return 1;
}

CMD:anitro(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 1)
	{
		AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	}

	return 1;
}

CMD:admins(playerid, params[])
{
	/*if(GetPlayerAdminEx(playerid) == 0)
	{
		if(GetPlayerPremium(playerid) == 0)
		    return  SendClientMessage(playerid, 0xCECECEFF, "У Вас нет VIP аккаунта.");
	}*/

	new fmt_text[90],
		count;
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	SendClientMessage(playerid, 0x66CC33FF, "Администраторы в сети:");
	for(new i; i < MAX_PLAYERS; i ++)
	{
		new admin_lvl = GetPlayerAdminEx(i);

		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!(1 <= admin_lvl <= 6)) continue;

		format(fmt_text, sizeof fmt_text, "%s %s[%d] (%d lvl)", admins_rank_name[admin_lvl], GetPlayerNameEx(i), i, admin_lvl);

		if(IsPlayerAFK(i))
			format(fmt_text, sizeof fmt_text, "%s {FF0000}AFK [%02d:%02d]", fmt_text, (floatround(GetPlayerData(i, P_AFK_TIME) / 60) % 60), GetPlayerData(i, P_AFK_TIME) % 60);

		else if(GetPlayerSpectateData(i, S_PLAYER) != -1)
			format(fmt_text, sizeof fmt_text, "%s {32a44b}/sp > %d", fmt_text, GetPlayerSpectateData(i, S_PLAYER));

		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);
		count++;
	}
	if(!count) SendClientMessage(playerid, 0xffff00FF, "Нет администраторов в сети");

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Смотрит список администрации");

	return 1;
}

CMD:admlist(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	new query[115],
		Cache: result,
		rows,
		admin,
		day_prev,
		day_last,
		name[21],
		list[sizeof query * 25 + 60] = "Имя\t\t\tРанг\tВ игре вчера\tВ игре сегодня\tСтатус\n{FFFFFF}";

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE admin > 0 ORDER BY admin DESC");
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	for(new i; i < rows; i ++)
	{
		new day_time[4];

		admin = cache_get_field_content_int(i, "admin");
		day_prev = cache_get_field_content_int(i, "game_for_day_prev");
		day_last = cache_get_field_content_int(i, "game_for_day");

		day_time[0] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_HOURS);
		day_time[1] = ConvertUnixTime(day_prev, CONVERT_TIME_TO_MINUTES);

		day_time[2] = ConvertUnixTime(day_last, CONVERT_TIME_TO_HOURS);
		day_time[3] = ConvertUnixTime(day_last, CONVERT_TIME_TO_MINUTES);

		cache_get_field_content(i, "name", name);

		new fix_tabulation[21] = "                    ";

		format
		(
			query, sizeof query,
			"\n{FFFFFF}%s%s\t%d ур.\t%s%d ч %d мин\t%s%d ч %d мин\t\t%s",
			name,
			fix_tabulation[strlen(name)],
			admin,
			(day_time[0] >= 3) ? ((day_time[0] > 3) ? ("{66CC33}") : ("")) : ("{FF5533}"),
			day_time[0],
			day_time[1],
			(day_time[2] >= 3) ? ((day_time[2] > 3) ? ("{66CC33}") : ("")) : ("{FF5533}"),
			day_time[2],
			day_time[3],
			IsPlayerConnected(GetPlayerID(name)) ? "{66CC33}Online" : "{FF5533}Offline"
		);

		strcat(list, query);
	}

	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Список администрации", list, "Закрыть", "");

	return 1;
}

CMD:get(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /get [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[100];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден"), cache_delete(result);

	new reg_ip[16],
		last_ip[16],
		reg_date[6],
		reg_time = cache_get_field_content_int(0, "reg_time"),
		game_for_day = cache_get_field_content_int(0, "game_for_day"),
		game_for_day_prev = cache_get_field_content_int(0, "game_for_day_prev"),
		car_slots = cache_get_field_content_int(0, "car_slots");

	cache_get_field_content(0, "reg_ip", reg_ip);
	cache_get_field_content(0, "last_ip", last_ip);

	timestamp_to_date(reg_time, reg_date[2], reg_date[1], reg_date[0], reg_date[3], reg_date[4], reg_date[5]);

	new fmt_text[512];

	format
	(
		fmt_text, sizeof fmt_text,
		"\
		Номер аккаунта:\t\t%d\n\
		Наличные:\t\t\t%d\n\
		Осн. банк счет:\t\t%d\n\
		Уровень:\t\t\t%d\n\
		IP адрес (регистр.):\t\t%s\n\
		IP адрес (послед.):\t\t%s\n\
		Дата и время регистрации:\t\%02d.%02d.%d в %02d:%02d:%02d\n\
		Донат:\t\t\t\t%d (Всего: %d)\n\
		В игре сегодня:\t\t%d ч %d мин\n\
		В игре вчера:\t\t\t%d ч %d мин\n\n\
		Слоты для транспорта:\t%d\n\
		",
		user_id,
		cache_get_field_content_int(0, "money"),
		cache_get_field_content_int(0, "bank"),
		cache_get_field_content_int(0, "score"),
		reg_ip,
		last_ip,
		reg_date[0], reg_date[1], reg_date[2],
		reg_date[3], reg_date[4], reg_date[5],
		cache_get_field_content_int(0, "donate"),
		cache_get_field_content_int(0, "donate_total"),
		ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(game_for_day_prev, CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(game_for_day_prev, CONVERT_TIME_TO_MINUTES),
		car_slots
	);

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id=%d", user_id);
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
	{
		for(new idx; idx < cache_num_rows(); idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				modelid = cache_get_field_content_int(idx, "model_id"),
				Float: x = cache_get_field_content_float(idx, "pos_x"),
				Float: y = cache_get_field_content_float(idx, "pos_y"),
				Float: z = cache_get_field_content_float(idx, "pos_z"),
				Float: health = cache_get_field_content_float(idx, "health"),
				number[7];

			cache_get_field_content(idx, "number", number);

			format(query, sizeof query, "\n%s [%d] - %s (%.1f, %.1f, %.1f) HP: %.1f", GetVehicleInfo(modelid - 400, VI_NAME), id, number, x, y, z, health);
			strcat(fmt_text, query);
		}
	}

	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, name, fmt_text, "Закрыть", "");

	format(fmt_text, sizeof fmt_text, "Смотрит информацию об аккаунте %s[acc:%d]", name, user_id);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:money(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /money [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[90];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_field_content_int(0, "id");

	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден"), cache_delete(result);

	new player_cash = cache_get_field_content_int(0, "money"),
		player_bank = cache_get_field_content_int(0, "bank"),
		player_wage = cache_get_field_content_int(0, "wage"),
		player_business = cache_get_field_content_int(0, "business"),
		player_fuel_st = cache_get_field_content_int(0, "fuel_st"),
		player_deposit = cache_get_field_content_int(0, "deposit"),
		bank_accounts_money,
		fmt_text[310];

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT sum(balance) FROM bank_accounts WHERE uid='%d'", user_id);
	result = mysql_query(mysql, query);

	bank_accounts_money = cache_get_row_int(0, 0);

	cache_delete(result);

	format
	(
		fmt_text, sizeof fmt_text,
		"\
		Наличные деньги:\t\t\t$%d\n\
		Осн.банковский счёт:\t\t\t$%d\n\
		Временный З/П счёт:\t\t\t$%d\n\n\
		На всех доп. банк. счетах:\t\t$%d\n\
		Депозитный счёт:\t\t\t$%d\n\n\
		",
		player_cash, player_bank, player_wage, bank_accounts_money, player_deposit
	);

	if(player_business != -1)
	{
		mysql_format(mysql, query, sizeof query, "SELECT balance FROM business WHERE owner_id='%d' LIMIT 1", user_id);
		result = mysql_query(mysql, query);

		format(query, sizeof query, "На счету бизнеса:\t\t\t$%d\n", cache_get_row_int(0, 0));
		strcat(fmt_text, query);

		cache_delete(result);
	}
	else strcat(fmt_text, "Нет бизнеса\n");

	if(player_fuel_st != -1)
	{
		mysql_format(mysql, query, sizeof query, "SELECT balance FROM fuel_stations WHERE owner_id='%d' LIMIT 1", user_id);
		result = mysql_query(mysql, query);

		format(query, sizeof query, "На счету АЗС:\t\t\t\t$%d", cache_get_row_int(0, 0));
		strcat(fmt_text, query);

		cache_delete(result);
	}
	else strcat(fmt_text, "Нет АЗС");

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, name, fmt_text, "Закрыть", "");

	format(fmt_text, sizeof fmt_text, "Смотрит информацию о деньгах %s[acc:%d]", params, user_id);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:getlog(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getlog [имя игрока] [идентификатор лога] [кол-во дней]");
		SendClientMessage(playerid, 0xCECECEFF, "Идентификаторы:");
		SendClientMessage(playerid, 0xCECECEFF, "1 - Администраторский чат");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Ответы на репорты");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Администраторские действия");
		SendClientMessage(playerid, 0xCECECEFF, "4 - Выдача администраторских прав");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Выдача лидерских прав");
		SendClientMessage(playerid, 0xCECECEFF, "6 - СМС сообщения");
		SendClientMessage(playerid, 0xCECECEFF, "7 - Сообщения в общий чат");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Вопросы/жалобы в репорт");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Действия на посту лидера/заместителя");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Действия главного администратора");

		return 1;
	}

	extract params -> new string:name[21], log_id, time_limit;

	if(!(LOG_TYPE_ADMIN_CHAT <= log_id <= LOG_TYPE_SUPERADMIN_ACTION))
		return SendClientMessage(playerid, 0xCECECEFF, "Неверный идентификатор");

	if(!(0 <= time_limit <= 30))
		return SendClientMessage(playerid, 0xCECECEFF, "Количество дней от 1 до 30. Используйте 0 для отображения всех действий");

	if(!(3 <= strlen(name) <= 20))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	new query[144];
	new Cache: result,
		rows,
		user_id,
		admin;

	mysql_format(mysql, query, sizeof query, "SELECT id, admin FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	rows = cache_num_rows();

	if(rows)
	{
		user_id = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
	}

	cache_delete(result);

	if(rows && user_id)
	{
		if(GetPlayerAdminEx(playerid) >= admin)
		{
			mysql_format(mysql, query, sizeof query, "SELECT * FROM action_log WHERE acc_id=%d AND type=%d", user_id, log_id);

			new fmt_text[35];

			if(time_limit)
			{
				format(fmt_text, sizeof fmt_text, " AND time >= %d", gettime() - (time_limit * 86400));
				strcat(query, fmt_text);
			}

			result = mysql_query(mysql, query, true);

			rows = cache_num_rows();

			if(rows)
			{
				new log_name[10][37] =
				{
					"Администраторский чат",
					"Ответы на репорты",
					"Администраторские действия",
					"Выдача администраторских прав",
					"Выдача лидерских прав",
					"СМС сообщения",
					"Сообщения в общий чат",
					"Вопросы/жалобы в репорт",
					"Действия на посту лидера/заместителя",
					"Действия главного администратора"
				};

				format(query, sizeof query, "Найденные записи по параметру \"%s\" для игрока %s", log_name[log_id - 1], name);

				if(time_limit)
				{
					format(fmt_text, sizeof fmt_text, " за последние %d дн.", time_limit);
					strcat(query, fmt_text);
				}

				SendClientMessage(playerid, 0x66CC33FF, query);

				for(new idx; idx < rows; idx ++)
				{
					new desc[144],
						time[6],
						uip[17];

					cache_get_field_content(idx, "description", desc);
					cache_get_field_content(idx, "uip", uip);

					timestamp_to_date(cache_get_field_content_int(idx, "time"), time[2], time[1], time[0], time[3], time[4], time[5]);

					format
					(
						query, sizeof query,
						"#%d | %02d.%02d.%d в %02d:%02d:%02d | %s | %s",
						cache_get_field_content_int(idx, "id"),
						time[0], time[1], time[2], time[3], time[4], time[5],
						uip, desc
					);

					SendClientMessage(playerid, 0xffff00FF, query);
				}

				format(query, sizeof query, "Общее количество записей: %d", rows);
				SendClientMessage(playerid, 0x66CC33FF, query);
			}
			else SendClientMessage(playerid, 0xCECECEFF, "Записи в базе данных по данным параметрам не найдены");

			cache_delete(result);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы не можете просматривать логи администратора выше Вас рангом");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	return 1;
}

CMD:lip(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /lip [IP адрес]");

	new query[130],
		fmt_text[2300],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT name, reg_ip FROM accounts WHERE reg_ip = '%s' OR last_ip = '%s'", params, params);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		new l_acc_count;

		format(fmt_text, sizeof fmt_text, "IP: %s\n", params);

		for(new idx; idx < rows; idx ++)
		{
			new name[21],
				ip[17];

			cache_get_row(idx, 0, name);
			cache_get_row(idx, 1, ip);

			new bool: is_reg = false;

			if(!strcmp(ip, params, true))
				is_reg = true;

			else
				l_acc_count ++;

			format
			(
				query, sizeof query,
				"\n{FFFFFF}%d. %s - %s %s",
				idx + 1,
				name,
				is_reg ? "Reg" : "Last",
				IsPlayerConnected(GetPlayerID(name)) ? "{66CC33}[online]" : "{888888}[offline]"
			);

			strcat(fmt_text, query);
		}

		format(query, sizeof query, "Найдено аккаунтов: %d / %d", l_acc_count, rows);

		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, query, fmt_text, "Закрыть", "");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Данный IP адрес не найден в базе данных");

	cache_delete(result);

	return 1;
}

CMD:kick(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /kick [id игрока] [причина (необязательно)]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	else if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя кикнуть администратора выше по рангу");

	new reason[31];
	sscanf(params, "{d}s[30]", reason);

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "%s %s кикнул игрока %s", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Кикнул %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	Kick(to_player);

	return 1;
}

CMD:skick(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skick [id игрока]");

	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	else if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя кикнуть администратора выше по рангу");

	new fmt_msg[128];

	if(GetPlayerAdminEx(playerid) < 6)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s %s[%d] кикнул %s[%d] без лишнего шума", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
	}

	format(fmt_msg, sizeof fmt_msg, "Без шума кикнул %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	Kick(to_player);
	return 1;
}

CMD:mute(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /mute [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, mute_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя провести данное действие с администратором выше по рангу");

	if(!(1 <= mute_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 360 минут");
	if(GetPlayerData(to_player, P_MUTE) > 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть мут");
	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку администратору выше по рангу");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку самому себе");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "%s %s поставил затычку игроку %s на %d мин", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), mute_time);

	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SetPlayerData(to_player, P_MUTE, mute_time * 60);
	UpdatePlayerDatabaseInt(to_player, "mute", mute_time * 60);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания бана чата: {CCCC00}/time");

	format(fmt_msg, sizeof fmt_msg, "Выдал %s[acc:%d] блокировку чата на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), mute_time, reason);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:unmute(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unmute [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_MUTE) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет мута");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять затычку с самого себя");

	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "%s %s снял затычку с игрока %s", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SetPlayerData(to_player, P_MUTE, 0);
	UpdatePlayerDatabaseInt(to_player, "mute", 0);

	SendClientMessage(to_player, 0x32a44bFF, "Доступ в чат восстановлен");

	format(fmt_msg, sizeof fmt_msg, "Снял блокировку чата у %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:jail(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /jail [id игрока] [время в минутах] [причина (необязательно)]");

	extract params -> new to_player, jail_time, string: reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя провести данное действие с администратором выше по рангу");

	if(!(1 <= jail_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "Время должно быть не меньше 1 и не больше 360 минут");
	if(GetPlayerData(to_player, P_JAIL) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже сидит в тюрьме");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя поставить затычку самому себе");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "%s %s посадил в тюрьму игрока %s на %d мин", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), jail_time);

	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SendClientMessage(to_player, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");

	JailPlayer(to_player, jail_time);

	format(fmt_msg, sizeof fmt_msg, "Посадил в тюрьму %s[acc:%d] на %d мин. Причина: %s",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), jail_time, reason);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:unj(playerid)
{
	if(!GetPlayerPremium(playerid) || GetPlayerData(playerid, P_UNJ)) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет VIP, или вы уже воспользовались командой ранее");
    if(GetPlayerPremium(playerid) == 2)
	{
		SetPlayerData(playerid, P_JAIL ,GetPlayerData(playerid, P_JAIL) / 2);
	}
	else if(GetPlayerPremium(playerid) == 3)
	{
		SetPlayerData(playerid, P_JAIL ,GetPlayerData(playerid, P_JAIL) / 3);
	}
    SetPlayerData(playerid, P_UNJ, 1);
    UpdatePlayerDatabaseInt(playerid, "unj", GetPlayerData(playerid, P_UNJ));
    SendClientMessage(playerid, 0xCECECEFF, "Вы уменьшили срок тюрьмы!");
	return 1;
}

CMD:unjail(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unjail [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(GetPlayerData(to_player, P_JAIL) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не сидит в тюрьме");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять затычку с самого себя");

	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "%s %s выпустил из тюрьмы игрока %s", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	SendClientMessage(to_player, 0x32a44bFF, "Вы были выпущены на свободу");

	UnjailPlayer(to_player);

	format(fmt_msg, sizeof fmt_msg, "Выпустил из тюрьмы %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:ban(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ban [id игрока] [срок в дняй] [причина (необязательно)]");

	extract params -> new to_player, ban_time, string:reason[30];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= ban_time <= 365)) return SendClientMessage(playerid, 0xCECECEFF, "Срок бана может быть от 1 до 365 дней");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя забанить администратора выше по рангу");
	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя забанить самого себя");

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "Администратор %s забанил игрока %s на %d дней", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), ban_time);
	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы получили бан/варн сроком на %d дней\n\
	От администратора: %s\n\
	Обжаловать решение можно на форуме\n\
	В разделе жалобы на администраторов: forum.samp-mobile.com",ban_time , GetPlayerNameEx(playerid));


	Dialog(to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
	"Информация",
	fmt_msg
	,"Ясно", "");

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);



	if(!strlen(reason)) reason = "None";

	AddBan(GetPlayerAccountID(to_player), gettime(), ban_time, GetPlayerIpEx(to_player), reason, GetPlayerNameEx(playerid));
	Kick:(to_player);
	return 1;
}

CMD:unban(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new string: player_name[21];

	if(!strlen(player_name)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unban [ник игрока]");

	new query[80],
		Cache: result,
		rows,
		uid,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, last_ip FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		cache_get_row(0, 1, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0xCECECEFF, "Аккаунт игрока не заблокирован");

	mysql_format(mysql, query, sizeof query, "DELETE FROM ban_list WHERE user_id=%d", uid);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "unbanip %s", uip);
	SendRconCommand(query);

	SendRconCommand("reloadbans");

	format(query, sizeof query, "%s %s разбанил игрока %s", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), player_name);

	SendClientMessageToAll(0xFF5533FF, query);

	format(query, sizeof query, "Разбанил %s[acc:%d]", player_name, uid);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

	return 1;
}

CMD:offban(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /offban [ник игрока] [кол-во дней] [причина (необязательно)]");

	extract params -> new string: player_name[21], days, string: reason[30];

	if(!(1 <= days <= 365)) return SendClientMessage(playerid, 0xCECECEFF, "Количество дней от 1 до 365");

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		uid,
		admin,
		uip[16];

	mysql_format(mysql, query, sizeof query, "SELECT id, admin, last_ip FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		uid = cache_get_row_int(0, 0);
		admin = cache_get_row_int(0, 1);
		cache_get_row(0, 2, uip);
	}

	cache_delete(result);

	if(!rows || !uid) return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	if(GetPlayerAdminEx(playerid) < admin) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя забанить администратора выше по рангу");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ban_list WHERE user_id=%d", uid);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	cache_delete(result);

	if(rows) return SendClientMessage(playerid, 0xCECECEFF, "Аккаунт игрока уже заблокирован");

	format(query, sizeof query, "%s %s забанил оффлайн игрока %s на %d дней", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), player_name, days);

	if(strlen(reason) > 0)
		format(query, sizeof query, "%s. Причина: %s", query, reason);

	if(!strlen(reason)) reason = "None";

	SendClientMessageToAll(0xFF5533FF, query);

	format(query, sizeof query, "Оффлайн забанил %s[acc:%d] на %d дней. Причина: %s", player_name, uid, days, reason);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

	format(reason, sizeof reason, "[OFFLINE]%s", reason);

	AddBan(uid, gettime(), days, uip, reason, GetPlayerNameEx(playerid));

	return 1;
}

CMD:skin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new to_player, skin_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skin [id игрока] [id скина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(-1 <= skin_id <= 299) || skin_id == 0) return SendClientMessage(playerid, 0xCECECEFF, "ID скина от 1 до 299");

	if(skin_id != -1)
		SetPlayerSkin(to_player, skin_id);
	else
		SetPlayerSkin(to_player, GetPlayerSkinEx(to_player));

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "%s %s выдал Вам %s скин", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), skin_id != -1 ? "временный" : "прежний");
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выдали игроку %s %s скин", GetPlayerNameEx(to_player), skin_id != -1 ? "временный" : "прежний");
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		if(skin_id != -1)
			format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] выдал %s[%d] скин №%d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, skin_id);
		else
			format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] выдал %s[%d] прежний скин", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] скин %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), skin_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setskin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new to_player, skin_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setskin [id игрока] [id скина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerTeamEx(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя сменить скин игроку, находящемуся в организации");

	if(!(1 <= skin_id <= 299)) return SendClientMessage(playerid, 0xCECECEFF, "ID скина от 1 до 299");

	SetPlayerData(to_player, P_SKIN, skin_id);
	UpdatePlayerDatabaseInt(to_player, "skin", skin_id);

	SetPlayerSkinInit(to_player);

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "%s %s установил Вам скин №%d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), skin_id);
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы установили игроку %s скин №%d", GetPlayerNameEx(to_player), skin_id);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] установил %s[%d] скин №%d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, skin_id);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Установил %s[acc:%d] скин %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), skin_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:house(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /house [номер дома]");

	if(!(0 <= house_id <= g_house_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного дома не существует на сервере");

	new Float: x,
		Float: y,
		Float: z,
		Float: angle;

	x = GetHouseData(house_id, H_EXIT_POS_X);
	y = GetHouseData(house_id, H_EXIT_POS_Y);
	z = GetHouseData(house_id, H_EXIT_POS_Z);
	angle = GetHouseData(house_id, H_EXIT_ANGLE);

	SetPlayerPosEx(playerid, x, y, z, angle);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к дому №%d", house_id);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Телепортировался к дому %d", house_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:biz(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /biz [номер бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного бизнеса не существует на сервере");

	SetPlayerPosEx
	(
		playerid,
		GetBusinessData(biz_id, B_EXIT_POS_X),
		GetBusinessData(biz_id, B_EXIT_POS_Y),
		GetBusinessData(biz_id, B_EXIT_POS_Z),
		GetBusinessData(biz_id, B_EXIT_ANGLE)
	);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к бизнесу №%d", biz_id);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Телепортировался к бизнесу %d", biz_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:fuelstation(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new fs_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fuelstation [номер АЗС]");

	if(!(0 <= fs_id <= g_fuel_station_loaded-1)) return SendClientMessage(playerid, 0xCECECEFF, "Данной АЗС не существует на сервере");

	SetPlayerPosEx
	(
		playerid,
		GetFuelStationData(fs_id, FS_POS_X),
		GetFuelStationData(fs_id, FS_POS_Y),
		GetFuelStationData(fs_id, FS_POS_Z),
		0.0
	);

	new fmt_text[35];

	format(fmt_text, sizeof fmt_text, "Вы телепортировались к АЗС №%d", fs_id);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Телепортировался к АЗС %d", fs_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:inter(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player, interior; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /inter [id игрока] [интерьер]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerInterior(to_player, interior);

	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Вы установили %s[%d] интерьер %d", GetPlayerNameEx(to_player), to_player, interior);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s[%d] установил Вам интерьер %d", GetPlayerNameEx(playerid), playerid, interior);
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] установил %s[%d] интерьер №%d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid,
		GetPlayerNameEx(to_player), to_player, interior);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Установил %s[acc:%d] интерьер %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), interior);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:world(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player, world; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /world [id игрока] [вирт.мир]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerVirtualWorld(to_player, world);

	new fmt_text[110];

	format(fmt_text, sizeof fmt_text, "Вы установили %s[%d] вирт.мир %d", GetPlayerNameEx(to_player), to_player, world);
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s[%d] установил Вам вирт.мир %d", GetPlayerNameEx(playerid), playerid, world);
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] установил %s[%d] вирт.мир №%d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid,
		GetPlayerNameEx(to_player), to_player, world);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Установил %s[acc:%d] вирт.мир %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), world);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:warn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /warn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string:reason[66];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение админу выше по рангу");

	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение самому себе");

	AddPlayerData(to_player, P_WARN, +, 1);
	SetPlayerData(to_player, P_WARN_TIME, gettime() + (86400 * 10));

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "%s %s выдал предупреждение игроку %s [%d|3]", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), GetPlayerData(to_player, P_WARN));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	InvitePlayer(to_player, 0, 0, true);

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_WARN);
	new warns_time = GetPlayerData(to_player, P_WARN_TIME);

	format(fmt_msg, sizeof fmt_msg, "Выдал варн %s[acc:%d] (%d/3). Причина: %d", GetPlayerNameEx(to_player), uid, warns, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(warns >= 3)
	{
		SendClientMessage(to_player, 0xFF5533FF, "Аккаунт заблокирован на 10 дней");

		warns =
		warns_time = 0;

		AddBan(uid, gettime(), 10, GetPlayerIpEx(to_player), "получено 3 варна", GetPlayerNameEx(playerid));
		BanEx(to_player, "получено 3 варна");
	}
	else Kick:(to_player);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET warn=%d,warn_time=%d WHERE id=%d", warns, warns_time, uid);
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:unwarn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /warn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string: reason[66];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerData(to_player, P_WARN, 		0);
	SetPlayerData(to_player, P_WARN_TIME, 	0);

	UpdatePlayerDatabaseInt(to_player, "warn", 		0);
	UpdatePlayerDatabaseInt(to_player, "warn_time", 	0);

	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "%s %s снял все предупреждения с игрока %s", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Снял все варны %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:spawn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /spawn [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	SetPlayerSpawnInit(to_player);
	SpawnPlayer(to_player);

	new fmt_text[70];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] заспавнил %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
	}

	format(fmt_text, sizeof fmt_text, "Заспавнил %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:spcar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /spcar [id авто]");

	if(IsPlayerInAnyVehicle(playerid) && vehicleid == 0) vehicleid = GetPlayerVehicleID(playerid);

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	SetVehicleToRespawn(vehicleid);

	new fmt_msg[100];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s %s[%d] зареспавнил авто [№%d]", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, vehicleid);
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
	}

	format(fmt_msg, sizeof fmt_msg, "Зареспавнил авто №%d", vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:tp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	ShowTeleportList(playerid);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Использует меню телепортов");

	return 1;
}

CMD:goto(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /goto [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new Float: x, Float: y, Float: z, interior, virtual_world;
	GetPlayerPos(to_player, x, y, z);
	interior = GetPlayerInterior(to_player);
	virtual_world = GetPlayerVirtualWorld(to_player);

	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, interior, virtual_world, false);

	SetPlayerInHouse(playerid, GetPlayerInHouse(to_player));
	SetPlayerInBiz(playerid, GetPlayerInBiz(to_player));

	SendClientMessage(playerid, -1, "Вы были телепортированы");

	new fmt_msg[105];

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s %s[%d] телепортировался к %s[%d]", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
	}

	format(fmt_msg, sizeof fmt_msg, "Телепортировался к %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

ALT:gethere:getp;
ALT:gethere:getplayer;

CMD:gethere(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gethere [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
	{
		SendClientMessage(playerid, 0x66CC33FF, "Вы пытаетесь телепортировать к себе администратора Выше рангом, он должен подтвердить Ваше действие");
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GETHERE);
	}
	else
	{
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPosEx(to_player, x + 1, y + 1, z, 0.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), false);

		SetPlayerInHouse(to_player, GetPlayerInHouse(playerid));
		SetPlayerInBiz(to_player, GetPlayerInBiz(playerid));

		new fmt_msg[105];
		format(fmt_msg, sizeof fmt_msg, "%s %s телепортивал Вас к себе", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid));
		SendClientMessage(to_player, -1, fmt_msg);

		format(fmt_msg, sizeof fmt_msg, "Вы телепортивали %s к себе", GetPlayerNameEx(to_player));
		SendClientMessage(playerid, -1, fmt_msg);

		if(GetPlayerAdminEx(playerid) <= 5)
		{
			format(fmt_msg, sizeof fmt_msg, "[A] %s %s[%d] телепортировал к себе %s[%d]", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_msg, 0xCECECEFF);
		}

		format(fmt_msg, sizeof fmt_msg, "Телепортировал к себе %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);
	}

	return 1;
}

CMD:vtp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vtp [id транспорта]");
	if(!IsValidVehicle(to_vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	new Float: x, Float: y, Float: z;
	GetVehiclePos(to_vehicleid, x, y, z);

	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, false);

	SendClientMessage(playerid, -1, "Вы были телепортированы");

	new fmt_msg[105];

	format(fmt_msg, sizeof fmt_msg, "Телепортировался к авто №%d", to_vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] телепортировался к авто №%d", GetPlayerNameEx(playerid), playerid, to_vehicleid);
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
	}

	return 1;
}

CMD:vget(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /vget [id транспорта]");
	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);

	SetVehiclePos(vehicleid, x + 2.0, y + 2.0, z);

	SendClientMessage(playerid, -1, "Вы телепортировали авто к себе");

	new fmt_msg[105];

	format(fmt_msg, sizeof fmt_msg, "Телепортировался к себе авто №%d", vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] телепортировал к себе авто №%d", GetPlayerNameEx(playerid), playerid, vehicleid);
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
	}

	return 1;
}

CMD:getv(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getv [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerOwnableCar(to_player) == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, 0xCECECEFF, "У игрока нет личного транспорта");

	new fmt_text[105],
		Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(to_player, x, y, z);

	SetVehiclePos(GetPlayerOwnableCar(to_player), x + 2.0, y + 2.0, z);

	format(fmt_text, sizeof fmt_text, "Вы телепортировали к %s его личный транспорт", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s телепортировал к Вам Ваш личный транспорт", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] телепортировал к %s[%d] его личный транспорт", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Телепортировался к %s[acc:%d] его авто", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}
CMD:fixcar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fixcar [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInAnyVehicle(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок должен находиться в транспорте");

	new fmt_text[93],
		vehicleid = GetPlayerVehicleID(to_player);

	RepairVehicle(vehicleid);
	if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

	format(fmt_text, sizeof fmt_text, "Вы починили транспорт игрока %s", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s починил Ваш транспорт", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] починил транспорт игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Починил транспорт %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setfuel(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new vehicleid, fuel; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setfuel [id транспорта] [кол-во топлива]");

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "Данного транспорта не существует на сервере");

	if(!(0 <= fuel <= 150)) return SendClientMessage(playerid, 0xCECECEFF, "Количество топлива от 0 до 150");

	SetVehicleData(vehicleid, V_FUEL, fuel);

	new fmt_text[80];

	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива в ТС №%d", fuel, vehicleid);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) >= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива в ТС №%d", GetPlayerNameEx(playerid), playerid, fuel, vehicleid);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Установил %d топлива в авто №%d", fuel, vehicleid);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:settime(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new time; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /settime [время (0-23)]");

	if(!(0 <= time <= 23)) return SendClientMessage(playerid, 0xCECECEFF, "Время от 0 до 23 часов");

	SetWorldTime(time);

	new fmt_text[70];

	format(fmt_text, sizeof fmt_text, "Вы установили время %02d:00", time);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил время на сервере на %02d:00", GetPlayerNameEx(playerid), playerid, time);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Установил время %02d:00 на сервере", time);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setweather(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new weather; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setweather [погода (0-20)]");

	if(!(-1 <= weather <= 20))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Погода от 0 до 20 (-1 - случайная смена погоды)");
		SendClientMessage(playerid, 0xCECECEFF, "Рекомендовано: 1, 3, 8, 9, 18");

		return 1;
	}

	if(weather != -1)
		SetWeather(weather);

	new fmt_text[70];

	if(weather != -1)
		format(fmt_text, sizeof fmt_text, "Вы установили погоду %d", weather);
	else
		format(fmt_text, sizeof fmt_text, "Вы установили случайную погоду");

	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		if(weather != -1)
			format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил погоду на сервере на %d", GetPlayerNameEx(playerid), playerid, weather);
		else
			format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил случайную погоду на сервере", GetPlayerNameEx(playerid), playerid);

		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Установил погоду №%d на сервере", weather);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:payday(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	for(new i = GetMaxPlayers() - 1; i != -1; i--)
	{
	    TestPayDay(i);
	}

	new fmt_text[50];

	SendClientMessage(playerid, -1, "Вы включили PayDay");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] инициировал PayDay", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0xCECECEFF);

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Инициировал PayDay");

	return 1;
}

CMD:gzcolor(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new gang_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gzcolor [id банды] (0-Свободная зона, 1-Grove Gang, 2-Vagos Gang, 3-Ballas Gang, 4-Aztecas Gang)");

	if(!(0 <= gang_id <= 4))
		return SendClientMessage(playerid, 0xCECECEFF, "Банды: 0-Свободная зона, 1-Grove Gang, 2-Vagos Gang, 3-Ballas Gang, 4-Aztecas Gang");

	new gang_zone_id = -1;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(!IsPlayerInDynamicArea(playerid, GetGangZoneData(idx, GZ_AREA))) continue;

		gang_zone_id = idx;
		break;
	}

	if(gang_zone_id == -1)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на нужной территории");

	SetGangZoneData(gang_zone_id, GZ_GANG, gang_id);
	SaveGangZone(gang_zone_id);

	GangZoneShowForAll(GetGangZoneData(gang_zone_id, GZ_ZONE), gang_zone_colors[ GetGangZoneData(gang_zone_id, GZ_GANG) ]);

	new fmt_text[75];

	SendClientMessage(playerid, -1, "Вы изменили банду, владеющую данной территорией");

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] изменил банду у территории №%d на %d", GetPlayerNameEx(playerid), playerid, gang_zone_id, gang_id);
	SendMessageToAdmins(fmt_text, 0xCECECEFF);

	format(fmt_text, sizeof fmt_text, "Изменил банду у территории №%d на %d", gang_zone_id, gang_id);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setprods(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new biz_id, amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setprods [id бизнеса] [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0xCECECEFF, "Количество продуктов от 0 до 10000");

	if(!(0 <= biz_id <= g_business_loaded - 1))
		return SendClientMessage(playerid, 0xCECECEFF, "Данного бизнеса не существует на сервере");

	SetBusinessData(biz_id, B_PRODS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE business SET products=%d WHERE id=%d", GetBusinessData(biz_id, B_PRODS), GetBusinessData(biz_id, B_SQL_ID));
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d продуктов в бизнесе №%d", amount, biz_id);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d продуктов в бизнесе №%d", GetPlayerNameEx(playerid), playerid, amount, biz_id);
	SendMessageToAdmins(fmt_text, 0xCECECEFF);

	return 1;
}

CMD:fullprods(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fullprods [кол-во]");

	if(!(0 <= amount <= 10000000))
		return SendClientMessage(playerid, 0xCECECEFF, "Количество продуктов от 0 до 10.000.000");

	for(new biz_id; biz_id < g_business_loaded - 1; biz_id ++)
		SetBusinessData(biz_id, B_PRODS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE business SET products=%d", amount);
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d продуктов во всех бизнесах", amount);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d продуктов во всех бизнесах", GetPlayerNameEx(playerid), playerid, amount);
	SendMessageToAdmins(fmt_text, 0xCECECEFF);

	return 1;
}

CMD:setfuels(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new fs_id, amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setfuels [id АЗС] [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0xCECECEFF, "Количество топлива от 0 до 10000");

	if(!(0 <= fs_id <= g_fuel_station_loaded-1))
		return SendClientMessage(playerid, 0xCECECEFF, "Данной АЗС не существует на сервере");

	SetFuelStationData(fs_id, FS_FUELS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE fuel_stations SET fuels=%d WHERE id=%d", GetFuelStationData(fs_id, FS_FUELS), GetFuelStationData(fs_id, FS_SQL_ID));
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива в АЗС №%d", amount, fs_id);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива в АЗС №%d", GetPlayerNameEx(playerid), playerid, amount, fs_id);
	SendMessageToAdmins(fmt_text, 0xCECECEFF);

	return 1;
}

CMD:fullfuels(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new amount; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fullfuels [кол-во]");

	if(!(0 <= amount <= 10000))
		return SendClientMessage(playerid, 0xCECECEFF, "Количество топлива от 0 до 10000");

	for(new fs_id; fs_id < g_fuel_station_loaded - 1; fs_id ++)
		SetFuelStationData(fs_id, FS_FUELS, amount);

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "UPDATE fuel_stations SET fuels=%d", amount);
	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы установили %d топлива во всех АЗС", amount);
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] установил %d топлива во всех АЗС", GetPlayerNameEx(playerid), playerid, amount);
	SendMessageToAdmins(fmt_text, 0xCECECEFF);

	return 1;
}

CMD:addbiz(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new type, price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addbiz [тип] [стоимость] [цена аренды]");

	new fmt_text[368];

	if(!(1 <= type <= 15))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Типы бизнесов:");

		SendClientMessage(playerid, 0xCECECEFF, "1 - Магазин 24/7");
		SendClientMessage(playerid, 0xCECECEFF, "2 - Клуб");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Управление статистики");
		SendClientMessage(playerid, 0xCECECEFF, "4 - Риэлторское агенство");
		SendClientMessage(playerid, 0xCECECEFF, "5 - Магазин одежды");
		SendClientMessage(playerid, 0xCECECEFF, "6 - Отель");
		SendClientMessage(playerid, 0xCECECEFF, "7 - Авторынок");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Казино");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Сотовый салон");
		SendClientMessage(playerid, 0xCECECEFF, "10 - СТО");
		SendClientMessage(playerid, 0xCECECEFF, "11 - Закусочная");
 		SendClientMessage(playerid, 0xCECECEFF, "12 - Магазин оружия");
		SendClientMessage(playerid, 0xCECECEFF, "13 - Букмекерская контора");
		SendClientMessage(playerid, 0xCECECEFF, "14 - Центр лицензирования");
		SendClientMessage(playerid, 0xCECECEFF, "15 - Магазин мебели");

		return 1;
	}

	if(price < 1) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость бизнеса не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость аренды не может быть меньше 1");

	new Cache: result,
		idx = g_business_loaded;

	GetPlayerPos(playerid, g_business[idx][B_POS_X], g_business[idx][B_POS_Y], g_business[idx][B_POS_Z]);

	new buffer[2];

	buffer[0] = Get2DCity(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));
	buffer[1] = Get2DZone(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));

	SetBusinessData(idx, B_CITY,			buffer[0]);
	SetBusinessData(idx, B_ZONE,			buffer[1]);

	SetBusinessData(idx, B_PRICE,			price);
	SetBusinessData(idx, B_RENT_PRICE,		rent_price);
	SetBusinessData(idx, B_TYPE,			type);
	SetBusinessData(idx, B_INTERIOR,		type - 1);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO business \
		(city, zone, type, interior, price, rent_price, x, y, z)\
		VALUES ('%d', '%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f')",
		GetBusinessData(idx, B_CITY),
		GetBusinessData(idx, B_ZONE),
		type, type - 1, price, rent_price,
		GetBusinessData(idx, B_POS_X),
		GetBusinessData(idx, B_POS_Y),
		GetBusinessData(idx, B_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetBusinessData(idx, B_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	g_business_loaded ++;

	SetBusinessData(idx, B_LABEL, CreateDynamic3DTextLabel(GetBusinessInteriorInfo(GetBusinessData(idx, B_INTERIOR), BT_NAME), 0xFFFF00FF, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z) + 0.3, 6.50));

	CreatePickup(1318, 23, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);

	UpdateBusinessLabel(idx);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] создал бизнес №%d (%s / %s)", GetPlayerNameEx(playerid), playerid, idx, GetCityName(GetBusinessData(idx, B_CITY)), GetZoneName(GetBusinessData(idx, B_ZONE)));

	SendMessageToAdmins(fmt_text, 0x66CC33FF);

	SendClientMessage(playerid, 0x1E90FFFF, "Используйте {FFCC00}/bsetexitpos{1E90FF}, чтобы завершить создание бизнеса");

	return 1;
}

CMD:bsetexitpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bsetexitpos [id бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного бизнеса не существует на сервере");

	GetPlayerPos(playerid, g_business[biz_id][B_EXIT_POS_X], g_business[biz_id][B_EXIT_POS_Y], g_business[biz_id][B_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_business[biz_id][B_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetBusinessData(biz_id, B_EXIT_POS_X),
		GetBusinessData(biz_id, B_EXIT_POS_Y),
		GetBusinessData(biz_id, B_EXIT_POS_Z),
		GetBusinessData(biz_id, B_EXIT_ANGLE),
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у бизнеса №%d", biz_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:bsetpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new biz_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bsetpos [id бизнеса]");

	if(!(0 <= biz_id <= g_business_loaded - 1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного бизнеса не существует на сервере");

	GetPlayerPos(playerid, g_business[biz_id][B_POS_X], g_business[biz_id][B_POS_Y], g_business[biz_id][B_POS_Z]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE business SET x='%f', y='%f', z='%f' WHERE id=%d",
		GetBusinessData(biz_id, B_POS_X),
		GetBusinessData(biz_id, B_POS_Y),
		GetBusinessData(biz_id, B_POS_Z),
		GetBusinessData(biz_id, B_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты входа у бизнеса №%d", biz_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:hotelsinit(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	for(new i = 1; i < 252; i++)
	{
		mysql_query(mysql, "INSERT INTO `hotels`(`hotel_id`, `owner_id`, `rent_time`, `status`) VALUES (0,0,0,0)", true);
	}
	return 1;
}

CMD:addhouse(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new type, price, rent_price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /addhouse [тип] [стоимость] [цена аренды]");

	new fmt_text[300];

	if(!(0 <= type <= sizeof g_house_type - 1))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Типы домов:");

		for(new i; i < sizeof g_house_type; i ++)
		{
			format(fmt_text, sizeof fmt_text, "%d. %s", i, GetHouseTypeInfo(i, HT_NAME));

			SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		}

		return 1;
	}

	if(price < 1) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость дома не может быть меньше 1");

	if(rent_price < 1) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость аренды не может быть меньше 1");

	new Cache: result,
		idx = g_house_loaded;

	GetPlayerPos(playerid, g_house[idx][H_POS_X], g_house[idx][H_POS_Y], g_house[idx][H_POS_Z]);

	new buffer[2];

	buffer[0] = Get2DCity(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));
	buffer[1] = Get2DZone(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));

	SetHouseData(idx, H_CITY,			buffer[0]);
	SetHouseData(idx, H_ZONE,			buffer[1]);

	SetHouseData(idx, H_PRICE,			price);
	SetHouseData(idx, H_RENT_PRICE,		rent_price);
	SetHouseData(idx, H_TYPE,			type);

	format
	(
		fmt_text, sizeof fmt_text,
		"INSERT INTO houses \
		(city, zone, type, price, rent_price, x, y, z)\
		VALUES ('%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f')",
		GetHouseData(idx, H_CITY),
		GetHouseData(idx, H_ZONE),
		type, price, rent_price,
		GetHouseData(idx, H_POS_X),
		GetHouseData(idx, H_POS_Y),
		GetHouseData(idx, H_POS_Z)
	);

	result = mysql_query(mysql, fmt_text, true);

	SetHouseData(idx, H_SQL_ID, 		cache_insert_id());

	cache_delete(result);

	g_house_loaded ++;

	UpdateHouse(idx);

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] создал дом №%d (%s / %s)", GetPlayerNameEx(playerid), playerid, idx, GetCityName(GetHouseData(idx, H_CITY)), GetZoneName(GetHouseData(idx, H_ZONE)));

	SendMessageToAdmins(fmt_text, 0x66CC33FF);

	SendClientMessage(playerid, 0x1E90FFFF, "Используйте {FFFF00}/setexitpos и /setcarpos{1E90FF}, чтобы завершить создание дома");

	return 1;
}

CMD:setexitpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setexitpos [id дома]");

	if(!(0 <= house_id <= g_house_loaded - 1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного дома не существует на сервере");

	GetPlayerPos(playerid, g_house[house_id][H_EXIT_POS_X], g_house[house_id][H_EXIT_POS_Y], g_house[house_id][H_EXIT_POS_Z]);
	GetPlayerFacingAngle(playerid, g_house[house_id][H_EXIT_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE houses SET exit_x='%f', exit_y='%f', exit_z='%f', exit_angle='%f' WHERE id=%d",
		GetHouseData(house_id, H_EXIT_POS_X),
		GetHouseData(house_id, H_EXIT_POS_Y),
		GetHouseData(house_id, H_EXIT_POS_Z),
		GetHouseData(house_id, H_EXIT_ANGLE),
		GetHouseData(house_id, H_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты выхода у дома №%d", house_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:setcarpos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setcarpos [id дома]");

	if(!(0 <= house_id <= g_house_loaded - 1)) return SendClientMessage(playerid, 0xCECECEFF, "Данного дома не существует на сервере");

	GetPlayerPos(playerid, g_house[house_id][H_CAR_POS_X], g_house[house_id][H_CAR_POS_Y], g_house[house_id][H_CAR_POS_Z]);
	GetPlayerFacingAngle(playerid, g_house[house_id][H_CAR_ANGLE]);

	new fmt_text[144];

	format
	(
		fmt_text, sizeof fmt_text,
		"UPDATE houses SET car_x='%f', car_y='%f', car_z='%f', car_angle='%f' WHERE id=%d",
		GetHouseData(house_id, H_CAR_POS_X),
		GetHouseData(house_id, H_CAR_POS_Y),
		GetHouseData(house_id, H_CAR_POS_Z),
		GetHouseData(house_id, H_CAR_ANGLE),
		GetHouseData(house_id, H_SQL_ID)
	);

	mysql_query(mysql, fmt_text, false);

	format(fmt_text, sizeof fmt_text, "Вы успешно изменили координаты спавна авто у дома №%d", house_id);

	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:getname(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new user_id; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /getname [номер аккаунта]");

	new name[21],
		fmt_text[120];

	format(name, sizeof name, "%s", GetPlayerNameBySqlID(user_id));

	if(strcmp(name, "none", true))
	{
		format(fmt_text, sizeof fmt_text, "Имя: %s / Номер аккаунта: %d", name, user_id);

		SendClientMessage(playerid, 0x1E90FFFF, fmt_text);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Данный аккаунт не найден в базе данных");

	return 1;
}

CMD:slap(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /slap [id игрока]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new Float: x, Float: y, Float: z, fmt_text[85];
	GetPlayerPos(to_player, x, y, z);

	SetPlayerPos(to_player, x, y, z + 5);
	PlayerPlaySound(to_player, 1130, 0.0, 0.0, 0.0);

	format(fmt_text, sizeof fmt_text, "Вы подбросили игрока %s", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s подбросил Вас", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] подбросил игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Подбросил %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:hp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player, health; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /hp [id игрока] [количество здоровья]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(GetPlayerAdminEx(playerid) == 1 && to_player != playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Администраторам 1-го уровня доступно изменение только своего уровня здоровья");

	else if(!(0 <= health <= 100)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень здоровья от 0 до 100");

	SetPlayerData(to_player, P_HEALTH, health);
	SetPlayerHealthEx(to_player, health);

	if(GetPlayerData(to_player, P_HOSPITAL))
		SetPlayerData(to_player, P_HOSPITAL, false);

	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "%s %s изменил Вам уровень здоровья", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили %s уровень здоровья", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_msg);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s %s[%d] изменил уровень здоровья %s[%d] на %d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, health);
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
	}

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] уровень здоровья на %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), health);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}
CMD:givedamage(playerid)
{
	ApplyAnimation(playerid, "PED", "SHOT_PARTIAL", 4.1, false, 0, 0, 0, 0, 1);
	new Float:hpplayer;
	GetPlayerHealth(playerid,hpplayer);
	SetPlayerHealth(playerid,hpplayer-30);
	return 1;
}
CMD:setplayerhouse(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, health; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setplayerhouse [id игрока] [id house]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(!(-1 <= health <= 1000)) return SendClientMessage(playerid, 0xCECECEFF, "Номер дома от -1 до 1000 ( -1 выселить )");

	SetPlayerData(to_player, P_HOUSE, health);
	SetPlayerData(playerid, P_HOUSE_ROOM, -1);
	SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_HOME);
	if(health == -1)
	{
	    SetPlayerData(to_player, P_HOUSE, -1);
		SetPlayerData(playerid, P_HOUSE_ROOM, -1);
		SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_NONE);
	}

	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "%s %s изменил Вам номер дома", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили игроку %s номер дома на %d", GetPlayerNameEx(to_player),health);
	SendClientMessage(playerid, -1, fmt_msg);
	new query[90];

	format(query, sizeof query, "UPDATE accounts SET house_type=%d,house=%d, WHERE id=%d LIMIT 1", HOUSE_TYPE_HOME, health, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s %s[%d] изменил номер дому %s[%d] на %d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, health);
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
	}

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] номер дома %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), health);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}
CMD:setplayerbiz(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, health; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setplayerbiz [id игрока] [id biz]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(!(-1 <= health <= 1000)) return SendClientMessage(playerid, 0xCECECEFF, "Номер biz от -1 до 1000 ( -1 выселить )");

	SetPlayerData(to_player, P_BUSINESS, health);


	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "%s %s изменил Вам номер biz", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили игроку %s номер biz", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_msg);
	new query[90];
	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET business=%d WHERE id=%d LIMIT 1", health, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] %s %s[%d] изменил номер biz %s[%d] на %d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, health);
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
	}

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] номер biz %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), health);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}
CMD:spcars(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	new vehicles_count;

	for(new i = 1; i < MAX_VEHICLES; i++)
	{
	    if(!IsValidVehicle(i)) continue;
	    else if(IsVehicleOccupied(i)) continue;
	    else if(IsTrailerAttachedToAnyVehicle(i)) continue;
	    else if(GetVehicleData(i, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_TRUCK_TRAIL) continue;

	    SetVehicleToRespawn(i);
	    vehicles_count++;
	}

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "Вы зареспавнили весь незанятый транспорт. Всего зареспавнено: %d шт.", vehicles_count);
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] зареспавнил весь незанятый транспорт", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, "Зареспавнил весь незанятый транспорт");

	return 1;
}

CMD:veh(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new model_id, color_1, color_2; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /veh [id модели] [цвет 1] [цвет 2] [доступ игроков (не обязательно)]");

	if(!(400 <= model_id <= 611)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте модель от 400 до 611");

	new status;

	sscanf(params, "{d}{d}{d}d", status);

	if(!(0 <= status <= 1))
		return SendClientMessage(playerid, 0xCECECEFF, "Доступ игроков к транспорту: 0 - Нет доступа, 1 - Доступно любому игроку");

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	new vehicleid = CreateVehicle(model_id, x, y, z, a, color_1, color_2, -1, 0, VEHICLE_ACTION_TYPE_ADMIN_CAR, status);
	PutPlayerInVehicle(playerid, vehicleid, 0);

	new fmt_text[100];

	format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] создал транспорт (%d, %d, %d, %d)",
	admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, vehicleid, model_id, color_1, color_2);

	//SendMessageToAdmins(fmt_text, 0xCECECEFF);

	format(fmt_text, sizeof fmt_text, "Создал транспорт (%d, %d, %d)", model_id, color_1, color_2);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setleader(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setleader [id игрока] [организация]");

		SendClientMessage(playerid, 0xCECECEFF, "1 - Мэрия г.Los-Santos");
		SendClientMessage(playerid, 0xCECECEFF, "2 - ВМФ");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Больница г.Los-Santos");
		SendClientMessage(playerid, 0xCECECEFF, "4 - СМИ г.Los-Santos");
		SendClientMessage(playerid, 0xCECECEFF, "5 - LSPD");
		SendClientMessage(playerid, 0xCECECEFF, "6 - FBI");
		SendClientMessage(playerid, 0xCECECEFF, "7 - Grove Gang");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Vagos Gang");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Ballas Gang");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Aztecas Gang");

		return 1;
	}
	extract params -> new to_player, org_id;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!(0 <= org_id <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Неверный идентификатор организации");
	if(org_id == 8 || org_id == 10) return SendClientMessage(playerid, 0xCECECEFF, "Неверный идентификатор организации");

	new fmt_msg[155];

	if(!org_id)
	{
	    format(fmt_msg, sizeof fmt_msg, "%s %s[%d] снял Вас с должности лидера организации \"%s\"", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0xFFFF00FF, fmt_msg);
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] снял %s[%d] с должности лидера организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
		return InvitePlayer(to_player, 0, 0, true);
	}

	InvitePlayer(to_player, org_id, 10, true);

	format(fmt_msg, sizeof fmt_msg, "%s %s[%d] назначил Вас лидером организации \"%s\"", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));

	SendClientMessage(to_player, 0xFFFF00FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] назначил %s[%d] лидером организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));

	SendMessageToAdmins(fmt_msg, 0xCECECEFF);

	if(org_id)
		format(fmt_msg, sizeof fmt_msg, "Назначил %s[acc:%d] лидером %s[%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetTeamName(org_id), org_id);

	else
		format(fmt_msg, sizeof fmt_msg, "Снял %s[acc:%d] с поста лидера", GetPlayerNameEx(to_player), to_player);

	SendLog(playerid, LOG_TYPE_SET_LEADER, fmt_msg);

	return 1;
}

CMD:givegun(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, weapon_id, weapon_ammo; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givegun [id игрока] [id оружия] [кол-во патронов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= weapon_id <= 46) || (19 <= weapon_id <= 21)) return SendClientMessage(playerid, 0xCECECEFF, "ID оружия от 1 до 46");
	if(!(1 <= weapon_ammo <= 1000)) return SendClientMessage(playerid, 0xCECECEFF, "Количество патронов от 1 до 1000");

	GivePlayerWeapon(to_player, weapon_id, weapon_ammo);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s %s[%d] выдал Вам %s и %d патр.", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetWeaponName(weapon_id), weapon_ammo);
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выдали игроку %s[%d] %s и %d патр.", GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id), weapon_ammo);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] выдал %s[%d] %s [%d патр]", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id), weapon_ammo);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] %s[%d патр]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetWeaponName(weapon_id), weapon_ammo);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:templeader(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /templeader [организация]");

		SendClientMessage(playerid, 0xCECECEFF, "1 - Мэрия г.Los-Santos");
		SendClientMessage(playerid, 0xCECECEFF, "2 - ВМФ");
		SendClientMessage(playerid, 0xCECECEFF, "3 - Больница г.Los-Santos");
		SendClientMessage(playerid, 0xCECECEFF, "4 - СМИ г.Los-Santos");
		SendClientMessage(playerid, 0xCECECEFF, "5 - LSPD");
		SendClientMessage(playerid, 0xCECECEFF, "6 - FBI");
		SendClientMessage(playerid, 0xCECECEFF, "7 - Grove Gang");
		SendClientMessage(playerid, 0xCECECEFF, "8 - Vagos Gang");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Ballas Gang");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Aztecas Gang");

		return 1;
	}
	extract params -> new org_id;

	if(!(0 <= org_id <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Неверный идентификатор организации");
	if(org_id == 8 || org_id == 10) return SendClientMessage(playerid, 0xCECECEFF, "Неверный идентификатор организации");
	new fmt_msg[155];

	if(!org_id)
	{
		SendClientMessage(playerid, 0xFFFF00FF, "Вы сняли с себя временное лидерство");
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] снял с себя временное лидерство организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(playerid));
		SendMessageToAdmins(fmt_msg, 0xCECECEFF);
		return InvitePlayer(playerid, 0, 0, true);
	}

	InvitePlayer(playerid, org_id, 10, true);

	format(fmt_msg, sizeof fmt_msg, "Вы взяли временное лидерство организации \"%s\"", GetPlayerTeamName(playerid));

	SendClientMessage(playerid, 0xFFFF00FF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] взял временное лидерство организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(playerid));

	SendMessageToAdmins(fmt_msg, 0xCECECEFF);

	if(org_id)
		format(fmt_msg, sizeof fmt_msg, "Взял временное лидерство %s[%d]", GetTeamName(org_id), org_id);

	else
		format(fmt_msg, sizeof fmt_msg, "Cнял себя с временного лидерства");

	SendLog(playerid, LOG_TYPE_SET_LEADER, fmt_msg);

	return 1;
}

CMD:agivelic(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, license; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /agivelic [id игрока] [тип] (1-A 2-B 3-C 4-D 5-полеты 6-плавание 7-бизнес 8-оружие)");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new fmt_text[144];

	switch(license)
	{
		case 1:
		{
			SetPlayerData(to_player, P_DRIVING_A, GetPlayerData(to_player, P_DRIVING_A) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "driving_a", GetPlayerData(to_player, P_DRIVING_A));

			format(fmt_text, sizeof fmt_text, "%s %s[%d] %s права категории A", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_A) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] права категории A", GetPlayerData(to_player, P_DRIVING_A) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x32a44bFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] %s %s[%d] права категории A", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_A) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0xCECECEFF);
		}
		case 2:
		{
			SetPlayerData(to_player, P_DRIVING_B, GetPlayerData(to_player, P_DRIVING_B) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "driving_b", GetPlayerData(to_player, P_DRIVING_B));

			format(fmt_text, sizeof fmt_text, "%s %s[%d] %s права категории B", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_B) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] права категории B", GetPlayerData(to_player, P_DRIVING_B) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x32a44bFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] %s %s[%d] права категории B", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_B) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0xCECECEFF);
		}
		case 3:
		{
			SetPlayerData(to_player, P_DRIVING_C, GetPlayerData(to_player, P_DRIVING_C) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "driving_c", GetPlayerData(to_player, P_DRIVING_C));

			format(fmt_text, sizeof fmt_text, "%s %s[%d] %s права категории C", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_C) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] права категории C", GetPlayerData(to_player, P_DRIVING_C) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x32a44bFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] %s %s[%d] права категории C", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_C) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0xCECECEFF);
		}
		case 4:
		{
			SetPlayerData(to_player, P_DRIVING_D, GetPlayerData(to_player, P_DRIVING_D) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "driving_d", GetPlayerData(to_player, P_DRIVING_D));

			format(fmt_text, sizeof fmt_text, "%s %s[%d] %s права категории D", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_D) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] права категории D", GetPlayerData(to_player, P_DRIVING_D) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x32a44bFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] %s %s[%d] права категории D", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_D) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0xCECECEFF);
		}
		case 5:
		{
			SetPlayerData(to_player, P_LIC_FLY, GetPlayerData(to_player, P_LIC_FLY) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "lic_fly", GetPlayerData(to_player, P_LIC_FLY));

			format(fmt_text, sizeof fmt_text, "%s %s[%d] %s лицензию на полеты", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_LIC_FLY) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на полеты", GetPlayerData(to_player, P_LIC_FLY) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x32a44bFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] %s %s[%d] лицензию на полеты", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_LIC_FLY) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0xCECECEFF);
		}
		case 6:
		{
			SetPlayerData(to_player, P_LIC_WATER, GetPlayerData(to_player, P_LIC_WATER) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "lic_water", GetPlayerData(to_player, P_LIC_WATER));

			format(fmt_text, sizeof fmt_text, "%s %s[%d] %s лицензию на вождение водного транспорта", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_LIC_WATER) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на вождение водного транспорта", GetPlayerData(to_player, P_LIC_WATER) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x32a44bFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] %s %s[%d] лицензию на вождение водного транспорта", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_LIC_WATER) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0xCECECEFF);
		}
		case 7:
		{
			SetPlayerData(to_player, P_LIC_BIZ, GetPlayerData(to_player, P_LIC_BIZ) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "lic_biz", GetPlayerData(to_player, P_LIC_BIZ));

			format(fmt_text, sizeof fmt_text, "%s %s[%d] %s лицензию на бизнес", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_LIC_BIZ) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на бизнес", GetPlayerData(to_player, P_LIC_BIZ) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x32a44bFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] %s %s[%d] лицензию на бизнес", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_LIC_BIZ) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0xCECECEFF);
		}
		case 8:
		{
			SetPlayerData(to_player, P_LIC_WEAPON, GetPlayerData(to_player, P_LIC_WEAPON) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "lic_weapon", GetPlayerData(to_player, P_LIC_WEAPON));

			format(fmt_text, sizeof fmt_text, "%s %s[%d] %s лицензию на оружие", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_LIC_WEAPON) ? "выдал Вам" : "забрал у Вас");
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "Вы %s %s[%d] лицензию на оружие", GetPlayerData(to_player, P_LIC_WEAPON) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x32a44bFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] %s %s[%d] лицензию на оружие", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_LIC_WEAPON) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0xCECECEFF);
		}
		default: return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /agivelic [id игрока] [тип] (1-A 2-B 3-C 4-D 5-полеты 6-плавание 7-бизнес 8-оружие)");
	}

	format(fmt_text, sizeof fmt_text, "Выдал %s[acc:%d] лицензию %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), license);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:setskills(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, set_code, set_value; else {

	    SendClientMessage(playerid, 0xCECECEFF, "Использование: /setskills [id игрока] [навык] [значение]");
	    SendClientMessage(playerid, 0xCECECEFF, "Коды навыков:");
		SendClientMessage(playerid, 0xCECECEFF, "1 - Colt 45");
	    SendClientMessage(playerid, 0xCECECEFF, "2 - SD Pistol");
	    SendClientMessage(playerid, 0xCECECEFF, "3 - Desert Eagle");
	    SendClientMessage(playerid, 0xCECECEFF, "4 - Shotgun");
	    SendClientMessage(playerid, 0xCECECEFF, "5 - MP5");
	    SendClientMessage(playerid, 0xCECECEFF, "6 - AK47");
	    SendClientMessage(playerid, 0xCECECEFF, "7 - M4");
	    SendClientMessage(playerid, 0xCECECEFF, "8 - Sniper Rifle");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Sawnoff");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Combat SG");
		SendClientMessage(playerid, 0xCECECEFF, "11 - Micro Uzi");
	    SendClientMessage(playerid, 0xCECECEFF, "12 - Сила");
	    return 1;
	}

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(0 <= set_value <= 100)) return SendClientMessage(playerid, 0xCECECEFF, "Значение навыка от 0 до 100");

	new tmp_skill_name[32], query[128];

	switch(set_code)
	{
		case 1:
	    {
	        SetPlayerData(to_player, P_SKILL_COLT, set_value);
			tmp_skill_name = "Colt 45";
			UpdatePlayerDatabaseInt(to_player, "skill_colt", set_value);
	    }
	    case 2:
	    {
	        SetPlayerData(to_player, P_SKILL_SDPISTOL, set_value);
			tmp_skill_name = "SD Pistol";
			UpdatePlayerDatabaseInt(to_player, "skill_sdpistol", set_value);
	    }
	    case 3:
	    {
	        SetPlayerData(to_player, P_SKILL_DEAGLE, set_value);
			tmp_skill_name = "Desert Eagle";
			UpdatePlayerDatabaseInt(to_player, "skill_deagle", set_value);
	    }
	    case 4:
	    {
	        SetPlayerData(to_player, P_SKILL_SHOTGUN, set_value);
			tmp_skill_name = "Shotgun";
			UpdatePlayerDatabaseInt(to_player, "skill_shotgun", set_value);
	    }
	    case 5:
	    {
	        SetPlayerData(to_player, P_SKILL_MP5, set_value);
			tmp_skill_name = "MP5";
			UpdatePlayerDatabaseInt(to_player, "skill_mp5", set_value);
	    }
	    case 6:
	    {
	        SetPlayerData(to_player, P_SKILL_AK47, set_value);
			tmp_skill_name = "AK47";
			UpdatePlayerDatabaseInt(to_player, "skill_ak47", set_value);
	    }
	    case 7:
	    {
	        SetPlayerData(to_player, P_SKILL_M4, set_value);
			tmp_skill_name = "M4";
			UpdatePlayerDatabaseInt(to_player, "skill_m4", set_value);
	    }
	    case 8:
	    {
	        SetPlayerData(to_player, P_SKILL_SNIPER_RIFLE, set_value);
			tmp_skill_name = "Sniper Rifle";
			UpdatePlayerDatabaseInt(to_player, "skill_sniper_rifle", set_value);
	    }
		case 9:
	    {
	        SetPlayerData(to_player, P_SKILL_SAWNOFF, set_value);
			tmp_skill_name = "Sawnoff";
			UpdatePlayerDatabaseInt(to_player, "skill_sawnoff", set_value);
	    }
		case 10:
	    {
	        SetPlayerData(to_player, P_SKILL_COMBAT_SG, set_value);
			tmp_skill_name = "Combat SG";
			UpdatePlayerDatabaseInt(to_player, "skill_combat_sg", set_value);
	    }
		case 11:
	    {
	        SetPlayerData(to_player, P_SKILL_MICRO_UZI, set_value);
			tmp_skill_name = "Micro Uzi";
			UpdatePlayerDatabaseInt(to_player, "skill_micro_uzi", set_value);
	    }
	    case 12:
	    {
	        SetPlayerData(to_player, P_POWER, set_value);
			tmp_skill_name = "Сила";
			UpdatePlayerDatabaseInt(to_player, "power", set_value);
	    }
	    default: return SendClientMessage(playerid, 0xCECECEFF, "Неверно введен код навыка");
	}

	SetPlayerSkillsInit(to_player);

	format(query, sizeof query, "%s %s изменил Вам уровень навыка %s на %d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), tmp_skill_name, set_value);
	SendClientMessage(to_player, 0x1E90FFFF, query);

	format(query, sizeof query, "Вы изменили игроку %s уровень навыка %s на %d", GetPlayerNameEx(to_player), tmp_skill_name, set_value);
	SendClientMessage(playerid, 0x32a44bFF, query);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(query, sizeof query, "[A] %s %s[%d] изменил %s[%d] уровень навыка %s на %d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, tmp_skill_name, set_value);
		SendMessageToAdmins(query, 0xCECECEFF);
	}

	format(query, sizeof query, "Изменил %s[acc:%d] уровень навыка %s на %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), tmp_skill_name, set_value);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, query);

	return 1;
}

CMD:setpremium(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_player, premium; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setpremium [id игрока] [время (в днях)]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(0 <= premium <= 30)) return SendClientMessage(playerid, 0xCECECEFF, "Количество дней от 0 до 30");

	new fmt_msg[100];

	SetPlayerData(to_player, P_PREMIUM, gettime() + premium * 86400);

	UpdatePlayerDatabaseInt(to_player, "premium", GetPlayerData(to_player, P_PREMIUM));

	format(fmt_msg, sizeof fmt_msg, "%s выдал Вам подписку "SERVER_NAME"+ на %d дн.", GetPlayerNameEx(playerid), premium);
	SendClientMessage(to_player, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы выдали %s подписку "SERVER_NAME"+ на %d дн.", GetPlayerNameEx(to_player), premium);
	SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] подписку "SERVER_NAME"+ на %d дн.", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), premium);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}

CMD:getdon(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	new query[128],
		Cache: result,
		d_year,
		d_month,
		d_day;

	getdate(d_year, d_month, d_day);

	mysql_format(mysql, query, sizeof query, "SELECT SUM(itemsCount) FROM freekassa_payments WHERE dateCreate LIKE '%d-%02d-%02d %%'", d_year, d_month, d_day);
	result = mysql_query(mysql, query, true);

	new sum = cache_get_row_int(0, 0);

	format(query, sizeof query, "Сумма пополнений за сегодня (%02d.%02d.%d): {FFFF00}%d руб.", d_day, d_month, d_year, sum);
	SendClientMessage(playerid, 0x1E90FFFF, query);

	cache_delete(result);

	return 1;
}

CMD:setadm(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_player, admin_lvl; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setadm [id игрока] [уровень администратора]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	else if(!(0 <= admin_lvl <= 6)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень администратора от 0 до 6");
	else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете изменять свой уровень администратора");
	else if(admin_lvl > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете устанавливать уровень больше своего");

	new fmt_msg[144];
	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
	{
	    if(GetPlayerAccountID(playerid) != 1) return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете изменять уровень администратора выше Вас рангом");
	}

	SetPlayerData(to_player, P_ADMIN, admin_lvl);
	UpdatePlayerDatabaseInt(to_player, "admin", admin_lvl);

	format(fmt_msg, sizeof fmt_msg, "%s выдал Вам права администратора %d уровня", GetPlayerNameEx(playerid), admin_lvl);
	SendClientMessage(to_player, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы выдали %s права администратора %d уровня", GetPlayerNameEx(to_player), admin_lvl);
	SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] установил %s[%d] уровень администратора %d",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, admin_lvl);

	SendMessageToAdmins(fmt_msg, 0xFF5533FF, 4);

	format(fmt_msg, sizeof fmt_msg, "Установил %s[acc:%d] уровень администратора %d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), admin_lvl);
	SendLog(playerid, LOG_TYPE_SET_ADMIN, fmt_msg);

	return 1;
}

CMD:admdown(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /admdown [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок не администратор");

	if(GetPlayerAdminEx(to_player) == 1)
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя понизить до 0 уровня. Используйте /deladmin для снятия");

	if(GetPlayerAdminEx(to_player) >= GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете понизить уровень главного администратора");

	AddPlayerData(to_player, P_ADMIN, -, 1);
	UpdatePlayerDatabaseInt(to_player, "admin", GetPlayerAdminEx(to_player));

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s %s[%d] понизил Ваш уровень администратора до %d",
	admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerAdminEx(to_player));

	SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] понизил уровень администратора %s[%d] до %d",
	admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerAdminEx(to_player));

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Понизил %s[acc:%d] до адм. уровня %d",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetPlayerAdminEx(to_player));

	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:admup(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /admup [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок не администратор");

	if(GetPlayerAdminEx(to_player) == 4)
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя повысить до уровня главного администратора");

	if(GetPlayerAdminEx(to_player) >= GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете повысить уровень у главного администратора");

	AddPlayerData(to_player, P_ADMIN, +, 1);
	UpdatePlayerDatabaseInt(to_player, "admin", GetPlayerAdminEx(to_player));

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s %s[%d] повысил Ваш уровень администратора до %d",
	admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerAdminEx(to_player));

	SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] повысил уровень администратора %s[%d] до %d",
	admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerAdminEx(to_player));

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Повысил %s[acc:%d] до адм. уровня %d",
	GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), GetPlayerAdminEx(to_player));

	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:deladmin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /deladmin [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок не администратор");

	if(GetPlayerAdminEx(to_player) >= GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя снять главного администратора");

	SetPlayerData(to_player, P_ADMIN, 0);
	UpdatePlayerDatabaseInt(to_player, "admin", 0);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s %s[%d] снял Вас с поста администратора", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] снял %s[%d] с поста администратора",
	admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Снял %s[acc:%d] с поста администратора", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}


CMD:setadmin(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setadmin [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(GetPlayerAdminEx(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок уже стоит на посту администратора");

	SetPlayerData(to_player, P_ADMIN, 1);
	UpdatePlayerDatabaseInt(to_player, "admin", 1);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s %s[%d] поставил Вас на пост администратора", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid);
	SendClientMessage(to_player, 0xFF5533FF, fmt_text);

	format(fmt_text, sizeof fmt_text, "[A] %s %s[%d] поставил %s[%d] на пост администратора",
	admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "Поставил %s[acc:%d] на пост администратора", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:sendcmd(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_player, string:c_command[20], string:c_params[128]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sendcmd [id игрока] [команда] [параметры]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new fmt_text[144];

	if(strfind(c_command, "setadm") != -1
	|| strfind(c_command, "ban") != -1
	|| strfind(c_command, "offban") != -1
	|| strfind(c_command, "warn") != -1)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] попытался использовать от имени %s[%d] кмд: /%s %s",
		GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, c_command, c_params);

		SendMessageToAdmins(fmt_text, 0xCECECEFF, 5);

		return 1;
	}

	format(fmt_text, sizeof fmt_text, "cmd_%s", c_command);

	CallLocalFunction(fmt_text, "is", to_player, c_params);

	format(fmt_text, sizeof fmt_text, "Отправил от имени %s[acc:%d] кмд: /%s %s", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), c_command, c_params);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, fmt_text);

	return 1;
}

CMD:fly(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	new fmt_text[55],
		bool: fly_status;

	if(StartFly(playerid))
		fly_status = true;

	else
		StopFly(playerid);

	format(fmt_text, sizeof fmt_text, "Вы %s Fly-режим", fly_status ? "включили" : "выключили");
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] %s Fly-режим", GetPlayerNameEx(playerid), playerid, fly_status ? "включил" : "выключил");
		SendMessageToAdmins(fmt_text, 0xCECECEFF);
	}

	format(fmt_text, sizeof fmt_text, "%s Fly-режим", fly_status ? "Включил" : "Выключил");
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_text);

	return 1;
}

CMD:givecash(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givecash [id игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= cash <= 25_000_000)) return SendClientMessage(playerid, 0xCECECEFF, "Можно выдавать от 1 до 25000000$ за один раз");

	new reason[144];
	format(reason, sizeof reason, "Выдача денег от админа %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, cash, reason, true, true);

	format(reason, sizeof reason, "%s %s выдал Вам $%d", admins_rank_name[GetPlayerAdminEx(playerid)],GetPlayerNameEx(playerid), cash);
	SendClientMessage(to_player, 0xFFFFFFFF, reason);

	format(reason, sizeof reason, "[A] %s[%d] выдал деньги %s[%d] кол-во $%d, в итоге у игрока $%d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, cash, GetPlayerMoneyEx(to_player));
	SendMessageToAdmins(reason, 0xFFFF00FF);

	format(reason, sizeof reason, "Выдал %s[acc:%d] $%d", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), cash);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);

	return 1;
}

CMD:givedonate(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, donate; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givedonate [id игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(-25_000 <= donate <= 25_000)) return SendClientMessage(playerid, 0xCECECEFF, "Можно выдавать от 1 до 25000 доната за один раз");

	new reason[144];
	format(reason, sizeof reason, "Выдача доната от админа %s", GetPlayerNameEx(playerid));
	GivePlayerDonate(to_player, donate, reason, true);

	format(reason, sizeof reason, "%s %s выдал Вам %d доната", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), donate);
	SendClientMessage(to_player, 0xFFFFFFFF, reason);

	format(reason, sizeof reason, "[A] %s[%d] выдал донат %s[%d] кол-во $%d, в итоге у игрока $%d",
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, donate, GetPlayerCurrentDonate(to_player));
	SendMessageToAdmins(reason, 0xFFFF00FF);

	format(reason, sizeof reason, "Выдал %s[acc:%d] $%d доната", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player), donate);
	SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, reason);

	return 1;
}

CMD:doubling(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	Dialog
	(
		playerid, DIALOG_SET_DOUBLING, DIALOG_STYLE_LIST,
		"Удвоение",
		"\
		1. Удвоение доната\n\
		2. Удвоение очков опыта\n\
		3. Удвоение зарплаты на подработках\
		",
		"Выбор", "Отмена"
	);

	return 1;
}

CMD:setstats(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, set_code, set_value; else {

		SendClientMessage(playerid, 0xCECECEFF, "Использование: /setstats [id игрока] [код] [значение]");
		SendClientMessage(playerid, 0xCECECEFF, "Код: 1 - Уровень | 2 - Работа");

		return 1;
	}

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new fmt_msg[128];

	switch(set_code)
	{
		case 1:
		{
			if(!(1 <= set_value <= 25)) return SendClientMessage(playerid, 0xCECECEFF, "Уровень от 1 до 25");

			SetPlayerData(to_player, P_LEVEL, set_value);

			SetPlayerScore(to_player, set_value);

			format(fmt_msg, sizeof fmt_msg, "%s %s изменил Вам уровень на %d", admins_rank_name[GetPlayerAdminEx(playerid)], GetPlayerNameEx(playerid), set_value);
			SendClientMessage(to_player, 0x1E90FFFF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы изменили игроку %s уровень на %d", GetPlayerNameEx(to_player), set_value);
			SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
		}
		case 2:
		{
			if(!(0 <= set_value <= 6)) return SendClientMessage(playerid, 0xCECECEFF, "Ид работы от 0 до 6");
			SetPlayerData(to_player, P_JOB, set_value);

			format(fmt_msg, sizeof fmt_msg, "%s установил Вам работу %s", GetPlayerNameEx(playerid), GetPlayerJobAndRankName(to_player));
			SendClientMessage(to_player, 0x1E90FFFF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы установили игроку %s работу %s", GetPlayerNameEx(to_player), GetPlayerJobAndRankName(to_player));
			SendClientMessage(playerid, 0x32a44bFF, fmt_msg);
		}
		default: return SendClientMessage(playerid, 0xCECECEFF, "Ошибка: Неверно введен код");
	}

	mysql_format(mysql, fmt_msg, sizeof fmt_msg, "UPDATE accounts SET score=%d,job=%d WHERE id=%d", GetPlayerLevel(to_player), GetPlayerJob(to_player), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:pay(playerid, params[])
{
	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pay [id игрока] [сумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится далеко от Вас");

	if(GetPlayerLevel(playerid) < 3)
	    return SendClientMessage(playerid, 0xCECECEFF, "Передавать деньги можно только с 3-го уровня");

	new fmt_text[100],
		max_money = GetPlayerLevel(playerid) > 25 ? 50000 : 10000;
	if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Передавать деньги самому себе?");
	if(!(1 <= cash <= max_money))
	{
		format(fmt_text, sizeof fmt_text, "Сумма должна быть от 1 до $%d", max_money);

		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		return 1;
	}

	if(GetPlayerMoneyEx(playerid) >= cash)
	{
		format(fmt_text, sizeof fmt_text, "+%d", cash);
		SetPlayerChatBubble(to_player, fmt_text, 0x32a44bFF, 10.0, 5000);

		format(fmt_text, sizeof fmt_text, "-%d", cash);
		SetPlayerChatBubble(playerid, fmt_text, 0xCECECEFF, 10.0, 5000);

		format(fmt_text, sizeof fmt_text, "Передача денег от %s (id: %d)", GetPlayerNameEx(playerid), GetPlayerAccountID(playerid));
		GivePlayerMoneyEx(to_player, cash, fmt_text, true, true);

		format(fmt_text, sizeof fmt_text, "Передача денег игроку %s (id: %d)", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
		GivePlayerMoneyEx(playerid, -cash, fmt_text, true, true);

		format(fmt_text, sizeof fmt_text, "%s передал Вам деньги $%d", GetPlayerNameEx(playerid), cash);
		SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

		format(fmt_text, sizeof fmt_text, "Вы передали игроку %s деньги $%d", GetPlayerNameEx(to_player), cash);
		SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

		Action(playerid, "достал кошелёк и передал деньги", _, false);

		if(g_admin_pay_log)
		{
		    format(fmt_text, sizeof fmt_text, "[A] %s[%d] передал %s[%d] деньги $%d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), playerid, cash);
			SendMessageToAdmins(fmt_text, 0x66CC33FF);
		}
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно средств.");

	return 1;
}

CMD:connect(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	new fmt_text[80],
	    on_off[2][20] = {"{FF5533}выключили", "{66CC33}включили"},
	    c_state = GetPVarInt(playerid, "admin_connect");

	SetPVarInt(playerid, "admin_connect", c_state ^ 1);

	format(fmt_text, sizeof fmt_text, "Вы %s {1E90FF} сообщения о входе/выходе игроков", on_off[c_state ^ 1]);
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	return 1;
}

CMD:apanel(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	Dialog
	(
		playerid, DIALOG_ADMIN_PANEL, DIALOG_STYLE_LIST,
		"Управление сервером",
		"\
		1. Список администраторов\n\
		2. Список лидеров\n\
		3. Список игроков во фракции\n\
		{66CC33}4. Управление платными услугами\n\
		{FF3300}5. Управление игроками\
		",
		"Выбор", "Отмена"
	);

	return 1;
}

CMD:history(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /history [имя игрока]");

	if(!(3 <= strlen(params) <= 20))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	extract params -> new string: name[21];

	new query[128];
	new Cache: result, user_id;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
		user_id = cache_get_row_int(0, 0);

	cache_delete(result);

	if(!user_id)
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	format(query, sizeof query, "SELECT name FROM change_names WHERE owner_id=%d ORDER BY id DESC LIMIT 45", user_id);
	mysql_tquery(mysql, query, "ShowChangeNameHistory", "is", playerid, name);

	return 1;
}

CMD:call(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, 0xCECECEFF, "Закончите текущий разговор");

	if(!GetPlayerPhoneCall(playerid, PC_ENABLED))
		return SendClientMessage(playerid, 0xCECECEFF, "Ваш телефон отключен");
	if(GetPlayerData(playerid, P_PHONE_BALANCE) >= 5)
	{
		new number;
		if(sscanf(params, "d", number))
		{
			Dialog
			(
				playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_LIST,
				"Наберите номер",
				"{6699CC}Номера государственных служб:\n\n\
				{FFFFFF}Полиция\t\t\t{32a44b}02\n\
				{FFFFFF}Скорая помощь\t\t{32a44b}03\n\
				{FFFFFF}Такси\t\t\t\t{32a44b}555\n\
				{FFFFFF}Механик\t\t\t{32a44b}090\n\
				{FFFFFF}Служба точного времени\t{32a44b}060\n\
				{FFFFFF}Оператор связи\t\t{32a44b}111",
				"Позвонить", "Отмена"
			);
			return 1; // (TODO)
		}
		new fmt_text[126];
		switch(number)
		{
			case 02:
			{
			    if(GetPlayerVirtualWorld(playerid)!= 0 || GetPlayerInterior(playerid)!= 0)
				{
					SendClientMessage(playerid, -1, "Связь не доступна!");
					return 1;
				}
                if(g_player[playerid][P_STATUS][0] == 1)
				{
					SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Вы уже вызывали полицию. Дождитесь принятия вызова!");
					return 1;
				}
				format(fmt_text, sizeof fmt_text, "[Вызов] %s [%d] Вызывает полицию. Введите /accept [%d], чтобы принять вызов!", GetPlayerNameEx(playerid),playerid, playerid);
    			SendMessageToPoliceTeam(fmt_text, 0xFFC000FF);
				g_player[playerid][P_STATUS][0] = 1;
				SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Вы успешно вызвали полицию. Ожидайте принятия вызова!");
				timer_calling[playerid] = SetTimerEx("DeleteCalling", 5*1000*60,false,"d",playerid);
			}
			case 03:
			{
			    if(GetPlayerVirtualWorld(playerid)!= 0 || GetPlayerInterior(playerid)!= 0)
				{
					SendClientMessage(playerid, -1, "Связь не доступна!");
					return 1;
				}
                if(g_player[playerid][P_STATUS][0] == 1)
				{
					SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Вы уже вызывали полицию. Дождитесь принятия вызова!");
					return 1;
				}
				format(fmt_text, sizeof fmt_text, "[Вызов] %s [%d] Вызывает скорую. Введите /accept [%d], чтобы принять вызов!", GetPlayerNameEx(playerid),playerid, playerid);
				SendMessageToTeam(TEAM_HOSPITAL, fmt_text,0x1E90FFFF);
   				g_player[playerid][P_STATUS][1] = 1;
   				SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Вы успешно вызвали скорую. Ожидайте принятия вызова!");
                timer_calling[playerid] = SetTimerEx("DeleteCalling", 5*1000*60,false,"d",playerid);
			}
			case 555:
			{
			    if(GetPlayerVirtualWorld(playerid)!= 0 || GetPlayerInterior(playerid)!= 0)
				{
					SendClientMessage(playerid, -1, "Связь не доступна!");
					return 1;
				}
                if(g_player[playerid][P_STATUS][0] == 1)
				{
					SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Вы уже вызывали полицию. Дождитесь принятия вызова!");
					return 1;
				}
				format(fmt_text, sizeof fmt_text, "%s [%d] Вызывает такси. Введите /accept [%d], чтобы принять вызов!", GetPlayerNameEx(playerid),playerid,playerid);
			    SendMessageToJob(JOB_TAXI_DRIVER, fmt_text);
			    g_player[playerid][P_STATUS][2] = 1;
			    SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Вы успешно вызвали такси. Ожидайте принятия вызова!");
                timer_calling[playerid] = SetTimerEx("DeleteCalling", 5*1000*60,false,"d",playerid);
			}
			case 090:
			{
			    if(GetPlayerVirtualWorld(playerid)!= 0 || GetPlayerInterior(playerid)!= 0)
				{
					SendClientMessage(playerid, -1, "Связь не доступна!");
					return 1;
				}
                if(g_player[playerid][P_STATUS][0] == 1)
				{
					SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Вы уже вызывали полицию. Дождитесь принятия вызова!");
					return 1;
				}
				format(fmt_text, sizeof fmt_text, "%s [%d] Вызывает механика. Введите /accept [%d], чтобы принять вызов!", GetPlayerNameEx(playerid),playerid,playerid);
   				SendMessageToJob(JOB_MECHANIC, fmt_text);
   				g_player[playerid][P_STATUS][3] = 1;
   				SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Вы успешно вызвали механиков. Ожидайте принятия вызова!");
                timer_calling[playerid] = SetTimerEx("DeleteCalling", 5*1000*60,false,"d",playerid);
			}

			case 060:
			{
				ShowCurrentTime(playerid);
			}
			case 111:
			{
				new fmt_str[175];
				SetPlayerPhoneUseState(playerid, true);

				format
				(
					fmt_str, sizeof fmt_str,
					"{FFFFFF}Здравствуйте! Вы позвонили оператору.\n"\
					"На счету Вашего мобильного телефона {00FF00}$%d\n\n"\
					"{FFFFFF}Пополнить его можно в любом банкомате.\n"\
					"Всего доброго!",
					GetPlayerData(playerid, P_PHONE_BALANCE)
				);
				Dialog(playerid, DIALOG_PHONE_CALL_BALANCE, DIALOG_STYLE_MSGBOX, "Оператор сотовой связи", fmt_str, "Ок", "Отмена");
			}

			default:
			{
				new subscriber = GetPlayerIDByPhone(number);

				if(number < 1)
					return SendClientMessage(playerid, 0xCECECEFF, "Данный номер не обслуживается");

				if(subscriber == INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0xCECECEFF, "Набранный Вами номер не обслуживается");

				if(subscriber == playerid || GetPlayerPhoneCall(subscriber, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(subscriber, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
					return SendClientMessage(playerid, 0xCECECEFF, "Абонент занят");

				if(!GetPlayerPhoneCall(subscriber, PC_ENABLED))
					return SendClientMessage(playerid, 0xCECECEFF, "Телефон абонента вне зоны доступа");

				SetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER, subscriber);
				SetPlayerPhoneCall(subscriber, PC_INCOMING_PLAYER, playerid);

				new fmt_str[90];

				format(fmt_str, sizeof fmt_str, "Исходящий звонок | Номер: %d {ffff00}| Ожидание ответа от %s...", number, GetPlayerNameEx(subscriber));
				SendClientMessage(playerid, 0x32a44bFF, fmt_str);
				SendClientMessage(playerid, 0x32a44bFF, "Используйте {CECECE}/h {FFFFFF}чтобы отклонить вызо");

				format(fmt_str, sizeof fmt_str, "Входящий звонок | Номер: %d {ffff00}| Вызывает %s", GetPlayerPhone(playerid), GetPlayerNameEx(playerid));
				SendClientMessage(subscriber, 0x1E90FFFF, fmt_str);

				SendClientMessage(subscriber, 0xFFFFFFFF, "Используйте {32a44b}/p {FFFFFF}чтобы ответить или {CECECE}/h {FFFFFF}чтобы отклонить вызов");
				SetPlayerPhoneUseState(playerid, true);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "На счету недостаточно средств");
		SendClientMessage(playerid, 0xCECECEFF, "Пополнить мобильный телефон можно в любом банкомате");
	}

	return 1;
}
CMD:accept(playerid,params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_LSPD && GetPlayerTeamEx(playerid) != TEAM_FBI && GetPlayerTeamEx(playerid) != TEAM_HOSPITAL && GetPlayerJob(playerid) != JOB_TAXI_DRIVER && GetPlayerJob(playerid) != JOB_MECHANIC) return 1;
	if(sscanf(params,"d",params[0])) return SendClientMessage(playerid, -1, "Введите /accept [id]");
	new Float:pos[3];
	switch(GetPlayerTeamEx(playerid))
	{
	    case TEAM_LSPD, TEAM_FBI:
	    {
	        if(g_player[params[0]][P_STATUS][0] == 0) return SendClientMessage(playerid, -1, "Этот игрок не совершал вызов!");
            g_player[params[0]][P_STATUS][0] = 0;
            format(l_string,sizeof(l_string),"[Вызов] %s %s принял вызов игрока %s", GetPlayerJobAndRankName(playerid),GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]));
			SendMessageToPoliceTeam(l_string, 0xFFC000FF );
		}
		case TEAM_HOSPITAL:
		{
		    if(g_player[params[0]][P_STATUS][1] == 0) return SendClientMessage(playerid, -1, "Этот игрок не совершал вызов!");
		    g_player[params[0]][P_STATUS][1] = 0;
		    format(l_string,sizeof(l_string),"[Вызов] %s %s принял вызов игрока %s", GetPlayerJobAndRankName(playerid),GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]));
		    SendMessageToTeam(TEAM_HOSPITAL,l_string,0x1E90FFFF);
		}
	}
	format(l_string,sizeof(l_string),"{FFFF00}[Вызов]{FFFFFF} %s %s принял ваш вызов. Ожидайте!",GetPlayerJobAndRankName(playerid),GetPlayerNameEx(playerid));
	if(GetPlayerJob(playerid) != 0 && GetPlayerTeamEx(playerid) == 0)
	{
	    if(g_player[params[0]][P_STATUS][GetPlayerJob(playerid)] == 0) return SendClientMessage(playerid, -1, "Игрок не совершал вызов!");
	    g_player[params[0]][P_STATUS][GetPlayerJob(playerid)] = 0;
	    format(l_string,sizeof(l_string),"{FFFF00}[Вызов]{FFFFFF} %s %s принял ваш вызов. Ожидайте!",GetPlayerJobName(playerid),GetPlayerNameEx(playerid));
		format(l_string,sizeof(l_string),"[Вызов] %s %s принял вызов игрока %s", GetPlayerJobName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
		SendMessageToJob(GetPlayerJob(playerid),l_string,0xFFC000FF);
	}
	GetPlayerPos(params[0],pos[0],pos[1],pos[2]);
	EnablePlayerGPS (playerid,pos[0],pos[1],pos[2],"{FFFF00}[Вызов]{FFFFFF} Вы успешно приняли вызов!");
	SendClientMessage(params[0],-1,l_string);
	KillTimer(timer_calling[playerid]);
	return 1;
}
public: DeleteCalling(playerid)
{
    if(g_player[playerid][P_STATUS][2] == 1) g_player[playerid][P_STATUS][2] = 0;
    if(g_player[playerid][P_STATUS][3] == 1) g_player[playerid][P_STATUS][3] = 0;
    if(g_player[playerid][P_STATUS][0] == 1) g_player[playerid][P_STATUS][0] = 0;
    if(g_player[playerid][P_STATUS][1] == 1) g_player[playerid][P_STATUS][1] = 0;
    SendClientMessage(playerid, -1,"{FFFF00}[Вызов]{FFFFFF} К сожалению, ваш вызов не принят. Попробуйте еще раз");
    return 1;
}
ALT:call:c;
CMD:p(playerid, params[])
{
	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1) return 1;

	new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
	if(caller != INVALID_PLAYER_ID)
	{
		SetPlayerPhoneCall(caller, PC_TIME, 0);
		SetPlayerPhoneCall(playerid, PC_TIME, 0);

		new fmt_str[64];
		format(fmt_str, sizeof fmt_str, "Вы ответили на звонок %s", GetPlayerNameEx(caller));
		SendClientMessage(playerid, 0xDD90FFFF, fmt_str);

		format(fmt_str, sizeof fmt_str, "%s ответил на Ваш звонок", GetPlayerNameEx(playerid));
		SendClientMessage(caller, 0xDD90FFFF, fmt_str);

		SetPlayerPhoneUseState(playerid, true, false);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Нет входящих вызовов");

	return 1;
}

CMD:h(playerid, params[])
{
	new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
	new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

	if(call_to != INVALID_PLAYER_ID)
	{
		if(GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER) == playerid)
		{
			ClearPlayerPhoneCall(call_to);
			SendClientMessage(call_to, 0xFF9944FF, "Звонок окончен");

			SetPlayerPhoneUseState(call_to, false);
		}
		SendClientMessage(playerid, 0xFF9944FF, "Звонок окончен");
	}
	else if(caller != INVALID_PLAYER_ID)
	{
		if(GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER) == playerid)
		{
			ClearPlayerPhoneCall(caller);
			SendClientMessage(caller, 0xFF9944FF, "Звонок окончен");

			SetPlayerPhoneUseState(caller, false);
		}
		if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
		{
			SendClientMessage(playerid, 0xFF9944FF, "Звонок окончен");
		}
		else SendClientMessage(playerid, 0xFF9944FF, "Вы отклонили входящий вызов");
	}
	else return 1;

	ClearPlayerPhoneCall(playerid);
	SetPlayerPhoneUseState(playerid, false);

	return 1;
}

CMD:sms(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(!GetPlayerPhoneCall(playerid, PC_ENABLED))
		return SendClientMessage(playerid, 0xCECECEFF, "Ваш телефон отключен");

	if(GetPlayerData(playerid, P_PHONE_BALANCE) >= 5)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sms [номер телефона] [сообщение]");

		extract params -> new number, string:message[66];

		if(number < 550)
			return SendClientMessage(playerid, 0xCECECEFF, "Данный номер не обслуживается");

		new subscriber = GetPlayerIDByPhone(number);

		if(subscriber != INVALID_PLAYER_ID)
		{
			if(!GetPlayerPhoneCall(subscriber, PC_ENABLED))
				return SendClientMessage(playerid, 0xCECECEFF, "Не удается отправить сообщение. Телефон абонента недоступен");

			if(!strlen(message))
				return SendClientMessage(playerid, 0xCECECEFF, "Введите сообщение для отправки");

			if(strlen(message) > 64)
				return SendClientMessage(playerid, 0xCECECEFF, "Слишком длинное сообщение");

			AddPlayerData(playerid, P_PHONE_BALANCE, -, 5);
			GameTextForPlayer(playerid, "SMS ~n~~y~-5$", 4000, 1);

			new fmt_str[128];

			format(fmt_str, sizeof fmt_str, "SMS: %s | Отправитель: %s [т.%d]", message, GetPlayerNameEx(playerid), GetPlayerPhone(playerid));
			SendClientMessage(subscriber, 0xFFFF00FF, fmt_str);
			SetPlayerChatBubble(subscriber, "SMS <<", 0xFFFF00FF, 5.0, 1500);

			format(fmt_str, sizeof fmt_str, "SMS: %s | Получатель: %s [т.%d]", message, GetPlayerNameEx(subscriber), GetPlayerPhone(subscriber));
			SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
			SetPlayerChatBubble(playerid, "SMS >>", 0xFFFF00FF, 5.0, 1500);

			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_PHONE_BALANCE), GetPlayerAccountID(playerid));
			mysql_tquery(mysql, fmt_str, "", "");

			if(g_admin_ears)
			{
				format(fmt_str, sizeof fmt_str, "[A] SMS: %s | от %s[%d] к %s[%d]", message, GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(subscriber), subscriber);
				SendMessageToAdmins(fmt_str, 0xFFFF00FF);
			}

			format(fmt_str, sizeof fmt_str, "Для %s[acc:%d]: %s", GetPlayerNameEx(subscriber), GetPlayerAccountID(subscriber), message);
			SendLog(playerid, LOG_TYPE_SMS_CHAT, fmt_str);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Телефон находится вне зоны доступа");
	}
	else
	{
		SendClientMessage(playerid, 0xCECECEFF, "На счету недостаточно средств");
		SendClientMessage(playerid, 0xCECECEFF, "Пополнить мобильный телефон можно в любом банкомате");
	}
	return 1;
}

CMD:togphone(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет телефона. Его можно купить в сотовом салоне");
	if(!GetPlayerPremium(playerid))
	    return   SendClientMessage(playerid, 0xCECECEFF, "У Вас нет VIP аккаунта.");

	if(GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, 0xCECECEFF, "Закончите текущий разговор");

	if(GetPlayerPhoneCall(playerid, PC_ENABLED))
	{
		SetPlayerPhoneCall(playerid, PC_ENABLED, false);
		SendClientMessage(playerid, 0xCECECEFF, "Телефон отключен");
	}
	else
	{
		SetPlayerPhoneCall(playerid, PC_ENABLED, true);
		SendClientMessage(playerid, 0x32a44bFF, "Телефон включен");
	}
	return 1;
}

CMD:eject(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsPlayerDriver(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны сидеть за рулем транспорта");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /eject [id игрока]");

	extract params -> new to_player;

	if(vehicleid != GetPlayerVehicleID(to_player) || playerid == to_player)
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок должен сидеть в Вашем транспорте");

	new Float: x, Float: y, Float: z;

	GetPlayerPos(to_player, x, y, z);

	SetPlayerPosEx(to_player, x, y, z, 0, 0);

	new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "%s выкинул Вас из своего транспорта", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x1E90FFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Вы выкинули %s из своего транспорта", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x1E90FFFF, fmt_str);

	return 1;
}

CMD:book(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	return ShowPlayerPhoneBook(playerid);
}

CMD:add(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет телефона. Его можно купить в сотовом салоне");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /add [id игрока] [номер телефона]");

	extract params -> new to_player, string: number[10];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerPhoneBookInit(playerid))
		InitPlayerPhoneBook(playerid);

	if(GetPlayerPhoneBookContacts(playerid) >= MAX_PHONE_BOOK_CONTACTS)
		return SendClientMessage(playerid, 0xCECECEFF, "Записная книжка заполнена. Удалите ненужные контакты");

	if((3 <= strlen(number) <= 9) && IsNumeric(number) && strval(number) > 0)
		return AddPhoneBookContact(playerid, GetPlayerNameEx(to_player), number);

	SetPVarString(playerid, "add_contact_name", GetPlayerNameEx(to_player));
	new fmt_str[64 + 1];

	format(fmt_str, sizeof fmt_str, "{FFFFFF}Введите номер телефона для контакта %s", GetPlayerNameEx(to_player));
	return Dialog(playerid, DIALOG_PHONE_BOOK_ADD_CONTACT, DIALOG_STYLE_INPUT, "Добавление нового контакта", fmt_str, "Добавить", "Отмена");
}

CMD:buyfuelst(playerid, params[])
{
	if(GetPlayerFuelStation(playerid) != -1)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть заправка. Чтобы купить другую необходимо продать старую");

	new stationid = GetNearestFuelStation(playerid, 10.0);
	if(stationid != -1)
	{
		SetPVarInt(playerid, "buy_fuel_st", stationid);

		new fmt_str[256];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t{339999}%s\n"\
			"{FFFFFF}Стоимость:\t\t\t{6699FF}$%d\n"\
			"{FFFFFF}Плата за аренду:\t\t{6699FF}$%d в день\n\n"\
			"{669966}Вы уверены что хотите купить эту заправку?",
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_PRICE),
			GetFuelStationData(stationid, FS_RENT_PRICE)
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY, DIALOG_STYLE_MSGBOX, "Покупка заправочной станции", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть рядом с заправкой, которую хотите купить");

	return 1;
}

CMD:fuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fmt_str[1024];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t\t{339999}%s\n"\
			"{FFFFFF}Номер заправки:\t\t\t%d\n"\
			"Владелец:\t\t\t\t%s\n"\
			"Уровень улучшений:\t\t\t%d\n"\
			"Количество топлива:\t\t\t%d из %d\n"\
			"Цена топлива:\t\t\t$%d за 1 л\n"\
			"Закупочная цена:\t\t\t$%d за 1 л\n"\
			"Бюджет заправки:\t\t\t$%d\n"\
			"АЗС арендована на:\t\t\t%d/30 дней\n"\
			"Гос. стоимость:\t\t\t$%d\n"\
			"Аренда территории:\t\t\t$%d в день\n"\
			"Акцизный сбор:\t\t\t%s\n"\
			"Статус:\t\t\t\t\t%s\n\n"\
			"{669966}Для открытия панели управления заправочной станцией\n"\
			"нажмите кнопку \"Изменить\"",
			GetFuelStationData(stationid, FS_NAME),
			stationid,
			GetFuelStationData(stationid, FS_OWNER_NAME),
			GetFuelStationData(stationid, FS_IMPROVEMENTS),
			GetFuelStationData(stationid, FS_FUELS),
			GetFuelStationMaxFuel(stationid),
			GetFuelStationData(stationid, FS_FUEL_PRICE),
			GetFuelStationData(stationid, FS_BUY_FUEL_PRICE),
			GetFuelStationData(stationid, FS_BALANCE),
			GetFuelStationData(stationid, FS_RENT_DATE),
			GetFuelStationData(stationid, FS_PRICE),
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2,
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? ("Взымается") : ("Не взымается"),
			GetFuelStationData(stationid, FS_LOCK_STATUS) ? ("{CC3333}Станция закрыта") : ("{66CC33}Станция открыта")
		);
		Dialog(playerid, DIALOG_FUEL_STATION_INFO, DIALOG_STYLE_MSGBOX, "Информация о заправке", fmt_str, "Изменить", "Отмена");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет заправки");

	return 1;
}

CMD:sellfuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		Dialog
		(
			playerid, DIALOG_FUEL_STATION_SELL, DIALOG_STYLE_MSGBOX,
			"Продажа заправочной станции",
			"{FFFFFF}Вы уверены что хотите продать свою заправочную станцию государству?\n\n"\
			"Вам будет возвращена ее стоимость за вычитом 30%\n"\
			"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"Если Вы хотите продать заправочную станцию другому игроку,\n"\
			"используйте команду /sellmyfuelst",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет заправки");

	return 1;
}

CMD:sellmyfuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmyfuelst [id игрока] [стоимость]");

		extract params -> new to_player, price;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(price < 1)
			return SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость продажи");

		new Float: f_pos_x = GetFuelStationData(stationid, FS_POS_X);
		new Float: f_pos_y = GetFuelStationData(stationid, FS_POS_Y);
		new Float: f_pos_z = GetFuelStationData(stationid, FS_POS_Z);

		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "У покупателя нет такого количества средств");

		if(!(IsPlayerInRangeOfPoint(playerid, 10.0, f_pos_x, f_pos_y, f_pos_z) && IsPlayerInRangeOfPoint(to_player, 10.0, f_pos_x, f_pos_y, f_pos_z)))
			SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться рядом с заправкой которую хотите продать");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_FUEL_ST, stationid, price);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет заправки");

	return 1;
}

CMD:listfuel(playerid, params[])
{
	new fmt_str[41];
	new string[40 * (MAX_FUEL_STATIONS+2) + 1] = "№ АЗС\t\tСтоимость 1 л\t\tВ наличии\t\tНазвание АЗС\n\n{FFFFFF}";

	for(new idx; idx < g_fuel_station_loaded; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d\t\t\t$%d\t\t%d л\t\t%s\n", idx, GetFuelStationData(idx, FS_FUEL_PRICE), GetFuelStationData(idx, FS_FUELS), GetFuelStationData(idx, FS_NAME));
		strcat(string, fmt_str);
	}
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Заправочные станции", string, "Закрыть", "");
}

CMD:buyfuel(playerid, params[])
{
	ShowPlayerBuyJerricanDialog(playerid, GetNearestFuelStation(playerid, 10.0));

	return 1;
}

CMD:fill(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Использование: /fill [id игрока] [кол-во топлива] [стоимость]");

	extract params -> new to_player, fill_fuel_count, fill_price;
	if(fill_fuel_count < 1) return SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Нельзя меньше 1-го!");
	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 15.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!IsPlayerDriver(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Клиент должен находиться за рулем");

	if(1 <= GetPlayerJobLoadItems(playerid) < fill_fuel_count)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества топлива");

	if(!(1 <= fill_price <= 1500))
		return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должна быть до 1500$");

	if(GetPlayerMoneyEx(to_player) < fill_price)
		return SendClientMessage(playerid, 0xCECECEFF, "У клиента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_FILL_CAR, fill_fuel_count, fill_price);
	return 1;
}

CMD:repair(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Использование: /repair [id игрока] [стоимость]");

	extract params -> new to_player, repair_price;

	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 15.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!IsPlayerDriver(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Клиент должен находиться за рулем");

	if(!(1 <= repair_price <= 8000))
		return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должна быть до 8000$");

	if(GetPlayerMoneyEx(to_player) < repair_price)
		return SendClientMessage(playerid, 0xCECECEFF, "У клиента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_REPAIR_CAR, repair_price);
	return 1;
}

CMD:getfuel(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не автомеханик");

	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником");

	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны работать автомехаником и находиться в рабочем транспорте");

	new stationid = GetNearestFuelStation(playerid, 10.0);
	if(stationid != -1)
	{
		SetPVarInt(playerid, "nearest_fuel_st", stationid);

		if(IsFuelStationOwned(stationid))
		{
			if(GetFuelStationData(stationid, FS_FUELS) < 10)
				return SendClientMessage(playerid, 0xCECECEFF, "Хранилище этой АЗС пусто");
		}

		new fmt_str[150];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Топливо на АЗС:\t\t%d/10000 л\n"\
			"Стоимость 1 литра:\t$%d\n\n"\
			"Введите кол-во бензина, которое хотите закупить\n"\
			"(число должно быть кратным 10)",
			GetFuelStationData(stationid, FS_FUELS),
			GetFuelStationData(stationid, FS_FUEL_PRICE)
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY_FUEL_M, DIALOG_STYLE_INPUT, "Закупка топлива", fmt_str, "Купить", "Отмена");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Поблизости нет заправочных станций");

	return 1;
}

CMD:ecar(playerid, params[])
{
	TogglePlayerControllable(playerid, true);
	RemovePlayerFromVehicle(playerid);

	return 1;
}

CMD:rentcar(playerid, params[])
{
	if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID && playerid == rent_cars_data[GetPlayerRentCar(playerid) - first_rent_car_id][rent_car_tenant_id])
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте /unrent чтобы разорвать текущий договор аренды");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_RENT_CAR)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть в машине, которую можно арендовать");
    DeletePVar(playerid, "buycar_dialog");
	new modelid = GetVehicleModel(vehicleid) - 400;

	new rent_price = GetVehicleInfo(modelid, VI_PRICE) / 10;


	new take_prods = random(5) + 6,
	query[256],
	marketid = GetVehicleCarMarketID(vehicleid),
	biz_id = marketid + 28;

	if(GetBusinessData(biz_id, B_PRODS) >= take_prods)
	{
		AddBusinessData(biz_id, B_PRODS, -, take_prods);
		AddBusinessData(biz_id, B_BALANCE, +, rent_price);
		AddBusinessData(biz_id, B_BALANCE_DAY, +, rent_price);

		format(query, sizeof query, "UPDATE business SET balance=%d WHERE id=%d LIMIT 1", GetBusinessData(biz_id, B_BALANCE), GetBusinessData(biz_id, B_SQL_ID));
		mysql_query(mysql, query, false);


		mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(biz_id, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), (GetVehicleInfo(modelid - 400, VI_PRICE) * 20 / 100), IsBusinessOwned(biz_id));
		mysql_query(mysql, query, false);
	}

	if(GetPlayerMoneyEx(playerid) < rent_price) return SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно средств");

	GivePlayerMoneyEx(playerid, -rent_price, "аренда транспорта", true, true);

	SetPlayerData(playerid, P_RENT_CAR, vehicleid);
	rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = playerid;

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Аренда", "{FFFFFF}Вы взяли транспорт в аренду\n\nЕсли Вы попадете в больницу или разобьете транспорт\nТо договор будет расторгнут. Если Вы не закроете транспорт\nТо его может арендовать другой игрок и Вы потеряете его", "Закрыть", "");

	SendClientMessage(playerid, 0x32a44bFF, "Вы взяли транспорт в аренду");
	SendClientMessage(playerid, -1, "Используйте {00CC66}/lock 2 {FFFFFF}для открытия и закрытия дверей");
	SendClientMessage(playerid, -1, "Чтобы разорвать договор аренды введите {00CC66}/unrent");
	SendClientMessage(playerid, -1, "Транспорт готов для аренды , {00CC66}сядьте в него.");

	TogglePlayerControllable(playerid, true);

	return 1;
}

CMD:unrent(playerid, params[])
{
	new vehicleid = GetPlayerRentCar(playerid);
	if(!(vehicleid != INVALID_VEHICLE_ID && playerid == rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id]))
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет договора аренды транспорта");

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	RemovePlayerFromVehicle(playerid);
	SetPlayerData(playerid, P_RENT_CAR, INVALID_VEHICLE_ID);
	rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = INVALID_PLAYER_ID;

	SendClientMessage(playerid, 0xFFFF00FF, "Договор аренды транспорта расторгнут");
	return 1;
}
CMD:bclear(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3)
	    return SendClientMessage(playerid,-1,"Недостаточно полномочий");
    extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /bclear [id board]");

    if(!(0 <= to_player <= g_board_created - 1))
	     return SendClientMessage(playerid, 0xCECECEFF, "Рекламный щит с таким порядковым номером не найден");

	new fmt_text [120];
	format(fmt_text,sizeof(fmt_text), "UPDATE board SET owner='-1' WHERE id = %d",to_player);
    mysql_query(mysql,fmt_text, false);
    SetBoardData(to_player, B_OWNER, -1);
    CallLocalFunction("UpdateBoardLabel", "i", to_player);
    SendClientMessage(playerid, 0xCECECEFF, "Done");

    format(fmt_text,27,"Удалил текст на board id %d",to_player);

    SendLog(playerid, LOG_TYPE_CLEAR_BOARD, fmt_text);

	return 1;
}
CMD:bname(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
	    Dialog(playerid,DIALOG_BIZ_SET_NAMES,DIALOG_STYLE_INPUT,"Смена названия","Введите название ниже которое хотите использовать","Далее","Отмена");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");
	return 1;
}
CMD:business(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		new fmt_str[1024];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t\t{FFFF00}%s %s(%d)\n"\
			"{FFFFFF}Тип предприятия:\t\t\t%s\n"\
			"Владелец:\t\t\t\t{1E90FF}%s\n"\
			"{FFFFFF}Стоимость:\t\t\t\t{1E90FF}$%d\n"\
			"{FFFFFF}Баланс:\t\t\t\t$%d\n"\
			"Прибыль за день:\t\t\t$%d\n"\
			"Товары:\t\t\t\t%d шт.\n"\
			"Оплачен на:\t\t\t\t%d из 30 дней\n"\
			"Цена за вход:\t\t\t\t$%d",
			GetBusinessInteriorInfo(GetBusinessData(businessid, B_INTERIOR), BT_NAME),
			GetBusinessData(businessid, B_NAME),
			businessid,
			GetBusinessInteriorInfo(GetBusinessData(businessid, B_INTERIOR), BT_NAME),
			GetBusinessData(businessid, B_OWNER_NAME),
			GetBusinessData(businessid, B_PRICE),
			GetBusinessData(businessid, B_BALANCE),
			GetBusinessData(businessid, B_BALANCE_DAY),
			GetBusinessData(businessid, B_PRODS),
			GetBusinessData(businessid, B_RENT_DATE),
			GetBusinessData(businessid, B_ENTER_PRICE)
		);
		Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{FFFFFF}Информация о бизнесе", fmt_str, "Изменить", "Отмена");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");

	return 1;
}

CMD:buybiz(playerid, params[])
{
	if(GetPlayerBusiness(playerid) != -1)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас уже есть бизнес. Чтобы купить другой необходимо продать старый");

	new businessid = GetNearestBusiness(playerid, 4.0);
	if(businessid != -1)
	{
		SetPVarInt(playerid, "buy_biz_id", businessid);

		new fmt_str[256];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Название:\t\t\t{339999}%s %s\n"\
			"{FFFFFF}Стоимость:\t\t\t{6699FF}$%d\n"\
			"{FFFFFF}Плата за аренду:\t\t{6699FF}$%d в день\n\n"\
			"{669966}Вы уверены что хотите купить этот бизнес?",
			GetBusinessInteriorInfo(GetBusinessData(businessid, B_INTERIOR), BT_NAME),
			GetBusinessData(businessid, B_NAME),
			GetBusinessData(businessid, B_PRICE),
			GetBusinessData(businessid, B_RENT_PRICE)
		);
		Dialog(playerid, DIALOG_BIZ_BUY, DIALOG_STYLE_MSGBOX, "Покупка нового бизнеса", fmt_str, "Да", "Нет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть рядом с бизнесом, который хотите купить");

	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		Dialog
		(
			playerid, DIALOG_BIZ_SELL, DIALOG_STYLE_MSGBOX,
			"Продажа бизнеса",
			"{FFFFFF}Вы уверены что хотите продать свой бизнес государству?\n\n"\
			"Вам будет возвращено его стоимость за вычитом 30%\n"\
			"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"Если Вы хотите продать бизнес другому игроку,\n"\
			"используйте команду /sellmybiz",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");

	return 1;
}

CMD:sellmybiz(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmybiz [id игрока] [стоимость]");

		extract params -> new to_player, price;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(price < 1)
			return SendClientMessage(playerid, 0xCECECEFF, "Укажите стоимость продажи");

		new Float: b_pos_x = GetBusinessData(businessid, B_POS_X);
		new Float: b_pos_y = GetBusinessData(businessid, B_POS_Y);
		new Float: b_pos_z = GetBusinessData(businessid, B_POS_Z);

		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "У покупателя нет такого количества средств");
		if(GetPlayerData(to_player,P_LIC_BIZ) != 1)
		    return SendClientMessage(playerid, 0xCECECEFF, "У покупателя нет лицензии на бизнес.");
		if(!(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z) && IsPlayerInRangeOfPoint(to_player, 7.0, b_pos_x, b_pos_y, b_pos_z)))
			SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться рядом с бизнесом который хотите продать");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_BUSINESS, businessid, price);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");

	return 1;
}

CMD:bizmusic(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 4)
		{
			new fmt_str[13 + 1];
			new string[(sizeof fmt_str - 1) * (sizeof g_business_sound) + 1];

			string = "1. Отключен\n";
			for(new idx = 1; idx <= sizeof g_business_sound; idx ++)
			{
				format(fmt_str, sizeof fmt_str, "%d. Звук №%d\n", idx + 1, idx);
				strcat(string, fmt_str);
			}
			Dialog(playerid, DIALOG_BIZ_ENTER_MUSIC, DIALOG_STYLE_LIST, "Звук при входе в бизнес", string, "Выбрать", "Закрыть");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Для использование этой функции необходим 4 уровень улучшения бизнеса");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");

	return 1;
}

CMD:manager(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /manager [id игрока]");

		extract params -> new to_player;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0))
			return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_BUSINESS_MANAGER, businessid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет бизнеса");

	return 1;
}

CMD:buy(playerid, params[])
{
	new businessid = GetPlayerInBiz(playerid),
		fmt_price[1024];

	if(businessid != -1)
	{
		if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
		{
		    format(fmt_price, sizeof fmt_price,
			"{ffff00}1. {FFFFFF}Аптечка (2 шт)\t\t{ffff00}%d$\n"\
			"{ffff00}2. {FFFFFF}Фотоаппарат (15 снимков)\t{ffff00}%d$\n"\
			"{ffff00}3. {FFFFFF}Трость\t\t\t{ffff00}%d$\n"\
			"{ffff00}4. {FFFFFF}Лотерейный билет\t\t{ffff00}%d$\n"\
			"{ffff00}5. {FFFFFF}Маска\t\t\t{ffff00}%d$",
			GetBusinessData(businessid, B_PRICE_1),
			GetBusinessData(businessid, B_PRICE_2),
			GetBusinessData(businessid, B_PRICE_3),
			GetBusinessData(businessid, B_PRICE_4),
			GetBusinessData(businessid, B_PRICE_5));

			Dialog
			(
				playerid, DIALOG_BIZ_SHOP_24_7, DIALOG_STYLE_LIST,
    			"Магазин 24/7",
				fmt_price,
				"Купить", "Отмена"
			);
		}
		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CELL_SALON))
		{
 		    format(fmt_price, sizeof fmt_price,
			"{ffff00}1. {FFFFFF}Мобильный телефон\t{ffff00}%d$\n"\
			"{ffff00}2. {FFFFFF}Изменить номер\t\t{ffff00}%d$\n"\
			"{ffff00}3. {FFFFFF}Изменить цвет телефона\t{ffff00}%d$\n"\
			"{ffff00}4. {FFFFFF}Пополнить счёт телефона",
			GetBusinessData(businessid, B_PRICE_1),
			GetBusinessData(businessid, B_PRICE_2),
			GetBusinessData(businessid, B_PRICE_3));

			Dialog
			(
				playerid, DIALOG_BIZ_CELL_SALON, DIALOG_STYLE_LIST,
				"Сотовый салон",
				fmt_price,
				"Купить", "Отмена"
			);
		}
 		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_MCDONALDS))
		{
 		    format(fmt_price, sizeof fmt_price,
			"{ffff00}1. {FFFFFF}Бургер\t{ffff00}%d$\n"\
			"{ffff00}2. {FFFFFF}Пицца\t{ffff00}%d$\n"\
			"{ffff00}3. {FFFFFF}Пепси\t\t{ffff00}%d$\n"\
			"{ffff00}3. {FFFFFF}Кола\t\t{ffff00}%d$",
			GetBusinessData(businessid, B_PRICE_1),
			GetBusinessData(businessid, B_PRICE_2),
			GetBusinessData(businessid, B_PRICE_3),
			GetBusinessData(businessid, B_PRICE_4));

			Dialog
			(
				playerid, DIALOG_BIZ_MCDONALDS, DIALOG_STYLE_LIST,
				"Закусочная",
				fmt_price,
				"Купить", "Отмена"
			);
		}
  		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_GUN))
		{
  		    format(fmt_price, sizeof fmt_price,
			"{ffff00}1. {FFFFFF}Катана\t{ffff00}%d$\n"\
			"{ffff00}2. {FFFFFF}Бензопила\t{ffff00}%d$\n"\
			"{ffff00}3. {FFFFFF}Нож\t\t{ffff00}%d$\n"\
			"{ffff00}4. {FFFFFF}Бита\t\t{ffff00}%d\n"\
			"{ffff00}5. {FFFFFF}Полицейская дубинка\t\t{ffff00}%d\n"\
			"{ffff00}6. {FFFFFF}Кастет\t\t{ffff00}%d",
			GetBusinessData(businessid, B_PRICE_1),
			GetBusinessData(businessid, B_PRICE_2),
			GetBusinessData(businessid, B_PRICE_3),
			GetBusinessData(businessid, B_PRICE_4),
			GetBusinessData(businessid, B_PRICE_5),
			GetBusinessData(businessid, B_PRICE_6));

			Dialog
			(
				playerid, DIALOG_BIZ_SHOP_GUN, DIALOG_STYLE_LIST,
				"Магазин оружия",
				fmt_price,
				"Купить", "Отмена"
			);
		}
		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_MEBEL))
		{
 		    format(fmt_price, sizeof fmt_price,
			"{ffff00}1. {FFFFFF}Пакет мебели №1\t\t{ffff00}%d$\n"\
			"{ffff00}2. {FFFFFF}В скором времени\t\t{ffff00}%d$",
			GetBusinessData(businessid, B_PRICE_1),
			GetBusinessData(businessid, B_PRICE_2));

			Dialog
			(
				playerid, DIALOG_TYPE_SET_HINT, DIALOG_STYLE_LIST,
				"Магазин мебели",
				fmt_price,
				"Выбрать", "Закрыть"
			);
		}
		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SPORTZAL))
		{
 		    format(fmt_price, sizeof fmt_price,
			"{ffff00}1. {FFFFFF}Изучение Бокса\t\t{ffff00}%d$\n"\
			"{ffff00}2. {FFFFFF}Изучение Кунгфу\t\t{ffff00}%d$\n"\
			"{ffff00}3. {FFFFFF}Изучение Ударов коленом\t\t{ffff00}%d$\n"\
			"{ffff00}4. {FFFFFF}Изучение Захвата\t\t{ffff00}%d$\n"\
			"{ffff00}5. {FFFFFF}Изучение Удара локтём \t\t{ffff00}%d$",
			GetBusinessData(businessid, B_PRICE_1),
			GetBusinessData(businessid, B_PRICE_2),
			GetBusinessData(businessid, B_PRICE_3),
			GetBusinessData(businessid, B_PRICE_4),
			GetBusinessData(businessid, B_PRICE_5));

			Dialog
			(
				playerid, DIALOG_TYPE_SELECT_SPORTZAL, DIALOG_STYLE_LIST,
				"Спортзал",
				fmt_price,
				"Выбрать", "Закрыть"
			);
		}
  		else if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_AUTOSCHOOL))
		{
		    if(!GetPlayerData(playerid, P_PASS))
	    		return SendClientMessage(playerid, 0xCECECEFF, "У вас нет паспорта,получите его в мэрии");
 		    format(fmt_price, sizeof fmt_price,
			"{ffff00}1. {FFFFFF}Категория A (мото)\t\t{ffff00}%d$\n"\
			"{ffff00}2. {FFFFFF}Категория B (легковые авто)\t\t{ffff00}%d$\n"\
			"{ffff00}3. {FFFFFF}Категория C (грузовики)\t\t{ffff00}%d$\n"\
			"{ffff00}4. {FFFFFF}Категория D (автобусы)\t\t{ffff00}%d$\n"\
			"{ffff00}5. {FFFFFF}Водный транспорт\t\t{ffff00}%d$\n"\
			"{ffff00}6. {FFFFFF}Воздушный транспорт\t\t{ffff00}%d$",
			GetBusinessData(businessid, B_PRICE_1),
			GetBusinessData(businessid, B_PRICE_2),
			GetBusinessData(businessid, B_PRICE_3),
			GetBusinessData(businessid, B_PRICE_4),
			GetBusinessData(businessid, B_PRICE_5),
			GetBusinessData(businessid, B_PRICE_6));

			Dialog
			(
				playerid, DIALOG_DRIVING_EXAM_INFO, DIALOG_STYLE_LIST,
				"Центр лицензирования",
				fmt_price,
				"Выбрать", "Закрыть"
			);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть в 24/7 | сотовый салон | закусочная | магазин оружия | автошколе");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны быть в 24/7 | сотовый салон | закусочная | магазин оружия | автошколе");

	return 1;
}

CMD:healme(playerid, params[])
{
	if(GetPlayerData(playerid, P_MED_CHEST) <= 0)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет с собой аптечки");

	AddPlayerData(playerid, P_MED_CHEST, -, 1);
	SetPlayerHealthEx(playerid, 60.0, true);

	GameTextForPlayer(playerid, "~b~+60 hp", 4000, 1);
	SendClientMessage(playerid, 0x1E90FFFF, "Вы использовали аптечку. Здоровье пополнено на 60 единиц");

	ApplyAnimation(playerid, "ped", "gum_eat", 4.0, 0, 0, 0, 0, 0, 1);

	return 1;
}


CMD:mask(playerid, params[])
{
	if(GetPlayerData(playerid, P_MASK) != 1)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет с собой маски");

	SetPlayerData(playerid, P_MASK, 600 + 1);
	SetPlayerColorEx(playerid, 0x00000000);

	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
	SetPlayerChatBubble(playerid, "Надевает маску", 0xFF9900FF, 15.0, 5000);

	GameTextForPlayer(playerid, "~b~~h~invisible on", 2500, 4);
	SendClientMessage(playerid, 0x1E90FFFF, "Ваше месторасположение на GPS скрыто на 10 минут");

	return 1;
}

CMD:gate(playerid, params[])
{
	if(!CheckNearestGate(playerid))
	{
		CallRemoteFunction("FS_PlayerUseButton", "i", playerid);
	}
	return 1;
}
CMD:delacc(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new string:name[21], string:reason[30]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /delacc [имя игрока] [причина]");

	new query[128],
		Cache: result,
		admin,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT admin FROM accounts WHERE name='%s' LIMIT 1", name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		admin = cache_get_row_int(0, 0);

		if(admin && GetPlayerAdminEx(playerid) < 5)
		{
			SendClientMessage(playerid, 0x999999FF, "Вы не можете удалить аккаунт администратора выше Вас рангом");

			cache_delete(result);

			format(query, sizeof query, "Попытался удалить аккаунт %s", name);
			SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);

			return 1;
		}

		mysql_format(mysql, query, sizeof query, "DELETE FROM accounts WHERE name='%s' LIMIT 1", name);
		mysql_query(mysql, query, false);

		format(query, sizeof query, "Администратор %s удалил аккаунт игрока %s", GetPlayerNameEx(playerid), name);

		if(strlen(reason) > 0)
		{
			new fmt_text[45];

			format(fmt_text, sizeof fmt_text, ". Причина: %s", reason);
			strcat(query, fmt_text);
		}

		SendClientMessageToAll(0xFF5533FF, query);

		format(query, sizeof query, "Удалил аккаунт %s. Причина: %s", name, reason);
		SendLog(playerid, LOG_TYPE_SUPERADMIN_ACTION, query);
	}
	else SendClientMessage(playerid, 0x999999FF, "Игрок с таким именем не найден");

	cache_delete(result);

	return 1;
}
CMD:awarn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unwarn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string:reason[66];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!GetPlayerAdminEx(to_player))
	    return SendClientMessage(playerid, 0xCECECEFF, "Игрок не является администратором");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение админу выше по рангу");

	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя выдать предупреждение самому себе");

	AddPlayerData(to_player, P_ADMIN_WARN, +, 1);

	new fmt_msg[144];
	format(fmt_msg, sizeof fmt_msg, "[A] %s выдал предупреждение администратору %s [%d|3]", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), GetPlayerData(to_player, P_ADMIN_WARN));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendMessageToAdmins(fmt_msg, 0xFF5533FF);

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_ADMIN_WARN);

	format(fmt_msg, sizeof fmt_msg, "Выдал аварн %s[acc:%d] (%d/3). Причина: %d", GetPlayerNameEx(to_player), uid, warns, reason);
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	if(warns >= 3)
	{
		SendClientMessage(to_player, 0xFF5533FF, "Ваш администраторский уровень аннулирован");

		warns = 0;

		SetPlayerData(to_player, P_ADMIN, 0);
		UpdatePlayerDatabaseInt(to_player, "admin", 0);
	}
	else SendClientMessage(to_player, 0xFF5533FF, "При получении 3-ёх предупреждений Вы будете сняты с поста администратора");

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET admin_warn=%d WHERE id=%d", warns, uid);
	mysql_query(mysql, fmt_msg, false);

	return 1;
}
CMD:unawarn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /unawarn [id игрока] [причина (необязательно)]");

	extract params -> new to_player, string: reason[66];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

    if(!GetPlayerAdminEx(to_player))
	    return SendClientMessage(playerid, 0xCECECEFF, "Игрок не является администратором");

	SetPlayerData(to_player, P_ADMIN_WARN, 				0);

	UpdatePlayerDatabaseInt(to_player, "admin_warn", 	0);

	new fmt_msg[144];
	format(fmt_msg, sizeof fmt_msg, "[A] %s снял все предупреждения с администратора %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));

	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. Причина: %s", fmt_msg, reason);

	SendMessageToAdmins(fmt_msg, 0xFF5533FF);

	format(fmt_msg, sizeof fmt_msg, "Снял все аварны %s[acc:%d]", GetPlayerNameEx(to_player), GetPlayerAccountID(to_player));
	SendLog(playerid, LOG_TYPE_ADMIN_ACTION, fmt_msg);

	return 1;
}
CMD:home(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
	    ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
	}
/*		new fmt_str[1024];

		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Номер дома:\t\t\t\t%d\n"\
			"Город / область:\t\t\t%s\n"\
			"Район:\t\t\t\t\t%s\n",
			houseid,
			GetCityName(GetHouseData(houseid, H_CITY)),
			GetZoneName(GetHouseData(houseid, H_ZONE))
		);

		format
		(
			fmt_str, sizeof fmt_str,
			"Стоимость:\t\t\t\t$%d\n"\
			"Дом оплачен на:\t\t\t%d/30 дней\n"\
			"Количество комнат:\t\t\t%d\n"\
			"Уровень улучшений:\t\t\t%d\n"\
			"Модель домашнего авто:\t\t{FF3333}Нет\n"\
			"{FFFFFF}Квартплата:\t\t\t\t$%d в день\n"\
			"Тип квартплаты:\t\t\t%s\n"\
			"Статус:\t\t\t\t\t%s\n\n"\
			"{669966}Для открытия панели управления вашим домом\n"\
			"нажмите кнопку \"Изменить\"",
			GetHouseData(houseid, H_PRICE),
			GetHouseData(houseid, H_RENT_DATE) <= gettime() ? 0 :
			GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetHouseTypeInfo(GetHouseData(houseid, H_TYPE), HT_ROOMS),
			GetHouseData(houseid, H_IMPROVEMENTS),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? (GetHouseData(houseid, H_RENT_PRICE)) : (GetHouseData(houseid, H_RENT_PRICE) / 2),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? ("Обычная") : ("Пониженная"),
			GetHouseData(houseid, H_LOCK_STATUS) ? ("{CC3333}Дом закрыт") : ("{66CC33}Дом открыт")
		);
		Dialog(playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX, "Информация о доме", fmt_str, "Изменить", "Отмена");
	}
	else SendClientMessage(playerid, 0x999999FF, "У Вас нет дома");
*/
	return 1;
}
CMD:sellhome(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		Dialog
		(
			playerid, DIALOG_HOUSE_SELL, DIALOG_STYLE_MSGBOX,
			"Продажа дома",
			"{FFFFFF}Вы уверены что хотите продать свой дом государству?\n\n"\
			"Вам будет возвращено ее стоимость за вычетом 30%\n"\
			"Также будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"Если Вы хотите продать дом другому игроку,\n"\
			"используйте команду /sellmyhome",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет дома");

	return 1;
}

CMD:sellmyhome(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmyhome [id игрока] [стоимость]");

		extract params -> new to_player, price;

		new house_price = GetHouseData(houseid, H_PRICE);

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(GetPlayerHouse(to_player) != -1)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть дом");

		if(!((house_price / 3) <= price <= (house_price * 3)))
			return SendClientMessage(playerid, 0xCECECEFF, "Стоимость не должна быть дороже или дешевле в 3 раза от стоимости дома");

		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

		if(!(IsPlayerInRangeOfHouse(playerid, houseid, 10.0) && IsPlayerInRangeOfHouse(to_player, houseid, 10.0)))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться около дома который хотите продать");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_HOME, houseid, price);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет дома");

	return 1;
}



CMD:live(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		new rooms = GetHouseTypeInfo(type, HT_ROOMS);

		if(GetHouseRentersCount(houseid) >= rooms)
			return SendClientMessage(playerid, 0xCECECEFF, "Все комнаты Вашего дома уже заняты");

		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /live [id игрока]"); // [кол-во дней] [цена (необязательно)]

		extract params -> new to_player, days, price;

		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

		if(GetPlayerHouse(to_player) != -1)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока уже есть дом");

		/*
		if(!(300 <= price <= 10_000))
			return SendClientMessage(playerid, 0xCECECEFF, "Цена аренды должна быть от 300 до 10000$");

		else if(!(1 <= days <= 30))
			return SendClientMessage(playerid, 0xCECECEFF, "Кол-во дней аренды должно быть от 0 до 30");

		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");
		*/

		if(!(IsPlayerInRangeOfHouse(playerid, houseid, 10.0) && IsPlayerInRangeOfHouse(to_player, houseid, 10.0)))
			return SendClientMessage(playerid, 0xCECECEFF, "Вы и арендатор должны находиться около дома который хотите сдать в аренду");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_HOME_RENT_ROOM, houseid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "У Вас нет дома");

	return 1;
}

CMD:liveout(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM);
	if(houseid != -1)
	{
		Dialog
		(
			playerid, DIALOG_HOUSE_EVICT, DIALOG_STYLE_MSGBOX,
			"Выселение из дома",
			"{FFFFFF}Вы действительно хотите выселиться из дома?",
			"Да", "Нет"
		);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не проживаете");

	return 1;
}

CMD:makestore(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
		{
			if(GetPlayerInHouse(playerid) == houseid)
			{
				new type = GetHouseData(houseid, H_TYPE);
				if(IsPlayerInRangeOfPoint(playerid, 50.0, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_MOVE_STORE, DIALOG_STYLE_MSGBOX,
						"Шкаф",
						"{FFFFFF}Вы хотите разместить шкаф в этом месте?",
						"Да", "Нет"
					);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у себя в доме");
			}
			else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у себя в доме");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Необходим 5 уровень улучшений для дома");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Функция доступна владельцам недвижимости");

	return 1;
}

CMD:use(playerid, params[])
{
	new house_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);

	if(house_id == -1) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна владельцам недвижимости");

	if(GetPlayerInHouse(playerid) != house_id) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в своём доме");

	if(GetHouseData(house_id, H_IMPROVEMENTS) < 5) return SendClientMessage(playerid, 0xCECECEFF, "Необходим 5 уровень улучшений для дома");

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, GetHouseData(house_id, H_STORE_X), GetHouseData(house_id, H_STORE_Y), GetHouseData(house_id, H_STORE_Z)))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться у своего шкафа");

	Dialog
	(
		playerid, DIALOG_HOUSE_STORE, DIALOG_STYLE_LIST,
		"Шкаф",
		"1. Положить металл\n\
		2. Положить наркотики\n\
		3. Положить оружие\n\
		4. Положить одежду\n\
		{99FF99}5. Взять металл\n\
		{99FF99}6. Взять наркотики\n\
		{99FF99}7. Взять оружие\n\
		{99FF99}8. Взять одежду",
		"Далее", "Закрыть"
	);

	return 1;
}

CMD:homelock(playerid, params[])
{
	new hotel_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);

	if(hotel_id != -1)
	{
		if(GetHotelData(hotel_id, room_id, H_STATUS))
		{
			SetHotelData(hotel_id, room_id, H_STATUS, false);

			GameTextForPlayer(playerid, "~g~~h~OЏKP‘ЏO", 2000, 4);
			SendClientMessage(playerid, 0x32a44bFF, "Номер открыт");
		}
		else
		{
			SetHotelData(hotel_id, room_id, H_STATUS, true);

			GameTextForPlayer(playerid, "~r~~h~€AKP‘ЏO", 2000, 4);
			SendClientMessage(playerid, 0xCECECEFF, "Номер закрыт");
		}

		new query[64];
		format(query, sizeof query, "UPDATE hotels SET status=%d WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_STATUS), GetHotelData(hotel_id, room_id, H_SQL_ID));
		mysql_query(mysql, query, false);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы не снимаете номер в гостинице");

	return 1;
}

CMD:exit(playerid, params[])
{
	if(GetPlayerInHouse(playerid) != -1)
	{
		ExitPlayerFromHouse(playerid, 3.0);
	}
	else if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1)
	{
		ExitPlayerFromHotelRoom(playerid);
	}
	else if(!GetPlayerInterior(playerid))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не в помещении");
	}
	return 1;
}

CMD:ephoto(playerid, params[])
{
	if(GetPlayerData(playerid, P_REALTOR_TYPE) != REALTOR_TYPE_NONE)
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			SetPlayerPosEx
			(
				playerid,
				GetBusinessData(businessid, B_EXIT_POS_X),
				GetBusinessData(businessid, B_EXIT_POS_Y),
				GetBusinessData(businessid, B_EXIT_POS_Z),
				GetBusinessData(businessid, B_EXIT_ANGLE),
				0,
				0
			);
			SetPlayerInBiz(playerid, -1);

			SetCameraBehindPlayer(playerid);

			SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_NONE);
		}
	}
	return 1;
}

CMD:lock(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "Используйте: /lock [тип] (1-Личный транспорт 2-Арендованная машина 3-Рабочий транспорт 4-Доверенный транспорт)");

	extract params -> new type;

	new Float: radius = 20.0;
	new vehicleid = INVALID_VEHICLE_ID;

	switch(type)
	{
		case 1:
		{
			vehicleid = GetPlayerOwnableCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
			{
				if(GetPlayerOwnableCars(playerid) == 0)
					return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
				else
					return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
			}
		}
		case 2:
		{
			vehicleid = GetPlayerRentCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "У Вас нет арендованной машины");
		}
		case 3:
		{
			vehicleid = GetPlayerJobCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "Вы не можете использовать эту функцию");
		}
		case 4:
		{
			vehicleid = GetPlayerAllowedCar(playerid);

			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "У Вас нет доверенного транспорта");
		}
		default:
			return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /lock [тип] (1-Личный транспорт 2-Арендованная машина 3-Рабочий транспорт 4-Доверенный транспорт)");
	}

	new Float: x, Float: y, Float: z;
	GetVehiclePos(vehicleid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z))
	{
		new status = GetVehicleParam(vehicleid, V_LOCK);
		if(status)
		{
			if(type == 1)
			{
				Action(playerid, "открыл личный транспорт", _, true);
			}
			GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~CAR~g~ OPENED", 3000, 3);
			SetVehicleParam(vehicleid, V_LOCK, false);
		}
		else
		{
			if(type == 1)
			{
				Action(playerid, "закрыл личный транспорт", _, true);
			}
			GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~CAR~r~ CLOSED", 3000, 3);
			SetVehicleParam(vehicleid, V_LOCK, true);
		}
	}
	else SendClientMessage(playerid, 0x999999FF, "Вы должны стоять рядом с транспортом");

	return 1;
}


CMD:key(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID || GetPlayerAllowedCar(playerid) != INVALID_VEHICLE_ID)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!IsABike(vehicleid))
			{
				if(vehicleid == GetPlayerOwnableCar(playerid) || vehicleid == GetPlayerAllowedCar(playerid))
				{
					new index = GetVehicleData(vehicleid, V_ACTION_ID);
					new bool: status = GetOwnableCarData(index, OC_KEY_IN);

					if(status)
					{
						if(GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
						{
							SetVehicleParam(vehicleid, V_ENGINE, VEHICLE_PARAM_OFF);
						}
						Action(playerid, "вытащил ключ из замка зажигания", _, false);
					}
					else Action(playerid, "вставил ключ в замок зажигания", _, false);

					SetOwnableCarData(index, OC_KEY_IN, status ^ true);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в личном/доверенном транспорте");
			}
		}
		else
		{
			if(GetPlayerOwnableCars(playerid) == 0)
				SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного/доверенного транспорта");
			else
				SendClientMessage(playerid, 0xCECECEFF, "Ваш личный транспорт не загружен на сервер");
		}
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

	return 1;
}

CMD:getmycar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new price = 300;
		new i_have_home = (GetPlayerHouse(playerid, HOUSE_TYPE_HOME) != -1 || GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) != -1);

		if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
		{
			if(GetPlayerMoneyEx(playerid) >= price || i_have_home)
			{
				if(!i_have_home)
					GivePlayerMoneyEx(playerid, -price, "Метка ТС на GPS", true, true);

				new Float: x, Float: y, Float: z;
				GetVehiclePos(vehicleid, x, y, z);

				EnablePlayerGPS(playerid, x, y, z, "Местоположение Вашего транспорта отмечено на GPS");
				return 1;
			}
			else SendClientMessage(playerid, 0xCECECEFF, "Недостаточно денег");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "На Вашем GPS уже отмечено место");
	}
	else
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного транспорта");
		else
			SendClientMessage(playerid, 0xCECECEFF, "Ваш личный транспорт не загружен на сервер");
	}

	return 0;
}

CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new model_id = GetVehicleData(vehicleid, V_MODELID);
		if(model_id)
		{
			new fmt_str[270];

			new price = GetVehicleInfo(model_id-400, VI_PRICE);
			new percent = price * 20 / 100;

			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}Модель:\t%s (№%d)\n"\
				"{FFFFFF}Стоимость:\t$%d\n\n"\
				"{FFFFFF}Вы уверены что хотите продать транспорт?\n"\
				"{FFFFFF}На Ваш банковский счет будет начислено $%d\n\n"\
				"{FFFFFF}Если Вы хотите продать его другому игроку,\n"\
				"{FFFFFF}используйте команду /sellmycar",
				GetVehicleName(vehicleid),
				model_id,
				price,
				price - percent
			);
			Dialog(playerid, DIALOG_OWNABLE_CAR_SELL, DIALOG_STYLE_MSGBOX, "Продажа личного транспорта", fmt_str, "Да", "Нет");
		}
	}
	else
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного транспорта");
		else
			SendClientMessage(playerid, 0xCECECEFF, "Ваш личный транспорт не загружен на сервер");
	}

	return 1;
}

CMD:sellmycar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(IsPlayerInRangeOfPoint(playerid, 45.0, 333.7647, -1797.5499, 3.7115))
		{
			if(!strlen(params))
				return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmycar [id игрока] [стоимость]");

			extract params -> new to_player, price;

			new model_id = GetVehicleData(vehicleid, V_MODELID);
			if(model_id)
			{
				new car_price = GetVehicleInfo(model_id-400, VI_PRICE);

				if(!IsPlayerConnected(to_player) || to_player == playerid)
					return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

				if((GetPlayerOwnableCars(to_player) + 1) > GetPlayerCarSlots(to_player))
					return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет свободных слотов для транспорта");

				if(GetPlayerOwnableCar(to_player) != INVALID_VEHICLE_ID)
					return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок должен выгрузить его личный транспорт с сервера {888888}(/car > 7)");

				if(!(3000 <= price <= (car_price * 2)))
					return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должа быть от 3000$ и не дороже в 2 раза гос. стоимости ТС");

				if(GetPlayerMoneyEx(to_player) < price)
					return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

				new  Float: car_x, Float: car_y, Float: car_z;
				GetVehiclePos(vehicleid, car_x, car_y, car_z);

				if(IsPlayerInRangeOfPoint(playerid, 15.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(to_player, 15.0, car_x, car_y, car_z))
				{
					SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_OWNABLE_CAR, price, vehicleid);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Вы и покупатель должны находиться около ТС");
			}
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Вы не на Б/У рынке.");
	}
	else
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного транспорта");
		else
			SendClientMessage(playerid, 0xCECECEFF, "Ваш личный транспорт не загружен на сервер");
	}

	return 1;
}

CMD:allow(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного транспорта");
		else
			return SendClientMessage(playerid, 0xCECECEFF, "Ваш личный транспорт не загружен на сервер");
	}

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /allow [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new fmt_text[71];

	if(GetPlayerAllowedCar(to_player) == vehicleid)
	{
		format(fmt_text, sizeof fmt_text, "Вы забрали у %s ключи от Вашего личного транспорта", GetPlayerNameEx(to_player));
		SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

		format(fmt_text, sizeof fmt_text, "%s забрал у Вас ключи от своего личного транспорта", GetPlayerNameEx(playerid));
		SendClientMessage(to_player, 0xFF5533FF, fmt_text);

		SetPlayerData(to_player, P_ALLOWED_CAR, INVALID_VEHICLE_ID);
	}
	else
	{
		if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_CAR_KEY);
	}

	return 1;
}

CMD:park(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в транспорте");

	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid == INVALID_VEHICLE_ID)
	{
		if(GetPlayerOwnableCars(playerid) == 0)
			return SendClientMessage(playerid, 0x999999FF, "У Вас нет личного транспорта");
		else
			return SendClientMessage(playerid, 0x999999FF, "Ваш личный транспорт не загружен на сервер");
	}

	if(vehicleid != GetPlayerVehicleID(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в личном транспорте");

	new green_zone_id = GetPVarInt(playerid, "player_in_green_zone") - 1;

	if(green_zone_id != -1)
	{
		if(!g_green_zones[green_zone_id][GZ_ALLOW_PARK])
		{
			new fmt_text[144];

			format(fmt_text, sizeof fmt_text, "На территории {FFFF00}'%s' {1E90FF}парковка личного транспорта запрещена. Выберите другое место для парковки", g_green_zones[green_zone_id][GZ_NAME]);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

			return 1;
		}
	}

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	GetVehiclePos(vehicleid, GetOwnableCarData(index, OC_POS_X), GetOwnableCarData(index, OC_POS_Y), GetOwnableCarData(index, OC_POS_Z));
	GetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));

	SetOwnableCarData(index, OC_World, GetPlayerVirtualWorld(playerid));

	SetOwnableCarData(index, OC_Int, GetPlayerInterior(playerid));

	SaveOwnableCar(vehicleid);
	return SendClientMessage(playerid, 0x66CC00FF, "Транспорт припаркован");
}

CMD:car(playerid, params[])
{
	if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
	{
		Dialog
		(
			playerid, DIALOG_OWNABLE_CAR, DIALOG_STYLE_LIST,
			"Система управления транспортом",
			"{ffff00}1. {FFFFFF}{669900}Открыть {FFFFFF}или {FF3300}закрыть {FFFFFF}транспорт\n"\
			"{ffff00}2. {FFFFFF}Вставить / вытащить ключи\n"\
			"{ffff00}3. {FFFFFF}Отметить транспорт на GPS {CECECE}(300$)\n"\
			"{ffff00}4. {FFFFFF}Содержимое багажника\n"\
			"{ffff00}5. {FFFFFF}Документы на транспорт\n"\
			"{ffff00}6. {FFFFFF}Припарковать транспорт\n"\
			"{ffff00}7. {FFFFFF}Покраска автомобиля {CECECE}(30000$)\n"\
			"{ffff00}8. {CECECE}Perfomance Tuning \n"\
			"{ffff00}9. {FFFFFF}Выгрузить транспорт с сервера",
			"Выбрать", "Закрыть"
		);
	}
	else
	{
		new fmt_text[640],
			Cache: result,
			id;

		mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, fmt_text, true);

		new rows = cache_num_rows();

		if(!rows)
			SendClientMessage(playerid, 0xCECECEFF, "У Вас нет личного транспорта");

		else
		{
			new query[80],
				model_id,
				car_number[7];

			format(fmt_text, sizeof fmt_text, "");

			for(new i = 0; i < rows; i ++)
			{
				id = cache_get_field_content_int(i, "id");
				model_id = cache_get_field_content_int(i, "model_id") - 400;
				cache_get_field_content(i, "number", car_number);

				format(query, sizeof query, "{FFFFFF}№%d. %s (%d) [%s]\n", i + 1, GetVehicleInfo(model_id, VI_NAME), model_id + 400, car_number);
				strcat(fmt_text, query);
				SetPlayerListitemValue(playerid, i, id);
			}

			Dialog
			(
				playerid, DIALOG_OWNABLE_CAR_LIST, DIALOG_STYLE_LIST,
				"Ваш транспорт",
				fmt_text,
				"Выбрать", "Закрыть"
			);
		}

		cache_delete(result);
	}

	return 1;
}
CMD:test(playerid)
{
	Dialog
							(
								playerid, DIALOG_VEHICLE_TRUNK_PUT, DIALOG_STYLE_LIST,
								"Содержимое багажника",
								"\
								1. Положить деньги\n\
								2. Положить канистру\n\
								3. Положить аптечку\n\
								4. Положить металл\n\
								5. Положить патроны\n\
								6. Положить наркотики\
								",
								"Положить", "Назад"
							);
 }
CMD:trunk(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new vehicleid;
		new Float: x, Float: y, Float: z;
		new Float: angle, Float: distance;

		while((++vehicleid) < MAX_VEHICLES)
		{
			if(!GetVehicleData(vehicleid, V_MODELID)) continue;

			GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BOOT, x, y, z, angle, distance);
			if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) continue;

			ShowTrunkDialog(playerid, vehicleid, false);
			break;
		}
	}
	return 1;
}

CMD:pos(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) == 0) return 1;

	new Float: x, Float: y, Float: z, interior, virtual_world;

	if(sscanf(params, "P<,>fff", x, y, z))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /pos [x y z]");

	sscanf(params, "P<,>{fff}dd", interior, virtual_world);

	return SetPlayerPosEx(playerid, x, y, z, interior, virtual_world);
}

CMD:d(playerid, params[])
{
	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в организациях");
	else if(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна для сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /d [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "[D] %s %s[%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerTeamEx(i)) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;
		if(GetPlayerTeamEx(i) >= TEAM_GANG_GROVE) continue;

		SendClientMessage(i, 0xFF9999FF, fmt_msg);
	}

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию организаций", 0xDD99FFAA, 10.0, 4000);

	return 1;
}

CMD:dd(playerid, params[])
{
	if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в организациях");
	else if(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна для сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /dd [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "(( [D] %s %s[%d]: %s ))", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;
		if(!(0 < GetPlayerTeamEx(i) < TEAM_GANG_GROVE)) continue;

		SendClientMessage(i, 0xFF9999FF, fmt_msg);
	}

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию организаций", 0xDD99FFAA, 10.0, 4000);

	return 1;
}

CMD:r(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете/не состоите в организациях");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /r [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "[R] %s %s[%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(!GetPlayerTeamEx(playerid))
		SendMessageToJob(GetPlayerJob(playerid), fmt_msg), SendClientMessage(playerid,-1,"Работаит");//	SendMessageToJob(GetPlayerJob(playerid), fmt_msg, 0x33CC66FF, _, true);
	else
	    SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_msg, 0x33CC66FF);

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию", 0xDD99FFAA, 10.0, 4000);
	return 1;
}

CMD:rj(playerid, params[])
{
	if(!GetPlayerJob(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /rj [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "[R] %s %s[%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	SendMessageToJob(GetPlayerJob(playerid), fmt_msg), SendClientMessage(playerid,-1,"Работаит");//	SendMessageToJob(GetPlayerJob(playerid), fmt_msg, 0x33CC66FF, _, true);
	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию", 0xDD99FFAA, 10.0, 4000);
	return 1;
}

CMD:v(playerid, params[])
{
	if(GetPlayerPremium(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет VIP аккаунта ");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /v [текст]");

	new fmt_msg[144];



	format(fmt_msg, sizeof fmt_msg, "[VIP CHAT] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerPremium(i)) continue;
        if(!GetPlayerData(i, P_PREMIUM_CHAT)) continue;

		SendClientMessage(i, 0xEC174FFF, fmt_msg);
	}
	return 1;
}

CMD:voff(playerid, params[])
{
	if(GetPlayerPremium(playerid) < 1) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет VIP аккаунта ");
	if(GetPlayerData(playerid, P_PREMIUM_CHAT))
	{
		SendClientMessage(playerid,-1,"Вы отключили VIP чат");
		SetPlayerData(playerid, P_PREMIUM_CHAT, 0);
		return 1;
	}
	if(!GetPlayerData(playerid, P_PREMIUM_CHAT))
	{
		SendClientMessage(playerid,-1,"Вы включили VIP чат");
		SetPlayerData(playerid, P_PREMIUM_CHAT, 1);
		return 1;
	}
	return 1;
}


CMD:rr(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете/не состоите в организациях");
	// else if(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна для сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /rr [текст]");

	new fmt_msg[144];

	format(fmt_msg, sizeof fmt_msg, "(( OOC: [R] %s %s[%d]: %s ))", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(1 <= GetPlayerTeamEx(playerid) <= 10)
		SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_msg, 0x33CC66FF);
	else
		SendMessageToJob(GetPlayerJob(playerid), fmt_msg, 0x33CC66FF, _);

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию", 0xDD99FFAA, 10.0, 4000);
	return 1;
}

CMD:fn(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fn [текст]");

	new fmt_msg[144],
		fam_id = GetPlayerData(playerid, P_FAMILY),
		rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

	format(fmt_msg, sizeof fmt_msg, "(( OOC: [F] %s %s[%d]: %s ))", GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}
	return 1;
}

CMD:f(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /fn [текст]");

	new fmt_msg[144],
		fam_id = GetPlayerData(playerid, P_FAMILY),
		rang_id = GetPlayerData(playerid, P_FAMILY_RANK);

	format(fmt_msg, sizeof fmt_msg, "[F] %s %s[%d]: %s", GetFamilyRang(fam_id, rang_id), GetPlayerNameEx(playerid), playerid, params);

	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(GetPlayerData(i, P_FAMILY) == 0) continue;
		if(GetPlayerData(i, P_ADVISOR_BLOCK_CHAT)) continue;

		if(GetPlayerData(i, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) continue;

		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}
	return 1;
}

CMD:bizwar(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");

	SendClientMessage(playerid, 0xCECECEFF, "Временно недоступно");
	return 1;
}

CMD:fbiz(playerid, params[])
{
	if(GetPlayerData(playerid, P_FAMILY) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не состоите в семье");

	SendClientMessage(playerid, 0xCECECEFF, "Временно недоступно");
	return 1;
}

CMD:gnews(playerid, params[])
{
	if(!(TEAM_GOVERNMENT <= GetPlayerTeamEx(playerid) <= TEAM_FBI)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xCECECEFF, "Доступ в чат заблокирован. Время до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /gnews [текст]");

	new fmt_msg[170 + 1];
	new ttext[30];
	switch(GetPlayerTeamEx(playerid))
	{
		case TEAM_ARMY: ttext = "[ВМФ]";
		case TEAM_GOVERNMENT: ttext = "[Правительство]";
		case TEAM_HOSPITAL: ttext = "[Больница]";
		case TEAM_FBI: ttext = "[FBI]";
		case TEAM_LSPD: ttext = "[LSPD]";
		case TEAM_RADIO: ttext = "[СМИ]";
	}
	format(fmt_msg, sizeof fmt_msg, "Гос.новости:%s %s[%d]: %s",ttext, GetPlayerNameEx(playerid), playerid, params);
	SendClientMessageToAll(0x4466CCFF,  fmt_msg);

	return 1;
}
ALT:gnews:gov;

CMD:invite(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /invite [id игрока]");

	extract params -> new to_player;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(1 <= GetPlayerTeamEx(to_player) <= 10) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже состоит в организации");
	if(GetPlayerData(to_player, P_WARN)) return SendClientMessage(playerid, 0xCECECEFF, "У игрока есть предупреждения");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_INVITE);
	return 1;
}

CMD:uninvite(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uninvite [id игрока] [причина]");

	extract params -> new to_player, string:reason[32];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= strlen(reason) <= 32))
		return SendClientMessage(playerid, 0xCECECEFF, "Введите причину увольнения");

	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей организации");

	if(GetPlayerJob(to_player) >= GetPlayerJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");

	UnInvite(playerid, to_player, reason);

	return 1;
}

CMD:uninviteoff(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uninviteoff [ник игрока]");

	extract params -> new string: player_name[21];

	if(IsPlayerConnected(GetPlayerID(player_name))) return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем находится на сервере");

	new query[144],
		Cache: result,
		rows,
		team,
		rank;

	mysql_format(mysql, query, sizeof query, "SELECT team, job FROM accounts WHERE name='%s'", player_name);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows)
	{
		team = cache_get_row_int(0, 0);
		rank = cache_get_row_int(0, 1);
	}

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0xCECECEFF, "Игрок с таким именем не найден");

	if(team != GetPlayerTeamEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей организации");

	if(rank >= GetPlayerJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");

	format(query, sizeof query, "Вы уволили игрока %s в оффлайне", player_name);
	SendClientMessage(playerid, 0xFF5533FF, query);

	format(query, sizeof query, "UPDATE accounts SET team=0,org_skin=0,job=0 WHERE name='%s'", player_name);
	mysql_query(mysql, query, false);

	return 1;
}

CMD:finvite(playerid, params[])
{
	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerData(playerid, P_FAMILY_RANK) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна сотздателю семьи и его заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /finvite [id игрока]");

	extract params -> new to_player;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(GetPlayerData(to_player, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок уже состоит в семье");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_FINVITE);
	return 1;
}

CMD:funinvite(playerid, params[])
{
	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerData(playerid, P_FAMILY_RANK) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна сотздателю семьи и его заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /funinvite [id игрока] [причина]");

	extract params -> new to_player, string:reason[32];

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= strlen(reason) <= 32))
		return SendClientMessage(playerid, 0xCECECEFF, "Введите причину увольнения");

	if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY))
		return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");

	if(GetPlayerData(to_player, P_FAMILY_RANK) >= GetPlayerData(playerid, P_FAMILY_RANK))
		return SendClientMessage(playerid, 0xCECECEFF, "Нельзя уволить уволить заместителя/лидера организации");

	FUnInvite(playerid, to_player, reason);

	return 1;
}

CMD:frang(playerid, params[])
{
	if(!GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerData(playerid, P_FAMILY_RANK) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна сотздателю семьи и его заместителям");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /frang [id игрока] [ранг]");
	extract params -> new to_player, give_rang;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(GetPlayerData(to_player, P_FAMILY) != GetPlayerData(playerid, P_FAMILY)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей семье");
	if(GetPlayerData(to_player, P_FAMILY_RANK) >= 10) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя повысить или понизить создателя семьи");
	if(1 < give_rang > 9) return SendClientMessage(playerid, 0xCECECEFF, "Ранг от 1 до 9");

	new fmt_msg[512];

	SetPlayerData(to_player, P_FAMILY_RANK, give_rang);
	format(fmt_msg, sizeof fmt_msg, "Ваш ранг в семье был изменен на %d (%s)", GetPlayerData(to_player, P_FAMILY_RANK), GetFamilyRang(GetPlayerData(to_player, P_FAMILY), GetPlayerData(to_player, P_FAMILY_RANK)));
	SendClientMessage(to_player, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили ранг %s[%d] до %d (%s)",  GetPlayerNameEx(to_player), to_player, GetPlayerData(to_player, P_FAMILY_RANK), GetFamilyRang(GetPlayerData(to_player, P_FAMILY), GetPlayerData(to_player, P_FAMILY_RANK)));
	SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET family_rank=%d WHERE id=%d", GetPlayerData(to_player, P_FAMILY_RANK), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);

	return 1;
}
CMD:sellmyskin(playerid, params[])
{
	new skinid = GetPlayerData(playerid, P_SKIN);
	if(skinid == 252) return false;
	if(GetPlayerSkin(playerid) == 252) return SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} Вы не можете продать скин!");
	if(!strlen(params))
	return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /sellmyskin [id игрока] [стоимость]");

	extract params -> new to_player, price;
	if(price == 0) return false;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

   	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится далеко от Вас");

	if(GetPlayerMoneyEx(to_player) < price)
		return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_SKIN, skinid, price);
	return 1;
}
CMD:selld(playerid, params[])
{
    new drugs = GetPlayerData(playerid, P_DRUGS);
	if(sscanf(params,"udd", params[0], params[1], params[2]))
	return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /selldrugs [id игрока] [кол-во] [стоимость]");
	if(params[0] == INVALID_PLAYER_ID || params[0] == playerid) return SendClientMessage(playerid, -1,"Такого игрока не существует!");
	if(drugs < params[1]) return SendClientMessage(playerid, -1, "У вас нет такого кол-ва наркотиков!");
	if(params[1]  < 1 || params[1] > 50) return SendClientMessage(playerid, -1, "Нельзя меньше одного и больше 50");
	if(params[2] < 1 || params[2] > 1000) return SendClientMessage(playerid, -1,"Цена должна быть выше 1-го и не более 1000");
	if(GetPlayerData(params[0], P_DRUGS) >= 500) return SendClientMessage(playerid, -1, "Игрок не может купить больше!");
   	if(!IsPlayerInRangeOfPlayer(playerid, params[0], 6.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится далеко от Вас");

	if(GetPlayerMoneyEx(params[0]) < params[2])
		return SendClientMessage(playerid, 0xCECECEFF, "У этого игрока нет такой суммы");

	SendPlayerOffer(playerid, params[0], OFFER_TYPE_SELL_DRUGS, drugs, params[2]);
	return 1;
}
CMD:drugs(playerid, params[])
{
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /drugs [кол-во грамм]");
	extract params -> new drugs;
	if(!(1 <= drugs <= 3)) return SendClientMessage(playerid, 0xCECECEFF, "Количество грамм от 1 до 3");
	if(GetPlayerData(playerid, P_USE_DRUGS) != 0)
	    return SendClientMessage(playerid,0xCECECEFF,"Использовать нарко можно 1 раз в 60 секунд!");
	new fmt_msg[512];

	if(GetPlayerData(playerid, P_DRUGS) < drugs) return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет столько наркотиков");

	AddPlayerData(playerid, P_DRUGS, -, drugs);

	new Float:health;
    ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,0,0,0,0);
	GetPlayerHealth(playerid, health);
	SetPlayerHealthEx(playerid, health + (drugs*20.0));

	SetPlayerData(playerid, P_USE_DRUGS, 60);
	SetPlayerWeather(playerid, -68);

	SetTimerEx("DrugEffectGone", 60000, false, "i", playerid);

	Action(playerid, "использовал наркотики", _, false);

	format(fmt_msg, sizeof fmt_msg, "Вы использовали %d грамм(а) наркотиков. Ваше здоровье (%f)", drugs, GetPlayerData(playerid, P_HEALTH));
	SendClientMessage(playerid, 0x32a44bFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET drugs=%d WHERE id=%d", GetPlayerData(playerid, P_DRUGS), GetPlayerAccountID(playerid));
	mysql_query(mysql, fmt_msg, false);

	return 1;
}

CMD:rang(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /rang [id игрока] [ранг]");
	extract params -> new to_player, give_rang;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не состоит в Вашей организации");
	if(GetPlayerJob(to_player) >= 10) return SendClientMessage(playerid, 0xCECECEFF, "Нельзя повысить или понизить лидера организации");
	if(!(1 <= give_rang <= 9)) return SendClientMessage(playerid, 0xCECECEFF, "Ранг от 1 до 9");

	new fmt_msg[512];

	SetPlayerData(to_player, P_JOB, give_rang);
	format(fmt_msg, sizeof fmt_msg, "Ваш ранг в организации был изменен на %d (%s)", GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
	SendClientMessage(to_player, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы изменили ранг %s[%d] до %d (%s)",  GetPlayerNameEx(to_player), to_player, GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
	SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET org_skin=%d,job=%d WHERE id=%d", GetPlayerData(to_player, P_OSKIN), GetPlayerJob(to_player), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);

	format(fmt_msg, sizeof fmt_msg, "изменил %s[acc:%d] до %d (%s)", GetPlayerNameEx(to_player), to_player, GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));

	SendLog(playerid, LOG_TYPE_FRACTION, fmt_msg);

	return 1;
}

CMD:changeskin(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "Функция доступна лидерам организации и их заместителям");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /changeskin [id игрока]");
	extract params -> new to_player;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "Такого игрока нет");
	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Этот игрок не состоит в Вашей организации");
	if(GetPlayerSex(to_player)) return SendClientMessage(playerid, 0x999999FF, "Нельзя изменить внешность игрокам с женским полом");

	new team_id = GetPlayerTeamEx(playerid);

	new fmt_str[256];
	new text[(sizeof fmt_str) * 10];
	new old_skin;
	new count;

	SetPVarInt(playerid, "change_team_skin_playerid", to_player);

	for(new i; i < 4; i ++)
	{
		if(old_skin == GetTeamData(team_id, O_SKINS)[i]) continue;

		SetPlayerListitemValue(playerid, count, i);
		count ++;

		old_skin = GetTeamData(team_id, O_SKINS)[i];
 		format(fmt_str, sizeof fmt_str, "№ %d Одежда id %d\n", count, old_skin);
	//	format(fmt_str, sizeof fmt_str, "Одежда %d (id %d)\n", count, old_skin);
		strcat(text, fmt_str);
	}
	Dialog(playerid, DIALOG_TEAM_CHANGE_SKIN, DIALOG_STYLE_LIST, "Выберите внешность:", text, "Ок", "Отмена");

	return 1;
}

CMD:showall(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");

	new query[75];
	format(query, sizeof query, "SELECT name, score, job FROM accounts WHERE team = %d ORDER BY job DESC", GetPlayerTeamEx(playerid));
	mysql_tquery(mysql, query, "ShowOrgAllPlayers", "i", playerid);
	return 1;
}

public: ShowOrgAllPlayers(playerid)
{
	new rows = cache_num_rows();

	new p_name[21];
	new lvl, rang;

	new fmt_str[33];
	new text[1290] = "Уровень\tРанг\tИмя\n\n{FFFFFF}";

	new idx, j = rows;
	if(j > 45)
		j = 45;

	for(idx = 0; idx < j; idx ++)
	{
		cache_get_row(idx, 0, p_name);
		lvl = cache_get_row_int(idx, 1);
		rang = cache_get_row_int(idx,2);

		format(fmt_str, sizeof fmt_str, "%d\t%d\t%s\n", lvl, rang, p_name);
		strcat(text, fmt_str);
	}

	format(fmt_str, sizeof fmt_str, "Показаны %d/%d игроков", idx, rows);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "Закрыть", "");
	return 1;
}

public: ShowFamilyAllPlayers(playerid)
{
	new rows = cache_num_rows();

	new p_name[21];
	new lvl, family_rank;

	new fmt_str[33];
	new text[1290] = "Уровень\tРанг\tИмя\n\n{FFFFFF}";

	new idx, j = rows;
	if(j > 45)
		j = 45;

	for(idx = 0; idx < j; idx ++)
	{
		cache_get_row(idx, 0, p_name);
		lvl = cache_get_row_int(idx, 1);
		family_rank = cache_get_row_int(idx,2);

		format(fmt_str, sizeof fmt_str, "%d\t%d\t%s\n", lvl, family_rank, p_name);
		strcat(text, fmt_str);
	}

	format(fmt_str, sizeof fmt_str, "Показаны %d/%d игроков", idx, rows);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "Закрыть", "");
	return 1;
}
CMD:find(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "Вы нигде не работаете/не состоите в организациях");

	ShowTeamStructureDialog(playerid, GetPlayerTeamEx(playerid));
	return 1;
}

CMD:afind(playerid, params[])
{
	print("чаво");
	if(!GetPlayerAdminEx(playerid)) return 1;

	Dialog
	(
		playerid,
		DIALOG_ADMIN_FIND,
		DIALOG_STYLE_LIST,
		"Просмотреть онлайн фракции",
		"1. Мэрия г.Los-Santos\n\
		2. ВМФ\n\
		3. Больница г.Los-Santos\n\
		4. СМИ г.Los-Santos\n\
		5. LSPD\n\
		6. FBI\n\
		7. Grove Gang\n\
		8. Vagos Gang\n\
		9. Ballas Gang\n\
		10. Aztecas Gang",
		"Выбрать",
		"Отмена"
	);

	return 1;
}

stock ShowTeamStructureDialog(playerid, teamid)
{
	new string[1500];
	new fmt_str[40];

	if(teamid)
	{
		string = "Уровень\tРанг\tТелефон\tИмя\n\n{FFFFFF}";

		for(new i; i < MAX_PLAYERS; i ++)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerAdminEx(i)) continue;
			else if(GetPlayerTeamEx(i) != teamid) continue;

			format(fmt_str, sizeof fmt_str, "%d\t\t%d\t%d\t\t%s", GetPlayerLevel(i), GetPlayerJob(i), GetPlayerPhone(i), GetPlayerNameEx(i));
			strcat(string, fmt_str);

			if(IsPlayerAFK(i))
				strcat(string, "-AFK");

			strcat(string, "\n");
		}

		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Члены организации online", string, "Закрыть", "");
	}
	else
	{
		string = "Уровень\tТелефон\tИмя\n\n{FFFFFF}";

		for(new i; i < MAX_PLAYERS; i ++)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerJob(i) != GetPlayerJob(playerid)) continue;

			format(fmt_str, sizeof fmt_str, "%d\t%d%s%s", GetPlayerLevel(i), GetPlayerPhone(i), GetPlayerPhone(i) > 0 ? ("\t") : ("\t\t"), GetPlayerNameEx(i));
			strcat(string, fmt_str);

			if(IsPlayerAFK(i))
				strcat(string, "-AFK");

			if(IsPlayerInJob(i))
				strcat(string, " *");

			strcat(string, "\n");
		}

		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Сотрудники online", string, "Закрыть", "");
	}
	return 1;
}

CMD:leaders(playerid, params[])
{
	new fmt_text[75],
		list[sizeof fmt_text * 10 + 50] = "Организация - Должность - Имя - Телефон{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerAdminEx(i)) continue;
		else if(!GetPlayerTeamEx(i)) continue;
		else if(GetPlayerJob(i) != 10) continue;

		format(fmt_text, sizeof fmt_text, "\n%s - %s - %s[%d] - %d", GetTeamName(GetPlayerTeamEx(i)), GetPlayerJobAndRankName(i), GetPlayerNameEx(i), i, GetPlayerPhone(i));
		strcat(list, fmt_text);
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Лидеры онлайн", list, "Закрыть", "");

	return 1;
}

CMD:liclist(playerid, params[])
{
	new fmt_text[78],
		list[sizeof fmt_text * 10 + 50] = "Организация - Должность - Имя - Телефон{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerTeamEx(i) != TEAM_GOVERNMENT) continue;
		else if(GetPlayerJob(i) != 6) continue;

		format(fmt_text, sizeof fmt_text, "\nМэрия г.Los-Santos - Лицензёр - %s[%d] - тел. %d", GetPlayerNameEx(i), i, GetPlayerPhone(i));
		strcat(list, fmt_text);
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Лицензёры онлайн", list, "Закрыть", "");

	return 1;
}


stock SellDebtorsHome()
{
	new query[760];
	for(new i; i < g_house_loaded; i ++)
	{
		if(GetHouseData(i, H_RENT_DATE) > 1)
		{
			AddHouseData(i, H_RENT_DATE, -, 1);

			format(query, sizeof query, "UPDATE houses SET `rent_time`=%d WHERE id=%d", GetHouseData(i, H_RENT_DATE), GetHouseData(i, H_SQL_ID));
			mysql_query(mysql, query, false);
		    continue;
		}
		else
		{
		    new owner_id = GetHouseData(i, H_OWNER_ID);

			if(owner_id == 0) continue;

            format(query, sizeof query, "UPDATE family SET `house_id`=-1 WHERE house_id='%d'", GetHouseData(i, H_SQL_ID));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "UPDATE accounts a,houses h SET `house`=-1,`house_room`=-1,`house_type`=-1, h.owner_id='0', h.lock='0', h.rent_time='0', h.family = 0 WHERE a.id=h.owner_id AND h.id='%d'", GetHouseData(i, H_SQL_ID));
			mysql_query(mysql, query, false);

			new Cache: result, owner_name[21];

			mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", owner_id);
			result = mysql_query(mysql, query);

			if(cache_num_rows())
				cache_get_field_content(0, "name", owner_name, mysql, 21);

			if(!cache_num_rows())
			{
				cache_delete(result);
			}

			if(IsPlayerConnected(GetPlayerID(owner_name)))
			{
			    new playerid = GetPlayerID(owner_name);

                SetPlayerData(playerid, P_HOUSE, -1);
                SetPlayerData(playerid, P_HOUSE_ROOM, -1);
                SetPlayerData(playerid, P_HOUSE_TYPE, -1);
			}


			SetHouseData(i, H_OWNER_ID,			0);
			SetHouseData(i, H_IMPROVEMENTS,		0);

			SetHouseData(i, H_RENT_DATE,		0);
			SetHouseData(i, H_LOCK_STATUS,		false);

			UpdateHouse(i);

			HouseHealthInit(i);
			HouseStoreInit(i);

			new fmt_text[256];

			new description[64];

			description = "слет дома";

			format
			(
				fmt_text, sizeof fmt_text,
				"INSERT INTO return_money \
				(uid, money, description, status)\
				VALUES ('%d', '%d', '%s', 0)",
				owner_id,
				GetHouseData(i, H_PRICE) / 2,
				description
			);

			mysql_query(mysql, fmt_text, true);
		}
	}
    printf("home");
//	return 1;
}
stock SellDebtorsBusiness()
{
	new query[390];
	for(new i; i < g_business_loaded; i ++)
	{
		if(GetBusinessData(i, B_RENT_DATE) > 1)
		{
			AddBusinessData(i, B_RENT_DATE, -, 1);

			format(query, sizeof query, "UPDATE business SET `rent_time`=%d WHERE id=%d", GetBusinessData(i, B_RENT_DATE), GetBusinessData(i, B_SQL_ID));
			mysql_query(mysql, query, false);
		    continue;
		}
		else
		{
		    new owner_id = GetBusinessData(i, B_OWNER_ID);
		    if(owner_id == 0) continue;

			format(query, sizeof query, "UPDATE accounts a,business b SET a.business = '-1', b.owner_id='0',b.products='0',b.prod_price='0',b.lock='0',b.rent_time='0' WHERE a.id=b.owner_id AND b.id='%d'", GetBusinessData(i, B_SQL_ID));
			mysql_query(mysql, query, false);

			format(query, sizeof query, "DELETE FROM `business_gps` WHERE id = '%d'", i);
			mysql_query(mysql, query, false);
			new Cache: result, owner_name[21];

			mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", owner_id);
			result = mysql_query(mysql, query);

			if(cache_num_rows())
				cache_get_field_content(0, "name", owner_name, mysql, 21);

			if(!cache_num_rows())
			{
				cache_delete(result);
			}

			if(IsPlayerConnected(GetPlayerID(owner_name)))
			{
			    new playerid = GetPlayerID(owner_name);

	            SetPlayerData(playerid, P_BUSINESS, -1);
			}

			SetBusinessData(i, B_OWNER_ID, 			0);
			SetBusinessData(i, B_IMPROVEMENTS, 		0);

			SetBusinessData(i, B_PRODS, 			0);
			SetBusinessData(i, B_PROD_PRICE,		0);

			SetBusinessData(i, B_BALANCE,			0);
			SetBusinessData(i, B_RENT_DATE,			0);
			SetBusinessData(i, B_ENTER_MUSIC,		0);
			SetBusinessData(i, B_LOCK_STATUS,		false);

			BusinessHealthPickupInit(i);

			format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", i);
			mysql_query(mysql, query, false);

			g_business_gps_init = false;

			CallLocalFunction("UpdateBusinessLabel", "i", i);

			new fmt_text[256];

			new description[64];

			description = "слет бизнеса";

			format
			(
				fmt_text, sizeof fmt_text,
				"INSERT INTO return_money \
				(uid, money, description, status)\
				VALUES ('%d', '%d', '%s', 0)",
				owner_id,
				GetBusinessData(i, B_PRICE) / 2,
				description
			);

			mysql_query(mysql, fmt_text, true);
		}
	}
	printf("biz");
//	return 1;
}
stock SellDebtorsFuel()
{
	new query[256];
	for(new i; i < g_fuel_station_loaded; i ++)
	{
		if(GetFuelStationData(i, FS_RENT_DATE) > 1)
		{
			AddFuelStationData(i, FS_RENT_DATE, -, 1);

			format(query, sizeof query, "UPDATE fuel_stations SET `rent_time`=%d WHERE id=%d", GetFuelStationData(i, FS_RENT_DATE), GetFuelStationData(i, FS_SQL_ID));
			mysql_query(mysql, query, false);
		    continue;
		}
		else
		{
			new owner_id = GetFuelStationData(i, FS_OWNER_ID);

			if(owner_id == 0) continue;

			format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.fuel_st='-1', f.owner_id='0',f.fuels='1000',f.fuel_price='3',f.lock='0',f.rent_time='0' WHERE a.id=f.owner_id AND f.id='%d'", GetFuelStationData(i, FS_SQL_ID));
			mysql_query(mysql, query, false);

			new Cache: result, owner_name[21];

			mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", owner_id);
			result = mysql_query(mysql, query);

			if(cache_num_rows())
				cache_get_field_content(0, "name", owner_name, mysql, 21);

			if(!cache_num_rows())
			{
				cache_delete(result);
			}

			if(IsPlayerConnected(GetPlayerID(owner_name)))
			{
			    new playerid = GetPlayerID(owner_name);

	            SetPlayerData(playerid, P_FUEL_ST, -1);
			}

			SetFuelStationData(i, FS_OWNER_ID, 0);
			SetFuelStationData(i, FS_IMPROVEMENTS, 	0);

			SetFuelStationData(i, FS_FUELS, 		1000);
			SetFuelStationData(i, FS_FUEL_PRICE,	3);
			SetFuelStationData(i, FS_BUY_FUEL_PRICE,0);

			SetFuelStationData(i, FS_BALANCE,		0);
			SetFuelStationData(i, FS_RENT_DATE,		0);
			SetFuelStationData(i, FS_LOCK_STATUS,	false);

			CallLocalFunction("UpdateFuelStationLabel", "i", i);

			new fmt_text[256];

			new description[64];

			description = "слет АЗС";

			format
			(
				fmt_text, sizeof fmt_text,
				"INSERT INTO return_money \
				(uid, money, description, status)\
				VALUES ('%d', '%d', '%s', 0)",
				owner_id,
				GetFuelStationData(i, FS_PRICE) / 2,
				description
			);

			mysql_query(mysql, fmt_text, true);
		}
	}
	printf("fuel");
//	return 1;
}
stock SellDebtorsHotels()
{
	new query[200];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts a,hotels h SET a.house=-1,a.house_room=0,a.house_type=-1,h.owner_id=0,h.rent_time=0,h.status=1 WHERE a.id=h.owner_id AND h.rent_time < 1");
	mysql_query(mysql, query, false);

	new hotel_owner_playerid;

	for(new h_id, r_id; h_id < MAX_HOTELS; h_id ++)
	{
		if(GetHotelData(h_id, r_id, H_RENT_DATE) > 1)
		{
			AddHotelData(h_id, r_id, H_RENT_DATE, -, 1);
		}
		else
		{
			GetPlayerID(GetHotelData(h_id, r_id, H_OWNER_NAME), hotel_owner_playerid);

			SetHotelData(h_id, r_id, H_OWNER_ID, 0);
			SetHotelData(h_id, r_id, H_RENT_DATE, 0);

			if(IsPlayerConnected(hotel_owner_playerid) && IsPlayerLogged(hotel_owner_playerid))
			{
				if(GetPlayerHouse(hotel_owner_playerid, HOUSE_TYPE_HOTEL) == h_id)
				{
					SetPlayerData(hotel_owner_playerid, P_HOUSE, 		-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_ROOM, 	-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_TYPE, 	-1);

					SendClientMessage(hotel_owner_playerid, 0xCECECEFF, "Вы были выселены из гостиницы за неуплату услуг");
				}
			}
		}
	}
	mysql_format(mysql, query, sizeof query, "UPDATE accounts a,hotels h SET a.house=-1,a.house_room=0,a.house_type=-1,h.owner_id=0,h.rent_time=0,h.status=1 WHERE a.id=h.owner_id AND h.rent_time < 1");
	mysql_query(mysql, query, false);
	printf("hotel");
//	return 1;
}

CMD:smenu(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна советникам правительства");

	Dialog
	(
		playerid, DIALOG_ADVISOR_MENU, DIALOG_STYLE_LIST,
		"{33CC66}Меню советника",
		"1. Показать/скрыть бейджик\n\
		2. Показать/скрыть рацию организации\n\
		3. Показать состав организации",
		"Выбрать", "Закрыть"
	);
	return 1;
}

CMD:givelic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 6) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна только лицензерам");

	if(!strlen(params))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givelic [id игрока] [идентификатор лицензии] [цена]");
		SendClientMessage(playerid, 0xCECECEFF, "Индификаторы лицензий: 1 - Вод. права базового уровня | 2 - На оружие");
		return 1;
	}

	extract params -> new to_player, lic_id, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок слишком далеко");

	if(!(1 <= lic_id <= 2)) return SendClientMessage(playerid, 0xCECECEFF, "Неверный идентификатор лицензии");

	switch(lic_id)
	{
		case 1:
		{
			if(GetPlayerData(to_player, P_DRIVING_B) >= 1)
				return SendClientMessage(playerid, 0xCECECEFF, "У игрока уже есть лицензия на вождение Т/С");
		}
		case 2:
		{
			if(GetPlayerData(to_player, P_LIC_WEAPON) == 1)
				return SendClientMessage(playerid, 0xCECECEFF, "У игрока уже есть лицензия на оружие");
		}
	}

	new lic_price_limits[2][2] =
	{
		{1000, 	10000},
		{30000, 50000}
	};

	if(!(lic_price_limits[lic_id - 1][0] <= price <= lic_price_limits[lic_id - 1][1]))
	{
		new fmt_text[60];

		format(fmt_text, sizeof fmt_text, "Стоимость лицензии должна быть от %d до $%d",
		lic_price_limits[lic_id - 1][0], lic_price_limits[lic_id - 1][1]);

		SendClientMessage(playerid, 0xCECECEFF, fmt_text);

		return 1;
	}

	if(GetPlayerMoneyEx(to_player) < price)
		return SendClientMessage(playerid, 0xCECECEFF, "У игрока нет такой суммы денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_LIC, lic_id, price);

	return 1;
}

CMD:free(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 7) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна только адвокатам");

	extract params -> new to_player, price; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /free [id игрока] [цена]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок слишком далеко");

	if(!GetPlayerData(to_player, P_JAIL))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок не находится в тюрьме");

	if(!(500 <= price <= 50000))
		return SendClientMessage(playerid, 0xCECECEFF, "Стоимость должна быть от 500 до 50.000$");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_JAIL_FREE, price);

	return 1;
}

CMD:medhelp(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0xCECECEFF, "Вы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1362.7057,-166.8792,967.5167)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /medhelp [id игрока] [стоимость лечения]");
	extract params -> new to_player, price;
    if(to_player == playerid) return SendClientMessage(playerid, -1, "Вы не можете лечить самого себя!");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Пациент слишком далеко");
	if(!(100 <= price <= 5000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость лечения должна быть от 100 до 5000$");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0xCECECEFF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_MEDHELP, price);
	return 1;
}

CMD:medbed(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 100.0, 1370.0732, -173.6992, 968.5089))
	{
	    if(GetPlayerHealthEx(playerid) >= 75)
		{
			return SendClientMessage(playerid, 0xCECECEFF, "Вы не нуждаетесь в лечении");
		}
		new bedid = -1;

		for(new i; i < sizeof g_med_bed_pos; i++)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.5, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2])) continue;
			bedid = i;
			break;
		}

		if(bedid == -1) return 1;
		else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) return SendClientMessage(playerid, 0xCECECEFF, "Вы уже заняли койку");
		else if(g_med_bed_used[bedid]) return SendClientMessage(playerid, 0xCECECEFF, "Эта койка занята");

		else
		{
			SetPlayerData(playerid, P_OCCUPIED_BED, bedid);

			g_med_bed_used[bedid] = true;

			new fmt_msg[85];

			format(fmt_msg, sizeof fmt_msg, "Койка №%d\n\n{ffff00}Пациент:\n%s", bedid + 1, GetPlayerNameEx(playerid));
			UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFFF, fmt_msg);

			format(fmt_msg, sizeof fmt_msg, "Вы заняли койку №%d. В зависимости от состояния здоровья лечение может занять время", bedid + 1);
			SendClientMessage(playerid, 0x32a44bFF, fmt_msg);

			SendClientMessage(playerid, -1, "Чтобы выписаться подойдите к врачу или выйдите за пределы больницы");
		}
		SetTimer("HospitalTreatment", (random(5) + 1) * 1000, false);
	}

	return 1;
}

CMD:out(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0xCECECEFF, "Вы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1362.7057,-166.8792,967.5167)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /out [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");
//	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0xCECECEFF, "Игрок должен находиться на лечении");

	ClearMedBed(to_player, GetPlayerData(playerid, P_OCCUPIED_BED));
	SetPlayerData(to_player, P_HOSPITAL, false);

	SetPlayerChatBubble(to_player, "Выписан", 0x32a44bFF, 10.0, 2000);

	new fmt_msg[60];
	format(fmt_msg, sizeof fmt_msg, "Медицинский работник %s выписал Вас из больницы", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x1E90FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "Вы выписали %s из больницы", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x1E90FFFF, fmt_msg);
	return 1;
}

CMD:heal(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0xCECECEFF, "Вы не медицинский работник");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /heal [id игрока] [цена за лечение]");
	extract params -> new to_player, price;

	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_MED_CAR || GetPlayerVehicleID(to_player) != vehicleid) return SendClientMessage(playerid, 0xCECECEFF, "Вы или Ваш пациент находитесь не в машине скорой помощи");
	if(!(0 <= price <= 5000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость лечения должна быть от 0 до 5000$");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0xCECECEFF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_HEAL, price);
	return 1;
}

CMD:changesex(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0xCECECEFF, "Вы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1362.7057,-166.8792,967.5167)) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в больнице");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Использование: /changesex [id игрока] [стоимость операции]");
	extract params -> new to_player, price;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");
	if(!(500000 <= price <= 1000000)) return SendClientMessage(playerid, 0xCECECEFF, "Стоимость операции должна быть от 500000 до 1000000$");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0xCECECEFF, "У пациента нет с собой столько денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_CHANGE_SEX, price);
	return 1;
}

CMD:tie(playerid, params[])
{
	if(!(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не член банды");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /tie [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок уже связан/закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, 2);

	TogglePlayerControllable(to_player, false);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s связал %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:untie(playerid, params[])
{
	if(!(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS) && GetPlayerAdminEx(playerid) == 0)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не член банды");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /untie [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок не завязан");

	if(GetPlayerData(to_player, P_FOLLOWED_BY) != INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xCECECEFF, "Перестаньте вести игрока за собой (/follow)");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND);
	SetPlayerData(to_player, P_CUFFED, 0);

	TogglePlayerControllable(to_player, true);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s развязал %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:cuff(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /cuff [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок уже закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, 1);

	TogglePlayerControllable(to_player, false);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s надел на %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid) && GetPlayerAdminEx(playerid) == 0) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /uncuff [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок не закован в наручники");

	if(GetPlayerData(to_player, P_FOLLOWED_BY) != INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xCECECEFF, "Перестаньте вести игрока за собой (/follow)");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND);
	SetPlayerData(to_player, P_CUFFED, 0);

	TogglePlayerControllable(to_player, true);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s снял с %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:putpl(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid) && !(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS))
		return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная команда");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /putpl [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок не связан/закован в наручники");

	new vehicle_id = GetPlayerVehicleID(playerid);
	if(!vehicle_id) return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в автомобиле");

	if(IsPlayerInPoliceTeam(playerid) && !IsPlayerInPoliceCar(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в служебном транспорте");

	new bool: is_there_some_free_places;

	for(new i = 2; i < 3; i++)
	{
		if(IsVehicleSeatOccupied(vehicle_id, i)) continue;
		PutPlayerInVehicle(to_player, vehicle_id, i);
		is_there_some_free_places = true;
		break;
	}

	if(!is_there_some_free_places) return SendClientMessage(playerid, 0xCECECEFF, "Задние места Вашего автомобиля заняты");

	new fmt_str[90];

	if(IsPlayerInPoliceTeam(playerid))
		format(fmt_str, sizeof fmt_str, "%s %s посадил %s в машину", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));

	else
	    format(fmt_str, sizeof fmt_str, "%s посадил %s в машину", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));

	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:follow(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /follow [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок не найден");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок не в наручниках");

	if(GetPlayerData(to_player, P_FOLLOWED_BY) == playerid)
		UnFollow(to_player);

	else
		Follow(to_player, playerid);

	return 1;
}

CMD:search(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /search [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	new fmt_text[110],
		bool: some_is_found;

	format(fmt_text, sizeof fmt_text, "%s %s произвёл обыск у %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_text, 0xDD90FFFF, 25.0);

	if(GetPlayerData(to_player, P_DRUGS))
	{
		format(fmt_text, sizeof fmt_text, "У %s[%d] обнаружено %d г наркотиков",GetPlayerNameEx(playerid), GetPlayerData(to_player, P_DRUGS));
		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

		some_is_found = true;
	}
	if(GetPlayerData(to_player, P_AMMO))
	{
		format(fmt_text, sizeof fmt_text, "У %s обнаружено %d патронов",GetPlayerNameEx(playerid), GetPlayerData(to_player, P_AMMO));
		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

		some_is_found = true;
	}

	if(!some_is_found) SendClientMessage(playerid, 0xFFFF00FF, "Ничего не найдено");

	return 1;
}

CMD:su(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid, string:message[66]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /su [id игрока] [причина]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, criminalid, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!strlen(message)) return SendClientMessage(playerid, 0xCECECEFF, "Введите причину");

	if(GetPlayerSuspect(criminalid) >= 6) return SendClientMessage(playerid, 0xCECECEFF, "Игрок имеет максимальный уровень розыска");

	new fmt_text[255];

	AddPlayerData(criminalid, P_SUSPECT, +, 1);
	SetPlayerSuspectInit(criminalid);
	UpdatePlayerDatabaseInt(criminalid, "suspect", GetPlayerData(criminalid, P_SUSPECT));

	format(fmt_text, sizeof fmt_text, "%s объявил Вас в розыск. Причина: %s. Текущий уровень розыска %d", GetPlayerNameEx(playerid), message, GetPlayerSuspect(criminalid));
	SendClientMessage(criminalid, 0x1E90FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "Вы объявили %s в розыск. Причина: %s. Текущий уровень розыска %d", GetPlayerNameEx(criminalid), message, GetPlayerSuspect(criminalid));
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] объявил %s[%d] в розыск [%d/6], причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid, GetPlayerSuspect(criminalid), message);

	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	return 1;
}

CMD:clear(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /clear [id игрока]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!GetPlayerSuspect(criminalid)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок не имеет розыска");

	new fmt_text[255];

	SetPlayerData(criminalid, P_SUSPECT, 0);
	SetPlayerSuspectInit(criminalid);
	UpdatePlayerDatabaseInt(criminalid, "suspect", 0);

	format(fmt_text, sizeof fmt_text, "%s удалил Вас из базы разыскиваемых", GetPlayerNameEx(playerid));
	SendClientMessage(criminalid, 0x1E90FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "Вы удалили %s из базы разыскиваемых", GetPlayerNameEx(criminalid));
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] удалил %s[%d] из базы разыскиваемых людей", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid);

	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	return 1;
}

CMD:arrest(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");

	extract params -> new criminalid; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /arrest [id игрока]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!GetPlayerData(criminalid, P_CUFFED)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок не в наручниках");

	JailPlayer(criminalid, GetPlayerSuspect(criminalid) * 5);

	SetPlayerData(criminalid, P_SUSPECT, 0);
	UpdatePlayerDatabaseInt(criminalid, "suspect", 0);

	SetPlayerSuspectInit(criminalid);

	SetPlayerSpecialAction(criminalid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(criminalid, A_OBJECT_SLOT_HAND);
	SetPlayerData(criminalid, P_CUFFED, 0);

	TogglePlayerControllable(criminalid, true);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "Вы задержали преступника %s[%d] и заключили его под стражу", GetPlayerNameEx(criminalid), criminalid);
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] задержал Вас и заключил под стражу", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid);
	SendClientMessage(criminalid, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] заключил %s[%d] под стражу", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid);
	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);
	SendClientMessage(criminalid, 0xCECECEFF, "Время до окончания заключения: {CCCC00}/time");

	return 1;
}

CMD:m(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /m [текст]");

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "<< %s %s[%d]: %s >>", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_text, 0xFFFF00FF, 60.0);

	return 1;
}

CMD:takelic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_LSPD) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник LSPD");

	extract params -> new to_player, license, string:message[66]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /takelic [id игрока] [категория] (1-А 2-B 3-C 4-D 5- Оружие) [причина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!strlen(message)) return SendClientMessage(playerid, 0xCECECEFF, "Введите причину");

	new fmt_text[128];

	switch(license)
	{
		case 1:
		{
			if(!GetPlayerData(to_player, P_DRIVING_A)) return SendClientMessage(playerid, 0xCECECEFF, "У игрока нет прав категории A");

			format(fmt_text, sizeof fmt_text, "%s[%d] забрал у Вас права категории A. Причина: %s", GetPlayerNameEx(playerid), playerid, message);
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);
			format(fmt_text, sizeof fmt_text, "Вы забрали у %s[%d] права категории A. Причина: %s", GetPlayerNameEx(to_player), to_player, message);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "%s %s[%d] забрал у %s[%d] права категории A, причина: %s", GetPlayerJobAndRankName(playerid),
			GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, message);

			SetPlayerData(to_player, P_DRIVING_A, 0);
			UpdatePlayerDatabaseInt(to_player, "driving_a", 0);
		}
		case 2:
		{
			if(!GetPlayerData(to_player, P_DRIVING_B)) return SendClientMessage(playerid, 0xCECECEFF, "У игрока нет прав категории B");

			format(fmt_text, sizeof fmt_text, "%s[%d] забрал у Вас права категории B. Причина: %s", GetPlayerNameEx(playerid), playerid, message);
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);
			format(fmt_text, sizeof fmt_text, "Вы забрали у %s[%d] права категории B. Причина: %s", GetPlayerNameEx(to_player), to_player, message);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "%s %s[%d] забрал у %s[%d] права категории B, причина: %s", GetPlayerJobAndRankName(playerid),
			GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, message);

  			SetPlayerData(to_player, P_DRIVING_B, 0);
			UpdatePlayerDatabaseInt(to_player, "driving_b", 0);
		}
		case 3:
		{
            if(!GetPlayerData(to_player, P_DRIVING_C)) return SendClientMessage(playerid, 0xCECECEFF, "У игрока нет прав категории C");

  			format(fmt_text, sizeof fmt_text, "%s[%d] забрал у Вас права категории C. Причина: %s", GetPlayerNameEx(playerid), playerid, message);
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);
			format(fmt_text, sizeof fmt_text, "Вы забрали у %s[%d] права категории C. Причина: %s", GetPlayerNameEx(to_player), to_player, message);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "%s %s[%d] забрал у %s[%d] права категории C, причина: %s", GetPlayerJobAndRankName(playerid),
			GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, message);

  			SetPlayerData(to_player, P_DRIVING_C, 0);
			UpdatePlayerDatabaseInt(to_player, "driving_c", 0);
		}
		case 4:
		{
			if(!GetPlayerData(to_player, P_DRIVING_D)) return SendClientMessage(playerid, 0xCECECEFF, "У игрока нет прав категории D");

  			format(fmt_text, sizeof fmt_text, "%s[%d] забрал у Вас права категории D. Причина: %s", GetPlayerNameEx(playerid), playerid, message);
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);
			format(fmt_text, sizeof fmt_text, "Вы забрали у %s[%d] права категории D. Причина: %s", GetPlayerNameEx(to_player), to_player, message);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "%s %s[%d] забрал у %s[%d] права категории D, причина: %s", GetPlayerJobAndRankName(playerid),
			GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, message);

  			SetPlayerData(to_player, P_DRIVING_D, 0);
			UpdatePlayerDatabaseInt(to_player, "driving_d", 0);
		}
		case 5:
		{
			if(!GetPlayerData(to_player, P_LIC_WEAPON)) return SendClientMessage(playerid, 0xCECECEFF, "У игрока нет лицензии на оружие");

  			format(fmt_text, sizeof fmt_text, "%s[%d] забрал у Вас лицензию на оружие. Причина: %s", GetPlayerNameEx(playerid), playerid, message);
			SendClientMessage(to_player, 0x1E90FFFF, fmt_text);
			format(fmt_text, sizeof fmt_text, "Вы забрали у %s[%d] лицензию на оружие. Причина: %s", GetPlayerNameEx(to_player), to_player, message);
			SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "%s %s[%d] забрал у %s[%d] лицензию на оружие, причина: %s", GetPlayerJobAndRankName(playerid),
			GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, message);

  			SetPlayerData(to_player, P_DRIVING_D, 0);
			UpdatePlayerDatabaseInt(to_player, "driving_d", 0);
		}
		default: return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /takelic [id игрока] [категория] (1-А 2-B 3-C 4-D 5 - Оружие) [причина]");
	}

	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	return 1;
}

CMD:wanted(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");

	new fmt_text[40],
		fmt_list[1024] = "Розыск\tИмя{FFFFFF}\n";

	foreach(new i : Player)
	{
		if(!GetPlayerSuspect(i)) continue;
		format(fmt_text, sizeof fmt_text, "\n%d\t\t%s", GetPlayerSuspect(i), GetPlayerNameEx(i));
		strcat(fmt_list, fmt_text);
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Список разыскиваемых", fmt_list, "Закрыть", "");

	return 1;
}

CMD:setmark(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /setmark [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!GetPlayerSuspect(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Этот игрок не в розыске");

	new Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(to_player, x, y, z);

	EnablePlayerGPS(playerid, x, y, z, "{66cc33}В последний раз преступника видели на отмеченном месте");

	return 1;
}

CMD:ticket(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_LSPD) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник LSPD");

	extract params -> new to_player, amount, string:message[64]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ticket [id игрока] [сумма штрафа] [причина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!(1 <= amount <= 50_000)) return SendClientMessage(playerid, 0xCECECEFF, "Сумма штрафа может быть от 1 до 50.000$");

	if(!strlen(message)) return SendClientMessage(playerid, 0xCECECEFF, "Введите причину");

	CreateTicket(to_player, amount, GetPlayerNameEx(playerid), message);

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s[%d] выписал Вам штраф в размере $%d Причина: %s", GetPlayerNameEx(playerid), playerid, amount, message);
	SendClientMessage(to_player, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "Вы выписали %s[%d] штраф в размере $%d Причина: %s", GetPlayerNameEx(to_player), to_player, amount, message);
	SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] выписал %s[%d] штраф ($%d), причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, amount, message);

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0xFFC000FF, playerid);

	new Cache: result,
		id;

	result = mysql_query(mysql, "SELECT id FROM tickets ORDER BY id DESC LIMIT 1", true);

	id = cache_get_row_int(0, 0);

	cache_delete(result);

	new day, month, year;

	getdate(year, month, day);

	format(fmt_text, sizeof fmt_text, "Номер штрафа: #%d | Дата: %02d-%02d-%d", id, day, month, year);
	SendClientMessage(playerid, 0xffff00FF, fmt_text);

	return 1;
}

CMD:delticket(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_LSPD) return SendClientMessage(playerid, 0xCECECEFF, "Вы не сотрудник LSPD");

	extract params -> new ticket_id; else return SendClientMessage(playerid, 0xCECECEFF, "/delticket [номер штрафа]");

	new query[144],
		Cache: result,
		rows,
		uid,
		reason[64],
		player_name[21],
		status,
		amount;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE id=%d", ticket_id);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	uid = cache_get_field_content_int(0, "uid");
	status = cache_get_field_content_int(0, "status");
	amount = cache_get_field_content_int(0, "amount");

	cache_get_field_content(0, "description", reason);

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT name FROM accounts WHERE id=%d", uid);
	result = mysql_query(mysql, query, true);

	cache_get_row(0, 0, player_name);

	cache_delete(result);

	if(!rows) return SendClientMessage(playerid, 0xCECECEFF, "Штраф с таким номером не найден");

	if(status) return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете удалить уже оплаченный штраф");

	mysql_format(mysql, query, sizeof query, "DELETE FROM tickets WHERE id=%d", ticket_id);
	mysql_query(mysql, query, false);

	format(query, sizeof query, "Вы удалили штраф #%d из базы данных LSPD", ticket_id);
	SendClientMessage(playerid, 0x66CC33FF, query);

	format(query, sizeof query, "%s %s[%d] удалил штраф #%d (%s,%s,$%d) из базы данных LSPD", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, ticket_id, player_name, reason, amount);

	SendMessageToTeam(GetPlayerTeamEx(playerid), query, 0xFFC000FF, playerid);

	return 1;
}

CMD:tickets(playerid, params[])
{
	new query[128],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	SendClientMessage(playerid, 0x66CC33FF, "Список штрафов:");

	if(!rows)
		SendClientMessage(playerid, 0xffff00FF, "Штрафы отсутствуют");

	else
	{
		new paid_tickets;

		for(new idx; idx < rows; idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				amount = cache_get_field_content_int(idx, "amount"),
				status = cache_get_field_content_int(idx, "status"),
				desc[64],
				issuer[32];

			cache_get_field_content(idx, "description", desc);
			cache_get_field_content(idx, "issuer", issuer);

			format(query, sizeof query, "#%d | $%d | %s | Выдал: %s | %s", id, amount, desc, issuer, status ? "{66CC33}Оплачен" : "{FF5533}Не оплачен");
			SendClientMessage(playerid, 0xffff00FF, query);

			if(status) paid_tickets ++;
		}

		format(query, sizeof query, "Общее количество штрафов: %d | Оплачены: %d | Не оплачены: %d", rows, paid_tickets, rows-paid_tickets);
		SendClientMessage(playerid, 0x66CC33FF, query);
	}

	cache_delete(result);

	return 1;
}

CMD:ptickets(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_LSPD) return SendClientMessage(playerid, 0xCECECEFF, "Вы не работник LSPD");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ptickets [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	new query[128],
		Cache: result,
		rows;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM tickets WHERE uid=%d", GetPlayerAccountID(to_player));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	SendClientMessage(playerid, 0x66CC33FF, "Список штрафов:");

	if(!rows)
		SendClientMessage(playerid, 0xffff00FF, "Штрафы отсутствуют");

	else
	{
		new paid_tickets;

		for(new idx; idx < rows; idx ++)
		{
			new id = cache_get_field_content_int(idx, "id"),
				amount = cache_get_field_content_int(idx, "amount"),
				status = cache_get_field_content_int(idx, "status"),
				desc[64],
				issuer[32];

			cache_get_field_content(idx, "description", desc);
			cache_get_field_content(idx, "issuer", issuer);

			format(query, sizeof query, "#%d | $%d | %s | Выдал: %s | %s", id, amount, desc, issuer, status ? "{66CC33}Оплачен" : "{FF5533}Не оплачен");
			SendClientMessage(playerid, 0xffff00FF, query);

			if(status) paid_tickets ++;
		}

		format(query, sizeof query, "Общее количество штрафов: %d | Оплачены: %d | Не оплачены: %d", rows, paid_tickets, rows-paid_tickets);
		SendClientMessage(playerid, 0x66CC33FF, query);
	}

	cache_delete(result);

	return 1;
}

CMD:radar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	Dialog
	(
		playerid, DIALOG_RADAR_SELECT, DIALOG_STYLE_LIST,
		"Установка регистратора скорости",
		"1. Дворовые территории (20 км/ч)\n"\
		"2. Населенные пункты (60 км/ч)\n"\
		"3. Вне населенных пунктов (90 км/ч)\n"\
		"4. Автомагистрали (110 км/ч)\n"\
		"{888888}5. Удалить регистратор скорости",
		"Выбор", "Отмена"
	);

	return 1;
}
/*CMD:board(playerid, params[])
{

	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(8 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");


	Dialog	(
		playerid, DIALOG_BOARD_OBJECT, DIALOG_STYLE_LIST,
		"Установка рекламного щита",
		"1. Боковой щит\n"\
		"2. Центральный\n"\
		"{888888}3. Удалить рекламный щит",
		"Выбор", "Отмена"
	);

	return 1;
}*/
CMD:makegun(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY && !(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать это");

	extract params -> new weapon_id, weapon_ammo;

	if(!(1 <= weapon_id <= 7))
	{
		Dialog
		(
			playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			"Доступное оружие",
			"{66CCCC}\
			ID\tНазвание\t\tМеталл\n\n\
			{FFFFFF}1.\tSilenced 9mm\t\t3\n\
			2.\tDesert Eagle\t\t6\n\
			3.\tShotgun\t\t8\n\
			4.\tMP5\t\t\t9\n\
			5.\tAK47\t\t\t10\n\
			6.\tM4\t\t\t10\n\
			7.\tCountry Rifle\t\t11\n\n\
			Для добавления патронов к созданному оружию\n\
			необходимо держать его в руках\
			",
			"Закрыть", ""
		);

		SendClientMessage(playerid, 0xCECECEFF, "Используйте: /makegun [id оружия] [кол-во патронов]");

		return 1;
	}

	if(weapon_id != 2) return SendClientMessage(playerid, 0xCECECEFF, "Временно доступен только Desert Eagle");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /makegun [id оружия] [кол-во патронов]");
	if(weapon_ammo <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Неверное количество патронов");

	enum TEMP_GUN_INFO
	{
		GUN_ID,
		GUN_METAL,
		GUN_NAME[16]
	};

	new temp_gun[7][TEMP_GUN_INFO] =
	{
		{23, 3, 	"Silenced 9mm"},
		{24, 6, 	"Desert Eagle"},
		{25, 8, 	"Shotgun"},
		{29, 9, 	"MP5"},
		{30, 10, 	"AK47"},
		{31, 10, 	"M4"},
		{33, 11, 	"Country Rifle"}
	};

	if(weapon_id != GetPlayerWeapon(playerid) && GetPlayerData(playerid, P_METALL) < temp_gun[weapon_id-1][GUN_METAL])
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет нужного количества металла");
	if(GetPlayerData(playerid, P_AMMO) < weapon_ammo)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет нужного количества патронов");

	new fmt_text[128];

	if(GetPlayerWeapon(playerid) == temp_gun[weapon_id-1][GUN_ID])
	{
		format(fmt_text, sizeof fmt_text, "добавил к %s %d патронов", temp_gun[weapon_id-1][GUN_NAME], weapon_ammo);

		Action(playerid, fmt_text, _, false);
	}
	else
	{
		new w_id, w_ammo;

		for(new i; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, w_id, w_ammo);

			if(w_id == temp_gun[weapon_id-1][GUN_ID])
			{
				GivePlayerWeapon(playerid, w_id, -w_ammo);
				break;
			}
		}

		AddPlayerData(playerid, P_METALL, -, temp_gun[weapon_id-1][GUN_METAL]);
		UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

		format(fmt_text, sizeof fmt_text, "сделал %s из металла и %d патронов", temp_gun[weapon_id-1][GUN_NAME], weapon_ammo);

		Action(playerid, fmt_text, _, false);
	}

	GivePlayerWeaponEx(playerid, temp_gun[weapon_id-1][GUN_ID], weapon_ammo);

	AddPlayerData(playerid, P_AMMO, -, weapon_ammo);
	UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

	return 1;
}

CMD:close(playerid, params[])
{
	if(!(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать это");

	if(GetPlayerJob(playerid) < 8)
		return SendClientMessage(playerid, 0xCECECEFF, "Открывать или закрывать склад можно с 8-ого ранга");

	new repository = GetPlayerTeamEx(playerid) - TEAM_GANG_GROVE,
		fmt_text[70];

	SetGangRepositoryData(repository, GR_LOCK, GetGangRepositoryData(repository, GR_LOCK) ^ true);

	UpdateGangRepository(repository);

	format(fmt_text, sizeof fmt_text, "[Внимание] Склад был %s игроком %s[%d]",
	GetGangRepositoryData(repository, GR_LOCK) ? "открыт" : "закрыт", GetPlayerNameEx(playerid), playerid);

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, GetGangRepositoryData(repository, GR_LOCK) ? 0x32a44bFF : 0xCECECEFF);

	return 1;
}
CMD:capture(playerid, params[])
{
	if(!(TEAM_GANG_GROVE <= GetPlayerTeamEx(playerid) <= TEAM_GANG_AZTECAS))
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать это");

	if(GetPlayerJob(playerid) < 6)
		return SendClientMessage(playerid, 0xCECECEFF, "Организовывать захват территории можно только с 6-ого ранга");

	if(g_capture[C_STATUS])
		return SendClientMessage(playerid, 0xCECECEFF, "Дождитесь окончания текущего захвата");
 	new hour;
	gettime(hour);

	if(!(9 <= hour <= 23))
	    return SendClientMessage(playerid, 0xCECECEFF, "Время, доступное для захвата территории: с 9 до 23 часов");

	new gang_id = (GetPlayerTeamEx(playerid) - TEAM_GANG_GROVE) + 1;

	if(g_capture[C_WAIT_TIME][gang_id - 1] > gettime())
		return SendClientMessage(playerid, 0xCECECEFF, "С момента последнего Вашего захвата еще не прошел 1 час");

	new gang_zone_id = -1;

	for(new idx; idx < g_gang_zones_loaded; idx ++)
	{
		if(!IsPlayerInDynamicArea(playerid, GetGangZoneData(idx, GZ_AREA))) continue;

		gang_zone_id = idx;
		break;
	}

	if(gang_zone_id == -1)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на захваченной кем-то территории");

	new gang_zone_team = GetGangZoneData(gang_zone_id, GZ_GANG);

	if(!gang_zone_team)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться на захваченной кем-то территории");

	if(gang_zone_team == gang_id)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы не можете захватить свою территорию");

	if(g_capture[C_WAIT_TIME][gang_zone_team - 1] > gettime())
		return SendClientMessage(playerid, 0xCECECEFF, "Банда, чью территорию Вы хотите захватить, еще не окрепла с последнего захвата (не прошел 1 час)");

	new gang_players[2];

	foreach(new idx : Player)
	{
		if(GetPlayerTeamEx(idx) == GetPlayerTeamEx(playerid)) gang_players[0] ++;
		else if(GetPlayerTeamEx(idx) == (gang_zone_team - 1) + TEAM_GANG_GROVE) gang_players[1] ++;
		else continue;
	}
//    if(GetGangRepositoryData(gang_zone_team, GR_AMMO) < 500 || GetGangRepositoryData(gang_zone_team, GR_METALL) < 500) return SendClientMessage(playerid, -1, "У банды, с которой вы хотите начать войну нет материалов!");
//    if(GetGangRepositoryData(gang_id, GR_AMMO) < 500 || GetGangRepositoryData(gang_id, GR_METALL) < 500) return SendClientMessage(playerid, -1, "У вас не достаточно материалов!");
//	if(gang_players[0] < MIN_PLAYERS_FOR_CAPTURE)
//		return SendClientMessage(playerid, 0xCECECEFF, "В Вашей банде должно быть не менее 5-ти людей для захвата");

//	if(gang_players[1] < MIN_PLAYERS_FOR_CAPTURE)
//		return SendClientMessage(playerid, 0xCECECEFF, "В банде, территорию которой Вы хотите захватить, должно быть не менее 5-ти людей для захвата");

	StartCapture(playerid, gang_zone_id, gang_id, gang_zone_team);

	return 1;
}

stock UpdateCaptureText()
{
	return 1;
}

stock StartCapture(playerid, gang_zone_id, attack_team, protect_team)
{
	// Time: 9:53~n~~w~Zhopa OPG__~r~~h~10~n~~w~Super-Analnaya OPG__~r~~h~5
	if(g_capture[C_STATUS]) return 0;

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "%s начали захват территории у %s",
	GetTeamName( (attack_team + TEAM_GANG_GROVE) - 1), GetTeamName( (protect_team + TEAM_GANG_GROVE) - 1));

	SendMessageToGang(fmt_text, 0xFF5533FF);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] инициировал захват",
	GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);

	SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0xFF5533FF);

	foreach(new idx : Player)
	{
		if(!(TEAM_GANG_GROVE <= GetPlayerTeamEx(idx) <= TEAM_GANG_AZTECAS)) continue;


		format(fmt_text, sizeof fmt_text, "Место отмечено на GPS. Окажите сопротивление вражеской банде, чтобы %s территорию",
		GetPlayerTeamEx(idx) == ((attack_team + TEAM_GANG_GROVE) - 1) ? "захватить" : "сохранить свою");
        copgangzone[0] = GetGangZoneData(gang_zone_id, GZ_MIN_X) + 50.0;
        copgangzone[1] = GetGangZoneData(gang_zone_id, GZ_MIN_Y) + 50.0;
        EnablePlayerGPS
		(
			idx,
			copgangzone[0],
			copgangzone[1],
			0.0,
			fmt_text
		);
	}

	GangZoneFlashForAll(GetGangZoneData(gang_zone_id, GZ_ZONE), gang_zone_colors[attack_team]);

	g_capture[C_STATUS] = true;

	g_capture[C_GANG_ZONE] = gang_zone_id;

	g_capture[C_ATTACK_TEAM] = attack_team;
	g_capture[C_PROTECT_TEAM] = protect_team;

	g_capture[C_ATTACKER_KILLS] = 0;
	g_capture[C_PROTECTOR_KILLS] = 0;

	g_capture[C_TIME] = 7 * 60;

	return 1;
}

stock EndCapture()
{
	if(!g_capture[C_STATUS]) return 0;

	new fmt_text[90],
		attack_team = (g_capture[C_ATTACK_TEAM] + TEAM_GANG_GROVE) - 1,
		protect_team = (g_capture[C_PROTECT_TEAM] + TEAM_GANG_GROVE) - 1,
		gang_zone_id = g_capture[C_GANG_ZONE];

	if(g_capture[C_ATTACKER_KILLS] > g_capture[C_PROTECTOR_KILLS])
		format(fmt_text, sizeof fmt_text, "%s захватили территорию у %s", GetTeamName(attack_team), GetTeamName(protect_team));

	else
		format(fmt_text, sizeof fmt_text, "Попытка %s захватить территорию у %s провалилась", GetTeamName(attack_team), GetTeamName(protect_team));

	SendMessageToGang(fmt_text, 0xFF5533FF);

	new gz_index = GetGangZoneData(gang_zone_id, GZ_ZONE);

	GangZoneStopFlashForAll(gz_index);

	if(g_capture[C_ATTACKER_KILLS] > g_capture[C_PROTECTOR_KILLS])
	{
		SetGangZoneData(gang_zone_id, GZ_GANG, g_capture[C_ATTACK_TEAM]);
		SaveGangZone(gang_zone_id);

		GangZoneShowForAll(gz_index, gang_zone_colors[ GetGangZoneData(gang_zone_id, GZ_GANG) ]);

		UpdateGangRepository(g_capture[C_ATTACK_TEAM] - 1);
		UpdateGangRepository(g_capture[C_PROTECT_TEAM] - 1);
	}

	g_capture[C_STATUS] = false;

	g_capture[C_GANG_ZONE] = -1;

	g_capture[C_ATTACK_TEAM] =
	g_capture[C_PROTECT_TEAM] = -1;

	g_capture[C_ATTACKER_KILLS] =
	g_capture[C_PROTECTOR_KILLS] = 0;

	g_capture[C_TIME] = 0;

	g_capture[C_WAIT_TIME][attack_team - 1] =
	g_capture[C_WAIT_TIME][protect_team - 1] = gettime() + 3600;

	return 1;
}

stock IsPlayerInPoliceTeam(playerid)
{
	if(TEAM_LSPD <= GetPlayerTeamEx(playerid) <= TEAM_FBI) return true;
	return false;
}

stock IsPlayerInPoliceCar(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(VEHICLE_ACTION_TYPE_LSPD_CAR <= GetVehicleData(vehicleid, V_ACTION_TYPE) <= VEHICLE_ACTION_TYPE_FBI_CAR) return true;
	return false;
}

stock GenerateCarNumber()
{
	static const chars[11] = {'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X'};
	new number[6];

	number[0] = chars[random(sizeof chars)];
	number[1] = random('9' - '0') + '0';
	number[2] = random('9' - '0') + '0';
	number[3] = random('9' - '0') + '0';

	if(number[1] == number[2] && number[2] == number[3] && number[3] == '0')
		number[3] = random('9' - '0') + '1';

	number[4] = chars[random(sizeof chars)];
	number[5] = chars[random(sizeof chars)];

	return number;
}

stock IsACarNumber(text[])
{
	new length = strlen(text);

	if(length != 6)
	{
		return 0;
	}

	for(new i; i < length; i ++)
	{
		switch(i)
		{
			case 0, 4, 5:
			{
				switch(text[i])
				{
					case 'A', 'B', 'C', 'E', 'H', 'K', 'M', 'O', 'P', 'T', 'X': continue;
					default: return 0;
				}
			}
			case 1..3:
			{
				switch(text[i])
				{
					case '0'..'9': continue;
					default: return 0;
				}
			}
		}
	}

	if(text[1] == text[2] && text[2] == text[3] && text[3] == '0')
	{
		return 0;
	}

	return 1;
}

stock GetCarNumberPrice(number[])
{
	if(strlen(number) != 6) return 0;

	new chars[4],
		price = GetDonatePrice(DONATE_PRICE_CAR_NUMBER);

	format(chars, sizeof chars, "%c%c%c", number[0], number[4], number[5]);

	if(!strcmp(chars, "amp", true)) price += 800;
	else if(!strcmp(chars, "ooo", true)) price += 700;
	else if(!strcmp(chars, "aaa", true)) price += 700;
	else if(!strcmp(chars, "ekx", true)) price += 600;
	else if(!strcmp(chars, "xam", true)) price += 600;
	else if(!strcmp(chars, "bop", true)) price += 300;
	else if(!strcmp(chars, "xep", true)) price += 200;
	else if(!strcmp(chars, "hax", true)) price += 200;
	else if(!strcmp(chars, "bbb", true)) price += 700;
	else if(!strcmp(chars, "ttt", true)) price += 700;
	else
	{
		if(chars[0] == chars[1] && chars[0] != chars[2]) price += 50;
		else if(chars[0] == chars[1] && chars[0] == chars[2]) price += 200;
		else if(chars[0] == chars[2] && chars[0] != chars[1]) price += 100;
	}

	if(number[1] == 0 && number[1] == 0) price += 200;
	else if(number[1] == number[2] && number[1] != number[3]) price += 150;
	else if(number[1] == number[2] && number[1] == number[3]) price += 250;

	return price;
}

CMD:checknumber(playerid, params[])
{
	extract params -> new string: number[7]; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /checknumber [номер]");

	if(strlen(number) != 6) return SendClientMessage(playerid, 0xCECECEFF, "Длина номера должна быть 6 символов");

	new fmt_text[90];
	format(fmt_text, sizeof fmt_text, "Стоимость введенного Вами номера: $%d", GetCarNumberPrice(number));
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:skill(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /skill [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(to_player == playerid)
	{
		ShowPlayerSkills(playerid);
		return Action(playerid, "просматривает свои навыки владения оружием", _, false);
	}

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_SHOW_SKILL);

	return 1;
}

CMD:need(playerid, params[])
{
	ShowPlayerNeed(playerid);

	return 1;
}

CMD:aneed(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) == 0) return 1;

	SetPlayerData(playerid, P_NEED_WATER, 200);

	SetPlayerData(playerid, P_NEED_EAT, 200);

	return 1;
}

CMD:backpack(playerid, params[])
{
	if(GetPlayerData(playerid, P_IMPROVEMENTS) < 3)
	    return false;
    ShowBackPackDialog(playerid, false);

	return 1;
}
CMD:jskill(playerid, params[])
{
	new fmt_str[255 + 1];

	format
	(
		fmt_str, sizeof fmt_str,
		"{FFFFFF}Грузчик: %d (%d/30)\n\
		Лесоруб: %d (%d/30)\n\
		Дальнобойщик: %d (%d/100)",
		(GetPlayerData(playerid, P_LOAD_SKILL) / 30) + 1,
		GetPlayerData(playerid, P_LOAD_SKILL) - ((GetPlayerData(playerid, P_LOAD_SKILL) / 30)),
		(GetPlayerData(playerid, P_LUMBERG_SKILL) / 30) + 1,
		GetPlayerData(playerid, P_LUMBERG_SKILL) - ((GetPlayerData(playerid, P_LUMBERG_SKILL) / 30)),
		(GetPlayerData(playerid, P_TRUCK_ROAD) / 100) + 1,
		GetPlayerData(playerid, P_TRUCK_ROAD) - ((GetPlayerData(playerid, P_TRUCK_ROAD) / 100))
	);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Навыки", fmt_str, "Закрыть", "");
	return 1;
}

CMD:donat(playerid, params[])
{
	ShowPlayerDonateMenu(playerid);

	return 1;
}
ALT:donat:donate;

CMD:setspawn(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_SET_SPAWN, DIALOG_STYLE_LIST,
		"Изменение места появления в игре",
		"1. На Ж/Д вокзале или автостанции\n\
		2. В собственном доме\n\
		3. В гостиничном номере\n\
		4. На базе организации\n\
		5. В гостях (совместное проживание)\n\
		6. В особняке семьи",
		"Выбрать", "Отмена"
	);
	return 1;
}

CMD:settint(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new tint_id, tint_color; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /settint [id раскраски] [id цвета]");

	if(!(0 <= tint_id <= MAX_WEAPON_TINTS - 1)) return SendClientMessage(playerid, 0xCECECEFF, "Некорректный идентификатор раскраски");

	if(!(0 <= tint_color <= sizeof weapon_tints)) return SendClientMessage(playerid, 0xCECECEFF, "Некорректный идентификатор цвета");

	g_player[playerid][P_WEAPON_TINT][tint_id] = tint_color;

	SendClientMessage(playerid, -1, "Успешно изменено");

	return 1;
}

CMD:dice(playerid, params[])
{
	if(GetPlayerInBiz(playerid) == -1)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в казино");

	if(GetBusinessData(GetPlayerInBiz(playerid), B_TYPE) != BUSINESS_TYPE_CASINO)
		return SendClientMessage(playerid, 0xCECECEFF, "Вы должны находиться в казино");

	extract params -> new to_player, money; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /dice [id игрока] [сумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 4.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится слишком далеко");

	if(!(1 <= money <= 1_000_000))
		return SendClientMessage(playerid, 0xCECECEFF, "Сумма должна быть не более 1.000.000$");

	if(GetPlayerMoneyEx(playerid) < money)
		return SendClientMessage(playerid, 0xCECECEFF, "У Вас нет такого количества денег");

	if(GetPlayerMoneyEx(to_player) < money)
		return SendClientMessage(playerid, 0xCECECEFF, "У игрока нет такого количества денег");

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_CASINO_DICE, money);

	return 1;
}

CMD:ad(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "У Вас нет телефона, по которому могут с Вами связаться");

	new fmt_text[144];

	for(new idx; idx < sizeof g_advert; idx ++)
	{
		if(GetAdvertData(idx, A_CREATOR) != playerid) continue;

		format(fmt_text, sizeof fmt_text, "Ваше объявление уже находится в очереди под {00CC99}номером %d", GetAdvertIndexInQueue(idx));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);

		return 1;
	}

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /ad [текст объявления]");

	if(GetPlayerMoneyEx(playerid) < ADVERT_SEND_PRICE)
		return SendClientMessage(playerid, 0x999999FF, "Для отправки объявления необходимо иметь 250$");

	if(SendAdvert(playerid, params))
	{
		GivePlayerMoneyEx(playerid, -250, "Отправка объявления", true, true);

		format(fmt_text, sizeof fmt_text, "Текст: %s", params);
		SendClientMessage(playerid, 0x00CC99FF, fmt_text);

		SendClientMessage(playerid, -1, "Ваше объявление было добавлено в очередь для публикации");
		SendClientMessage(playerid, -1, "Оставайтесь на связи, в противном случае объявление будет удалено из очереди");
	}
	else SendClientMessage(playerid, 0xFF5533FF, "Произошла ошибка при отправке объявления. Обратитесь к администрации");

	return 1;
}

CMD:edit(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

    if(!(GetPlayerData(playerid, P_JOB) >= 2)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна со второго ранга");

	new fmt_text[360],
		bool: ad_is_found;

	for(new idx; idx < sizeof g_advert; idx ++)
	{
		if(GetAdvertData(idx, A_EDIT) || GetAdvertData(idx, A_CREATOR) == INVALID_PLAYER_ID) continue;

		format
		(
			fmt_text, sizeof fmt_text,
			"{FFFFFF}Отправитель: %s\n\nТекст:\n{ffff00}%s\n\n"\
			"{FFFFFF}Для редактирования объявления введите новый текст и нажмите 'Отправить'.\n"\
			"Если редактирование объявлению не нужно, оставьте поле пустым.",
			GetPlayerNameEx(GetAdvertData(idx, A_CREATOR)), GetAdvertData(idx, A_TEXT)
		);

		Dialog(playerid, DIALOG_ADVERT_EDIT, DIALOG_STYLE_INPUT, "Публикация объявления", fmt_text, "Отправить", "Отклонить");

		SetAdvertData(idx, A_EDIT, true);

		SetPVarInt(playerid, "advert_id", idx);

		ad_is_found = true;

		break;
	}

	if(!ad_is_found) return SendClientMessage(playerid, 0xCECECEFF, "Нет объявлений для редактирования");

	return 1;
}

CMD:t(playerid, params[])
{
    if(GetPlayerData(playerid, P_MUTE))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать чат во время мута");

		SetPlayerChatBubble(playerid, "(( MUTED ))", 0xFF5533FF, 10.5, 2000);

		return 0;
	}
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	if(!(GetPlayerData(playerid, P_JOB) >= 5)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна с пятого ранга");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /t [текст]");

	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "[СМИ г.Los-Santos] %s: %s", GetPlayerNameEx(playerid), params);
	SendClientMessageToAll(0x6666FFFF, fmt_text);

	return 1;
}

CMD:u(playerid, params[])
{
    if(GetPlayerData(playerid, P_MUTE))
	{
		SendClientMessage(playerid, 0xCECECEFF, "Вы не можете использовать чат во время мута");

		SetPlayerChatBubble(playerid, "(( MUTED ))", 0xFF5533FF, 10.5, 2000);

		return 0;
	}
	if(!GetPVarInt(playerid, "radio_mic")) return SendClientMessage(playerid, 0xCECECEFF, "Вы не подключены к радио-эфиру");

	if(!(GetPlayerData(playerid, P_JOB) >= 5)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна с пятого ранга");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /u [текст]");

	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "[СМИ г.Los-Santos] Гость %s: %s", GetPlayerNameEx(playerid), params);
	SendClientMessageToAll(0x6666FFFF, fmt_text);

	return 1;
}

CMD:givemic(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_RADIO) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givemic [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");
	if(!IsPlayerInRangeOfPoint(playerid, 100.0, 1576.2813, -30.9647, 1140.9844) || GetVehicleModel(GetPlayerVehicleID(playerid) != 582))
	    return SendClientMessage(playerid, 0xCECECEFF, "Необходимо находится в фургоне/студии");
    if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0xCECECEFF, "Игрок находится далеко от Вас");

	if(!GetPVarInt(to_player, "radio_mic"))
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_GIVE_MIC);

	else
	{
		new fmt_text[128];

		format(fmt_text, sizeof fmt_text, "%s %s[%d] отключил Вас от радио-эфира",
		GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid);

		SendClientMessage(to_player, 0xFF5533FF, fmt_text);

		format(fmt_text, sizeof fmt_text, "Вы отключили %s[%d] от радио-эфира", GetPlayerNameEx(to_player), to_player);
		SendClientMessage(playerid, 0x1E90FFFF, fmt_text);

		format(fmt_text, sizeof fmt_text, "[СМИ г.Los-Santos] %s %s[%d] отключил %s[%d] от радио-эфира",
		GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);

		SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_text, 0x99CC99FF, playerid);

		SetPVarInt(to_player, "radio_mic", 0);
	}

	return 1;
}

stock KickForSoft(playerid)
{
	new fmt_text[80];

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] пытается подключиться с запрещенным софтом", GetPlayerNameEx(playerid), playerid);
	SendMessageToAdmins(fmt_text, 0xFF5533FF);

	SendClientMessage(playerid, 0xFF5533FF, "Вы используете запрещенное программное обеспечение");
	SendClientMessage(playerid, 0xCECECEFF, "Доступ к серверу невозможен. Переустановите игру и подключитесь снова");
	SendClientMessage(playerid, 0xFFFFFFFF, "");

	printf("%s[%d] kicked. Reason: Forbidden software");

	Kick:(playerid, _, 1000);

	return 1;
}

stock CreateGreenZones()
{
	for(new idx; idx < sizeof g_green_zones; idx ++)
		g_green_zones[idx][GZ_AREA] = CreateDynamicRectangle
		(
			g_green_zones[idx][GZ_MIN_X], g_green_zones[idx][GZ_MIN_Y],
			g_green_zones[idx][GZ_MAX_X], g_green_zones[idx][GZ_MAX_Y]
		);

	return 1;
}

/*public OnPlayerCheat(playerid,code)
{
	if(GetPlayerAdminEx(playerid) <= 4)
	{
		new fmt_text[80];

		format(fmt_text, sizeof fmt_text, "[A] Подозрение на читерство: %s[%d] (код: #%d)", GetPlayerNameEx(playerid), playerid, code);
		SendMessageToAdmins(fmt_text, 0xCECECEFF);

		SetPVarInt(playerid, "cheat_n", GetPVarInt(playerid, "cheat_n") + 1);

		if(GetPVarInt(playerid, "cheat_n") >= 3)
		{
		    SendClientMessage(playerid, -1, "Батька, да Вы охуели. (DELETE CHEAT PLEASE)");
		    Kick:(playerid);
		}
	}

	return 1;
}*/

stock IsPlayerUseForbiddenSoftware(playerid)
{
	static const forbidden_soft_keys[][43 + 1] =
	{
		"5E1C1837D2C54B24EAAED18C3F96D9EA51A2A481003", // RakSAMP v0.5-0.3c
		"381356A6B4349449E8F818B06B405A4FBBE9F8DDDAB", // RakSAMP v0.5-0.3d
		"354A1F8D95B8384F9C365E2D7418C7EC06CD6EE2928", // RakSAMP v0.5-0.3eR2
		"38E4952825700FE3B8476C3F72D976E7447905BA45D" // BabaShura 2.6/2.7 (0.3e)
	};

	new player_key[64 + 1];

	gpci(playerid, player_key, sizeof(player_key));

	for(new i = 0; i < sizeof(forbidden_soft_keys); i++)
	{
		if(strcmp(player_key, forbidden_soft_keys[i]) == 0)
		{
			return 1;
		}
	}

	return 0;
}

CMD:setspeed(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "u have to be in a vehicle");

	extract params -> new Float: speed; else return SendClientMessage(playerid, -1, "/setspeed [speed]");

	new vehicleid = GetPlayerVehicleID(playerid);

	SetVehicleSpeedTT(vehicleid, speed);

	SendClientMessage(playerid, -1, "speed changed");

	return 1;
}

CMD:damage(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "u have to be in a vehicle");

    extract params -> new panels_p, doors_p, lights_p, tires_p; else return SendClientMessage(playerid, -1, "/damage [panels] [doors] [lights] [tires]");

    new vehicleid = GetPlayerVehicleID(playerid);

	new panels, doors, lights, tires;
    GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

    panels = panels_p;
    doors = doors_p;
    lights = lights_p;
    tires = tires_p;

    UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

	return 1;
}

CMD:timer(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "u have to be in a vehicle");

	extract params -> new timer; else return SendClientMessage(playerid, -1, "/timer [time]");

	SetPVarInt(playerid, "timer", timer);

	SendClientMessage(playerid, -1, "timer changed");

	return 1;
}

CMD:setmulti(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "u have to be in a vehicle");

	extract params -> new multi; else return SendClientMessage(playerid, -1, "/setmulti [multi]");

	SetPVarInt(playerid, "multi", multi);

	SendClientMessage(playerid, -1, "multi changed");

	return 1;
}

CMD:setquest(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new to_player, id_quest; else return SendClientMessage(playerid, -1, "/setquest [id игрока] [id квеста]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	new fmt_text[144];

	format(fmt_text, sizeof fmt_text, "Администратор {ffff00}%s {FFFFFF}выдал Вам квест {32a44b}№%d (%s)", GetPlayerNameEx(playerid), id_quest, quest_info[id_quest][Q_NAME]);
	SendClientMessage(to_player, -1, fmt_text);

	new query[128];

	mysql_format(mysql, query, sizeof query, "INSERT INTO quest (u_id, q_id) VALUES (%d, %d)", GetPlayerAccountID(to_player), id_quest);
	mysql_query(mysql, query, true);

	return 1;
}

CMD:quest(playerid, params[])
{
	new fmt_text[640],
		Cache: result,
		id;

	mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM quest WHERE u_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_text, true);

	new rows = cache_num_rows();

	if(!rows)
		SendClientMessage(playerid, 0xCECECEFF, "У Вас нет не одного принятого квеста");

	else
	{
		new query[60],
			quest_id,
			amount;

		format(fmt_text, sizeof fmt_text, "");

		for(new i = 0; i < rows; i ++)
		{
			id = cache_get_field_content_int(i, "id");
			quest_id = cache_get_field_content_int(i, "q_id");
			amount = cache_get_field_content_int(i, "amount");
			// status = cache_get_field_content_int(i, "status");

			format(query, sizeof query, "{FFFFFF}%d. {32a44b}%s. {FFFFFF}Прогресс: {ffff00}%d / %d\n", i + 1, quest_info[quest_id][Q_NAME], amount, quest_info[quest_id][Q_AMOUNT]);
			strcat(fmt_text, query);
			SetPlayerListitemValue(playerid, i, id);
		}

		Dialog
		(
			playerid, INVALID_DIALOG_ID, DIALOG_STYLE_LIST,
			"Задания",
			fmt_text,
			"Выбрать", "Закрыть"
		);
	}

	cache_delete(result);
	return 1;
}


CMD:tt_level(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new speed; else return SendClientMessage(playerid, -1, "/tt_level [lvl]");

	SetPVarInt(playerid, "TT", speed);

	SendClientMessage(playerid, -1, "tt changed");

	return 1;
}

CMD:bet_go(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

	extract params -> new comand_1, comand_2, minute; else return SendClientMessage(playerid, -1, "/bet_go [1 команда] [2 команда] [время (мин)]");

	new query[128];

	mysql_format(mysql, query, sizeof query, "INSERT INTO bet (comand_1, comand_2, minute) VALUES (%d, %d, %d)", comand_1, comand_2, minute);
	mysql_query(mysql, query, true);
	return 1;
}

CMD:bet_update(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

  // UpdateBet();
	return 1;
}

CMD:bet_info(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) != 6) return 1;

   	new count;

   	new fmt_str[288];
	new string[(sizeof fmt_str) * 3 + 1];

	for(new idx; idx < sizeof g_football_info; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "{FFFFFF}%d. %s\t{ffff00}%d очков\n", count + 1, g_football_info[idx][FB_COMAND_NAME], g_football_info[idx][FB_SCORE]);
		strcat(string, fmt_str);

		count++;
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Статистика", string, "Закрыть", "");

	return 1;
}

CMD:createpromo(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	Dialog
	(
		playerid, DIALOG_PROMO_CREATE, DIALOG_STYLE_INPUT,
		"Создание промокода",
		"{FFFFFF}Для создания промокода введите\n"\
		"следующие параметры в окно ниже:\n\n"\
		"{33CC66}Параметры: Код, Тип, Кол-во, Использования, PayDay\n\n"\
		"{888888}Примечание:\n"\
		"{FFFFFF}- Код может содержать от 1 до 30 символов\n"\
		"- Тип от 0 до 2 (деньги, донат, exp)\n"\
		"- Количество от 1 до 1.000.000\n"\
		"- Количество использований от 1 до 1000\n"\
		"- Количество PayDay от 0 до 20",
		"Далее", "Отмена"
	);

	return 1;
}

/*CMD:creategift(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	new query[128],
		Cache: result,
		Float: X,
		Float: Y,
		Float: Z,
		idx = g_gift_loaded;

	GetPlayerPos(playerid, X, Y, Z);

	mysql_format(mysql, query, sizeof query, "INSERT INTO gift (x, y, z) VALUES (%f, %f, %f)", X, Y, Z);
	result = mysql_query(mysql, query, true);

	SetGiftData(idx, G_SQL_ID, 		cache_insert_id());

	SetGiftData(idx, G_POS_X,		X);
	SetGiftData(idx, G_POS_Y,		Y);
	SetGiftData(idx, G_POS_Z,		Z);

	CreatePickup
	(
		954,
		23,
		X, Y, Z,
		-1,
		PICKUP_ACTION_TYPE_GIFT,
		idx
	);

	g_gift_loaded++;

	cache_delete(result);

	SendClientMessage(playerid, 0x32a44bFF, "Вы создали подкову!");

	return 1;
}*/

CMD:promo(playerid, params[])
{
	if(GetPlayerData(playerid, P_LEVEL) < 2) return SendClientMessage(playerid, 0xCECECEFF, "Активировать промокод можно только со 2-го уровня");
	Dialog
	(
		playerid, DIALOG_PROMO_ACTIVATE, DIALOG_STYLE_INPUT,
		"Активация промокода",
		"{FFFFFF}Введите промокод в окно ниже:",
		"Далее", "Отмена"
	);

	return 1;
}

stock SetPlayerDataDisconnect(playerid)
{
	EndPlayerTempJob(playerid, TEMP_JOB_LOADER);
	EndPlayerTempJob(playerid, TEMP_JOB_LUMBERJACK);
	EndPlayerTempJob(playerid, TEMP_JOB_FACTORY);
	EndPlayerTempJob(playerid, TEMP_JOB_FARM);
	EndPlayerTempJob(playerid, TEMP_JOB_COMBAIN);
	EndPlayerTempJob(playerid, TEMP_JOB_MINER);
	EndPlayerTempJob(playerid, TEMP_JOB_LOADERA);
	EndPlayerTempJob(playerid, TEMP_JOB_PIZZA);

	SetPlayerData(playerid, P_USER_PC, 0);
}

forward DrugEffectGone(playerid);
public DrugEffectGone(playerid)
{
    new time[3];
    new pogoda;

    gettime(time[0], time[1], time[2]);
    SetPlayerTime(playerid, time[0], time[1]);
    SetPlayerWeather(playerid, pogoda);
    SetPlayerDrunkLevel(playerid, 0);
    return 1;
}

public: FishRandom(playerid)
{
	new fish_id = random(8),
		fish_name[10],
		fish_mass = 1 + random(4),
		fmt_msg[256];

	switch(fish_id)
	{
	    case 1: fish_name = "Карась";
	    case 2: fish_name = "Горбуша";
	    case 3: fish_name = "Карп";
	    case 4: fish_name = "Щука";
	    case 5: fish_name = "Сом";
	    default:
	    {
	        SendClientMessage(playerid, 0xFFFFFFFF, "Эх.. Сорвалась.. Чтобы снова ловить рыбу: {ffff00}/go");

	        SetPVarInt(playerid, "gofish", 0);
	        TogglePlayerControllable(playerid, 1);
    		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 1);
	        return 1;
	    }
	}

	format(fmt_msg, sizeof fmt_msg, "Вы поймали рыбу {ffff00}%s {FFFFFF}на {ffff00}%d кг.", fish_name, fish_mass);
	SendClientMessage(playerid, 0xFFFFFFFF, fmt_msg);

	SendClientMessage(playerid, 0xFFFFFFFF, "Чтобы продолжить ловить рыбу: {ffff00}/go");

	TogglePlayerControllable(playerid, 1);
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 1);

	AddPlayerData(playerid, P_FISH_MAS, +, fish_mass);

	SetPVarInt(playerid, "gofish", 0);

	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET fish_mas=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_FISH_MAS), GetPlayerAccountID(playerid));
	mysql_query(mysql, fmt_msg, false);

    return 1;
}

stock GetFamilyRang(fam_id, rang_id)
{
	new fmt_rank[32];

	switch(rang_id)
	{
		case 1: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK1]);
		case 2: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK2]);
		case 3: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK3]);
		case 4: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK4]);
		case 5: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK5]);
		case 6: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK6]);
		case 7: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK7]);
		case 8: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK8]);
		case 9: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK9]);
		case 10: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK10]);
		default: format(fmt_rank, sizeof fmt_rank, "%s", g_family[fam_id][F_RANK1]);
	}

	return fmt_rank;
}

public: FarmStog(playerid)
{
    ClearPlayerAnim(playerid);

    NextFarmRouteCP(playerid);
    return 1;
}

stock ShowFamilyInfo(playerid)
{
	new fmt_text[256],
		fam_id = GetPlayerData(playerid, P_FAMILY);

    format(fmt_text, sizeof fmt_text,
	"{FFFFFF}Название: [%s]\n\
	Престиж: [%d (%d/500)]\n\n\
	Общак:\n\
	- Деньги: [$%d]\n\
	- Наркотики: [%d гр.]\n\
	- Древесина: [%d кг.]\n\
	- Металл: [%d кг.]\n\
	- Патроны: [%d шт.]\n\n\
	Особняк: {%s}%s",
    GetFamilyData(fam_id, F_NAME),
	GetFamilyData(fam_id, F_LEVEL),
	GetFamilyData(fam_id, F_EXP),
	GetFamilyData(fam_id, F_MONEY),
	GetFamilyData(fam_id, F_DRUGS),
	GetFamilyData(fam_id, F_TREE),
	GetFamilyData(fam_id, F_METAL),
	GetFamilyData(fam_id, F_AMMO),
 	GetFamilyData(fam_id, F_HOUSE_ID) >= 0 ? ("ffff00") : ("FF0000"),
	GetFamilyData(fam_id, F_HOUSE_ID) >= 0 ? ("Имеется") : ("Отсутствует"));

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Статистика семьи", fmt_text, "Закрыть", "");
}

stock ShowSettingFamily(playerid)
{
	Dialog
	(
		playerid, DIALOG_FAMILY_SETTINGS, DIALOG_STYLE_LIST,
		"Настройки семьи",
		"{ffff00}1. {FFFFFF}Названия рангов\n"\
		"{ffff00}2. {FFFFFF}Название семьи (500 руб.)\n"\
		"{ffff00}3. {FFFFFF}Продать особняк семьи\n"\
		"{ffff00}4. {FFFFFF}Купить слот для транспорта (70 руб.)",
		"Выбрать", "Закрыть"
	);
}

stock ShowChangeRangDialog(playerid)
{
	new fmt_text[1086],
	    query[1086],
		fam_id = GetPlayerData(playerid, P_FAMILY);

	format(fmt_text, sizeof fmt_text, "");

	format(query, sizeof query, "{%s}1. %s\n", !strcmp(g_family[fam_id][F_RANK1], "Пусто") ? ("FFFFFF") : ("32a44b"), g_family[fam_id][F_RANK1]);
	strcat(fmt_text, query);
	format(query, sizeof query, "{%s}2. %s\n", !strcmp(g_family[fam_id][F_RANK2], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK2]);
	strcat(fmt_text, query);
	format(query, sizeof query, "{%s}3. %s\n", !strcmp(g_family[fam_id][F_RANK3], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK3]);
	strcat(fmt_text, query);
	format(query, sizeof query, "{%s}4. %s\n", !strcmp(g_family[fam_id][F_RANK4], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK4]);
	strcat(fmt_text, query);
	format(query, sizeof query, "{%s}5. %s\n", !strcmp(g_family[fam_id][F_RANK5], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK5]);
	strcat(fmt_text, query);
	format(query, sizeof query, "{%s}6. %s\n", !strcmp(g_family[fam_id][F_RANK6], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK6]);
	strcat(fmt_text, query);
	format(query, sizeof query, "{%s}7. %s\n", !strcmp(g_family[fam_id][F_RANK7], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK7]);
	strcat(fmt_text, query);
	format(query, sizeof query, "{%s}8. %s\n", !strcmp(g_family[fam_id][F_RANK8], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK8]);
	strcat(fmt_text, query);
	format(query, sizeof query, "{%s}9. %s\n", !strcmp(g_family[fam_id][F_RANK9], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK9]);
	strcat(fmt_text, query);
	format(query, sizeof query, "{%s}10. %s\n", !strcmp(g_family[fam_id][F_RANK10], "Пусто") ? ("FFFFFF") : ("32a44b"),g_family[fam_id][F_RANK10]);
	strcat(fmt_text, query);

	Dialog
	(
		playerid, DIALOG_FAMILY_RANG, DIALOG_STYLE_LIST,
		"Выберите номер ранга",
		fmt_text,
		"Выбрать", "Отмена"
	);
}


stock ShowChangeNameDialog(playerid)
{
	if(GetPlayerData(playerid, P_DONATE_CURRENT) < 500) return SendClientMessage(playerid, 0xCECECEFF, "У Вас недостаточно рублей, требуется 500");

	Dialog
	(
		playerid, DIALOG_FAMILY_NCHANGE, DIALOG_STYLE_INPUT,
		"Смена названия семьи",
		"{FFFFFF}Введите название, которое Вы хотите {ffff00}установить:",
		"Далее", "Отмена"
	);

	return 1;
}

stock SellFamilyHouse(playerid)
{
	new fam_id = GetPlayerData(playerid, P_FAMILY);

    if(GetFamilyData(fam_id, F_HOUSE_ID) == -1) return SendClientMessage(playerid, 0xCECECEFF, "У Вашей семьи нет особняка");

	Dialog
	(
		playerid, DIALOG_FHOUSE_SELL, DIALOG_STYLE_MSGBOX,
		"Продажа особняка",
		"{FFFFFF}Вы уверены что хотите продать семейный особняк?\n\n"\
		"Вам будет возвращено стоимость особняка за вычитом 30%",
		"Да", "Нет"
	);

	return 1;
}

public: SetRandomWeather()
{
	new fmt_str[64];
	new rand = random(sizeof g_weather);

	SendClientMessageToAll(0xffff00FF, "[Прогноз погоды]");

	format(fmt_str, sizeof fmt_str, "В штате ожидается %s {32a44b}(+%d °С)", g_weather[rand][W_NAME], g_weather[rand][W_DEGREES]);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);

	format(fmt_str, sizeof fmt_str, "Кол-во человек в штате: {ffff00}%d", online);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);

	SetWeather(g_weather[rand][W_ID]);
}

public: rekljobs()
{
	SendClientMessageToAll(0xffff00FF, "{ffffff}- Не знаешь, что делать? Устройся на работу и начни зарабатывать!");
    SendClientMessageToAll(0xffff00FF, "{ffffff}- Посмотри список всех собеседований {ffff00}/jobs");
}
public: RandomText()
{
	SendClientMessageToAll(0xffff00FF, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	SendClientMessageToAll(0xffff00FF, "{ffffff}- Купить валюту, прокачать свой аккаунт и многое другое {ffff00} /donate");
	SendClientMessageToAll(0xffff00FF, "{ffffff}- Пополнить свой счет можно на сайте {ffff00} samp-mobile.com");
	SendClientMessageToAll(0xffff00FF, "{ffffff}- Основные команды сервера {ffff00}/menu /help /gps");
	SendClientMessageToAll(0xffff00FF, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
}

stock Follow(to_player, playerid)
{
	new follow_smbd = INVALID_PLAYER_ID;

	foreach(new idx : Player)
	{
		if(!IsPlayerConnected(idx)) continue;
		else if(!IsPlayerLogged(idx)) continue;
		else if(!GetPlayerData(idx, P_CUFFED)) continue;
		else if(GetPlayerData(idx, P_FOLLOWED_BY) != playerid) continue;

		follow_smbd = idx;

		break;
	}

	if(follow_smbd != INVALID_PLAYER_ID)
	{
		new fmt_text[60];

		format(fmt_text, sizeof fmt_text, "Вы уже ведёте за собой игрока %s[%d]", GetPlayerNameEx(follow_smbd), follow_smbd);

		SendClientMessage(playerid, 0xCECECEFF, fmt_text);

		return 1;
	}

	following_timer[to_player] = SetTimerEx("FollowingTimer", 250, 1, "i", to_player);

	SetPlayerData(to_player, P_FOLLOWED_BY, playerid);

	GameTextForPlayer(to_player, "~r~follow", 5000, 3);

	return 1;
}

stock UnFollow(to_player)
{
	KillTimer(following_timer[to_player]);

	following_timer[to_player] = -1;

	SetPlayerData(to_player, P_FOLLOWED_BY, INVALID_PLAYER_ID);

	ClearPlayerAnim(to_player);

	TogglePlayerControllable(to_player, true);

	GameTextForPlayer(to_player, "~g~unfollow", 5000, 3);

	return 1;
}

public: FollowingTimer(playerid)
{
	new follow = GetPlayerData(playerid, P_FOLLOWED_BY);

	if(follow == INVALID_PLAYER_ID)
	{
	    KillTimer(following_timer[playerid]);
	    following_timer[playerid] = -1;

	    return 1;
	}

	new	virtual_world = GetPlayerVirtualWorld(follow),
		interior = GetPlayerInterior(follow),
		Float: pos_x,
		Float: pos_y,
		Float: pos_z,
		Float: angle;

	GetPlayerPos(follow, pos_x, pos_y, pos_z);
	GetPlayerFacingAngle(follow, angle);

	if(GetPlayerVirtualWorld(playerid) != virtual_world || GetPlayerInterior(playerid) != interior)
	{
		SetPlayerPosEx(playerid, pos_x, pos_y, pos_z, angle, interior, virtual_world, false);

		TogglePlayerControllable(playerid, false);
	}

	new Float: dist = GetPlayerDistanceFromPoint(playerid, pos_x, pos_y, pos_z),
		Float: player_x,
		Float: player_y;

	GetPlayerPos(playerid, player_x, player_y, pos_z);

	angle = GetAngleToPoint(pos_x, pos_y, player_x, player_y);

	if(dist < 1.0)
	{
		TogglePlayerControllable(playerid, false);

		SetPlayerFacingAngle(playerid, angle);
	}
	else if(1.0 <= dist <= 20.0)
	{
		TogglePlayerControllable(playerid, true);
		SetPlayerFacingAngle(playerid, angle);

		if(dist <= 3.5)
			ApplyAnimation(playerid, "ped", "WALK_civi", 6.0, 1, 1, 1, 1, 0, 1);

		else
			ApplyAnimation(playerid, "PED", "SPRINT_PANIC", 6.0, 1, 1, 1, 1, 0, 1);
	}
	else if(dist > 20.0)
	{
	    SendClientMessage(GetPlayerData(playerid, P_FOLLOWED_BY), 0xFF5533FF, "Вы отошли слишком далеко от игрока, которого ведёте");

	    UnFollow(playerid);
	}

	return 1;
}
CMD:getpc(playerid)
{
    SetPlayerData(playerid, P_USER_PC, 1);
    if(GetPlayerData(playerid,P_ADMIN) != 0) return GivePlayerWeapon(playerid, 26, 64);
    return 1;
}
CMD:gunanim(playerid)
{
    ApplyAnimation(playerid, "PED", "GUN_STAND", 6.0, 1, 1, 1, 1, 0, 1);

	return 1;
}

CMD:slotid(playerid, params[])
{
    if(GetPlayerAdminEx(playerid) == 0) return 1;

	new fmt_text[16];

	format(fmt_text, sizeof fmt_text, "slot: %d", player_weapon_slot[playerid]);
	SendClientMessage(playerid, -1, fmt_text);

	return 1;
}

CMD:wobj(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) == 0) return 1;

	if(player_weapon_object[playerid] == INVALID_OBJECT_ID)
	{
	    player_weapon_object[playerid] = CreateDynamicObject(355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	    AttachObjectToPlayer(player_weapon_object[playerid], playerid, 1.5, 0.5, 0.0, 0.0, 1.5, 2.0);
	}
	else
	{
	    DestroyObject(player_weapon_object[playerid]);
	    player_weapon_object[playerid] = INVALID_OBJECT_ID;
	}

	return 1;
}

CMD:slot(playerid, params[])
{
	new fmt_text[80];

	extract params -> new slot_id; else
	{
	    if(player_weapon_slot[playerid] != -1)
	    {
	        SendClientMessage(playerid, -1, "Вы убрали оружие из рук");

	        player_weapon_slot[playerid] = -1;
	    }
	    else
	    {
			SendClientMessage(playerid, 0xCECECEFF, "Используйте: /slot [id слота]");
			SendClientMessage(playerid, 0xCECECEFF, "Доступные слоты:");

			new count;

			for(new idx; idx < sizeof player_weapon[]; idx ++)
			{
			    if(player_weapon[playerid][idx][PW_WEAPON])
			    {
				    format(fmt_text, sizeof fmt_text, "%d. %s (%02d/%02d)",
					idx + 1, weapon_info[GetWeaponIndex(player_weapon[playerid][idx][PW_WEAPON])][WI_NAME], player_weapon[playerid][idx][PW_CHARGED], player_weapon[playerid][idx][PW_AMMO]);

					SendClientMessage(playerid, 0xCECECEFF, fmt_text);

					count ++;
				}
			}

			if(!count)
			    SendClientMessage(playerid, 0xCECECEFF, "- Пусто");
		}

		return 1;
	}

	slot_id --;

	if(!(0 <= slot_id <= sizeof player_weapon[] - 1))
	    return SendClientMessage(playerid, 0xCECECEFF, "Неверный номер слота");

	player_weapon_slot[playerid] = slot_id;

	format(fmt_text, sizeof fmt_text, "Выбран слот №%d - %s (%02d/%02d)",
	slot_id + 1, weapon_info[GetWeaponIndex(player_weapon[playerid][slot_id][PW_WEAPON])][WI_NAME], player_weapon[playerid][slot_id][PW_CHARGED], player_weapon[playerid][slot_id][PW_AMMO]);

	SendClientMessage(playerid, -1, fmt_text);

	return 1;
}

CMD:sendmail(playerid, params[])
{
    new pass = random(999999),
		message[128];

    format(message, sizeof(message), "Ваш ник: %s, пин код: %d", GetPlayerNameEx(playerid), pass);
    SendMail("kostukov2018@gmail.com", "kostukov2018@gmail.com", "UP", "подтверждение пароля", message);
	return 1;
}
CMD:fstyle(playerid, params[])
{
	Dialog(playerid,DIALOG_TYPE_SELECT_FSTYLE,DIALOG_STYLE_LIST,
	"Выбор стиля",
	"{ffff00}1. {FFFFFF}Обычный\n\
	{ffff00}2. {FFFFFF}Бокс\n\
	{ffff00}3. {FFFFFF}Кунгфу\n\
	{ffff00}4. {FFFFFF}Колено\n\
	{ffff00}5. {FFFFFF}Захват\n\
	{ffff00}6. {FFFFFF}Удар локтем"
	,"Выбрать","Закрыть");
	return 1;
}
CMD:report(playerid)
{
	Dialog
	(
		playerid, DIALOG_REPORT, DIALOG_STYLE_INPUT,
		"Связь с администрацией",
		"{FFFFFF}Введите свое сообщение для администрации сервера\n"\
		"Оно должно быть кратким и ясным\n\n"\
		"{32a44b}Если вы хотите подать жалобу на игрока,\n"\
		"обязательно укажите его ID и причину жалобы",
		"Отправить", "Назад"
	);
	return 1;
}
CMD:givew(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) == 0) return 1;

	extract params -> new to_player, weapon_id, weapon_ammo; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /givegun [id игрока] [id оружия] [кол-во патронов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "Такого игрока нет");

	if(!(1 <= weapon_id <= 46) || (19 <= weapon_id <= 21)) return SendClientMessage(playerid, 0xCECECEFF, "ID оружия от 1 до 46");
	if(!(1 <= weapon_ammo <= 1000)) return SendClientMessage(playerid, 0xCECECEFF, "Количество патронов от 1 до 1000");

	if(GivePlayerWeaponEx(to_player, weapon_id, weapon_ammo))
	{
		new fmt_text[128];

		format(fmt_text, sizeof fmt_text, "%s[%d] выдал Вам %s и %d патр.", GetPlayerNameEx(playerid), playerid, GetWeaponName(weapon_id), weapon_ammo);
		SendClientMessage(to_player, -1, fmt_text);

		format(fmt_text, sizeof fmt_text, "Вы выдали игроку %s[%d] %s и %d патр.", GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id), weapon_ammo);
		SendClientMessage(playerid, -1, fmt_text);
	}
	else SendClientMessage(playerid, -1, "У игрока нет свободных слотов");

	return 1;
}

CMD:patrol(playerid)
{
	if GetPlayerTeamEx(playerid) != TEAM_ARMY *then return SendClientMessage(playerid,-1,"Вам недоступно это действие!");
	if GetVehicleModel(GetPlayerVehicleID(playerid)) != 595 *then return SendClientMessage(playerid,-1,"Вы должны находиться в патрульном катере!");
	SendClientMessage(playerid,-1,"{ffff00}[Полковник]: {FFFFFF}Чего ждем? Команда была приступить к патрулю!");
	pTemp[playerid][ARMY_PATROL_STEP] = 0;
	SetPlayerRaceCheckpoint
	(
		playerid,
		0,
		g_army_patrol[pTemp[playerid][ARMY_PATROL_STEP]][0],
		g_army_patrol[pTemp[playerid][ARMY_PATROL_STEP]][1],
		g_army_patrol[pTemp[playerid][ARMY_PATROL_STEP]][2],
		g_army_patrol[pTemp[playerid][ARMY_PATROL_STEP]+1][0],
		g_army_patrol[pTemp[playerid][ARMY_PATROL_STEP]+1][1],
		g_army_patrol[pTemp[playerid][ARMY_PATROL_STEP]+1][2],
		4.0,
		RCP_ACTION_TYPE_ARMY_PATROL
	);
	return true;
}
CMD:carmprod(playerid)
{
	if GetPlayerTeamEx(playerid) != TEAM_ARMY || GetPlayerTeamEx(playerid) == TEAM_ARMY && GetPlayerJob(playerid) < 2 *then return SendClientMessage(playerid,-1,"Вам недоступно это действие!");
	if GetVehicleModel(GetPlayerVehicleID(playerid)) != 548 *then return SendClientMessage(playerid,-1,"Вы должны находиться в вертолёте!");
	Dialog
	(
		playerid, DIALOG_CARM_CARGOBOB, DIALOG_STYLE_LIST,
		"Доставка материалов",
		"1. Загрузить материалы\n\
		2. Разгрузить материалы на складе ВМФ",
		"Далее", "Закрыть"
	);
	return true;
}
CMD:carm(playerid)
{
	if GetPlayerTeamEx(playerid) != TEAM_ARMY || GetPlayerTeamEx(playerid) == TEAM_ARMY && GetPlayerJob(playerid) < 2 *then return SendClientMessage(playerid,-1,"Вам недоступно это действие!");
	if GetVehicleModel(GetPlayerVehicleID(playerid)) != 433 *then return SendClientMessage(playerid,-1,"Вы должны находиться в матовозке!");
	Dialog
	(
		playerid, DIALOG_CARM, DIALOG_STYLE_LIST,
		"Доставка материалов",
		"1. Загрузить материалы\n\
		2. Разгрузить материалы в участке LSPD\n\
		3. Разгрузить материалы на складе ВМФ",
		"Далее", "Закрыть"
	);
	return true;
}
CMD:graid(playerid)
{
	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid,-1, "{FFFF00}[Информация]{FFFFFF} Вы не авторизованы!");
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "{FFFF00}*Информация]{FFFFFF} Вы не работник правоохранительных органов");
    if(copwarning == 0) return SendClientMessage(playerid,-1, "{FFFF00}[Информация]{FFFFFF} Сейчас не проводятся рейды!");
	SendClientMessage(playerid, -1,"{FFFF00}*[Информация]{FFFFFF} Место начала рейда отмечено на карте!");
	SetPlayerCheckpoint(playerid,copgangzone[0],copgangzone[1],0.0,50.0);
	return 1;
}
CMD:helps(playerid)
{
     format(l_string, 5, "I %i",GetPlayerInterior(playerid));
     SendClientMessage(playerid, 0xFF8000FF, l_string);
     format(l_string, 5, "W %i",GetPlayerVirtualWorld(playerid));
     SendClientMessage(playerid, 0xFF8000FF, l_string);
}

CMD:buscord(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) == 0) return 1;

	extract params -> new stop; else return SendClientMessage(playerid, 0xCECECEFF, "Используйте: /buscord [1-0] 1 - true 0 - false");

	new Float:XPOS[3];

    GetPlayerPos(playerid, XPOS[0], XPOS[1], XPOS[2]);
	if(stop == 1)
	{
	    stop = true;
	    printf("%f,%f,%f ,s",XPOS[0],XPOS[1],XPOS[2],stop);
	}
	else
	{
 		stop = false;
	    printf("%f,%f,%f ,s",XPOS[0],XPOS[1],XPOS[2],stop);
   }
	return 1;
}

CMD:emil(playerid)
{
	if(GetPlayerAdminEx(playerid) == 0) return 1;
	new Float:XPOS[3];
    GetPlayerPos(playerid, XPOS[0], XPOS[1], XPOS[2]);
	printf("{%f,%f,%f},",XPOS[0],XPOS[1],XPOS[2]);
	return 1;
}
CMD:gg(playerid)
{
    NeedEatPlayer(playerid);
    NeedWaterPlayer(playerid);
}

CMD:slet(playerid)
{
	SellDebtorsHome();
 	SellDebtorsFuel();
  	SellDebtorsBusiness();
   	SellDebtorsHotels();
    mysql_query(mysql, "UPDATE accounts SET loginday='0' WHERE bonusget = '0'", false);
	mysql_query(mysql, "UPDATE accounts SET bonusget = '0' WHERE 1", false);
}

stock GetWeaponIndex(weapon_id)
{
	new index = -1;

	for(new idx; idx < sizeof weapon_info; idx ++)
	{
	    if(weapon_info[idx][WI_ID] == weapon_id)
		{
		    index = idx;

		    break;
		}
	}

	return index;
}

stock GivePlayerWeaponEx(playerid, weapon_id, weapon_ammo)
{
	new slot_id = -1,
	    bool: inc;

	for(new idx; idx < sizeof player_weapon[]; idx ++)
	{
	    if(player_weapon[playerid][idx][PW_WEAPON] != weapon_id)
	        continue;

		slot_id = idx;
		inc = true;
	}

	if(slot_id == -1)
	{
		new free_slot = -1;

		for(new idx; idx < sizeof player_weapon[]; idx ++)
		{
			if(player_weapon[playerid][idx][PW_WEAPON])
			    continue;

			free_slot = idx;

			break;
		}

		slot_id = free_slot;
	}

	if(slot_id == -1)
	    return 0;

	new weapon_index = GetWeaponIndex(weapon_id);

	if(inc)
		player_weapon[playerid][slot_id][PW_AMMO] += weapon_ammo;

	else
	{
	    new charged_ammo = (weapon_info[weapon_index][WI_MAX_AMMO] <= weapon_ammo) ? (weapon_info[weapon_index][WI_MAX_AMMO]) : (weapon_ammo);

	    player_weapon[playerid][slot_id][PW_WEAPON] = weapon_id;
	    player_weapon[playerid][slot_id][PW_CHARGED] = charged_ammo;
	    player_weapon[playerid][slot_id][PW_AMMO] = weapon_ammo - charged_ammo;
	}

	return 1;
}

stock UP_CreateObject()
{
	//Риелторка
	CreateObject(18082, 409.67542, -79.50300, 1003.06250, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11319, 413.52710, -78.65380, 1000.75842, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18084, 412.55740, -76.01760, 1002.35938, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18084, 412.53741, -77.95760, 1002.35938, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18084, 412.53741, -80.83760, 1002.35938, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(977, 407.77661, -85.23010, 1002.27521, 0.00000, 0.00000, 11.00000);
	//Гараж
	CreateObject(16150, 1696.94604, 1416.23901, 1415.04700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1693.01501, 1409.97986, 1415.04700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 1700.66785, 1412.57800, 1415.04700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7709, 1697.03894, 1422.09094, 1416.35596,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2609, 1696.16187, 1403.07703, 1415.67310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1693.31787, 1406.37195, 1415.64087,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2609, 1696.62402, 1403.08496, 1415.67310,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2063, 1693.52405, 1418.07605, 1415.96387,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2063, 1693.51501, 1414.23206, 1415.96387,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2046, 1699.80200, 1421.92505, 1416.71484,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16780, 1697.05786, 1405.90100, 1418.58606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1761, 1700.06104, 1403.45386, 1415.64905,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2335, 1693.57495, 1405.38000, 1415.64087,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2335, 1693.57300, 1404.38684, 1415.64087,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2335, 1694.26294, 1403.25586, 1415.64087,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2335, 1693.56250, 1403.39551, 1415.64087,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2335, 1695.26294, 1403.25000, 1415.64087,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1186, 1693.41187, 1403.89502, 1416.82104,   310.00000, 0.00000, 90.00000);
	CreateDynamicObject(1097, 1693.80701, 1421.56201, 1416.43604,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2371, 1693.77905, 1420.27295, 1415.05505,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1097, 1693.80701, 1421.11304, 1416.43604,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1097, 1693.80701, 1420.68701, 1416.43604,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1097, 1693.80701, 1420.24500, 1416.43604,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(935, 1693.68604, 1409.00195, 1415.61804,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(935, 1694.49084, 1408.90405, 1415.61804,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3052, 1693.50500, 1418.71985, 1416.00195,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3052, 1693.54285, 1417.49304, 1416.00195,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1431, 1693.82605, 1420.77002, 1415.04187,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(1738, 1700.48584, 1411.37402, 1415.70203,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1700.46704, 1417.60205, 1415.70996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(949, 1697.24194, 1403.30200, 1416.27686,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 1693.57300, 1416.14294, 1415.69104,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1418, 1697.36304, 1408.46387, 1415.71704,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1418, 1693.88794, 1408.46387, 1415.71704,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18075, 1696.98804, 1416.32703, 1418.00806,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18075, 1697.05603, 1404.28894, 1418.00806,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 1694.30786, 1403.93787, 1416.27905,   0.00000, 0.00000, 302.00000);
	CreateDynamicObject(2674, 1700.38403, 1420.57886, 1415.07703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1356, 1693.64600, 1413.67004, 1415.18396,   0.00000, 0.00000, 88.00000);

	//Шахта
	CreateDynamicObject(8572, -1877.78345, -1640.93469, 22.79130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2934, -1900.50403, -1638.60535, 24.03500,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1499, -1898.96155, -1639.29150, 24.04390,   0.00000, 0.00000, 90.00000);

	CreateDynamicObject(17033, -1868.11401, -1633.02905, 0.80900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17033, -1877.58203, -1629.59204, 0.86200,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(17033, -1865.28003, -1610.71985, 0.80900,   0.00000, 0.00000, 81.99600);
	CreateDynamicObject(17033, -1875.95386, -1603.39502, 0.80900,   0.00000, 0.00000, 151.99100);
	CreateDynamicObject(17033, -1888.51001, -1605.89404, 0.80900,   0.00000, 0.00000, 151.99001);
	CreateDynamicObject(17033, -1901.78687, -1606.99194, 0.80900,   0.00000, 0.00000, 151.99001);
	CreateDynamicObject(17033, -1915.30505, -1611.32886, 0.80900,   0.00000, 0.00000, 151.99001);
	CreateDynamicObject(17033, -1928.36401, -1613.44202, 0.80900,   0.00000, 0.00000, 151.99001);
	CreateDynamicObject(17033, -1936.08887, -1622.45886, 0.80900,   0.00000, 0.00000, 235.99001);
	CreateDynamicObject(17033, -1934.81287, -1635.81885, 0.80900,   0.00000, 0.00000, 235.98599);
	CreateDynamicObject(17033, -1930.05786, -1645.92603, 0.80900,   0.00000, 0.00000, 287.98599);
	CreateDynamicObject(17033, -1915.56201, -1650.66284, 0.80900,   0.00000, 0.00000, 339.98499);
	CreateDynamicObject(17033, -1901.60596, -1647.16602, 0.80900,   0.00000, 0.00000, 339.98300);
	CreateDynamicObject(17033, -1888.03003, -1643.55701, 0.80900,   0.00000, 0.00000, 339.98300);
	CreateDynamicObject(17033, -1878.99500, -1640.24695, 0.80900,   0.00000, 0.00000, 349.98300);
	CreateDynamicObject(17029, -1900.48401, -1600.96106, -5.53200,   0.00000, 0.00000, 214.00000);
	CreateDynamicObject(17029, -1868.65405, -1597.81702, -5.53200,   0.00000, 0.00000, 189.99800);
	CreateDynamicObject(17029, -1859.03784, -1629.92505, -5.53200,   0.00000, 0.00000, 101.99800);
	CreateDynamicObject(17029, -1885.77795, -1653.48804, -5.53200,   0.00000, 0.00000, 41.99700);
	CreateDynamicObject(17029, -1900.44702, -1649.65405, -5.53200,   0.00000, 0.00000, 33.24500);
	CreateDynamicObject(17029, -1936.65503, -1623.77905, -5.53200,   0.00000, 0.00000, 279.99301);
	CreateDynamicObject(9438, -2035.79187, -1636.55066, -11.96500,   0.00000, 6.49800, 275.99899);
	CreateDynamicObject(9440, -1891.58105, -1629.05005, 14.47200,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(17033, -1861.82214, -1622.79590, 0.80900,   0.00000, 0.00000, 59.99600);
	CreateDynamicObject(17033, -1883.47205, -1630.46387, 0.89800,   0.00000, 0.00000, 17.99600);
	CreateDynamicObject(17033, -1894.96594, -1640.92603, 0.89800,   0.00000, 0.00000, 341.99600);
	CreateDynamicObject(16446, -1921.86487, -1624.10205, 2.21300,   0.00000, 0.00000, 14.00000);
	CreateDynamicObject(16309, -1913.24402, -1621.92786, 0.84700,   0.00000, 339.75000, 193.00000);
	CreateDynamicObject(16076, -1918.97095, -1635.69604, 3.31900,   0.00000, 0.00000, 103.75000);
	CreateDynamicObject(16083, -1914.95496, -1629.52002, -2.74500,   0.00000, 0.00000, 4.25000);
	CreateDynamicObject(16083, -1913.90503, -1633.57104, -2.74500,   0.00000, 0.00000, 4.24600);
	CreateDynamicObject(8879, -1909.36084, -1637.98901, 2.86200,   0.00000, 0.00000, 336.00000);
	CreateDynamicObject(8879, -1915.11694, -1617.04895, 2.86200,   0.00000, 0.00000, 227.99500);
	CreateDynamicObject(8879, -1873.32800, -1611.30896, 2.86200,   0.00000, 0.00000, 139.99400);
	CreateDynamicObject(8879, -1887.89294, -1625.83704, 2.86200,   0.00000, 0.00000, 61.99300);
	CreateDynamicObject(17033, -1895.40100, -1634.45105, 0.85599,   0.00000, 348.00000, 355.99600);
	CreateDynamicObject(17033, -1865.46484, -1617.43994, 0.86200,   0.00000, 0.00000, 77.99600);
	CreateDynamicObject(17033, -1879.39905, -1607.71985, 0.86200,   0.00000, 0.00000, 129.99200);
	CreateDynamicObject(17033, -1891.88000, -1610.43506, 0.86200,   0.00000, 0.00000, 163.99001);
	CreateDynamicObject(14435, -1885.21704, -1611.82300, 10.60500,   0.00000, 0.00000, 14.00000);
	CreateDynamicObject(14435, -1903.21387, -1616.78296, 10.60500,   0.00000, 0.00000, 13.99700);
	CreateDynamicObject(14435, -1922.40906, -1622.07385, 10.60500,   0.00000, 0.00000, 13.99700);
	CreateDynamicObject(17029, -1933.06104, -1635.94995, -5.53200,   0.00000, 0.00000, 315.99200);
	CreateDynamicObject(16092, -1887.54700, -1619.78687, 0.99400,   0.00000, 0.00000, 15.75000);
	CreateDynamicObject(867, -1880.56384, -1613.15601, 1.31000,   0.00000, 2.00000, 330.00000);
	CreateDynamicObject(867, -1885.15186, -1614.71594, 1.31000,   0.00000, 2.00000, 27.99600);
	CreateDynamicObject(867, -1888.96387, -1616.14795, 1.31000,   0.00000, 2.00000, 339.99301);
	CreateDynamicObject(867, -1878.35986, -1614.64600, 1.31000,   0.00000, 2.00000, 329.98801);
	CreateDynamicObject(867, -1873.72900, -1615.67395, 1.31000,   0.00000, 2.00000, 279.98499);
	CreateDynamicObject(867, -1871.33105, -1619.92603, 1.31000,   0.00000, 0.25000, 267.98099);
	CreateDynamicObject(867, -1868.51501, -1624.70886, 1.31000,   0.00000, 0.24700, 267.97900);
	CreateDynamicObject(867, -1871.37903, -1627.91895, 1.31000,   0.00000, 0.24700, 225.97900);
	CreateDynamicObject(867, -1875.35706, -1627.09900, 1.31000,   0.00000, 0.24700, 141.97800);
	CreateDynamicObject(867, -1876.10400, -1622.65405, 1.31000,   0.00000, 0.24700, 107.97600);
	CreateDynamicObject(16305, -1872.80005, -1615.18506, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1870.55786, -1620.60986, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1868.13501, -1626.44702, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1874.64905, -1628.56384, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1878.08386, -1622.84485, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1877.67603, -1613.39600, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1882.70496, -1611.16602, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1886.57666, -1613.94873, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1889.16504, -1614.90100, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1885.26794, -1625.66504, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1883.39294, -1622.87305, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16305, -1879.69702, -1621.16895, 2.01200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(867, -1886.17004, -1622.84302, 1.31000,   0.00000, 2.00000, 219.98801);
	CreateDynamicObject(867, -1882.25806, -1619.95105, 1.31000,   0.00000, 2.00000, 203.98500);
	CreateDynamicObject(8879, -1874.28687, -1629.79504, 2.86200,   0.00000, 359.75000, 357.99301);
	CreateDynamicObject(16310, -1904.66003, -1642.40100, 5.84300,   90.00000, 184.81400, 1.18600);
	CreateDynamicObject(1497, -1906.65186, -1637.93787, 0.82800,   0.00000, 0.25000, 15.43600);
	CreateDynamicObject(1497, -1903.77185, -1637.09094, 0.82800,   0.00000, 0.24700, 196.43600);
	CreateDynamicObject(2935, -1901.64795, -1619.01440, 2.03700,   0.00000, 0.00000, 69.00000);
	CreateDynamicObject(1494, -1902.51685, -1620.38281, 0.90890,   0.00000, 0.00000, -19.00000);
	// Чердак
	CreateObject(3698, 530.42560, -233.23570, 759.11792,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3599, 526.08392, -232.04500, 767.91901,   0.00000, 133.25000, 0.49400);
	CreateDynamicObject(3599, 536.32593, -230.63490, 767.91901,   0.00000, 142.00000, 180.24400);
	CreateDynamicObject(2419, 531.00891, -225.19290, 761.87402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2063, 529.40900, -234.86900, 762.33002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2674, 531.17987, -226.06700, 761.89502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1356, 531.78693, -225.15601, 762.95587,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1431, 533.66602, -225.64400, 762.42102,   0.00000, 0.00000, 137.99500);
	CreateDynamicObject(2969, 529.41992, -235.55090, 762.80487,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2194, 533.20502, -225.42200, 763.20300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2228, 533.15387, -225.93100, 762.42987,   14.99600, 0.00000, 140.00000);
	CreateDynamicObject(1487, 529.87793, -224.84590, 763.13092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2044, 532.09601, -225.05490, 762.85400,   0.00000, 0.00000, 313.99500);
	CreateDynamicObject(1497, 531.16602, -236.41400, 761.87402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2037, 530.68402, -224.82001, 762.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3698, 530.47302, -224.92790, 759.11792,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2334, 530.02502, -225.14700, 761.87402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, 533.28003, -231.58800, 761.87402,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3599, 536.31293, -220.42500, 767.91901,   0.00000, 142.00000, 180.24200);
	CreateDynamicObject(3599, 526.03992, -226.11400, 767.91901,   0.00000, 133.25000, 0.49400);
	CreateDynamicObject(2044, 531.67102, -225.06700, 762.85400,   0.00000, 0.00000, 313.99500);
	CreateDynamicObject(1455, 529.68701, -224.89600, 763.00500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2037, 530.69391, -225.03700, 762.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2607, 533.05402, -230.11200, 762.26892,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1810, 532.40192, -230.09700, 761.87402,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(1810, 529.47192, -225.51100, 761.87402,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1455, 529.68201, -225.07401, 763.00500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2969, 529.50293, -234.31200, 762.80487,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3651, 528.46802, -241.46890, 764.68292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3651, 529.57391, -219.68201, 764.68292,   0.00000, 0.00000, 180.00000);
	// ВМФ - Инт
	CreateDynamicObject(1498, 2728.94556, -2473.22534, 16.53720,   0.00000, 0.00000, 90.00000);

	CreateDynamicObject(14597, 2318.36792, 441.39990, 1131.04895,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 2331.54810, 440.13800, 1129.04395,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 2331.54199, 443.11890, 1129.04395,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16501, 2322.00903, 438.05200, 1131.25696,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16501, 2312.65698, 438.06790, 1131.25696,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16501, 2312.68701, 444.73901, 1131.25696,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16501, 2321.98999, 444.72800, 1131.25696,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16501, 2331.34106, 444.74200, 1131.25696,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16501, 2331.33496, 438.04190, 1131.25696,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16501, 2314.02588, 436.77890, 1131.25696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16501, 2314.03198, 446.05701, 1131.25696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 2322.90210, 454.26801, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.90796, 451.31689, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.94092, 448.26700, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.92212, 445.34100, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.90723, 451.31641, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.90137, 454.26749, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.94043, 448.26660, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.92188, 445.34079, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2317.90088, 454.24100, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2317.90039, 454.24020, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2317.88110, 451.28290, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2317.88086, 451.28220, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2131, 2326.22607, 454.49890, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2132, 2324.23804, 454.49600, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2340, 2323.26294, 454.51590, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2340, 2322.71899, 453.79990, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2132, 2322.73389, 451.80090, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2441, 2323.43604, 451.59100, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2441, 2324.43188, 451.58701, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2441, 2325.42700, 451.58600, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2441, 2326.42212, 451.58801, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2441, 2327.41089, 451.59000, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2541, 2324.23804, 454.57401, 1129.97705,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2541, 2323.28711, 454.60300, 1129.97705,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2222, 2323.36108, 451.56601, 1130.18103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2222, 2323.08008, 445.47601, 1129.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2342, 2322.62109, 452.12900, 1130.21704,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2342, 2322.65601, 451.53000, 1130.21704,   0.00000, 0.00000, 34.00000);
	CreateDynamicObject(2221, 2327.50708, 451.51590, 1130.18201,   0.00000, 0.00000, 322.00000);
	CreateDynamicObject(2340, 2328.24097, 454.48901, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2340, 2329.17993, 454.49301, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2340, 2329.19897, 453.76590, 1129.05701,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2340, 2329.19897, 452.78500, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2862, 2328.32910, 454.58301, 1130.10205,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2862, 2329.25293, 454.29089, 1130.10205,   0.00000, 0.00000, 104.00000);
	CreateDynamicObject(2865, 2329.27905, 453.48489, 1130.10986,   0.00000, 0.00000, 96.00000);
	CreateDynamicObject(1722, 2323.54590, 445.34601, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 2322.84912, 445.89600, 1129.46204,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 2329.04297, 445.88901, 1129.46204,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 2329.03589, 447.97800, 1129.46204,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 2322.84302, 447.98001, 1129.46204,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 2323.55908, 446.46701, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 2323.57397, 447.33090, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 2323.57690, 448.63501, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 2328.29810, 445.33301, 1129.05701,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 2328.28296, 446.55389, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1722, 2328.28906, 447.51001, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1722, 2328.27490, 448.59390, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1722, 2322.71289, 449.14801, 1129.05701,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1722, 2329.25391, 449.12100, 1129.05701,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2222, 2323.82031, 451.55661, 1130.18103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2222, 2323.10400, 448.53101, 1129.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2222, 2328.70605, 446.38501, 1129.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2222, 2329.22510, 448.53000, 1129.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2244, 2322.59692, 446.93390, 1130.14795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2244, 2329.27905, 446.94290, 1130.14795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2244, 2322.55005, 453.82700, 1130.38684,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 2322.91211, 437.16901, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.90894, 428.28201, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.88110, 431.27390, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.92090, 434.12289, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.92090, 434.12201, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.91211, 437.16891, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.88086, 431.27341, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2322.90820, 428.28119, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2317.87793, 428.28290, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2317.87207, 428.28201, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2317.85596, 431.35690, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 2317.85547, 431.35641, 1129.99695,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 2315.11792, 437.35690, 1130.08203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 2314.81201, 445.20401, 1130.08203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(630, 2325.97510, 428.21301, 1130.08887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16154, 2327.28003, 430.53900, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16154, 2326.91504, 432.26001, 1129.06384,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 2314.58789, 435.17801, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 2314.58105, 432.96201, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 2314.53491, 446.27600, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 2314.55103, 448.48190, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 2329.55908, 433.09500, 1129.05701,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2164, 2328.12402, 427.89200, 1129.05701,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2063, 2323.82202, 428.09201, 1129.96594,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(630, 2329.39990, 435.02200, 1130.08203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, 2322.27905, 432.97189, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1722, 2322.28198, 431.73990, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1722, 2322.28711, 431.12100, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1722, 2322.29102, 430.51801, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1722, 2322.27637, 432.36420, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2200, 2313.07397, 438.54501, 1129.05701,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2066, 2322.66089, 434.63000, 1129.06384,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2066, 2322.66211, 434.06900, 1129.06384,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 2314.92700, 429.97800, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 2314.90796, 452.94189, 1129.05701,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 2321.32007, 449.93600, 1129.05701,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 2321.27393, 452.95590, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2007, 2321.32007, 446.89001, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2007, 2321.35010, 435.73801, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2007, 2321.30493, 432.85300, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2007, 2321.31592, 429.89890, 1129.05701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(14455, 2305.23999, 443.56689, 1130.72900,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2206, 2307.63892, 442.39990, 1129.05701,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2205, 2308.62793, 440.94690, 1129.06384,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, 2309.95605, 441.95490, 1129.05701,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2120, 2309.37109, 442.43390, 1129.69495,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2120, 2309.24707, 440.46790, 1129.69495,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2120, 2307.14209, 441.43390, 1129.70203,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2244, 2307.89209, 440.29001, 1130.27002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 2322.34375, 435.40131, 1129.06384,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(630, 2310.96289, 438.76700, 1130.08203,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2064, 2314.76392, 438.79190, 1129.68604,   0.00000, 0.00000, 134.25000);
	CreateDynamicObject(2064, 2314.79395, 443.94189, 1129.68604,   0.00000, 0.00000, 46.00300);
	CreateDynamicObject(2059, 2309.72900, 442.06500, 1130.00085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2059, 2308.66309, 441.10101, 1130.00806,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2058, 2309.88892, 441.05701, 1130.00403,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3350, 2321.97095, 444.28400, 1128.75696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 2324.10400, 444.54700, 1130.68884,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2612, 2319.97607, 444.56601, 1130.68884,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 2331.45605, 441.63501, 1132.27002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16501, 2331.62012, 441.27701, 1131.25696,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2055, 2321.09595, 444.59790, 1130.77795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2055, 2322.88989, 444.53690, 1130.77795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11245, 2314.21191, 442.79401, 1130.12195,   0.00000, 289.25000, 87.00000);
	CreateDynamicObject(11245, 2314.23389, 439.99390, 1130.12195,   0.00000, 289.24799, 265.99500);
	CreateDynamicObject(2164, 2312.62109, 444.27490, 1129.05701,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 2310.84302, 444.27100, 1129.05701,   0.00000, 0.00000, 0.00000);


	//Autoschool
	CreateDynamicObject(1498, 1497.72083, -1581.34204, 12.54684,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4730, 1496.37256, -1580.18945, 18.87610,   0.00000, 0.00000, 8.00570);
	CreateDynamicObject(4730, 1496.37256, -1580.18945, 15.23610,   0.00000, 0.00000, 11.00000);
	//AviaDroom
	CreateDynamicObject(10810, -1626.37695, -175.56000, 18.54500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8038, -1537.80286, -90.06400, 33.66200,   0.00000, 0.00000, 314.50000);
	CreateDynamicObject(982, -1661.57202, -142.61501, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1643.50305, -124.57800, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1625.36804, -106.49100, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1607.25195, -88.39600, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1589.10400, -70.24600, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1571.01685, -52.19000, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1552.94385, -34.18700, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1534.82886, -16.00400, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1516.67395, 2.11300, 13.82400,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1498.62000, 20.15300, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1480.60095, 38.24400, 13.82400,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1462.50000, 56.38800, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1444.35596, 74.47700, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1426.31702, 92.54800, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1408.19885, 110.71100, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1390.10986, 128.79800, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1635.08203, -168.91200, 13.83900,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1616.93201, -150.78200, 13.84100,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1598.84595, -132.68300, 13.84000,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1580.72400, -114.56100, 13.84000,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1564.87903, -98.68600, 13.83700,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1509.01794, -42.59600, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1490.90503, -24.44500, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1472.81702, -6.32700, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1454.70605, 11.73900, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1436.55505, 29.86100, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1418.49194, 47.99400, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1400.37195, 66.13200, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1382.25806, 84.21700, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1364.15405, 102.28200, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1346.05701, 120.38700, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(982, -1372.02686, 146.89000, 13.83200,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(617, -1406.89600, 42.87700, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1371.46387, 47.39800, 13.53900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1384.97095, 62.12600, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1360.54700, 90.28400, 13.53900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1362.88794, 71.63100, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1491.65686, -41.71100, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1468.21887, -44.10900, 13.53900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1465.27905, -11.08100, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1449.20801, -14.67100, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1427.12695, 34.74200, 13.31200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1453.44702, 7.77700, 13.31100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1577.69604, -117.77900, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1582.45996, -144.91600, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1598.24304, -141.53600, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1618.85205, -165.15401, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1663.70703, -138.01300, 13.54700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1633.03186, -107.84800, 13.54200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, -1614.59485, -89.83500, 13.54300,   0.00000, 0.00000, 0.00000);

	//Autodroom
	CreateDynamicObject(5494, -2070.47412, -262.66101, 34.43200,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(5495, -2059.73608, -186.19701, 34.52400,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(771, -2018.53894, -278.40790, 34.50200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(771, -2074.03296, -257.13300, 34.32000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(771, -2049.22412, -278.42700, 34.49000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(771, -2093.10400, -181.31200, 34.32000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(770, -2073.84399, -234.80400, 34.32000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(770, -2033.81006, -278.55890, 34.49200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(770, -2030.54700, -139.61301, 34.30600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9321, -2086.21899, -278.23300, 35.94600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(6909, -2022.97803, -248.63490, 39.23300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(771, -2077.97070, -278.02530, 34.50100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(771, -2072.72510, -206.27400, 34.32000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(771, -2018.08203, -205.69290, 34.32700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(770, -2064.22754, -278.23730, 34.49700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(770, -2036.97803, -205.95100, 34.32000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(770, -2057.79199, -205.47000, 34.32000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4892, -2022.98584, -164.47200, 37.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1319, -2020.18701, -180.97200, 35.05500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1319, -2037.18994, -176.41701, 35.05500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1319, -2048.06494, -176.32700, 35.05500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1319, -2081.82593, -275.53101, 34.89200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1319, -2090.41797, -275.64401, 34.89900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1315, -2040.23096, -176.01801, 37.61300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1315, -2075.85693, -267.76590, 37.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1306, -2091.56396, -174.76100, 41.81600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1306, -2091.56396, -145.39400, 41.81600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1306, -2091.56396, -115.20200, 41.81600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1294, -2037.64001, -166.81000, 38.86200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1294, -2037.33386, -147.03600, 38.83800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1294, -2080.59595, -208.42000, 39.03100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1294, -2080.73999, -224.35890, 39.01300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1294, -2080.47998, -246.38400, 39.01300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1291, -2077.55811, -207.09590, 35.03100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, -2092.34106, -223.22090, 35.77500,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1257, -2079.67896, -243.31590, 35.77400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2085.94092, -205.54601, 34.66800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2086.02710, -221.18700, 34.67200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2086.04297, -239.98100, 34.66400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2085.97510, -261.53101, 34.66300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1211, -2056.15991, -179.53500, 35.12100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1676, -2031.67200, -247.12601, 36.16100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1676, -2031.63684, -250.27290, 36.16100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1676, -2020.83606, -247.17900, 36.16100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1676, -2020.82495, -250.15601, 36.16100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4597, -2075.86499, -219.93900, 34.80200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4597, -2075.91211, -242.50600, 34.80200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4597, -2057.69092, -202.21201, 34.80200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4597, -2030.51184, -202.17700, 34.80200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -2031.63684, -255.75500, 34.32000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -2020.79700, -255.90700, 34.32000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12923, -2065.31592, -152.13000, 39.32500,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7337, -2042.52100, -142.46700, 34.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2042.57605, -126.50900, 34.66200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2042.53003, -140.71890, 34.66200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2042.55603, -158.34801, 34.66200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2069.23096, -160.07890, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2062.69897, -160.03101, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2061.63501, -166.31500, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2069.22998, -166.35100, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2069.20898, -164.90700, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2069.22095, -163.40100, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2069.23706, -161.85201, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2067.91797, -160.05400, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2066.52197, -160.05200, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2065.18188, -160.04100, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2063.85596, -160.05090, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2068.10498, -166.34300, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2066.83105, -166.33501, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2065.66309, -166.33800, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2064.34302, -166.34900, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2063.06909, -166.32890, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2061.46509, -160.03700, 34.65100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2036.48096, -217.83501, 34.63800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2021.75500, -252.13400, 34.63800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2021.65295, -243.67700, 34.63800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2026.64502, -252.15100, 34.63800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2026.57605, -243.72549, 34.63800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2036.44885, -219.96100, 34.63800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2036.42603, -221.92400, 34.63800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2036.40906, -223.61400, 34.63800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1238, -2036.35095, -225.44290, 34.63800,   0.00000, 0.00000, 0.00000);
	//Autoschool
	CreateObject(14530, 1434.69800, 281.78400, 1039.21484,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2308, 1427.51404, 282.25800, 1037.43396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 1435.55896, 282.80301, 1037.43396,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2605, 1440.25305, 282.79700, 1037.83203,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2605, 1440.25305, 278.17401, 1037.83203,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2605, 1435.97595, 278.22501, 1037.83203,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2605, 1435.97595, 282.77390, 1037.83203,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2605, 1438.14502, 278.24200, 1037.83203,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2309, 1428.27734, 282.84271, 1037.43396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 1435.56201, 278.12601, 1037.43396,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2309, 1437.67200, 278.21701, 1037.43396,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2309, 1439.83704, 278.15701, 1037.43396,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2309, 1439.82385, 282.74789, 1037.43396,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1738, 1431.09485, 277.42200, 1038.08801,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1738, 1428.39600, 277.41101, 1038.08801,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 1430.50403, 277.61090, 1037.43396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2485, 1441.99805, 280.73590, 1038.40002,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(2737, 1442.20886, 280.03790, 1038.87903,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2315, 1429.49194, 283.38800, 1037.43396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1431.35706, 281.24500, 1037.43396,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2165, 1431.34094, 279.30301, 1037.43396,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2315, 1429.49500, 284.12601, 1037.43396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1427.11584, 279.81100, 1037.43396,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1427.11584, 278.05200, 1037.43396,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2309, 1430.94702, 278.76801, 1037.43396,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2309, 1430.95996, 280.74890, 1037.43396,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2010, 1427.51184, 281.45901, 1037.43701,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(2010, 1442.05005, 277.59201, 1037.43701,   0.00000, 0.00000, 40.24900);
	CreateDynamicObject(2163, 1442.21484, 280.64890, 1037.43396,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2276, 1441.73706, 279.79700, 1038.65405,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2258, 1430.19385, 283.69189, 1039.12585,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1076, 1442.30286, 281.93600, 1039.05005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1025, 1442.33984, 283.02490, 1039.06201,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1569, 1435.85596, 293.73590, 1037.52686,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1433.06445, 277.11520, 1037.43396,   0.00000, 0.00000, 0.00000);
	//Voddroom
	CreateDynamicObject(18446, -1606.11523, -60.41790, 1.18100,   0.00000, 1.74700, 337.24701);
	CreateDynamicObject(1237, -1755.51086, -448.96100, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1755.20203, -416.72189, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1754.93701, -391.25900, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1754.71387, -360.88800, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1754.57605, -330.13589, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1755.40796, -490.41589, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1754.63904, -295.21701, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1754.53784, -299.04590, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1754.53784, -305.89301, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1754.51794, -312.73590, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1754.52405, -319.58890, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1754.50903, -326.43600, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1755.46301, -452.58600, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1755.46802, -459.41589, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1755.47400, -466.23590, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1755.47900, -473.06601, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1755.47095, -479.91501, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1755.46594, -486.72000, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1769.96484, -525.60901, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1762.79004, -537.15302, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1755.51904, -537.23901, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1748.07495, -537.14691, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1740.36694, -525.34802, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, -1767.95996, -528.72101, 0.00000,   0.00000, 0.00000, 32.00000);
	CreateDynamicObject(1251, -1764.66785, -533.98792, 0.00000,   0.00000, 0.00000, 31.99800);
	CreateDynamicObject(1251, -1759.07886, -537.19092, 0.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, -1751.76086, -537.23401, 0.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, -1745.97302, -534.16302, 0.00000,   0.00000, 0.00000, 328.00201);
	CreateDynamicObject(1251, -1742.35400, -528.39801, 0.00000,   0.00000, 0.00000, 327.99701);
	CreateDynamicObject(1237, -1738.72595, -525.40991, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1737.17896, -525.50403, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1771.51794, -525.55292, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1766.31006, -531.36792, 0.10400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, -1744.30396, -531.37500, 0.08400,   0.00000, 0.00000, 0.00000);



	// Radar
	CreateDynamicObject(1886, 696.41113, -1770.21655, 13.45571,   -0.00001, 180.00000, -130.99995);
	CreateDynamicObject(1886, 1456.50085, -1726.38635, 13.51187,   -0.00001, 180.00000, -89.99996);
	CreateDynamicObject(1324, 1456.26929, -1726.64343, 12.56539,   15.00004, 180.00002, 134.99994);
	CreateDynamicObject(1324, 1456.82178, -1726.09143, 12.56539,   14.99994, 179.99998, -44.99997);
	CreateDynamicObject(1324, 1456.82153, -1726.64368, 12.56539,   15.00002, 180.00002, -135.00008);
	CreateDynamicObject(1324, 1456.26953, -1726.09119, 12.56539,   14.99996, 179.99998, 44.99990);
	CreateDynamicObject(1886, 1456.58093, -1726.34631, 13.51187,   0.00001, 180.00000, 89.99995);
	CreateDynamicObject(1324, 696.06763, -1770.25854, 12.50924,   15.00004, 180.00002, 93.99992);
	CreateDynamicObject(1324, 696.84680, -1770.20459, 12.50924,   14.99994, 179.99998, -85.99995);
	CreateDynamicObject(1324, 696.48431, -1770.62109, 12.50924,   15.00001, 180.00002, -176.00003);
	CreateDynamicObject(1324, 696.43011, -1769.84204, 12.50924,   14.99997, 179.99998, 3.99990);
	CreateDynamicObject(1886, 696.49780, -1770.23877, 13.45571,   0.00001, 180.00000, 48.99994);
	CreateDynamicObject(1886, 259.08453, -1669.82593, 9.61368,   -0.00002, 180.00000, -152.99991);
	CreateDynamicObject(1324, 258.75034, -1669.73608, 8.66721,   15.00005, 180.00002, 71.99992);
	CreateDynamicObject(1324, 259.49295, -1669.97803, 8.66721,   14.99993, 179.99998, -107.99993);
	CreateDynamicObject(1324, 259.00085, -1670.22839, 8.66721,   15.00001, 180.00000, 161.99995);
	CreateDynamicObject(1324, 259.24243, -1669.48572, 8.66721,   14.99997, 180.00000, -18.00010);
	CreateDynamicObject(1886, 259.15659, -1669.87903, 9.61368,   0.00002, 180.00000, 26.99994);
	CreateDynamicObject(1886, 1827.76575, -1707.85291, 13.58010,   -0.00002, 180.00000, 154.50003);
	CreateDynamicObject(1324, 1827.63367, -1707.53308, 12.63363,   15.00006, 180.00002, 19.49989);
	CreateDynamicObject(1324, 1827.89380, -1708.26941, 12.63363,   14.99992, 179.99998, -160.49992);
	CreateDynamicObject(1324, 1827.39563, -1708.03149, 12.63363,   15.00001, 180.00000, 109.49991);
	CreateDynamicObject(1324, 1828.13184, -1707.77100, 12.63363,   14.99996, 180.00000, -70.50012);
	CreateDynamicObject(1886, 1827.76758, -1707.94250, 13.58010,   0.00002, 180.00000, -25.50008);
	CreateDynamicObject(1886, 1723.44666, -644.98621, 41.76880,   -0.00002, 180.00000, 154.49998);
	CreateDynamicObject(1324, 1723.31458, -644.66638, 40.82233,   15.00006, 180.00002, 19.49988);
	CreateDynamicObject(1324, 1723.57471, -645.40271, 40.82233,   14.99992, 179.99998, -160.49988);
	CreateDynamicObject(1324, 1723.07654, -645.16479, 40.82233,   15.00002, 180.00000, 109.49989);
	CreateDynamicObject(1324, 1723.81274, -644.90430, 40.82233,   14.99996, 180.00000, -70.50012);
	CreateDynamicObject(1886, 1723.44849, -645.07581, 41.76880,   0.00002, 180.00000, -25.50008);
	CreateDynamicObject(1886, 1557.30896, -920.97644, 44.36884,   -0.00002, 180.00000, 98.59995);
	CreateDynamicObject(1324, 1557.49963, -920.68774, 43.42237,   15.00006, 180.00002, -36.40014);
	CreateDynamicObject(1324, 1557.03589, -921.31598, 43.42237,   14.99991, 179.99998, 143.60008);
	CreateDynamicObject(1324, 1556.95349, -920.77008, 43.42237,   15.00003, 180.00000, 53.59986);
	CreateDynamicObject(1324, 1557.58203, -921.23370, 43.42237,   14.99995, 180.00000, -126.40013);
	CreateDynamicObject(1886, 1557.23572, -921.02820, 44.36884,   0.00002, 180.00000, -81.40008);
	CreateDynamicObject(1886, 1079.59375, -942.18524, 42.91270,   -0.00001, 180.00000, 63.89993);
	CreateDynamicObject(1324, 1079.91492, -942.05640, 41.96623,   15.00006, 180.00002, -71.10015);
	CreateDynamicObject(1324, 1079.17603, -942.30896, 41.96623,   14.99992, 179.99998, 108.90006);
	CreateDynamicObject(1324, 1079.41907, -941.81317, 41.96623,   15.00003, 180.00000, 18.89984);
	CreateDynamicObject(1324, 1079.67188, -942.55219, 41.96623,   14.99994, 180.00000, -161.10010);
	CreateDynamicObject(1886, 1079.50415, -942.18610, 42.91270,   0.00001, 180.00000, -116.10007);
	CreateDynamicObject(1886, 135.91933, -1540.38843, 9.10595,   0.00000, 180.00000, 18.69991);
	CreateDynamicObject(1324, 136.23711, -1540.52551, 8.15948,   15.00005, 180.00002, -116.30014);
	CreateDynamicObject(1324, 135.53716, -1540.17908, 8.15948,   14.99992, 179.99998, 63.70004);
	CreateDynamicObject(1324, 136.06026, -1540.00220, 8.15948,   15.00003, 180.00000, -26.30017);
	CreateDynamicObject(1324, 135.71400, -1540.70239, 8.15948,   14.99994, 180.00000, 153.69987);
	CreateDynamicObject(1886, 135.85559, -1540.32544, 9.10595,   0.00000, 180.00000, -161.30003);

	//Инта дома низкий класс
	CreateObject(14859, 246.89590, 311.02170, 1000.14838,   0.00000, 0.00000, 0.00000);
	//Инта дома средний класс
	CreateObject(14743, 2461.26733, -1718.71252, 1012.48792,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14746, 2455.23877, -1724.91858, 1012.48792,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14744, 2461.27173, -1718.75562, 1012.47467,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14763, 2449.47241, -1710.47729, 1012.26672,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14762, 2450.05542, -1713.77087, 1012.60291,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14740, 2450.19067, -1709.77625, 1012.93872,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 2472.36450, -1720.29333, 1010.79303,   0.00000, 0.00000, -90.00000);
	//Инта дома высокий класс
	CreateObject(15048, 2316.03711, -1163.84143, 1053.30908,   0.00000, 0.00000, 0.00000);
	CreateObject(15059, 2316.03735, -1163.84143, 1053.30908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 2326.42310, -1168.97656, 1049.73035,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1569, 2323.42090, -1168.96033, 1049.73035,   0.00000, 0.00000, 0.00000);
	//Магазин мебели
	CreateObject(18082, 357.37711, -125.52715, 1001.70337,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11319, 362.32211, -124.49610, 1000.48407,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18084, 360.23770, -121.98480, 1001.01050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18084, 360.23770, -124.16480, 1000.41052,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18084, 360.23770, -123.60480, 998.53052,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18084, 360.23770, -127.20480, 1000.41052,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1792, 359.36539, -119.84880, 1002.62482,   0.00000, 0.00000, 359.89999);
	CreateDynamicObject(2808, 354.67850, -122.46250, 999.84943,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2808, 354.53317, -127.73326, 999.84943,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 360.41547, -130.31181, 999.33936,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2811, 359.33530, -120.27007, 999.33936,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1569, 355.74411, -131.06090, 999.50781,   0.00000, 0.00000, 0.00000);
	//FBI
	CreateDynamicObject(967, 1327.47205, -1160.19775, 22.82650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 1326.07202, -1160.19775, 22.82650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(972, 1299.80298, -1174.87134, 22.62840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1332.26343, -1172.37158, 26.33000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1332.34814, -1185.75745, 26.33000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1329.15137, -1198.59229, 26.33000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1322.75134, -1198.59229, 26.33000,   0.00000, 0.00000, 90.00000);
	//LSPD
	CreateDynamicObject(983, 1544.63965, -1620.55371, 13.12310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1544.63965, -1620.55371, 15.58310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1544.63965, -1635.91284, 13.12310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1544.63965, -1620.55371, 14.36310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1544.63965, -1635.87292, 14.36310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1544.63965, -1635.87292, 15.58310,   0.00000, 0.00000, 0.00000);
	//КПП ЕБАТЬ
	CreateDynamicObject(10829, 1802.71545, 818.34192, 9.59910,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(10829, 1793.91626, 818.34192, 9.59910,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(966, 1805.64893, 822.95837, 9.66920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(966, 1788.94641, 822.90057, 9.66920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(968, 1805.61707, 822.97528, 10.38120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(968, 1788.93738, 822.93781, 10.38120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(978, 1795.51538, 822.45782, 11.21160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(978, 1795.45068, 813.92511, 11.21160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1422, 1803.91956, 824.08069, 10.17665,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1422, 1800.57239, 824.08069, 10.17660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1422, 1797.16492, 824.08069, 10.17660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1422, 1794.03137, 824.08069, 10.17660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1422, 1790.67664, 824.08069, 10.17660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 1813.39807, 822.80103, 9.65810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 1816.07251, 822.80103, 9.65810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 1814.72510, 822.80103, 9.65810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 1781.39783, 822.89917, 9.65810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 1778.65051, 822.91058, 9.65810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 1780.00134, 822.89917, 9.65810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1422, 1780.12866, 824.08069, 10.17660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1422, 1814.60059, 824.08069, 10.17660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1422, 1790.66687, 812.99408, 10.17660,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(1422, 1780.05786, 821.64874, 10.17660,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1422, 1794.08081, 812.99408, 10.17660,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(1422, 1799.73755, 812.99408, 10.17660,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(1422, 1803.07751, 812.99408, 10.17660,   0.00000, 0.00000, 179.00000);
	CreateDynamicObject(1422, 1814.57397, 821.84332, 10.17660,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(966, -1504.46155, 703.89380, 44.36980,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(966, -1516.61194, 715.24207, 44.36980,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(968, -1504.50085, 703.91821, 44.98680,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(968, -1516.65540, 715.30212, 44.96680,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(10829, -1509.29785, 703.00281, 44.37020,   0.00000, 0.00000, 136.50000);
	CreateDynamicObject(10829, -1515.69580, 708.87762, 44.37020,   0.00000, 0.00000, 136.50000);
	CreateDynamicObject(978, -1516.59155, 703.83685, 45.28432,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(978, -1510.90259, 710.05957, 45.28430,   0.00000, 0.00000, 316.00000);
	CreateDynamicObject(1422, -1514.23364, 700.40808, 44.68970,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(1422, -1519.63025, 705.19843, 44.68970,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(1422, -1521.70007, 707.19128, 44.68970,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(1422, -1513.80896, 715.34387, 44.68970,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(1422, -1511.78613, 713.38898, 44.68970,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(1422, -1512.16284, 698.42493, 44.68970,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(1422, -1506.57263, 708.54443, 44.68970,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(1422, -1504.50647, 706.55463, 44.68970,   0.00000, 0.00000, 136.00000);
	CreateDynamicObject(19985, -1523.12585, 674.42877, 43.97160,   0.00000, 0.00000, 315.00000);
	CreateDynamicObject(19985, -1508.39246, 733.58289, 44.07160,   0.00000, 0.00000, 495.00000);
	CreateDynamicObject(1427, -1503.79895, 689.45697, 44.96828,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1427, -1504.75488, 690.07617, 44.96830,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(1427, -1531.43079, 714.87506, 44.96830,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(1427, -1530.51501, 713.84497, 44.96830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(968, 57.74950, -1528.52222, 4.65450,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(966, 57.77590, -1528.48022, 4.01540,   0.00000, 0.00000, 260.00000);
	CreateDynamicObject(1422, 36.12830, -1530.57178, 4.73940,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(10829, 41.63540, -1530.79346, 4.07450,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(1422, 36.62120, -1527.64600, 4.73940,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(966, 38.50874, -1525.10339, 4.01540,   0.00000, 0.00000, 260.00000);
	CreateDynamicObject(966, 37.02708, -1533.00977, 4.01540,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(968, 37.00850, -1532.99902, 4.61450,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(1237, 35.88246, -1540.59143, 4.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 35.86290, -1541.57678, 4.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10829, 52.87340, -1530.49109, 4.07450,   0.00000, 0.00000, 260.00000);
	CreateDynamicObject(1422, 57.78535, -1533.93884, 4.73940,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(1422, 58.27332, -1531.21021, 4.73940,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(966, 56.36930, -1536.43091, 4.01540,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(968, 56.35770, -1536.47522, 4.61450,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(1237, 54.93544, -1543.96851, 4.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(968, 38.49480, -1525.18457, 4.65450,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(1237, 59.24963, -1521.00537, 4.10000,   0.00000, 0.00000, 0.00000);

	// bus stop
	CreateDynamicObject(1257, 1167.530639, -1764.750122, 13.798436, 0.000000, 0.000000, 180.000000, -1, -1, -1, 300.00, 300.00);
	CreateDynamicObject(1257, 1186.770874, -1759.390869, 13.798436, 0.000000, 0.000000, 360.000000, -1, -1, -1, 300.00, 300.00);
	CreateDynamicObject(1257, 1815.18005, -1928.40283, 13.70850,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1257, 2245.28174, -2221.62280, 13.74510,   0.00000, 0.00000, 224.00000);


	//ДВЕРЬ НА ЗАВОДЕ
	CreateDynamicObject(1536, 2571.19604, -1303.41565, 1043.11792,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 2571.15601, -1300.39563, 1043.11792,   0.00000, 0.00000, -90.00000);

	//ОТЕЛЬ
	//CreateDynamicObject(18756, 2230.83423, -1150.54968, 1030.58813,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(18757, 2230.81421, -1150.56982, 1030.57495,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(18755, 2241.17798, -1150.59216, 1030.57166,   0.00000, 0.00000, 90.00000);
	//CreateDynamicObject(18757, 2241.18823, -1150.67017, 1030.57495,   0.00000, 0.00000, 90.00000);
	//CreateDynamicObject(18756, 2241.16821, -1150.67017, 1030.57495,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(977, 2229.09888, -1151.50989, 1029.91467,   0.00000, 0.00000, 101.00000);
	CreateDynamicObject(977, 2239.24805, -1152.22705, 1029.91467,   0.00000, 0.00000, 11.00000);
	CreateDynamicObject(977, 2243.21118, -1152.22925, 1029.91467,   0.00000, 0.00000, 191.00000);
	CreateDynamicObject(977, 2241.27930, -1152.18262, 1033.43689,   10.00000, 90.00000, 0.00000);
	CreateDynamicObject(977, 2238.11938, -1152.18262, 1033.43689,   10.00000, 90.00000, 0.00000);

	CreateDynamicObject(977, 2239.22559, -1160.77783, 1030.00842,   0.00000, 0.00000, 101.00000);
	CreateDynamicObject(977, 2239.22559, -1171.77747, 1030.00842,   0.00000, 0.00000, 101.00000);
	CreateDynamicObject(977, 2243.15771, -1160.72852, 1030.00842,   0.00000, 0.00000, 101.00000);
	CreateDynamicObject(977, 2224.54834, -1186.75879, 1030.00842,   0.00000, 0.00000, 11.00000);
	CreateDynamicObject(977, 2208.53735, -1190.61963, 1030.00842,   0.00000, 0.00000, 11.00000);
	CreateDynamicObject(977, 2195.14209, -1174.04431, 1030.00842,   0.00000, 0.00000, 101.00000);
	CreateDynamicObject(977, 2195.11768, -1157.93262, 1030.00842,   0.00000, 0.00000, 101.00000);
	CreateDynamicObject(977, 2191.25415, -1158.02661, 1030.00842,   0.00000, 0.00000, 101.00000);

	//Казино (NEW)
	CreateObject(14777, 1164.58472, 0.58876, 999.67188,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1895, 1180.49194, 0.75560, 1002.22467,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2188, 1179.43530, 0.70760, 1000.48248,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2964, 1176.24500, -7.07240, 1001.07892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1176.24500, -9.93240, 1001.07892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1171.50500, -9.93240, 1001.07892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1171.50500, -7.07240, 1001.07892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1166.30505, -7.07240, 1001.07892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1792, 1153.87842, 5.66920, 1002.92688,   0.00000, 0.00000, 91.64020);
	CreateDynamicObject(1828, 1164.51782, 13.49510, 999.66071,   0.00000, 0.00000, 0.00000);
	//Мэрия
	CreateDynamicObject(970, 1409.55176, -1773.34351, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1405.38184, -1773.35168, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1401.24084, -1773.34961, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1399.15308, -1771.26514, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1399.15784, -1767.09998, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1399.16467, -1762.93835, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1399.15601, -1758.77588, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1399.15283, -1754.60315, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1399.14978, -1750.46252, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1399.14526, -1746.32471, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1399.15710, -1744.24414, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1401.25977, -1742.19800, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1405.41699, -1742.19592, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1409.55481, -1742.18896, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1413.69641, -1742.19324, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1417.83801, -1742.19434, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1421.98047, -1742.19043, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1426.10254, -1742.19202, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1430.25623, -1742.19958, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1434.39880, -1742.20532, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1438.54431, -1742.20313, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1442.68713, -1742.21497, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1446.83765, -1742.22681, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1451.00500, -1742.22388, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1455.15552, -1742.21582, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1459.31946, -1742.22351, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1463.46313, -1742.21802, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1467.59058, -1742.21021, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1467.59058, -1742.21021, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1467.59058, -1742.21021, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1471.73047, -1742.21289, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1473.90393, -1742.29834, 13.09287,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1476.16626, -1742.29834, 13.09290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1478.38586, -1742.29834, 13.09290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1480.56567, -1742.29834, 13.09290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1482.69153, -1742.29834, 13.09290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1484.87183, -1742.29834, 13.09290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1487.02979, -1742.29834, 13.09290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1489.22852, -1742.29834, 13.09290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1491.50000, -1742.24988, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1495.65100, -1742.25793, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1499.79187, -1742.28052, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1503.94287, -1742.27698, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1508.09216, -1742.26001, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1512.21484, -1742.26172, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1516.35815, -1742.27454, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1520.51880, -1742.28857, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1524.67896, -1742.28076, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1528.84082, -1742.29211, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1532.96130, -1742.29858, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1537.08411, -1742.29260, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1541.21509, -1742.28857, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1545.34424, -1742.31104, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1549.48633, -1742.31421, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1553.62695, -1742.31323, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1553.62695, -1742.31323, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1557.74805, -1742.31494, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1559.80908, -1744.39551, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1559.80469, -1748.52832, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1559.80359, -1752.68921, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1559.79480, -1756.81665, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1559.79968, -1760.96204, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1559.79285, -1765.10242, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1559.78271, -1769.24268, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1549.22717, -1773.66772, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1557.51807, -1773.64905, 13.05503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1559.78552, -1771.32556, 13.05500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1215, 1559.73657, -1773.60205, 13.06421,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1553.36743, -1773.65759, 13.05503,   0.00000, 0.00000, 0.00000);
	//spawn zhdls
/*	CreateDynamicObject(970, 1811.6650, -1897.1090, 13.127, 0.0, 0.0, 90.0);
	CreateDynamicObject(970, 1774.3459, -1886.7149, 13.101, 0.0, 0.0, 90.0);
	CreateDynamicObject(970, 1811.6779, -1878.0439, 13.122, 0.0, 0.0, 90.0);
	CreateDynamicObject(970, 1811.6619, -1875.8520, 13.122, 0.0, 0.0, 90.0);
	CreateDynamicObject(970, 1811.7011, -1882.1972, 13.122, 0.0, 0.0, 90.0);
	CreateDynamicObject(970, 1774.328, -1890.8580, 13.101, 0.0, 0.0, 90.0);
	CreateDynamicObject(970, 1774.3330, -1905.0129, 13.101, 0.0, 0.0, 90.0);
	CreateDynamicObject(970, 1771.9809, -1907.1149, 13.105, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, 1774.3199, -1900.8509, 13.101, 0.0, 0.0, 90.0);
	CreateDynamicObject(1319, 1774.2950, -1897.047, 13.096, 0.0, 0.0, 0.0);
	CreateDynamicObject(1319, 1774.2879, -1894.7600, 13.096, 0.0, 0.0, 0.0);
	CreateDynamicObject(792, 1791.7049, -1883.0570, 12.863, 0.0, 0.0, 0.0);
	CreateDynamicObject(792, 1799.9589, -1883.0410, 12.863, 0.0, 0.0, 0.0);
	CreateDynamicObject(792, 1807.8409, -1883.0610, 12.863, 0.0, 0.0, 0.0);
	CreateDynamicObject(792, 1772.198, -1909.8299, 12.863, 0.0, 0.0, 0.0);
	CreateDynamicObject(792, 1772.2719, -1917.0860, 12.863, 0.0, 0.0, 0.0);
	CreateDynamicObject(792, 1772.2840, -1923.8979, 12.863, 0.0, 0.0, 0.0);
	CreateDynamicObject(792, 1772.271, -1930.6679, 12.863, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, 1754.2559, -1891.4990, 13.108, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, 1763.6059, -1898.9150, 13.115, 0.0, 0.0, 0.0);
	CreateDynamicObject(792, 1753.6629, -1898.6829, 12.863, 0.0, 0.0, 0.0);
	CreateDynamicObject(7037, 1763.5739, -1876.9680, 17.4, 0.0, 0.0, 90.0);
	CreateDynamicObject(1536, 1765.7309, -1884.75, 12.554, 0.0, 0.0, 0.0);
	CreateDynamicObject(1342, 1752.9870, -1886.5899, 13.591, 0.0, 0.0, 0.0);
	CreateDynamicObject(1340, 1753.0439, -1889.8139, 13.685, 0.0, 0.0, 0.0);
	CreateDynamicObject(1432, 1757.4289, -1886.2939, 12.556, 0.0, 0.0, 0.0);
	CreateDynamicObject(1432, 1759.9399, -1889.6899, 12.556, 0.0, 0.0, 0.0);
	CreateDynamicObject(1432, 1762.7469, -1886.4119, 12.555, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, 1758.3955, -1891.5127, 13.107, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, 1766.703, -1891.5250, 13.112, 0.0, 0.0, 0.0);
	CreateDynamicObject(792, 1766.7929, -1898.7070, 12.863, 0.0, 0.0, 0.0);
	CreateDynamicObject(1256, 1765.9139, -1906.6240, 13.227, 0.0, 0.0, 270.0);
	CreateDynamicObject(1256, 1761.9100, -1906.6949, 13.227, 0.0, 0.0, 269.995);
	CreateDynamicObject(1256, 1758.1669, -1906.6550, 13.226, 0.0, 0.0, 269.995);
	CreateDynamicObject(3468, 1764.8430, -1885.1070, 13.257, 0.0, 0.0, 0.0);
	CreateDynamicObject(3467, 1768.1429, -1885.2330, 13.256, 0.0, 0.0, 0.0);
	CreateDynamicObject(2456, 1774.8640, -1884.0200, 12.558, 0.0, 0.0, 58.0);
	CreateDynamicObject(1444, 1773.3850, -1906.5, 13.356, 0.0, 0.0, 0.0);
	CreateDynamicObject(1258, 1768.1130, -1906.5400, 13.223, 0.0, 0.0, 0.0);
	CreateDynamicObject(3853, 1787.3249, -1885.4849, 16.266, 0.0, 0.0, 90.0);
	CreateDynamicObject(1216, 1772.12, -1906.6550, 13.245, 0.0, 0.0, 180.0);
	CreateDynamicObject(1216, 1771.1359, -1906.651, 13.247, 0.0, 0.0, 179.995);
	CreateDynamicObject(1216, 1770.1870, -1906.6639, 13.249, 0.0, 0.0, 179.995);
	CreateDynamicObject(3853, 1779.0310, -1885.4980, 16.26, 0.0, 0.0, 90.0);
	CreateDynamicObject(3853, 1795.6140, -1885.5250, 16.272, 0.0, 0.0, 90.0);
	CreateDynamicObject(3853, 1803.9260, -1885.5150, 16.279, 0.0, 0.0, 90.0);
	CreateDynamicObject(792, 1760.2700, -1898.6999, 12.863, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, 1762.5488, -1891.5029, 13.106, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, 1756.9239, -1898.9110, 13.114, 0.0, 0.0, 0.0);*/
    //Spawn autovokzal
 /*  	CreateDynamicObject(8645, 1092.2130, -1730.7089, 13.631, 0.0, 0.0, 0.0);
	CreateDynamicObject(8645, 1068.755, -1781.8499, 13.488, 0.0, 0.0, 180.0);
	CreateDynamicObject(8645, 1054.1779, -1766.8380, 13.525, 0.0, 0.0, 90.0);
	CreateDynamicObject(8645, 1054.1650, -1745.3632, 13.593, 0.0, 0.0, 90.0);
	CreateDynamicObject(8645, 1068.7265, -1730.7255, 13.631, 0.0, 0.0, 0.0);
	CreateDynamicObject(8645, 1092.2259, -1781.8480, 13.488, 0.0, 0.0, 179.995);
	CreateDynamicObject(8645, 1106.9420, -1765.6729, 13.426, 0.0, 0.0, 270.0);
	CreateDynamicObject(8645, 1106.9250, -1767.2440, 13.426, 0.0, 0.0, 270.0);
	CreateDynamicObject(966, 1106.5670, -1744.151, 12.405, 0.0, 0.0, 270.0);
	CreateDynamicObject(968, 1106.5799, -1744.1829, 13.405, 0.0, 0.0, 90.0);
	CreateDynamicObject(700, 1110.4849, -1774.3039, 12.583, 0.0, 0.0, 29.998);
	CreateDynamicObject(700, 1113.0100, -1758.0109, 12.584, 0.0, 0.0, 29.998);
	CreateDynamicObject(700, 1121.8270, -1757.6829, 12.584, 0.0, 0.0, 29.998);
	CreateDynamicObject(700, 1050.448, -1772.7349, 12.602, 0.0, 0.0, 29.998);
	CreateDynamicObject(700, 1050.2629, -1759.2259, 12.618, 0.0, 0.0, 29.998);
	CreateDynamicObject(700, 1050.0610, -1730.6600, 12.64, 0.0, 0.0, 29.998);
	CreateDynamicObject(700, 1050.63, -1746.1390, 12.654, 0.0, 0.0, 29.998);
	CreateDynamicObject(700, 1067.3740, -1726.1939, 12.67, 0.0, 0.0, 29.998);
	CreateDynamicObject(700, 1082.4680, -1726.4940, 12.679, 0.0, 0.0, 29.998);
	CreateDynamicObject(700, 1106.6960, -1726.2180, 12.691, 0.0, 0.0, 29.998);
	CreateDynamicObject(647, 1111.4100, -1755.3129, 14.007, 0.0, 0.0, 0.0);
	CreateDynamicObject(647, 1116.2850, -1778.5090, 14.007, 0.0, 0.0, 0.0);
	CreateDynamicObject(647, 1136.2180, -1753.8029, 14.007, 0.0, 0.0, 0.0);
	CreateDynamicObject(647, 1121.7459, -1753.6789, 14.007, 0.0, 0.0, 0.0);
	CreateDynamicObject(647, 1109.4930, -1727.1479, 14.007, 0.0, 0.0, 0.0);
	CreateDynamicObject(647, 1089.823, -1726.4449, 14.007, 0.0, 0.0, 0.0);
	CreateDynamicObject(647, 1074.3260, -1726.7840, 14.007, 0.0, 0.0, 0.0);
	CreateDynamicObject(647, 1058.5539, -1726.6899, 14.007, 0.0, 0.0, 0.0);
	CreateDynamicObject(647, 1051.0250, -1738.2270, 14.007, 0.0, 0.0, 0.0);
	CreateDynamicObject(647, 1051.0880, -1764.4880, 14.007, 0.0, 0.0, 0.0);
	CreateDynamicObject(1319, 1106.7220, -1749.7939, 13.124, 0.0, 0.0, 0.0);
	CreateDynamicObject(1319, 1106.7530, -1748.0240, 13.124, 0.0, 0.0, 0.0);
	CreateDynamicObject(1319, 1106.729, -1746.2490, 13.124, 0.0, 0.0, 0.0);
	CreateDynamicObject(1319, 1106.7390, -1735.4100, 13.325, 0.0, 0.0, 0.0);
	CreateDynamicObject(1319, 1106.7199, -1733.7370, 13.325, 0.0, 0.0, 0.0);
	CreateDynamicObject(1319, 1106.7459, -1731.9520, 13.325, 0.0, 0.0, 0.0);
	CreateDynamicObject(1297, 1059.7519, -1741.7259, 15.861, 0.0, 0.0, 180.0);
	CreateDynamicObject(1297, 1059.7900, -1756.4069, 15.826, 0.0, 0.0, 179.995);
	CreateDynamicObject(1297, 1059.7810, -1771.1689, 15.761, 0.0, 0.0, 179.995);*/



	//Ammo
	CreateObject(18033, 268.22711, -22.68133, 1002.50781,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18035, 273.52322, -22.56653, 1002.50781,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18034, 267.41290, -19.84471, 1003.32379,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1533, 279.43152, -27.89159, 1000.50781,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1533, 279.42877, -29.41396, 1000.50781,   0.00000, 0.00000, -90.00000);



	//Особняк семьи
	CreateDynamicObject(1508, 1280.47400, -790.88336, 1083.87939,   0.00000, 0.00000, 0.00000);

	// Больница ИНТ
	CreateObject(14602, 1374.33496, -146.58400, 971.87903,   0.00000, 0.00000, 0.00000);
	CreateObject(14597, 1370.07324, -173.69920, 968.50891,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1532, 1389.01685, -147.32201, 966.51300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 1363.61084, -162.25500, 966.51300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1363.60144, -130.90720, 966.51300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1375.03015, -140.81931, 967.91302,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1351.45300, -155.87300, 968.18500,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14455, 1351.45203, -149.94701, 968.18500,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(14455, 1351.42603, -138.22090, 968.18500,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(14455, 1351.45105, -132.32100, 968.18500,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2164, 1351.33984, -144.99800, 966.51300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1351.34387, -148.55090, 966.51300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1368.45886, -186.80090, 966.51703,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3851, 1355.64160, -136.40430, 970.01300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1355.64160, -159.36810, 970.01300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1354.82300, -142.24300, 979.59302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1354.85901, -151.13200, 971.59302,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1354.83875, -151.26660, 979.59302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1354.84985, -127.50400, 971.59302,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1354.83203, -152.91690, 979.59302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1354.83203, -140.63470, 979.59302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1374.82117, -153.22459, 966.51300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1388.07605, -142.77901, 966.51300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1388.06885, -150.38901, 966.51300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2251, 1370.80603, -184.06200, 968.29602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2251, 1355.01501, -143.80490, 968.28003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1738, 1358.12585, -131.06590, 967.16687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1738, 1383.53186, -165.55290, 967.17902,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1362.25000, -162.00700, 967.16687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1738, 1358.39905, -161.98300, 967.16687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1358.37585, -146.74300, 967.23901,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2190, 1355.12195, -155.60100, 967.43701,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2190, 1355.12500, -160.12700, 967.43701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2190, 1355.15186, -132.56500, 967.43701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2190, 1369.79285, -184.07001, 967.35400,   0.00000, 359.50000, 359.99500);
	CreateDynamicObject(1796, 1356.95300, -165.89400, 966.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1796, 1359.80103, -165.88901, 966.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1796, 1362.83301, -165.99400, 966.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1796, 1365.74194, -165.92300, 966.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1796, 1382.96204, -165.91600, 966.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1796, 1380.04602, -165.88200, 966.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1796, 1377.11694, -165.89790, 966.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1796, 1374.29187, -165.91100, 966.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1796, 1383.17395, -166.37000, 966.52393,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1796, 1380.27600, -166.38600, 966.52393,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1796, 1377.25000, -166.40700, 966.52393,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1796, 1374.49805, -166.38800, 966.52393,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1796, 1357.19104, -166.41701, 966.52393,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1796, 1360.04285, -166.40100, 966.52393,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1796, 1363.10205, -166.37300, 966.52393,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1796, 1366.00000, -166.39000, 966.52393,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1789, 1381.58606, -162.81000, 967.07300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1789, 1364.32385, -162.79300, 967.07300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1789, 1361.44385, -169.42200, 967.07300,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1789, 1375.77185, -169.51100, 967.08002,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1738, 1362.08301, -131.06731, 967.16687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1738, 1383.50903, -166.75400, 967.17102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1356.65100, -166.77000, 967.17102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1356.65405, -165.57890, 967.17102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2609, 1362.11206, -162.73700, 966.52899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2609, 1357.89600, -162.75700, 966.52899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2609, 1360.73486, -162.74800, 966.52899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2609, 1375.23096, -162.78700, 966.52899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2609, 1378.05701, -162.73390, 966.52899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2609, 1379.32300, -162.73900, 966.52899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2609, 1359.08704, -169.57001, 966.52899,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2609, 1357.92102, -169.57001, 966.52899,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2609, 1365.05786, -169.57201, 966.52899,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2609, 1363.83704, -169.56500, 966.52899,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2609, 1379.32495, -169.55800, 966.52899,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2609, 1377.98987, -169.54500, 966.52899,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2609, 1382.22095, -169.54900, 966.52899,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2261, 1376.02002, -162.94501, 967.97192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2261, 1381.56995, -162.96300, 967.97192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2261, 1361.42603, -162.96400, 967.97192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1366.74805, -168.29500, 972.01300,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1366.69995, -171.83000, 972.01300,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1366.72705, -162.47400, 972.01300,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1373.40100, -162.47200, 972.01300,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1373.38586, -168.32300, 972.01300,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1373.36804, -171.77290, 972.01300,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1373.37305, -177.72400, 972.01300,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1366.75085, -177.63100, 972.01300,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1372.99194, -178.02901, 972.01300,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(3851, 1367.15503, -178.01100, 972.01300,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(2774, 1366.36206, -175.37000, 970.69287,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1373.72156, -175.37000, 970.69287,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1373.69202, -178.55701, 970.69287,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1351.35303, -146.74890, 966.51300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1372.49194, -186.80000, 966.51703,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2167, 1359.62695, -177.62700, 966.54303,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1379.96887, -170.29900, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1367.22595, -184.38300, 967.36493,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, 1367.21594, -183.08090, 967.36493,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, 1367.23206, -181.75400, 967.36493,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1753, 1372.48206, -178.95790, 966.51703,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2205, 1369.29785, -184.55090, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, 1369.30396, -183.57100, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 1369.09302, -182.69501, 967.15503,   0.00000, 0.00000, 179.50000);
	CreateDynamicObject(2120, 1369.94043, -184.84760, 967.16193,   0.00000, 0.00000, 269.49500);
	CreateDynamicObject(2251, 1355.09180, -149.54781, 968.28003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1355.10925, -138.14639, 967.43701,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2854, 1370.68604, -184.67200, 967.45392,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1661, 1444.15906, -141.91290, 916.52002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1738, 1367.35901, -179.41800, 967.17102,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 1372.77002, -181.80400, 966.51703,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3383, 1382.94287, -174.12500, 966.11700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2131, 1376.73303, -177.22800, 966.51703,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2131, 1378.72205, -177.23100, 966.51703,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2132, 1380.70386, -177.22301, 966.51703,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3383, 1376.79700, -171.01601, 966.11700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(948, 1356.90295, -170.66800, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1367.46802, -180.57700, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1367.79602, -161.09390, 966.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1372.34802, -161.03500, 966.52393,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1753, 1374.84302, -137.46100, 966.51300,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1753, 1374.83887, -132.61200, 966.51892,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1753, 1368.18506, -131.38800, 966.51892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1375.05457, -136.49020, 966.51892,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1209, 1371.70801, -131.28700, 966.51892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1373.77295, -131.43600, 966.51892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1360.34705, -170.72090, 966.51703,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2166, 1360.36304, -172.67900, 966.51703,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2165, 1362.64502, -175.96001, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2166, 1364.58801, -175.95200, 966.51703,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2166, 1357.90186, -177.14500, 966.51703,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1356.48206, -172.32401, 966.51703,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1356.48706, -174.09100, 966.52393,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(948, 1383.27734, -170.74120, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1358.68884, -177.32100, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, 1381.73816, -170.28799, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, 1360.52795, -177.62700, 966.54492,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(2120, 1360.01904, -171.35800, 967.15503,   0.00000, 0.00000, 179.49500);
	CreateDynamicObject(2120, 1363.37305, -176.24300, 967.15503,   0.00000, 0.00000, 265.49500);
	CreateDynamicObject(2120, 1357.35803, -176.85800, 967.15503,   0.00000, 0.00000, 33.49000);
	CreateDynamicObject(11455, 1360.29187, -162.45500, 969.30902,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11455, 1351.44995, -146.42200, 969.65991,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1366.74512, -134.96970, 967.91302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3857, 1354.42395, -146.72301, 969.42401,   0.00000, 0.00000, 135.25000);
	CreateDynamicObject(2690, 1355.57996, -152.06200, 969.52600,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2690, 1355.57495, -141.41901, 969.52600,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2690, 1355.60205, -141.49300, 969.52600,   0.00000, 90.00000, 269.99500);
	CreateDynamicObject(2690, 1355.60596, -152.14790, 969.52600,   0.00000, 90.00000, 269.98901);
	CreateDynamicObject(2001, 1356.10986, -142.74400, 966.51202,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1356.20605, -150.59000, 966.51801,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1366.29395, -131.24890, 966.51202,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1366.20300, -161.78200, 966.51202,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1374.82886, -141.61400, 966.51202,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2568, 1376.20703, -142.84500, 966.51202,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1379.89001, -142.48100, 966.51202,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1380.54504, -142.46890, 966.51202,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1721, 1381.21802, -142.46600, 966.51202,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1721, 1381.86804, -142.47000, 966.51202,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(1721, 1367.18994, -173.23100, 966.51703,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1721, 1367.19202, -172.64000, 966.51703,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1721, 1367.18506, -172.04201, 966.51703,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1721, 1367.18201, -171.45100, 966.51703,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2001, 1367.24194, -177.36000, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1372.97705, -166.80000, 966.51703,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1372.97485, -167.40401, 966.51703,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1372.97302, -168.00800, 966.51703,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1372.97095, -168.61200, 966.51703,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 1372.88794, -169.27800, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1372.79895, -170.00900, 966.51703,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(2001, 1367.25293, -170.66991, 966.51703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1372.86804, -177.58090, 966.51703,   0.00000, 0.00000, 0.00000);


	// ВМФ
	// CreateDynamicObject(975, 2720.62256, -2405.12280, 14.13132,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 2720.16821, -2397.94019, 15.97880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.17969, -2391.53491, 15.97880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.17627, -2385.10352, 15.63892,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.17798, -2412.78662, 15.97880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.20850, -2419.21851, 15.97880,   0.00000, 0.00000, 0.00000);
	// CreateDynamicObject(975, 2720.50098, -2503.74854, 14.13132,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 2720.26318, -2496.51440, 16.00040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.28027, -2490.08643, 16.00040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.31641, -2511.48975, 15.64612,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.33936, -2517.89819, 17.04657,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.31714, -2517.89136, 18.32606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.33057, -2517.89868, 19.56901,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.31641, -2511.48975, 16.84359,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.31641, -2511.48975, 9.93354,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.31641, -2511.48975, 18.10097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2720.31641, -2511.48975, 19.35835,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3565, 2813.89771, -2437.62866, 10.85810,   0.00000, 6.00000, 0.00000);
	CreateDynamicObject(3565, 2821.78516, -2437.61987, 9.82910,   0.00000, 9.00000, 0.00000);
	CreateDynamicObject(3565, 2803.92676, -2436.18677, 10.85810,   0.00000, 6.00000, 0.00000);
	CreateDynamicObject(3565, 2813.62720, -2437.65283, 8.30230,   -180.00000, -6.00000, 0.00000);
	CreateDynamicObject(3565, 2821.36353, -2437.64697, 7.18342,   -180.00000, -9.00000, 0.00000);

	// Управление статистики

	CreateObject(18082, 437.03143, -174.28979, 1003.06250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18084, 439.87598, -175.23854, 1001.72583,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18084, 439.89435, -172.66104, 1001.72583,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18084, 439.89639, -170.66064, 1001.72583,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11319, 440.87830, -173.19873, 1000.59332,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 435.41721, -179.88692, 1000.82092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 434.09729, -179.90927, 1000.82092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 435.50461, -169.27669, 1000.71649,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 434.63065, -172.18237, 1000.71649,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 436.48901, -172.05020, 1000.76178,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 434.46524, -176.89964, 1000.71649,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 435.77908, -176.67763, 1000.76178,   0.00000, 0.00000, 90.00000);

	// СМИ (Интерьер)

	CreateDynamicObject(14534, 1570.8916, -30.3925, 1138.8740, 0.0, 0.0, 0.0);
	CreateDynamicObject(14391, 1577.2719, -33.071, 1140.4200, 0.0, 0.0, 181.0);
	CreateDynamicObject(1714, 1577.6540, -32.708, 1139.4599, 0.0, 0.0, 0.0);
	CreateDynamicObject(1714, 1569.4069, -26.237, 1139.4680, 0.0, 0.0, 0.0);
	CreateDynamicObject(949, 1564.2010, -24.56, 1140.104, 0.0, 0.0, 0.0);
	CreateDynamicObject(949, 1564.0959, -30.903, 1134.8850, 0.0, 0.0, 0.0);
	CreateDynamicObject(2165, 1575.8349, -28.7685, 1139.4680, 0.0, 0.0, 90.0);
	CreateDynamicObject(2165, 1575.8360, -26.833, 1139.4680, 0.0, 0.0, 90.0);
	CreateDynamicObject(1714, 1576.2340, -28.132, 1139.4680, 0.0, 0.0, 270.0);
	CreateDynamicObject(1714, 1576.2089, -26.16, 1139.4680, 0.0, 0.0, 269.995);
	CreateDynamicObject(14455, 1577.4589, -24.375, 1141.1319, 0.0, 0.0, 180.0);
	CreateDynamicObject(2164, 1573.6750, -34.846, 1139.4599, 0.0, 0.0, 180.0);
	CreateDynamicObject(2162, 1578.1049, -27.29, 1139.4680, 0.0, 0.0, 270.0);
	CreateDynamicObject(2162, 1578.1080, -25.529, 1139.4680, 0.0, 0.0, 269.995);
	CreateDynamicObject(2244, 1573.927, -34.672, 1141.5830, 0.0, 0.0, 0.0);
	CreateDynamicObject(2120, 1572.7390, -31.027, 1140.0980, 0.0, 0.0, 180.0);
	CreateDynamicObject(2165, 1568.4370, -26.654, 1139.4680, 0.0, 0.0, 180.0);
	CreateDynamicObject(2165, 1570.3740, -26.668, 1139.4680, 0.0, 0.0, 179.995);
	CreateDynamicObject(1714, 1575.9799, -34.024, 1139.4599, 0.0, 0.0, 90.0);
	CreateDynamicObject(1714, 1567.8680, -26.295, 1139.4680, 0.0, 0.0, 0.0);
	CreateDynamicObject(2164, 1568.9239, -24.23, 1139.4680, 0.0, 0.0, 0.0);
	CreateDynamicObject(2164, 1567.1600, -24.223, 1139.4680, 0.0, 0.0, 0.0);
	CreateDynamicObject(2244, 1566.979, -24.417, 1141.5909, 0.0, 0.0, 0.0);
	CreateDynamicObject(1753, 1566.6090, -24.763, 1134.2490, 0.0, 0.0, 0.0);
	CreateDynamicObject(1753, 1570.3620, -25.535, 1134.2490, 0.0, 0.0, 270.0);
	CreateDynamicObject(949, 1570.5927, -24.3535, 1140.104, 0.0, 0.0, 0.0);
	CreateDynamicObject(1569, 1574.7640, -27.971, 1134.2490, 0.0, 0.0, 0.0);
	CreateDynamicObject(3851, 1563.797, -25.853, 1137.448, 0.0, 0.0, 0.0);
	CreateDynamicObject(1808, 1565.6469, -24.461, 1134.2490, 0.0, 0.0, 0.0);
	CreateDynamicObject(2568, 1576.88, -31.936, 1134.2490, 0.0, 0.0, 180.0);
	CreateDynamicObject(3851, 1578.7199, -32.441, 1135.948, 0.0, 0.0, 90.0);
	CreateDynamicObject(2236, 1563.9820, -25.065, 1134.2559, 0.0, 0.0, 0.0);
	CreateDynamicObject(2853, 1564.4079, -24.619, 1134.7619, 0.0, 0.0, 0.0);
	CreateDynamicObject(2568, 1564.2659, -30.359, 1134.2490, 0.0, 0.0, 90.0);
	CreateDynamicObject(949, 1569.6920, -24.742, 1134.8850, 0.0, 0.0, 0.0);
	CreateDynamicObject(1569, 1577.7690, -27.972, 1134.2490, 0.0, 0.0, 180.0);
	CreateDynamicObject(2898, 1569.3089, -30.48, 1140.5389, 0.0, 90.0, 90.0);
	CreateDynamicObject(367, 1570.922, -26.71, 1140.7280, 0.0, 6.25, 246.25);
	CreateDynamicObject(1897, 1570.9549, -26.902, 1139.5860, 0.0, 0.0, 344.0);
	CreateDynamicObject(367, 1566.7659, -26.924, 1140.7280, 0.0, 6.246, 295.996);
	CreateDynamicObject(1897, 1566.9179, -27.053, 1139.5860, 0.0, 0.0, 23.998);
	CreateDynamicObject(1714, 1576.0069, -32.554, 1139.4599, 0.0, 0.0, 90.0);
	CreateDynamicObject(1714, 1575.9670, -30.922, 1139.4599, 0.0, 0.0, 90.0);
	CreateDynamicObject(949, 1574.4689, -34.628, 1140.0959, 0.0, 0.0, 0.0);
	CreateDynamicObject(2120, 1574.3398, -25.1669, 1140.0980, 0.0, 0.0, 119.998);
	CreateDynamicObject(2120, 1572.7490, -31.668, 1140.0980, 0.0, 0.0, 179.995);
	CreateDynamicObject(2120, 1572.7430, -32.306, 1140.0980, 0.0, 0.0, 179.995);


	// СМИ

	CreateDynamicObject(1569, 731.97650, -1353.74548, 12.45030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 731.97650, -1350.80139, 12.45030,   0.00000, 0.00000, -90.00000);

	// ВОЕНКОМАТ

	CreateDynamicObject(14881, 322.42969, 310.05469, 1000.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(14881, 315.89413, 406.45813, 1000.02618,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4701, 323.32190, 424.07709, 1001.92841,   0.00000, -180.00000, 0.00000);
	CreateDynamicObject(4701, 326.98560, 410.25934, 998.14844,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 314.92178, 398.33832, 998.02332,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1980, 316.16721, 406.66620, 999.63971,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18084, 315.74969, 407.35895, 998.63177,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18084, 315.74969, 407.35895, 1000.95844,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 315.16605, 404.15244, 998.03809,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1714, 314.58600, 405.40326, 997.99176,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 316.74890, 402.49609, 1002.07532,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2608, 321.47183, 400.64722, 1000.03558,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2008, 318.05698, 398.88089, 998.03809,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 319.11151, 399.39771, 997.99182,   0.00000, 0.00000, -98.00000);
	CreateDynamicObject(1808, 321.51987, 402.05151, 997.99689,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2186, 321.26508, 400.04724, 997.97150,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2186, 316.64719, 406.01361, 997.97150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2737, 319.70633, 406.37421, 999.58856,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2576, 321.24496, 406.38400, 997.98071,   0.00000, 0.00000, -90.00000);

	// РЫНОК

	CreateDynamicObject(3861, 1146.70947, -1437.16602, 15.91380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3861, 1146.69617, -1443.02417, 15.91380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3861, 1146.68323, -1448.84082, 15.91380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3861, 1146.67761, -1455.08655, 15.91380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3861, 1146.67285, -1460.99060, 15.91380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3861, 1146.62732, -1466.79346, 15.91380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3861, 1110.40344, -1459.17944, 15.91380,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(3861, 1110.56348, -1466.18860, 15.91380,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(3861, 1110.38367, -1452.87939, 15.91380,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(3861, 1110.38831, -1446.70715, 15.91380,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(3861, 1110.43506, -1440.76489, 15.91380,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(3861, 1110.44226, -1434.60437, 15.91380,   0.00000, 0.00000, -270.00000);

	// ДАЛЬНОБОЙЩИКИ

	CreateObject(1569, 2444.70703, -2121.64429, 12.54573,   0.00000, 0.00000, 0.00000);

	// БУКМЕКЕРСКАЯ КОНТОРА

	CreateObject(14785, 862.94861, -33.01940, 1005.14838,   0.00000, 0.00000, 0.00000);
	CreateObject(14799, 856.98566, -35.04677, 1004.93884,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1569, 871.01837, -31.35706, 1003.16919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 871.01837, -32.83700, 1003.16919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 860.44592, -28.63823, 1003.16919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 860.44592, -30.12040, 1003.16919,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2754, 867.86377, -39.14314, 1004.03900,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2754, 870.52106, -34.80910, 1004.03900,   0.00000, 0.00000, 0.00000);

	//New meria
	CreateObject(14602, 778.03192, -18.64200, 1020.10400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14865, 765.80487, 1.49800, 1016.73492,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(3851, 759.10602, -28.67000, 1017.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 770.49902, -7.10000, 1016.13000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17526, 748.89093, -17.69500, 1020.23792,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(14455, 755.36401, -10.24400, 1016.33002,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(14455, 755.37091, -22.05900, 1016.33002,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(3851, 759.10602, -8.61700, 1017.99103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 778.75702, -12.84900, 1016.13000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9583, 758.95093, -23.03400, 1014.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9583, 758.95093, -14.44400, 1014.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17526, 748.75702, -17.74200, 1020.23792,   0.00000, 0.00000, 179.99500);
	CreateDynamicObject(9583, 758.95093, -34.33700, 1014.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9583, 758.95093, -2.84700, 1014.89893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16779, 766.00500, -18.81100, 1020.24292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16779, 773.24103, -18.81100, 1020.24292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16779, 766.00500, -26.97200, 1020.24292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16779, 766.00500, -11.23600, 1020.24292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2183, 775.79993, -9.51600, 1014.73700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 761.99591, -18.34700, 1014.66290,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2165, 760.58600, -16.41300, 1014.66302,   0.00000, 0.00000, 325.24500);
	CreateDynamicObject(2165, 761.22192, -20.68100, 1014.66302,   0.00000, 0.00000, 220.51100);
	CreateDynamicObject(2120, 776.03101, -8.95600, 1015.37500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 775.95001, -7.08000, 1015.37500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 774.22400, -7.08900, 1015.37500,   0.00000, 0.00000, 180.50000);
	CreateDynamicObject(2120, 774.22302, -8.89200, 1015.37500,   0.00000, 0.00000, 180.50000);
	CreateDynamicObject(2164, 771.96393, -2.97500, 1014.74292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 773.73102, -2.96000, 1014.74292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 775.48492, -2.96200, 1014.74292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 763.84100, 1.42900, 1014.73492,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(646, 759.94000, -22.50300, 1016.15991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 764.25092, -0.05600, 1016.15192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 778.27393, -13.64100, 1016.15302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 777.87402, -3.82000, 1016.15991,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 769.51501, -33.48900, 1016.15302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2258, 765.40802, -2.99700, 1017.53693,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 761.21692, -34.28400, 1017.95892,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2256, 762.71191, -2.97200, 1017.71002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2267, 764.58191, -34.25900, 1017.34692,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2177, 766.04401, -14.87800, 1018.24591,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2177, 766.00500, -22.35000, 1018.24591,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2177, 775.42792, -22.37500, 1018.24591,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2177, 775.44000, -14.91000, 1018.24591,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2105, 761.65002, -20.61900, 1015.94391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1753, 763.48492, -3.35200, 1014.73700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1753, 766.04303, -33.92400, 1014.73700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14742, 763.53101, 2.34900, 1016.64899,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(2164, 767.57703, 5.54000, 1014.73492,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, 766.66302, 5.54800, 1014.73492,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 769.43652, -3.84470, 1016.15302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 764.24103, 2.02300, 1014.74200,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1714, 760.32220, -18.92870, 1014.74292,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(646, 759.99701, -14.73240, 1016.15302,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2120, 768.80603, 1.52700, 1015.37292,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 762.23792, -3.14400, 1014.73700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 770.18903, -27.50800, 1014.73700,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1753, 769.89502, -28.49500, 1014.73700,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2852, 761.68292, -17.51600, 1015.46301,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2824, 759.90002, -21.51200, 1015.46301,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2202, 764.82001, 5.19400, 1014.73492,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11245, 755.14301, -17.76600, 1015.39502,   0.00000, 296.25000, 86.00000);
	CreateDynamicObject(11245, 755.11603, -18.91800, 1015.39502,   0.00000, 296.24600, 271.24500);
	CreateDynamicObject(2614, 778.96100, -18.74300, 1019.09991,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2611, 780.64600, -14.44600, 1016.36700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2611, 784.39600, -14.43300, 1016.36700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2611, 788.42291, -14.48900, 1016.36700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2568, 778.91901, -25.21300, 1014.74292,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2155, 769.79602, 1.84900, 1015.40002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2155, 769.80701, 1.02000, 1015.40002,   0.00000, 0.00000, 269.99500);
	CreateDynamicObject(1897, 764.88702, 1.39300, 1014.85992,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(367, 764.72400, 1.30000, 1015.99402,   0.00000, 3.75000, 0.00000);
	CreateDynamicObject(1253, 768.07092, -2.87200, 1017.72601,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1495, 767.28802, -2.73700, 1014.73700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 772.75092, -25.76600, 1014.73700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1498, 767.31702, -34.34000, 1014.73700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1506, 792.67291, -19.35800, 1014.73700,   0.00000, 0.00000, 90.00000);

}

public: ShowBackPackDialog(playerid, bool: view)
{
	new count;

	new fmt_str[144];
	new string[(sizeof fmt_str) * 3 + 1];

	ClearPlayerListitemValues(playerid);
	for(new idx; idx < sizeof g_backpack_info; idx ++)
	{
	    if(GetPlayerData(playerid, g_backpack_info[idx][P_DATA]) == 0) continue;

		format(fmt_str, sizeof fmt_str, "{FFFFFF}%d. %s:\t{32a44b}%d / %d\n", count + 1, g_backpack_info[idx][BP_ITEAM_NAME], GetPlayerData(playerid, g_backpack_info[idx][P_DATA]), g_backpack_info[idx][BP_MAX_QUANTITY]);
		strcat(string, fmt_str);

		SetPlayerListitemValue(playerid, count ++, idx);
	}

	if(!view)
	{
		Dialog(playerid, DIALOG_PLAYER_BACKPACK, DIALOG_STYLE_LIST, "Содержимое рюкзака", string, "Выбрать", "Закрыть");
	}
	else
	{
		if(!count)
			strcat(string, "{FFFFFF}Пусто");

		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "Содержимое рюкзака", string, "Закрыть", "");
	}
	return 1;
}

stock PlayerHealthMinus(playerid, health)
{
	new Float:HP;

	GetPlayerHealth(playerid, HP);

	SetPlayerHealthEx(playerid, (HP - health));

	if(health == 10)
 		GameTextForPlayer(playerid, "~r~check needs", 3000, 1);

	return 1;
}

stock TransferCoffersMoney(amount, description[]="null", player_info[]="null", bool:info=false)
{
	new fmt_str[256];

	new type = GetRepositoryData(REPOSITORY_TYPE_MAYOR, REPOSITORY_ACTION_COFFERS, R_AMOUNT);

	SetRepositoryData(REPOSITORY_TYPE_MAYOR, REPOSITORY_ACTION_COFFERS, R_AMOUNT, type + amount);
	UpdateRepository(REPOSITORY_TYPE_MAYOR, REPOSITORY_ACTION_COFFERS);

	format(fmt_str, sizeof fmt_str, "INSERT INTO coffers_log (amount,description, time) VALUES (%d,'%s',%d)",amount, description, gettime());
	mysql_query(mysql, fmt_str, false);

	if(info)
	{
		format(fmt_str, sizeof fmt_str, "[Казна] {FFFFFF}%s", player_info);
	//	SendClientMessageToAll(0xffff00FF, fmt_str);
	}
	return 1;
}

stock ShowPlayerDialogJobTruck(playerid, t_type)
{
	new fmt_str[560],
		truck = 0,
		truck_name[56],
		trailer_name[56],
		trailer = 0;

	switch(t_type)
	{
	    case T_MENU:
	    {
		    format(fmt_str, sizeof fmt_str, \
			"{ffff00}1. {FFFFFF}%s рабочий день\n"\
			"{ffff00}2. {FFFFFF}Удостоверение дальнобойщика\n"\
			"{ffff00}3. {FFFFFF}Получить зарплату: {%s}$%d\n"\
			"%s",
		 	!GetPlayerData(playerid, P_TRUCK_ATWORK) ? ("Начать") : ("Закончить"),
		 	!GetPlayerData(playerid, P_TRUCK_WAGE) ? ("CECECE") : ("32a44b"),
		 	GetPlayerData(playerid, P_TRUCK_WAGE),
			GetPlayerData(playerid, P_TRUCK_ID) ? ("") : ("{ffff00}3. {FFFFFF}Завершить аренду транспорта"));

			Dialog(playerid, DIALOG_TRUCK_MENU, DIALOG_STYLE_LIST, "Дальнобойщик", fmt_str, "Вперед", "Закрыть");
	    }
		case T_ORDER:
		{
			if(!GetPlayerData(playerid, P_TRUCK_ATWORK))
			{
	 			if(IsPlayerInRangeOfPoint(playerid, 100.0, 2460.0178,-2098.8237,14.1534))
				{
                    SetPlayerData(playerid, P_TRUCK_ATWORK, 1);

                    SendClientMessage(playerid, 0x32a44bFF, "Вы начали рабочий день, теперь Вы можете арендовать грузовик");
				}
				else  return SendClientMessage(playerid, 0xCECECEFF, "[Ошибка] {FFFFFF}Для того чтобы начать рабочий день, необходимо находится на базе");
			}
			else
			{
			    SetPlayerData(playerid, P_TRUCK_ATWORK, 0);

			    SendClientMessage(playerid, 0xCECECEFF, "Вы завершили рабочий день");

				if(!(!GetPlayerData(playerid, P_TRUCK_ID)))
				{
					new vehicleid = GetPlayerData(playerid, P_TRUCK_ID);

					if(vehicleid != INVALID_VEHICLE_ID)
					{
                        DestroyVehicle(GetPlayerData(playerid, P_TRUCK_ID));
					}

					SetPlayerData(playerid, P_TRUCK_ID, INVALID_VEHICLE_ID);

					SendClientMessage(playerid, 0xCECECEFF, "Грузовик который Вы арендовали был отбуксирован на базу");
				}
				if(!(!GetPlayerData(playerid, P_TRAILER_ID)))
				{
					new vehicleid = GetPlayerData(playerid, P_TRAILER_ID);

					if(vehicleid != INVALID_VEHICLE_ID)
					{
						DestroyVehicle(GetPlayerData(playerid, P_TRAILER_ID));
					}

					SetPlayerData(playerid, P_TRAILER_ID, INVALID_VEHICLE_ID);

					SendClientMessage(playerid, 0xCECECEFF, "Трейлер, забрал другой водитель");
					DisablePlayerRaceCheckpoint(playerid);
				}
			}
		}
 		case T_PASSPORT:
		{
		    if(GetPlayerData(playerid, P_TRUCK_ID) != INVALID_VEHICLE_ID)
		    {
			 	truck = GetVehicleModel(GetPlayerData(playerid, P_TRUCK_ID)) - 400;

			 	if(truck < 0)
			 	    return truck = 0;

				format(truck_name, sizeof truck_name, GetVehicleInfo(truck, VI_NAME));
			}

            if(GetPlayerData(playerid, P_TRAILER_ID) != INVALID_VEHICLE_ID)
		    {
				trailer = GetVehicleModel(GetPlayerData(playerid, P_TRAILER_ID)) - 400;

				if(trailer < 0)
			 	    return trailer = 0;

				format(trailer_name, sizeof trailer_name, GetVehicleInfo(trailer, VI_NAME));
			}

		    format(fmt_str, sizeof fmt_str, \
			"{FFFFFF}Центральная автобаза г.Los-Santos\n\n"\
			"{FFFFFF}Имя дальнобойщик:\t\t{ffff00}%s\n"\
			"{FFFFFF}Прозвище:\t\t\t{32a44b}%s\n\n"\
			"{FFFFFF}Уровень:\t\t\t%d\n"\
			"{FFFFFF}Опыт работника:\t\t%d/100\n"\
			"{FFFFFF}Всего доставок:\t\t%d\n"\
			"{FFFFFF}Пройдено пути:\t\t%.1f км.\n\n"\
			"{FFFFFF}Автомобиль:\t\t\t%s\n"\
			"{FFFFFF}Прицеп:\t\t\t%s",
		 	GetPlayerNameEx(playerid),
		 	trucker_rank_name[GetPlayerData(playerid, P_TRUCK_ROAD) / 100],
		 	(GetPlayerData(playerid, P_TRUCK_ROAD) / 100) + 1,
		 	GetPlayerData(playerid, P_TRUCK_ROAD) - ((GetPlayerData(playerid, P_TRUCK_ROAD) / 100)),
		 	GetPlayerData(playerid, P_TRUCK_ROAD),
		 	GetPlayerData(playerid, P_TRUCK_MILEAGE),
		 	!truck ? ("{CECECE}Отсутствует") : truck_name,
   		 	!trailer ? ("{CECECE}Отсутствует") : trailer_name);

			Dialog(playerid, DIALOG_TRUCK_PASS, DIALOG_STYLE_MSGBOX, "Удостоверение дальнобойщика", fmt_str, "Назад", "Закрыть");
		}
		case T_WAGE:
		{
		    format(fmt_str, sizeof fmt_str, \
			"{FFFFFF}Вам удалось заработать {32a44b}$%d\n"\
			"{FFFFFF}Вы хотите получить их?", GetPlayerData(playerid, P_TRUCK_WAGE));

			Dialog(playerid, DIALOG_TRUCK_WAGE, DIALOG_STYLE_MSGBOX, "Зарплата", fmt_str, "Да", "Нет");
		}
		case T_RESPV:
		{
			if(!(!GetPlayerData(playerid, P_TRUCK_ID)))
			{
				new vehicleid = GetPlayerData(playerid, P_TRUCK_ID);

				if(vehicleid != INVALID_VEHICLE_ID)
				{
                    DestroyVehicle(GetPlayerData(playerid, P_TRUCK_ID));
				}
			}
			if(!(!GetPlayerData(playerid, P_TRAILER_ID)))
			{
				new vehicleid = GetPlayerData(playerid, P_TRAILER_ID);

				if(vehicleid != INVALID_VEHICLE_ID)
				{
					DestroyVehicle(GetPlayerData(playerid, P_TRAILER_ID));
				}
			}

			SetPlayerData(playerid, P_TRUCK_ID, INVALID_VEHICLE_ID);
			SetPlayerData(playerid, P_TRAILER_ID, INVALID_VEHICLE_ID);

			SendClientMessage(playerid, 0xffff00FF, "Рабочий транспорт был выгружен с сервера");
		}
		default: SendClientMessage(playerid, 0xCECECEFF, "[Ошибка] {FFFFFF}Обратитесь к администрации.");
	}

	return 1;
}

/*stock UpdateBet()
{
	new query[760],
		fmt_text[144],
		Cache: result,
		id;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM bet WHERE status=0");
	result = mysql_query(mysql, query, true);

	new rows = cache_num_rows();

	new minute,
		comand_1,
		comand_2,
		status;

	for(new i = 0; i < rows; i ++)
	{
	    id = cache_get_field_content_int(i, "id");
 		comand_1 = cache_get_field_content_int(i, "comand_1") - 1;
		comand_2 = cache_get_field_content_int(i, "comand_2") - 1;
		minute = cache_get_field_content_int(i, "minute");
		status = cache_get_field_content_int(i, "status");

		if(minute == 0) continue;
		if(status == 1) continue;

		if(minute > 1)
		{
			format(query, sizeof query, "UPDATE bet SET `minute`=%d WHERE id=%d", minute - 1, id);
			mysql_query(mysql, query, false);
		}
		else
		{
			new rand = random(2),
				win_comand;

		    switch(rand)
		    {
		        case 0: win_comand = comand_1;
		        case 1: win_comand = comand_2;
		    }

		    format(fmt_text, sizeof fmt_text, "В матче {FFFFFF}%s - %s. {ffff00}Победила комада: {FFFFFF}%s",\
			g_football_info[comand_1][FB_COMAND_NAME],
			g_football_info[comand_2][FB_COMAND_NAME],
			g_football_info[win_comand][FB_COMAND_NAME]);
			SendClientMessageToAll(0xffff00FF, fmt_text);

			format(query, sizeof query, "UPDATE bet SET `status`=1, `win_comand`=%d WHERE id=%d", win_comand, id);
			mysql_query(mysql, query, false);
		}
	}

	cache_delete(result);

	return 1;
}
*/
forward NeedEatPlayer(playerid);
public NeedEatPlayer(playerid)
{
	if(GetPlayerData(playerid, P_HOSPITAL) == false)
	{
			new fmt_str[256];
            if(GetPlayerData(playerid, P_NEED_WATER) < 0)
			{
			    SendClientMessage(playerid,-1,"Тест");
			    SetPlayerData(playerid, P_NEED_WATER, 1);
			}
		    if((50 <= GetPlayerData(playerid, P_NEED_EAT) <= 90))
		    {
		        PlayerHealthMinus(playerid, 1);
		        AddPlayerData(playerid, P_NEED_EAT, -, 1);
		    }
		    else if((25 <= GetPlayerData(playerid, P_NEED_EAT) <= 50))
		    {
		        PlayerHealthMinus(playerid, 2);
		        AddPlayerData(playerid, P_NEED_EAT, -, 2);
		        SendClientMessage(playerid, 0x00FA9AFF, "Вы истощены! Ваше здоровье ухудшается! Посетите закусочную. {ffff00}( статистика /need )");

		        SetPlayerChatBubble(playerid, "Хочет есть", 0xDD90FFFF, 25.0, 5000);

				format(fmt_str, sizeof fmt_str, "Хочет есть (%s)", GetPlayerNameEx(playerid));
				SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
		    }
		    else if((15 <= GetPlayerData(playerid, P_NEED_EAT) <= 25))
		    {
		        PlayerHealthMinus(playerid, 3);
		        AddPlayerData(playerid, P_NEED_EAT, -, 3);
		        SendClientMessage(playerid, 0x00FA9AFF, "Вы истощены! Ваше здоровье сильно ухудшается! Посетите закусочную. {ffff00}( статистика /need )");

		        SetPlayerChatBubble(playerid, "Хочет есть", 0xDD90FFFF, 25.0, 5000);

				format(fmt_str, sizeof fmt_str, "Хочет есть (%s)", GetPlayerNameEx(playerid));
				SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
		    }
		    else if((GetPlayerData(playerid, P_NEED_EAT)) <= 15)
		    {
		        PlayerHealthMinus(playerid, 8);
		        AddPlayerData(playerid, P_NEED_EAT, -, 4);
		        SendClientMessage(playerid, 0x00FA9AFF, "Вы истощены! Ваше здоровье сильно ухудшается! Посетите закусочную. {ffff00}( статистика /need )");

		        SetPlayerChatBubble(playerid, "Хочет есть", 0xDD90FFFF, 25.0, 5000);

				format(fmt_str, sizeof fmt_str, "Хочет есть (%s)", GetPlayerNameEx(playerid));
				SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
		    }
   			else if((GetPlayerData(playerid, P_NEED_EAT)) <= 0)
		    {
		        PlayerHealthMinus(playerid, 10);
		        SetPlayerData(playerid, P_NEED_EAT, 0);
		        SendClientMessage(playerid, 0x00FA9AFF, "Вы истощены! Ваше здоровье сильно ухудшается! Посетите закусочную. {ffff00}( статистика /need )");

		        SetPlayerChatBubble(playerid, "Хочет есть ( pzdc )", 0xDD90FFFF, 25.0, 5000);

				format(fmt_str, sizeof fmt_str, "Хочет есть (%s)  ( pzdc )", GetPlayerNameEx(playerid));
				SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
		    }
			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET eat=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_EAT), GetPlayerAccountID(playerid));
			mysql_query(mysql, fmt_str, false);
	}
	return 0;
}

forward NeedWaterPlayer(playerid);
public NeedWaterPlayer(playerid)
{
	if(GetPlayerData(playerid, P_HOSPITAL) == false)
	{
			new fmt_str[256];
			if(GetPlayerData(playerid, P_NEED_WATER) < 0)
			{
			    SendClientMessage(playerid,-1,"Тест");
			    SetPlayerData(playerid, P_NEED_WATER, 1);
			}
		    if((50 <= GetPlayerData(playerid, P_NEED_WATER) <= 90))
		    {
		        AddPlayerData(playerid, P_NEED_WATER, -, 5);
		        PlayerHealthMinus(playerid, 1);
		        return 1;
		    }
		    else if((25 <= GetPlayerData(playerid, P_NEED_WATER) <= 50))
		    {
		        AddPlayerData(playerid, P_NEED_WATER, -, 2);
		        SendClientMessage(playerid, 0x00FA9AFF, "Вы обезвожены! Ваше здоровье ухудшается! Посетите закусочную. {ffff00}( статистика /need )");
		        PlayerHealthMinus(playerid, 2);

		        SetPlayerChatBubble(playerid, "Хочет пить", 0xDD90FFFF, 25.0, 5000);

				format(fmt_str, sizeof fmt_str, "Хочет пить (%s)", GetPlayerNameEx(playerid));
				SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
				return 1;
		    }
		    else if((10 <= GetPlayerData(playerid, P_NEED_WATER) <= 25))
		    {
		        AddPlayerData(playerid, P_NEED_WATER, -, 3);
		        SendClientMessage(playerid, 0x00FA9AFF, "Вы обезвожены! Ваше здоровье сильно ухудшается! Посетите закусочную. {ffff00}( статистика /need )");
		        PlayerHealthMinus(playerid, 3);

		        SetPlayerChatBubble(playerid, "Хочет пить", 0xDD90FFFF, 25.0, 5000);

				format(fmt_str, sizeof fmt_str, "Хочет пить (%s)", GetPlayerNameEx(playerid));
				SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
				return 1;
		    }
		    else if((GetPlayerData(playerid, P_NEED_WATER) <= 10))
		    {
		        SendClientMessage(playerid, 0x00FA9AFF, "Вы обезвожены! Ваше здоровье сильно ухудшается! Посетите закусочную. {ffff00}( статистика /need )");
		        PlayerHealthMinus(playerid, 8);
		        AddPlayerData(playerid, P_NEED_WATER, -, 4);

      		    SetPlayerChatBubble(playerid, "Хочет пить", 0xDD90FFFF, 25.0, 5000);

				format(fmt_str, sizeof fmt_str, "Хочет пить (%s)", GetPlayerNameEx(playerid));
				SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
				return 1;
		    }
		    else if((GetPlayerData(playerid, P_NEED_WATER) <= 0))
		    {
		        SendClientMessage(playerid, 0x00FA9AFF, "Вы обезвожены! Ваше здоровье сильно ухудшается! Посетите закусочную. {ffff00}( статистика /need )");
		        PlayerHealthMinus(playerid, 12);
		        SetPlayerData(playerid, P_NEED_WATER, 0);

      		    SetPlayerChatBubble(playerid, "Хочет пить", 0xDD90FFFF, 25.0, 5000);

				format(fmt_str, sizeof fmt_str, "Хочет пить (%s)", GetPlayerNameEx(playerid));
				SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
				return 1;
		    }
			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET water=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_NEED_WATER), GetPlayerAccountID(playerid));
			mysql_query(mysql, fmt_str, false);
	}
	return 0;
}

forward SpeedCarGo(playerid);
public SpeedCarGo(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid),
		max_speed = 180,
		vehicle_speed = GetPlayerSpeed(playerid);

	if(vehicle_speed < max_speed)
	{
	    SetVehicleSpeedTT(vehicleid, vehicle_speed + GetPVarInt(playerid, "multi"));
	}
}

stock SendClientMessageTip(playerid, text[]="None")
{
	new fmt_str[144];

	format(fmt_str, sizeof fmt_str, "• [Подсказка] {FFFFFF}%s", text);
	SendClientMessage(playerid, 0xffff00FF, fmt_str);

	return 1;
}

stock CreateTextDraws()
{


	server_logo_TD[0] = TextDrawCreate(582.5242, 21.9999, "Mobile");
	TextDrawLetterSize(server_logo_TD[0], 0.3044, 1.2908);
	TextDrawAlignment(server_logo_TD[0], 1);
	TextDrawColor(server_logo_TD[0], 0xFFFFFFFF);
	TextDrawBackgroundColor(server_logo_TD[0], 255);
	TextDrawFont(server_logo_TD[0], 1);
	TextDrawSetProportional(server_logo_TD[0], 1);
	TextDrawSetShadow(server_logo_TD[0], 0);

	server_logo_TD[1] = TextDrawCreate(585.3349, 10.9166, "SAMP");
	TextDrawLetterSize(server_logo_TD[1], 0.2636, 1.2208);
	TextDrawAlignment(server_logo_TD[1], 1);
	TextDrawColor(server_logo_TD[1], 0xFFFFFFFF);
	TextDrawBackgroundColor(server_logo_TD[1], 255);
	TextDrawFont(server_logo_TD[1], 1);
	TextDrawSetProportional(server_logo_TD[1], 1);
	TextDrawSetShadow(server_logo_TD[1], 0);

	server_logo_TD[2] = TextDrawCreate(579.2443, 17.3333, "-");
	TextDrawLetterSize(server_logo_TD[2], 2.8016, 0.9116);
	TextDrawAlignment(server_logo_TD[2], 1);
	TextDrawColor(server_logo_TD[2], 0xffff00FF);
	TextDrawBackgroundColor(server_logo_TD[2], 255);
	TextDrawFont(server_logo_TD[2], 1);
	TextDrawSetProportional(server_logo_TD[2], 1);
	TextDrawSetShadow(server_logo_TD[2], 0);

	print("[TextDraw]: Все текстдравы созданы");
}

stock SetVehicleSpeedTT(vehicleid, Float:speed)
{
    new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:a;
    GetVehicleVelocity(vehicleid, x1, y1, z1);
    GetVehiclePos(vehicleid, x2, y2, z2);
    GetVehicleZAngle(vehicleid, a); a = 360 - a;
    x1 = (floatsin(a, degrees) * (speed/100) + floatcos(a, degrees) * 0 + x2) - x2;
    y1 = (floatcos(a, degrees) * (speed/100) + floatsin(a, degrees) * 0 + y2) - y2;
    SetVehicleVelocity(vehicleid, x1, y1, z1);
}
public: GetPlayerPrise(playerid)
{
    GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_CASE), "Открытие кейса", true);
	new fmt_text[256];
    switch(random(27))
	{
		case 0..4:
		{
			AddPlayerData(playerid, P_BANK, +, 20000),SendClientMessage(playerid,0x66CC00FF,"Поздравляем вы выиграли {FFFF00} 20.000$");
			SendClientMessage(playerid,-1,"{6d6d6d} Деньги зачислены на основной банковский счет");
			return 1;
		}
		case 5..7:
		{
			AddPlayerData(playerid, P_BANK, +, 25000);
			SendClientMessage(playerid,0x66CC00FF,"Поздравляем вы выиграли {FFFF00} 25.000$");
			SendClientMessage(playerid,-1,"{6d6d6d} Деньги зачислены на основной банковский счет");
			return 1;
		}
		case 8..10:
		{
			AddPlayerData(playerid, P_BANK, +, 30000);
			SendClientMessage(playerid,0x66CC00FF,"Поздравляем вы выиграли {FFFF00} 30.000$");
			SendClientMessage(playerid,-1,"{6d6d6d} Деньги зачислены на основной банковский счет");
			return 1;
		}
		case 11..20:
		{
			AddPlayerData(playerid, P_BANK, +, 5000);
			SendClientMessage(playerid,0x66CC00FF,"Поздравляем вы выиграли {FFFF00} 5.000$");
			SendClientMessage(playerid,-1,"{6d6d6d} Деньги зачислены на основной банковский счет");
			return 1;
		}
		case 21..22:
		{
			AddPlayerData(playerid, P_DONATE_CURRENT, +, 100);
			SendClientMessage(playerid,0x66CC00FF,"Поздравляем вы выиграли {FFFF00}100 Донат рублей!");
			return 1;
		}
		case 23..24:
		{
		    AddPlayerData(playerid, P_CAR_SLOTS, +, 1);
			UpdatePlayerDatabaseInt(playerid, "car_slots", GetPlayerData(playerid, P_CAR_SLOTS));
			GivePlayerDonate(playerid, -GetDonatePrice(DONATE_PRICE_CAR_SLOT), "Покупка слота для транспорта", true);
			format(fmt_text, sizeof fmt_text, "Вы выиграли слот для транспорта. Текущее количество слотов: %d",
			GetPlayerData(playerid, P_CAR_SLOTS));
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);
			return 1;
		}
		case 25..26:
		{
		    new premium = GetPlayerPremium(playerid);
      		if(!premium)
        	{
         		SetPlayerData(playerid, P_PREMIUM, 1);
         		SetPlayerData(playerid, P_PREMIUM_DATE, gettime() + 30 * 86400);
			}
			else
			{
   				AddPlayerData(playerid, P_PREMIUM_DATE, +, 30 * 86400);
			}

			new prem_day,
   			prem_month,
   			prem_year;

			timestamp_to_date(GetPlayerData(playerid, P_PREMIUM_DATE), prem_year, prem_month, prem_day);

			format(fmt_text, sizeof fmt_text, "Вы успешно выиграли {EC174F} VIP Silver {FFFFFF}до {EC174F}%02d.%02d.%d", prem_day, prem_month, prem_year);
			SendClientMessage(playerid, -1, fmt_text);
			UpdatePlayerDatabaseInt(playerid, "premium_date", GetPlayerData(playerid, P_PREMIUM_DATE));
			UpdatePlayerDatabaseInt(playerid, "premium", 1);
			return 1;
		}
 	}
	return false;
}
stock ShowPerformanceItem(playerid, item_type = PT_ITEM_TYPE_NONE)
{
	if(item_type == PT_ITEM_TYPE_NONE)
		return 0;

    new vehicleid = GetPlayerOwnableCar(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	    return 0;

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	new pt_engine = GetOwnableCarData(index, OC_PT_ENGINE),
	    pt_brake = GetOwnableCarData(index, OC_PT_BRAKE),
	    pt_stability = GetOwnableCarData(index, OC_PT_STABILITY);

	new fmt_text[128],
		fmt_dialog[128 * 5];

	for(new idx; idx < 5; idx ++)
	{
	    // if(GetOwnableCarData(index, OC_PT_ENGINE) > idx)

        format(fmt_text, sizeof fmt_text, "{FFFFFF}%d. ", idx + 1);

		new price,
		    item_level;

		switch(item_type)
		{
			case PT_ITEM_TYPE_ENGINE:
			{
				strcat(fmt_text, engine_ptune[idx]);

				price = engine_ptune_price[idx];
				item_level = pt_engine;
			}
			case PT_ITEM_TYPE_BRAKE:
			{
			    strcat(fmt_text, brake_ptune[idx]);

			    price = brake_ptune_price[idx];
			    item_level = pt_brake;
			}
			case PT_ITEM_TYPE_STABILITY:
			{
			    strcat(fmt_text, stability_ptune[idx]);

			    price = stability_ptune_price[idx];
			    item_level = pt_stability;
			}

			default:
			    return 0;
		}

		if(item_level > idx)
			format(fmt_text, sizeof fmt_text, "%s {FFCD00}[Установлено]", fmt_text);

		else
		    format(fmt_text, sizeof fmt_text, "%s {66CC33}[$%d]", fmt_text, price);

		if(idx > 2)
		    strcat(fmt_text, " {EC174F}[VIP Gold]\n");

		else
		    strcat(fmt_text, "\n");

		strcat(fmt_dialog, fmt_text);
	}

	new dialog_title[3][23] = {"Улучшения двигателя", "Улучшения тормозов", "Улучшения устойчивости"};

	Dialog(playerid, DIALOG_OWNABLE_CAR_PT_ITEM, DIALOG_STYLE_LIST, dialog_title[item_type - 1], fmt_dialog, "Выбрать", "Отмена");

	SetPVarInt(playerid, "pt_item_type", item_type);

	return 1;
}
public: SpeedBooster()
{
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(!IsPlayerDriver(playerid)) continue;

		new vehicleid = GetPlayerVehicleID(playerid);

		if(vehicleid == INVALID_VEHICLE_ID)
		    continue;

		if(!IsAOwnableCar(vehicleid))
		    continue;

		new index = GetVehicleData(vehicleid, V_ACTION_ID);

		new Float:_coord [ 3 ];
		GetVehicleVelocity ( vehicleid,_coord[0],_coord[1],_coord[2]);
		new Float:v_speed = floatsqroot(floatpower(floatabs(_coord[0]), 2.0) + floatpower(floatabs(_coord[1]), 2.0) + floatpower(floatabs(_coord[2]), 2.0)) * 100.3  ;
		new Float:veh_health_now ;
		GetVehicleHealth( vehicleid,veh_health_now  ) ;
		GetVehicleRotation ( vehicleid, _coord [ 0 ],_coord[1],_coord[2]);

		new Float: engine_boost,
		    Float: brake_boost;

		for(new idx; idx < GetOwnableCarData(index, OC_PT_ENGINE); idx ++)
		    engine_boost += engine_ptune_boost[idx];

		for(new idx; idx < GetOwnableCarData(index, OC_PT_BRAKE); idx ++)
		    brake_boost += brake_ptune_boost[idx];

		if(vehicleid != 0)
		{
			if( veh_health_now - GetVehicleData(vehicleid, V_HEALTH) == 0 )
			{
				if ( engine_boost > 0 )// ( _z_angle - vehicle_old_z_angle[vehicleid - 1] < 0.1 && _z_angle - vehicle_old_z_angle[vehicleid - 1] > - 0.1 )
				{
					if ( v_speed > 30 && ! IsVehicleDrivingBackwards ( vehicleid ) && ( _coord[2] - vehicle_old_z_angle[vehicleid - 1] < 1 && _coord[2] - vehicle_old_z_angle[vehicleid - 1] > - 1 ) )
					{
						if( GetVehicleSpeed ( vehicleid ) < max_veh_speed [ GetVehicleModel ( vehicleid ) - 400 ] - 50 && 30 > _coord [ 0 ] > - 30 && 15 > _coord [ 1 ] > - 15 )
						{
							if ( v_speed - vehicle_old_speed[vehicleid - 1] < 3 && v_speed - vehicle_old_speed[vehicleid - 1] > 0.6 )
							{
								SetVehicleSpeed ( vehicleid, v_speed + engine_boost * 20 ) ; // *5
								vehicle_old_z_angle[vehicleid - 1] = _coord[2] ;
							}
						}
						else
						{
							if ( v_speed - vehicle_old_speed[vehicleid - 1] < 3 && v_speed - vehicle_old_speed[vehicleid - 1] >= -1.5 && GetVehicleSpeed ( vehicleid ) < max_veh_speed [ GetVehicleModel ( vehicleid ) - 400 ] - 50 + engine_boost * 180 )
							{
								if (  30 > _coord [ 0 ] > - 30 && 15 > _coord [ 1 ] > - 15 )
								{
									SetVehicleSpeed ( vehicleid, v_speed + engine_boost * 15 ) ; // *2
									vehicle_old_z_angle[vehicleid - 1] = _coord[2] ;
								}
							}
						}
						vehicle_old_speed[vehicleid - 1] = v_speed ;
					}
				}
				if ( brake_boost > 0 )
				{
					if ( vehicle_old_speed[vehicleid - 1] > 40 && ( _coord[2] - vehicle_old_z_angle[vehicleid - 1] < 0.3 && _coord[2] - vehicle_old_z_angle[vehicleid - 1] > - 0.3 ) && 1000 >= GetTickCount() - player_holding_key_down [ playerid ] >= 150 )
					{
						SetVehicleSpeed ( vehicleid, v_speed - brake_boost * 2 ) ;
						vehicle_old_z_angle[vehicleid - 1] = _coord[2] ;
					}
					vehicle_old_speed[vehicleid - 1] = v_speed ;
				}
			}
			vehicle_old_z_angle[vehicleid - 1] = _coord[2] ;
			SetVehicleData(vehicleid, V_HEALTH, veh_health_now) ;
			vehicle_old_speed[vehicleid - 1] = v_speed ;
		}
	}
}
stock ShowVehicleImproveDialog(playerid = INVALID_PLAYER_ID, vehicle_type = 1) // VEHICLE_TYPE_OWNABLE_CAR)
{
	if(playerid == INVALID_PLAYER_ID)
	    return 0;

	if(!vehicle_type)
	    return 0;

	new vehicleid = GetPlayerOwnableCar(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	    return 0;

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	new pt_engine = GetOwnableCarData(index, OC_PT_ENGINE),
	    pt_brake = GetOwnableCarData(index, OC_PT_BRAKE),
	    pt_stability = GetOwnableCarData(index, OC_PT_STABILITY);

	new fmt_text[128];

	format
	(
	    fmt_text,
	    sizeof fmt_text,
	    "{FFFFFF}1. Улучшения двигателя [%d/5]\n"\
	    "2. Улучшения тормозной системы [%d/5]\n"\
	    "3. Улучшения устойчивости [%d/5]",
	    pt_engine, pt_brake, pt_stability
	);

	Dialog(playerid, DIALOG_OWNABLE_CAR_PT, DIALOG_STYLE_LIST, "Performance Tuning", fmt_text, "Выбрать", "Отмена");

	return 1;
}
stock GetVehicleRotation(vehicleid,&Float:rx,&Float:ry,&Float:rz){
	new Float:qw,Float:qx,Float:qy,Float:qz;
	GetVehicleRotationQuat(vehicleid,qw,qx,qy,qz ) ;
	rx = asin(2*qy*qz-2*qx*qw ) ;
	ry = -atan2(qx*qz+qy*qw,0.5-qx*qx-qy*qy ) ;
	rz = -atan2(qx*qy+qz*qw,0.5-qx*qx-qz*qz ) ;
}
stock IsVehicleDrivingBackwards ( vehicleid )
{
    new Float:float_var [ 3 ] ;
    if(GetVehicleVelocity(vehicleid, float_var [ 1 ], float_var [ 2 ], float_var [ 0 ] ) )
	{
        GetVehicleZAngle ( vehicleid, float_var[0] ) ;
        if(float_var[0] < 90) {
            if(float_var[1] > 0 && float_var[2] < 0) return 1;
        }
        else if(float_var[0] < 180) {
            if(float_var[1] > 0 && float_var[2] > 0) return 1;
        }
        else if(float_var[0] < 270) {
            if(float_var[1] < 0 && float_var[2] > 0) return 1;
        }
        else if(float_var[1] < 0 && float_var[2] < 0) return 1;
    }
    return 0;
}
stock SetBusinessName(bizid,name[])
{
		new query[128];
    	mysql_format(mysql, query, sizeof query, "UPDATE business SET name='%e' WHERE id=%d LIMIT 1", name, bizid+1);
		mysql_query(mysql, query, false);
		format(g_business[bizid][B_NAME], 30, name);
		CallLocalFunction("UpdateBusinessLabel", "i", bizid);
		return 1;
}
stock SetBoardName(bizid,name[])
{
		new query[256];
    	mysql_format(mysql, query, sizeof query, "UPDATE board SET text='%e',owner = %d WHERE id=%d LIMIT 1", name, GetBoardData(bizid, B_OWNER), bizid);
		mysql_query(mysql, query, false);
		format(g_board[bizid][B_TEXT], 100, name);
		CallLocalFunction("UpdateBoardLabel", "i", bizid);
		return 1;
}
stock ClearBoardRent()
{
	printf("Чисто board");
	mysql_query(mysql, "UPDATE board SET owner='-1' WHERE 1", false);
	for(new idx; idx < g_board_created; idx ++)
	{
	    SetBoardData(idx, B_OWNER, -1);
        CallLocalFunction("UpdateBoardLabel", "i", idx);
        return false;
	}
	return 1;
}
stock LoadShlak()
{
	for(new idx = 0; idx < 4; idx ++)
	{
    	g_shlak[idx][S_OBJ] = CreateDynamicObject
		(
			g_shlak[idx][S_MODEL],
			g_shlak[idx][S_CLOSED][0], g_shlak[idx][S_CLOSED][1], g_shlak[idx][S_CLOSED][2],g_shlak[idx][S_CLOSED][3],
			g_shlak[idx][S_CLOSED][4],g_shlak[idx][S_CLOSED][5]
		);
		new fmt_text[82];
		format(fmt_text, sizeof fmt_text, "- %s -\n{FFFFFF}Открытие шлагбаума с помощью *гудка* ( /open )",g_shlak[idx][S_NAME]);
		CreateDynamic3DTextLabel(fmt_text, 0x1E90FFFF, 	g_shlak[idx][S_CLOSED][0], g_shlak[idx][S_CLOSED][1], g_shlak[idx][S_CLOSED][2], 10.0);

	}
	return 1;
}
public: ClosedShlak(id)
{
    g_shlak[id][STATUS] = 1;
    DestroyDynamicObject(g_shlak[id][S_OBJ]);
    g_shlak[id][S_OBJ] = CreateDynamicObject
	(
		g_shlak[id][S_MODEL],
		g_shlak[id][S_CLOSED][0], g_shlak[id][S_CLOSED][1], g_shlak[id][S_CLOSED][2],g_shlak[id][S_CLOSED][3],
		g_shlak[id][S_CLOSED][4],g_shlak[id][S_CLOSED][5]
	);
	return 0;
}
stock Fortune(playerid,cash)
{
	new fmt_text[256];
	if(GetPlayerMoneyEx(playerid) < cash) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} У вас не достаточно средств!");
    GivePlayerMoneyEx(playerid, -cash, "Прокрутка рулетки", true);
    switch(random(14))
	{
		case 0..12:
		{
   			GivePlayerMoneyEx(playerid,  cash*random(2)/10, "Выигрыш в рулетке");
			format(fmt_text, sizeof(fmt_text), "Поздравляем вы выиграли {D6325B} %d $",cash*random(2)/10);
			SendClientMessage(playerid,-1,fmt_text);
			return 1;
		}
		case 13:
		{
		    new prise = cash*(random(4)+1)/10;
			GivePlayerMoneyEx(playerid, prise, "Выигрыш в рулетке");
			format(fmt_text, sizeof(fmt_text), "Поздравляем вы выиграли {D6325B} %d $",prise);
			SendClientMessage(playerid,-1,fmt_text);
			return 1;
		}
		case 14:
		{
			AddPlayerData(playerid, P_DONATE_CURRENT, +, cash/20000);
			format(fmt_text, sizeof(fmt_text), "Поздравляем вы выиграли {D6325B} %d Донат рублей",cash/20000);
			SendClientMessage(playerid,-1,fmt_text);
			return 1;
		}
 	}
 	return 1;
 }
stock CreateMebel(type,vw)
{
	if(type == 0)
	{
		CreateDynamicObject(2088, 248.79466, 311.45947, 998.12659,   0.00000, 0.00000, -90.00000, vw + 2000);
		CreateDynamicObject(14860, 246.77840, 308.76450, 1000.28003,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(1741, 248.86520, 313.60849, 997.82440,   0.00000, 0.00000, -90.00000, vw + 2000);
		CreateDynamicObject(1741, 249.39832, 309.06125, 998.14063,   0.00000, 0.00000, 180.00000, vw + 2000);
		CreateDynamicObject(14861, 246.50259, 309.34180, 998.54688,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(14862, 246.31850, 307.94559, 998.83588,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(2103, 249.85811, 310.90161, 1000.04919,   0.00000, 0.00000, -90.00000, vw + 2000);
		CreateDynamicObject(1569, 243.58180, 311.42099, 998.14941,   0.00000, 0.00000, 90.00000, vw + 2000);
		CreateDynamicObject(1734, 247.38983, 310.70874, 1002.11719,   0.00000, 0.00000, 0.00000, vw + 2000);
	}
	if(type == 1)
    {
    	CreateDynamicObject(14745, 2463.61841, -1717.85791, 1011.14221,   0.00000, 0.00000, -90.00000, vw + 2000);
		CreateDynamicObject(14741, 2450.70190, -1716.26758, 1010.84460,   0.00000, 0.00000, 90.00000, vw + 2000);
	}
	if(type == 2)
	{
		CreateDynamicObject(1703, 2323.99536, -1159.04443, 1049.47656,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(1703, 2322.91235, -1162.32825, 1049.47656,   0.00000, 0.00000, 90.00000, vw + 2000);
		CreateDynamicObject(1703, 2327.08472, -1160.30042, 1049.47656,   0.00000, 0.00000, -90.00000, vw + 2000);
		CreateDynamicObject(1822, 2324.42651, -1161.92822, 1049.48438,   356.85840, 0.00000, 3.14159, vw + 2000);
		CreateDynamicObject(2257, 2321.11523, -1153.54077, 1053.82813,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(2254, 2328.19019, -1153.54834, 1054.06250,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(1502, 2335.19556, -1156.89001, 1053.28906,   0.00000, 0.00000, -90.00000, vw + 2000);
		CreateDynamicObject(2298, 2337.63257, -1157.92346, 1053.28125,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(2106, 2340.20508, -1154.23328, 1053.80469,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(2106, 2337.54663, -1154.15503, 1053.80469,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(15050, 2330.89380, -1159.20496, 1051.91125,   0.00000, 0.00000, -90.00000, vw + 2000);
		CreateDynamicObject(2088, 2339.81689, -1160.33716, 1053.27344,   0.00000, 0.00000, 180.00000, vw + 2000);
		CreateDynamicObject(1567, 2332.40112, -1163.76563, 1053.32910,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(1567, 2314.74756, -1158.51587, 1053.32910,   0.00000, 0.00000, 90.00000, vw + 2000);
		CreateDynamicObject(1594, 2315.03320, -1163.69287, 1050.12305,   0.00000, 0.00000, 0.00000, vw + 2000);
		CreateDynamicObject(1569, 2332.58936, -1163.56494, 1049.71997,   0.00000, 0.00000, 0.00000, vw + 2000);
	}
 	return 1;
}
stock DrivingExam(playerid)
{
	if(GetPVarInt(playerid, "driving_a"))
 	{
    	SetPlayerData(playerid, P_EXAM_CAR, CreateVehicle(461, -2044.9877, -108.9785, 35.2491, 180.0000, -1, -1, 100,0,VEHICLE_ACTION_TYPE_DRIVING_SCH));
    }
    else if(GetPVarInt(playerid, "driving_b"))
 	{
    	SetPlayerData(playerid, P_EXAM_CAR, CreateVehicle(426, -2044.9877, -108.9785, 35.2491, 180.0000, -1, -1, 100,0,VEHICLE_ACTION_TYPE_DRIVING_SCH));
    }
    else if(GetPVarInt(playerid, "driving_c"))
 	{
    	SetPlayerData(playerid, P_EXAM_CAR, CreateVehicle(403, -2044.9877, -108.9785, 35.2491, 180.0000, -1, -1, 100,0,VEHICLE_ACTION_TYPE_DRIVING_SCH));
    }
    else if(GetPVarInt(playerid, "driving_d"))
 	{
    	SetPlayerData(playerid, P_EXAM_CAR, CreateVehicle(431, -2044.9877, -108.9785, 35.2491, 180.0000, -1, -1, 100,0,VEHICLE_ACTION_TYPE_DRIVING_SCH));
    }
    else if(GetPVarInt(playerid, "water_lic"))
    {
        SetPlayerData(playerid, P_EXAM_CAR, CreateVehicle(473, -1621.9354, -65.6877, 0.2944, 130.0000, -1, -1, 100,0,VEHICLE_ACTION_TYPE_DRIVING_SCH));
    }
	else if(GetPVarInt(playerid, "fly_lic"))
	{
	    SetPlayerData(playerid, P_EXAM_CAR, CreateVehicle(593, -1514.0272, -95.0622, 15.1526, -135.0000, -1, -1, 100,0,VEHICLE_ACTION_TYPE_DRIVING_SCH));
	}
	SetVehicleVirtualWorld(GetPlayerData(playerid, P_EXAM_CAR), playerid);
	SetPlayerVirtualWorld(playerid,playerid);
	SetPlayerInterior(playerid, 0);

    PutPlayerInVehicle(playerid, GetPlayerData(playerid, P_EXAM_CAR), 0);
    SetPlayerDrivingExamInfo(playerid, DE_POINTS, 10);
	SetPVarFloat(playerid, "car_damage", 1000.0);

	NextDrivingExamRouteCP(playerid);
    return 1;
}

public: PassPhoto(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);

    SetPlayerPos(playerid,768.1743, -5.0993, 1016.1635);
    SetPlayerData(playerid, P_PASS_PHOTO, 1);
    SetCameraBehindPlayer(playerid);

    UpdatePlayerDatabaseInt(playerid, "photo", 1);
	SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вы успешно сделали фотографии для получения паспорта. {FF0000}Отправляйтесь дальше!");
	SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Оплатить гос. пошлину можно в банке");
	return 1;
}
CMD:jobs(playerid)
{
	Dialog(playerid, 29000, DIALOG_STYLE_LIST,"Журнал вакансий","\
	{FFFF00}1. Работы для новичков{FFFFFF}\n\
	2. ВМФ\n\
	3. Мэрия\n\
	4. Полиция г. Los-Santos\n\
	5. Больница г. Los-Santos\n\
	6. СМИ г. Los-Santos\n\
	7. FBI","Выбрать","Закрыть");
	return 1;
}
CMD:lmenu(playerid)
{
    if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	Dialog(playerid, DIALOG_LEADER_MENU,DIALOG_STYLE_LIST,"Панель лидера",
	"1. Уволить игрока оффлайн\n\
	2. Заспавнить автомобили фракции\n\
	3. Посмотреть всех сотрудников\n\
	4. Меню вакансий\n\
	5. Меню государственной волны",
	"Выбрать", "Закрыть");
	return 1;
}

CMD:addjobs(playerid)
{
	if(GetPlayerTeamEx(playerid) == TEAM_GANG_GROVE || GetPlayerTeamEx(playerid) == TEAM_GANG_VAGOS || GetPlayerTeamEx(playerid) == TEAM_GANG_BALLAS || GetPlayerTeamEx(playerid) == TEAM_GANG_AZTECAS) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Недоступно!");
    if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	Dialog(playerid, 30000,DIALOG_STYLE_INPUT,"Создать собеседование","Введите время, на которое вы хотите назначить собеседование","Ввести","Закрыть");
	return 1;
}
CMD:goska(playerid)
{
    if(GetPlayerTeamEx(playerid) == TEAM_GANG_GROVE || GetPlayerTeamEx(playerid) == TEAM_GANG_VAGOS || GetPlayerTeamEx(playerid) == TEAM_GANG_BALLAS || GetPlayerTeamEx(playerid) == TEAM_GANG_AZTECAS) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Недоступно!");
    if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	Dialog(playerid, 31000, DIALOG_STYLE_LIST,"Государственная волна","1. Посмотреть строчки\n2. Выпустить гос. волну","Выбрать","Закрыть");
	return 1;
}
CMD:deljobs(playerid)
{
    if(GetPlayerTeamEx(playerid) == TEAM_GANG_GROVE || GetPlayerTeamEx(playerid) == TEAM_GANG_VAGOS || GetPlayerTeamEx(playerid) == TEAM_GANG_BALLAS || GetPlayerTeamEx(playerid) == TEAM_GANG_AZTECAS) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Недоступно!");
    if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Вам недоступна данная функция");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "Функция доступна лидерам организации и их заместителям");
	switch(GetPlayerTeamEx(playerid))
	{
	    case TEAM_ARMY:
	    {
	    	if(strlen(interview[TEAM_ARMY][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
			interview[TEAM_ARMY][text_time] = EOS; interview[TEAM_ARMY][text_crit] = EOS;
		}
		case TEAM_LSPD:
		{
		    if(strlen(interview[TEAM_LSPD][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_LSPD][text_time] = EOS; interview[TEAM_LSPD][text_crit] = EOS;
		}
		case TEAM_HOSPITAL:
		{
		    if(strlen(interview[TEAM_HOSPITAL][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_ARMY][text_time] = EOS; interview[TEAM_HOSPITAL][text_crit] = EOS;
		}
		case TEAM_FBI:
		{
		    if(strlen(interview[TEAM_FBI][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_FBI][text_time] = EOS; interview[TEAM_FBI][text_crit] = EOS;
		}
		case TEAM_RADIO:
		{
		    if(strlen(interview[TEAM_RADIO][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_RADIO][text_time] = EOS; interview[TEAM_RADIO][text_crit] = EOS;
		}
		case TEAM_GOVERNMENT:
		{
		    if(strlen(interview[TEAM_GOVERNMENT][text_time]) == 0) return SendClientMessage(playerid,-1,"{FFFF00}[Информация]{FFFFFF} Вакансии не существует!");
		    interview[TEAM_GOVERNMENT][text_time] = EOS; interview[TEAM_GOVERNMENT][text_crit] = EOS;
		}
	}

	SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} Вы успешно удалили вакансию из журнала собеседований");
	return 1;
}

stock GoGoska(playerid)
{
	new fmt_msg[144];
	if(GetPlayerData(playerid, P_MUTE) < 0) return SendClientMessage(playerid, -1, "{FFFF00}[Информация]{FFFFFF} У вас бан чата!");
	switch(GetPlayerTeamEx(playerid))
	{
		case TEAM_LSPD:
		{
            if(strlen(g_news[TEAM_LSPD][text_one])<5|| strlen(g_news[TEAM_LSPD][text_two])<5 || strlen(g_news[TEAM_LSPD][text_three]) < 5) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} У вас не заполнены все строчки!");
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [LSPD] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_LSPD][text_one]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [LSPD] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_LSPD][text_two]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [LSPD] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_LSPD][text_three]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
		}
		case TEAM_ARMY:
		{
      		if(strlen(g_news[TEAM_ARMY][text_one])<5 || strlen(g_news[TEAM_ARMY][text_two])<5 || strlen(g_news[TEAM_ARMY][text_three]) < 5) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} У вас не заполнены все строчки!");
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [ВМФ] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_ARMY][text_one]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [ВМФ] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_ARMY][text_two]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [ВМФ] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_ARMY][text_three]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
		}
		case TEAM_GOVERNMENT:
		{
		    if(strlen(g_news[TEAM_GOVERNMENT][text_one])<5 || strlen(g_news[TEAM_GOVERNMENT][text_two])<5 || strlen(g_news[TEAM_GOVERNMENT][text_three]) < 5) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} У вас не заполнены все строчки!");
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [Правительство] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_GOVERNMENT][text_one]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [Правительство] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_GOVERNMENT][text_two]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [Правительство] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_GOVERNMENT][text_one]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
		}
		case TEAM_RADIO:
		{
		    if(strlen(g_news[TEAM_RADIO][text_one])<5 || strlen(g_news[TEAM_RADIO][text_two])<=5 || strlen(g_news[TEAM_RADIO][text_three]) < 5) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} У вас не заполнены все строчки!");
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [СМИ] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_RADIO][text_one]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [СМИ] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_RADIO][text_two]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [СМИ] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_RADIO][text_three]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
		}
		case TEAM_FBI:
		{
		    if(strlen(g_news[TEAM_FBI][text_one])<5 || strlen(g_news[TEAM_FBI][text_two])<5 || strlen(g_news[TEAM_FBI][text_three]) <5) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} У вас не заполнены все строчки!");
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [FBI] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_FBI][text_one]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [FBI] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_FBI][text_two]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [FBI] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_FBI][text_three]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
		}
		case TEAM_HOSPITAL:
		{
		   	if(strlen(g_news[TEAM_HOSPITAL][text_one]) <5 || strlen(g_news[TEAM_HOSPITAL][text_two]) <5 || strlen(g_news[TEAM_HOSPITAL][text_three]) <= 5) return SendClientMessage(playerid, -1,"{FFFF00}[Информация]{FFFFFF} У вас не заполнены все строчки!");
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [Больница] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_HOSPITAL][text_one]);
	  		SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [Больница] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_HOSPITAL][text_two]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
			format(fmt_msg, sizeof fmt_msg, "Гос.новости: [Больница] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, g_news[TEAM_HOSPITAL][text_three]);
			SendClientMessageToAll(0x4466CCFF,  fmt_msg);
		}
	}
	return 1;
}
stock CreateRentBike()
{
	for(new idx; idx < sizeof rent_bike; idx ++)
	{
		CreatePickup(1239, 23, rent_bike[idx][0], rent_bike[idx][1], rent_bike[idx][2], -1, PICKUP_ACTION_RENT_BIKE, idx);
		CreateDynamic3DTextLabel("Аренда велосипедов",0x1E90FFFF,rent_bike[idx][0], rent_bike[idx][1], rent_bike[idx][2] + 0.7, 9.5);
	}
}
stock GetJobDistanceFromPoint(job, Float:x, Float:y, Float:z)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerJob(i) != job) continue;

		GetPlayerDistanceFromPoint(i, Float:x, Float:y, Float:z);
	}
	return 1;
}
stock GetTeamDistanceFromPoint(team, Float:x, Float:y, Float:z)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerTeamEx(i) != team) continue;

		GetPlayerDistanceFromPoint(i, Float:x, Float:y, Float:z);
	}
	return 1;
}
stock CheckRadars(playerid)
{
	new Float: speed = GetPlayerSpeed(playerid);

	for(new idx; idx < g_radars_created; idx ++)
	{
		//if(!IsValidDynamicObject(GetRadarData(idx, R_OBJECT))) continue;
		if(GetPVarInt(playerid, "radar_detected") > gettime()) continue;
		if(IsPlayerInPoliceTeam(playerid) || GetPlayerTeamEx(playerid) == TEAM_HOSPITAL) return 1;
		if(IsPlayerInRangeOfPoint(playerid, 40.0, GetRadarData(idx, R_POS_X), GetRadarData(idx, R_POS_Y), GetRadarData(idx, R_POS_Z)))
		{
			if(speed > (GetRadarData(idx, R_LIMIT) + 5))
			{
				new fmt_text[35],
					excess;

				excess = floatround(speed) - GetRadarData(idx, R_LIMIT);

				format(fmt_text, sizeof fmt_text, "Превышение скорости на %d км/ч", excess);
				SendClientMessage(playerid,0x32a44bFF,fmt_text);
				GameTextForPlayer(playerid, "~w~TICKET~n~~r~", 4000, 3);
				SetPVarInt(playerid, "radar_detected", gettime() + 5);
				if(GetPlayerMoneyEx(playerid) < excess * 150) return	CreateTicket(playerid, excess * 150, "Регистратор скорости", fmt_text);
				GivePlayerMoneyEx(playerid,-excess*150,"Регистратор скорости");
				break;
			}
		}
	}
	return 1;
}
CMD:az(playerid)
{
    if(GetPlayerAdminEx(playerid) < 1) return 1;
	SetPlayerVirtualWorld(playerid, 1010);
	SetPlayerInterior(playerid, 12);
	SetPlayerPos(playerid,2324.419921,-1145.568359,1050.710083);
	return 1;
}
CMD:testers(playerid)
{
	SendClientMessage(playerid, -1, "Вы успешно выдали себе 10.000 доната!");
    GivePlayerDonate(playerid, 10000, "Для тестов");
    return 1;
}
CMD:givepass(playerid)
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;
	SetPlayerData(playerid, P_PASS, 0);
	return 1;
}
CMD:setvip(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	if(sscanf(params,"u",params[0])) return SendClientMessage(playerid, -1,"/setvip [id]");
    SetPlayerData(params[0], P_PREMIUM, 0);
    UpdatePlayerDatabaseInt(params[0], "premium", 1);
	return 1;
}

