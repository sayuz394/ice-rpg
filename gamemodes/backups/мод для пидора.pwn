/*
	- —истема !бизнесов(ƒоделать все типы бизнесов), домов
	- –аботы (дальнобойщик)
	- Ѕольница
	- √рузчики (перевоз грузов на погрузчике [€щики])
	- Ўахта (доп. снасти [уличный торговец])

*/

@___If_u_can_read_this_u_r_nerd();		// 10 different ways to crash DeAMX
@___If_u_can_read_this_u_r_nerd()		// and also a nice tag for exported functions table in the AMX file
{ // by Daniel_Cortez, exclusively for pro-pawn.ru (who cares anyway? -_-)
    #emit	stack	0x7FFFFFFF	// wtf (1) (stack over... overf*ck!?)
    #emit	inc.s	cellmax		// wtf (2) (this one should probably make DeAMX allocate all available memory and lag forever)
    static const ___[][] = {"pro-pawn", ".ru"};	// pretty old anti-deamx trick
    #emit	retn
    #emit	load.s.pri	___		// wtf (3) (opcode outside of function?)
    #emit	proc				// wtf (4) (if DeAMX hasn't crashed already, it would think it is a new function)
    #emit	proc				// wtf (5) (a function inside of another function!?)
    #emit	fill		cellmax	// wtf (6) (fill random memory block with 0xFFFFFFFF)
    #emit	proc
    #emit	stack		1		// wtf (7) (compiler usually allocates 4 bytes or 4*N for arrays of N elements)
    #emit	stor.alt	___		// wtf (8) (...)
    #emit	strb.i		2    	// wtf (9)
    #emit	switch		4
    #emit	retn    			// wtf (10) (no "casetbl" opcodes before retn - invalid switch statement?)
L1:
    #emit	jump	L1			// avoid compiler crash from "#emit switch"
    #emit	zero	cellmin		// wtf (11) (nonexistent address)
}

#include <a_samp>

#include "../include/a_mysql.inc"
#include "../include/sscanf2.inc"
#include "../include/streamer.inc"
#include "../include/dc_cmd.inc"
#include "../include/foreach.inc"
#include "../include/crashdetect.inc"
#include "../include/timerfix.inc"
#include "../include/profiler.inc"
#include "../include/zones.inc"
#include "../include/mxdate.inc"
#include "../include/yom_buttons.inc"

#include "../include/map.inc" // карта
#include "../include/gang_zones.inc" // зоны

#include "../include/system/cp.pwn"
#include "../include/system/cp_race.pwn"
#include "../include/system/pickup.pwn"
#include "../include/system/vehicle.pwn"

// ------------------------------------------
main()
{
	print("-------------------------------");
	print("   GreatX Holding production   ");
	print("                               ");
	print("       The Great RolePlay      ");
	print("-------------------------------");
}

// ------------------------------------------
#define SERVER_NAME 	"Great" 			// название мода
#define SERVER_SITE 	"great-roleplay.ru" // сайт сервера
#define SERVER_MAP_NAME "Russia"			// название карты
#define SERVER_VERSION	"0.98 BETA"			// верси€ мода

#define AUTH_CAMERA_POS 	236.4, 810.1, 20.0 // позиции камеры при авторизации/регистрации
#define AUTH_CAMERA_LOOK 	-400.0, 400.0, 5.0 // позиции камеры при авторизации/регистрации

#define	MYSQL_HOST		"тут тип мускул хост"
#define MYSQL_USER		"тут тип мускул юзер"
#define MYSQL_BASE		"тут тип мускул база"
#define MYSQL_PASS		"тут тип мускул пасс"

/*
#define LAN_MODE
#if defined LAN_MODE
	
	#define MYSQL_HOST 	"127.0.0.1" // ип
	#define MYSQL_USER 	"a_orp" 	// пользователь
	#define MYSQL_PASS 	"a_orp" 	// пароль
	#define MYSQL_BASE 	"a_orp" 	// название бд

#else 

	#define MYSQL_HOST 	"127.0.0.1" 		// ип
	#define MYSQL_USER 	"Hf138g22" 			// пользователь
	#define MYSQL_PASS 	"bfz" 				// пароль
	#define MYSQL_BASE 	"bfz" 				// название бд
	
#endif
*/


#define MAX_FLOOD_RATE	(3000)	
#define FLOOD_RATE_INC	(1000)
#define FLOOD_RATE_KICK	(5000)

//#define RAND_WEATHER				// система рандомной погоды
#define ATM_CREATED_PICKUP			// создавать ли пикапы дл€ банкоматов
#define FUEL_ST_CREATED_PICKUP		// создавать ли пикапы дл€ азс

#define ENTER_PASSWORD_ATTEMPS 	(3)  // кол-во попыток на ввод парол€
#define REFER_BONUS_MONEY	(50_000) // бонус выдача денег реферу

#define MAX_AFK_TIME 			(30) // максимальное врем€ афк (в минутах)
#define MAX_BANK_ACCOUNTS 		(8)	 // максимальное кол счетов в банке
#define MAX_PHONE_BOOK_CONTACTS (20) // макс. кол-во контактов дл€ телефонной книги
#define MAX_AUTHORIZATION_TIME	(25) // врем€ на авторизацию (в секундах)
#define MAX_FUEL_STATIONS		(18) // максимальное кол-во заправок
#define MAX_BUSINESS			(200)// максимальное кол-во предпри€тий
#define MAX_BUSINESS_GPS		(50) // максимальное кол-во предпри€тий в GPS
#define MAX_HOUSES				(900)// максимальное кол-во домов
#define MAX_HOUSE_ROOMS			(5)	 // максимальное кол-во комнат в доме
#define MAX_GATES				(2)	 // максимальное кол-во шлагбаум/ворот
#define MAX_ENTRANCES			(50) // максимальное кол-во подъездов
#define MAX_ENTRANCE_FLOORS		(5)	 // максимальное кол-во этажей в подъезде
#define MAX_HOTELS 				(3)	 // максимальное кол-во отелей
#define MAX_HOTEL_FLOORS 		(7)  // максимальное кол-во этажей отел€
#define MAX_HOTEL_ROOMS 		(MAX_HOTEL_FLOORS * 12) // максимальное кол-во номеров в отеле
#define MAX_OWNABLE_CARS		(1000)// максимальное кол-во личных “—
#define MAX_VEHICLE_TRUNK_SLOTS	(8)	 // максимальное кол-во слотов багажника

#define BIZ_HEALTH_SERVICE_PRICE (150)	// стоимость использование аптечки в бизнесе

#define MAP_ICON_STREAM_DISTANCE (200.0) // прорисовка иконок на карте (радиус)

// ------------------------------------------
#define public:%0(%1) \
			forward %0(%1); \
				public %0(%1)
				
#define Kick:(%0) FixKick(%0)

//#define Dialog ShowPlayerDialog

#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
	
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
	
#define PRESSING(%0,%1) \
	(%0 & (%1))

// ------------------------------------------
#define VEHICLE_COORD_TYPE_BOOT		(1)
#define VEHICLE_COORD_TYPE_BONNET	(2)

// ------------------------------------------
#define SELECT_PANEL_TYPE_NONE			0
#define SELECT_PANEL_TYPE_CLOTHING		1
#define SELECT_PANEL_TYPE_REG_SKIN		2
#define SELECT_PANEL_TYPE_CAR_MARKET 	3

// ------------------------------------------
#define GATE_STATUS_OPEN	true
#define GATE_STATUS_CLOSE	false

// ------------------------------------------
#define GPS_STATUS_ON	true
#define GPS_STATUS_OFF	false

// ------------------------------------------
#define ADMIN_TYPE_NONE 	0

// ------------------------------------------
#define CONVERT_TIME_TO_SECONDS 	1
#define CONVERT_TIME_TO_MINUTES 	2
#define CONVERT_TIME_TO_HOURS 		3
#define CONVERT_TIME_TO_DAYS 		4
#define CONVERT_TIME_TO_MONTHS 		5
#define CONVERT_TIME_TO_YEARS 		6

// ------------------------------------------
#define ACCOUNT_STATE_NONE 		0
#define ACCOUNT_STATE_REGISTER 	1
#define ACCOUNT_STATE_LOGIN 	2
#define ACCOUNT_STATE_REG_SKIN 	3

// ------------------------------------------
#define REQUEST_TYPE_OFF		-1
#define REQUEST_TYPE_SUBNET		1
#define REQUEST_TYPE_IP			2

// ------------------------------------------
#define PIN_CODE_STATE_NONE 	0
#define PIN_CODE_STATE_SET 		1 // установка пин кода
#define PIN_CODE_STATE_CHECK	2 // проверка пин кода
#define PIN_CODE_STATE_CHANGE	3 // смена пин кода
#define PIN_CODE_STATE_LOGIN_CHECK 4 // проверка пин кода при авторизации

// ------------------------------------------
#define HOUSE_TYPE_NONE		(-1) 	// нет
#define HOUSE_TYPE_HOME		(0) 	// дом
#define HOUSE_TYPE_ROOM		(1) 	// аренда комнаты
#define HOUSE_TYPE_HOTEL	(2) 	// отель

// ------------------------------------------
#define REALTOR_TYPE_NONE	(0)
#define REALTOR_TYPE_HOUSE	(1) // дом
#define REALTOR_TYPE_BIZ	(2) // биз

// ------------------------------------------
#define GetItemInfo(%0,%1) 		g_item_type[%0][%1]

// ------------------------------------------
#define GetTrunkData(%0,%1,%2) 			g_vehicle_trunk[%0][%1][%2]
#define SetTrunkData(%0,%1,%2,%3) 		g_vehicle_trunk[%0][%1][%2] = %3
#define AddTrunkData(%0,%1,%2,%3,%4) 	g_vehicle_trunk[%0][%1][%2] %3= %4

#define IsTrunkFreeSlot(%0,%1)			!GetTrunkData(%0, %1, VT_SQL_ID)

// ------------------------------------------
#define GetOwnableCarData(%0,%1) 		g_ownable_car[%0][%1]
#define SetOwnableCarData(%0,%1,%2)		g_ownable_car[%0][%1] = %2
#define AddOwnableCarData(%0,%1,%2,%3)	g_ownable_car[%0][%1] %2= %3

#define IsOwnableCarOwned(%0)			(GetOwnableCarData(%0, OC_OWNER_ID) > 0)

// ------------------------------------------
#define GetHotelData(%0,%1,%2) 			g_hotel[%0][%1][%2]
#define SetHotelData(%0,%1,%2,%3) 		g_hotel[%0][%1][%2] = %3
#define AddHotelData(%0,%1,%2,%3,%4) 	g_hotel[%0][%1][%2] %3= %4

#define IsHotelRoomOwned(%0,%1)		(GetHotelData(%0, %1, H_OWNER_ID) > 0) // зан€т ли номер отел€

// ------------------------------------------
#define GetEntranceData(%0,%1) 			g_entrance[%0][%1]
#define SetEntranceData(%0,%1,%2) 		g_entrance[%0][%1] = %2
#define AddEntranceData(%0,%1,%2,%3) 	g_entrance[%0][%1] %2= %3

// ------------------------------------------
#define GetGateData(%0,%1)			g_gate[%0][%1]
#define SetGateData(%0,%1,%2)		g_gate[%0][%1] = %2
#define AddGateData(%0,%1,%2,%3)	g_gate[%0][%1] %2= %3

// ------------------------------------------
#define GetOrderData(%0,%1)			g_order[%0][%1]
#define SetOrderData(%0,%1,%2)		g_order[%0][%1] = %2
#define AddOrderData(%0,%1,%2,%3)	g_order[%0][%1] %2= %3

// ------------------------------------------
#define AntiFloodPlayerInit(%0) 			g_player_flood[%0] = g_flood_default_values

#define GetPlayerAntiFloodData(%0,%1) 		g_player_flood[%0][%1]
#define SetPlayerAntiFloodData(%0,%1,%2)	g_player_flood[%0][%1] = %2
#define AddPlayerAntiFloodData(%0,%1,%2,%3)	g_player_flood[%0][%1] %2= %3

// ------------------------------------------
#define GetPlayerPhoneBook(%0,%1,%2) 	g_player_phone_book[%0][%1][%2]
#define SetPlayerPhoneBook(%0,%1,%2,%3)	g_player_phone_book[%0][%1][%2] = %3

#define IsPlayerPhoneBookInit(%0) 			g_player_phone_book_init[%0]
#define SetPlayerPhoneBookInitStatus(%0,%1) g_player_phone_book_init[%0] = %1

#define GetPlayerPhoneBookContacts(%0) 		g_player_phone_book_contacts[%0]
#define SetPlayerPhoneBookContacts(%0,%1) 	g_player_phone_book_contacts[%0] = %1

#define GetPlayerPhoneBookSelectContact(%0) 		g_player_phone_book_select_cont[%0]
#define SetPlayerPhoneBookSelectContact(%0,%1) 		g_player_phone_book_select_cont[%0] = %1

// ------------------------------------------
#define GetPlayerPhoneCall(%0,%1) 		g_player_phone_call[%0][%1]
#define SetPlayerPhoneCall(%0,%1,%2)	g_player_phone_call[%0][%1] = %2

#define ClearPlayerPhoneCall(%0) g_player_phone_call[%0] = g_phone_call_default_values

// ------------------------------------------
#define GetPlayerOfferInfo(%0,%1) 		g_player_offer[%0][%1]
#define SetPlayerOfferInfo(%0,%1,%2) 	g_player_offer[%0][%1] = %2

#define SetPlayerOfferValue(%0,%1,%2) g_player_offer[%0][O_INCOMING_VALUE][%1] = %2
#define ClearPlayerOffer(%0) g_player_offer[%0] = g_offer_default_values

// ------------------------------------------
#define GetRepositoryData(%0,%1,%2) 	g_repository[%0][%1][%2]
#define SetRepositoryData(%0,%1,%2,%3)	g_repository[%0][%1][%2] = %3

// ------------------------------------------
#define GetPlayerListitemValue(%0,%1) 		g_player_listitem[%0][%1]
#define SetPlayerListitemValue(%0,%1,%2) 	g_player_listitem[%0][%1] = %2

#define ClearPlayerListitemValues(%0)		g_player_listitem[%0] = g_listitem_values

// ------------------------------------------
#define GetBankAccountData(%0,%1,%2)		g_bank_account[%0][%1][%2]
#define SetBankAccountData(%0,%1,%2,%3) 	g_bank_account[%0][%1][%2] = %3

#define GetPlayerUseListitem(%0) 		g_player_listitem_use[%0]
#define SetPlayerUseListitem(%0,%1) 	g_player_listitem_use[%0] = %1

#define GetPlayerBankTransfer(%0,%1) 	g_player_bank_transfer[%0][%1]
#define SetPlayerBankTransfer(%0,%1,%2)	g_player_bank_transfer[%0][%1] = %2

// ------------------------------------------
#define GetInfoPickupData(%0,%1) info_pickup[%0][%1]

// ------------------------------------------
#define GetTempJobInfo(%0,%1) g_temp_jobs[%0][%1]

// ------------------------------------------
#define GetMonthName(%0) 	month_name[%0 - 1]
#define GetDayName(%0) 		day_name[%0 - 1]

// ------------------------------------------
#define GetNumericName(%0)	numeric_name[%0 - 1]

// ------------------------------------------
#define GetATMInfo(%0,%1)	g_atm[%0][%1]

// ------------------------------------------
#define GetPlayerDrivingExamInfo(%0,%1) 	g_player_driving_exam[%0][%1]
#define SetPlayerDrivingExamInfo(%0,%1,%2) 	g_player_driving_exam[%0][%1] = %2
#define ClearPlayerDrivingExamInfo(%0) 		g_player_driving_exam[%0] = g_driving_exam_default_values

// ------------------------------------------
#define GetTeleportData(%0,%1)		g_teleport[%0][%1]
#define SetTeleportData(%0,%1,%2)	g_teleport[%0][%1] = %2

// ------------------------------------------
#define GetServerRadioData(%0,%1)	g_server_radio[%0][%1]
#define GetHelpInfoData(%0,%1) 		help_info[%0][%1]
#define GetAnimListData(%0,%1) 		anim_list[%0][%1]
#define GetMapIconsData(%0,%1) 		map_icons[%0][%1]

// ------------------------------------------
#define GetPlayerGPSInfo(%0,%1) 	g_player_gps[%0][%1]
#define SetPlayerGPSInfo(%0,%1,%2) 	g_player_gps[%0][%1] = %2

// ------------------------------------------
#define GetPlayerImprovementInfo(%0,%1) g_player_improvements[%0][%1]

// ------------------------------------------
#define GetPlayerPinCodeState(%0) 		pin_code_state[%0]
#define SetPlayerPinCodeState(%0,%1) 	pin_code_state[%0] = %1

#define GetPlayerPinCodeValue(%0,%1) 	pin_code_value[%0][%1]
#define SetPlayerPinCodeValue(%0,%1,%2)	pin_code_value[%0][%1] = %2

// ------------------------------------------
#define GetPlayerSettingData(%0,%1)		g_player_setting[%0][%1]
#define SetPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] = %2
#define AddPlayerSettingData(%0,%1,%2)	g_player_setting[%0][%1] += %2

// ------------------------------------------
#define GetPlayerData(%0,%1) 	g_player[%0][%1]
#define SetPlayerData(%0,%1,%2)	g_player[%0][%1] = %2
#define AddPlayerData(%0,%1,%2,%3) g_player[%0][%1] %2= %3

#define GetPlayerAccountID(%0)	GetPlayerData(%0, P_ACCOUNT_ID) 	// ид аккаунта
#define GetPlayerIpEx(%0)		GetPlayerData(%0, P_IP) 			// ип игрока
#define GetPlayerNameEx(%0)		GetPlayerData(%0, P_NAME) 			// им€ игрока
#define GetPlayerColorEx(%0)	GetPlayerData(%0, P_COLOR)			// цвет игрока
#define GetPlayerSelectSkin(%0)	GetPlayerData(%0, P_SELECT_SKIN) 	// выбраный скин
//#define GetPlayerSkinEx(%0)		GetPlayerData(%0, P_SKIN) 			// скин игрока
#define GetPlayerLevel(%0)		GetPlayerData(%0, P_LEVEL)			// уровень игрока
#define GetPlayerExp(%0)		GetPlayerData(%0, P_EXP)			// очки опыта игрока
#define GetPlayerSuspect(%0)	GetPlayerData(%0, P_SUSPECT)		// уровень розыска игрока
#define GetExpToNextLevel(%0)	((GetPlayerData(%0, P_LEVEL)+1)*4) 	// очков опыта к следуйщему уровню
#define GetPlayerPhone(%0)		GetPlayerData(%0, P_PHONE)			// номер телефона игрока
#define GetPlayerSex(%0)		GetPlayerData(%0, P_SEX)			// пол игрока
#define GetPlayerSexName(%0)	GetPlayerData(%0, P_SEX) ? ("∆енский") : ("ћужской") // название пола
#define GetPlayerChatType(%0)	GetPlayerData(%0, P_CHAT_TYPE) 		// тип чата
#define	GetPlayerAdminEx(%0)	GetPlayerData(%0, P_ADMIN) 			// уровень админки
#define GetPlayerMoneyEx(%0)	GetPlayerData(%0, P_MONEY) 			// деньги игрока
#define GetPlayerBankMoney(%0)	GetPlayerData(%0, P_BANK) 			// деньги игрока
#define GetPlayerAFKTime(%0)	GetPlayerData(%0, P_AFK_TIME) 		// врем€ афк
#define GetPlayerLastVehicle(%0) GetPlayerData(%0, P_LAST_VEHICLE) 	// ид последнего авто в котором сидел
#define GetPlayerJobCar(%0)		GetPlayerData(%0, P_JOB_CAR) 		// рабочий транспорт
#define GetPlayerJob(%0)		GetPlayerData(%0, P_JOB) 			// работа
#define GetPlayerInBiz(%0)		GetPlayerData(%0, P_IN_BUSINESS) 	// в какой бизнес вошел\находитс€
#define GetPlayerInHouse(%0)	GetPlayerData(%0, P_IN_HOUSE) 		// в какой доме вошел\находитс€
#define GetPlayerTeamEx(%0)		GetPlayerData(%0, P_TEAM)			// организаци€ в которой состоит игрок
#define GetPlayerHealthEx(%0)	GetPlayerData(%0, P_HEALTH)			// количество здоровь€

#define GetPlayerSpawnSetting(%0) 		GetPlayerData(playerid, P_SPAWN)  // место спавна
#define SetPlayerSpawnSetting(%0,%1) 	SetPlayerData(playerid, P_SPAWN, %1)  // установка места спавна

#define GetPlayerCurrentDonate(%0) 		GetPlayerData(playerid, P_DONATE_CURRENT) 	// текущий баланс донат-очков
#define GetPlayerTotalDonate(%0) 		GetPlayerData(playerid, P_DONATE_TOTAL) 	// всего пополнений баланса

#define GetPlayerInEntrance(%0)			GetPlayerData(%0, P_IN_ENTRANCE)		// в каком подъезде	
#define GetPlayerInEntranceFloor(%0)	GetPlayerData(%0, P_IN_ENTRANCE_FLOOR)	// на каком этаже в подъезде

#define GetPlayerJobName(%0) 	job_name[GetPlayerData(%0, P_JOB)]

#define GetPlayerTempJob(%0) 			GetPlayerData(%0, P_TEMP_JOB) 		// временна€ работа
#define GetPlayerTempJobState(%0) 		GetPlayerData(%0, P_TEMP_JOB_STATE) // что делать
#define GetPlayerTempJobCheckAnim(%0)	GetPlayerData(%0, P_TEMP_JOB_CHECK) // проверка анимки
#define GetPlayerJobLoadItems(%0) 		GetPlayerData(%0, P_JOB_LOAD_ITEMS) // загружено (...)
#define GetPlayerJobWage(%0) 			GetPlayerData(%0, P_JOB_WAGE) 		// зарплата

#define GetPlayerOwnableCar(%0)			GetPlayerData(%0, P_OWNABLE_CAR)	// ид личного “—
#define GetPlayerRentCar(%0)			GetPlayerData(%0, P_RENT_CAR)		// ид арендованного “—
#define GetPlayerUseTrunk(%0)			GetPlayerData(%0, P_USE_TRUNK)		// ид авто используемого багажника

#define GetPlayerCarSlots(%0)			GetPlayerData(%0, P_CAR_SLOTS)		// количество слотов дл€ транспорта

#define SetPlayerUseTrunk(%0,%1)			SetPlayerData(%0, P_USE_TRUNK,	%1)	// установить ид авто используемого багажника
#define SetPlayerLogged(%0,%1)				SetPlayerData(%0, P_LOGGED, %1) 	// установить статус авторизации
#define SetPlayerChatType(%0,%1)			SetPlayerData(%0, P_CHAT_TYPE, %1) 	// установить тип чата

#define SetPlayerInBiz(%0,%1)				SetPlayerData(%0, P_IN_BUSINESS, %1)	// установить биз в котором находитс€
#define SetPlayerInHouse(%0,%1)				SetPlayerData(%0, P_IN_HOUSE, %1)		// установить дом в котором находитс€
#define SetPlayerTeamEx(%0,%1)					SetPlayerData(%0, P_TEAM, %1)			// организаци€ в которой состоит игрок

#define SetPlayerInEntrance(%0,%1)			SetPlayerData(%0, P_IN_ENTRANCE, %1)		// установить подъезд в котором находитс€
#define SetPlayerInEntranceFloor(%0,%1)		SetPlayerData(%0, P_IN_ENTRANCE_FLOOR, %1)  // установить этаж в подъезд котором находитс€

#define SetPlayerTempJob(%0,%1) 			SetPlayerData(%0, P_TEMP_JOB, %1) 		// временна€ работа
#define SetPlayerTempJobState(%0,%1) 		SetPlayerData(%0, P_TEMP_JOB_STATE, %1)	// что делать
#define SetPlayerTempJobCheckAnim(%0,%1)	SetPlayerData(%0, P_TEMP_JOB_CHECK, %1) // проверка анимки
#define SetPlayerJobLoadItems(%0,%1) 		SetPlayerData(%0, P_JOB_LOAD_ITEMS, %1)	// загружено (...)

#define IsPlayerLogged(%0)		GetPlayerData(%0, P_LOGGED)		// статус авторизации
#define IsPlayerUseAnim(%0)		GetPlayerData(%0, P_USE_ANIM)	// использует ли анимку (/anim)
#define IsPlayerInJob(%0)		GetPlayerData(%0, P_IN_JOB)		// на работе ли
#define IsPlayerAFK(%0)			(GetPlayerData(%0, P_AFK_TIME) >= 5) // афк ли игрок
#define IsPlayerMuted(%0)       GetPlayerData(%0, P_MUTE)       // есть ли мут

// ------------------------------------------
#define GetHouseTypeInfo(%0,%1)		g_house_type[%0][%1]
#define SetHouseTypeInfo(%0,%1,%2)	g_house_type[%0][%1] = %2

#define GetHouseData(%0,%1)			g_house[%0][%1]
#define SetHouseData(%0,%1,%2)		g_house[%0][%1] = %2
#define AddHouseData(%0,%1,%2,%3)	g_house[%0][%1] %2= %3
	
#define IsHouseOwned(%0)			(GetHouseData(%0, H_OWNER_ID) > 0) // куплен ли дом

// ------------------------------------------
#define GetHouseRenterInfo(%0,%1,%2) 		g_house_renters[%0][%1][%2]
#define SetHouseRenterInfo(%0,%1,%2,%3) 	g_house_renters[%0][%1][%2] = %3
#define AddHouseRenterInfo(%0,%1,%2,%3,%4)	g_house_renters[%0][%1][%2] %3= %4

#define GetHouseRentersCount(%0)			g_house_renters_count[%0]
#define SetHouseRentersCount(%0,%1)			g_house_renters_count[%0] = %1
#define AddHouseRentersCount(%0,%1,%2)		g_house_renters_count[%0] %1= %2

#define IsHouseRoomOwned(%0,%1)				(GetHouseRenterInfo(%0, %1, HR_OWNER_ID) > 0)

// ------------------------------------------
#define GetBusinessInteriorInfo(%0,%1)	 	g_business_interiors[%0][%1]
#define SetBusinessInteriorInfo(%0,%1,%2) 	g_business_interiors[%0][%1] = %2

#define GetBusinessData(%0,%1) 			g_business[%0][%1]
#define SetBusinessData(%0,%1,%2) 		g_business[%0][%1] = %2
#define AddBusinessData(%0,%1,%2,%3) 	g_business[%0][%1] %2= %3

#define IsBusinessOwned(%0)				(GetBusinessData(%0, B_OWNER_ID) > 0)

#define GetBusinessGPSInfo(%0,%1)		g_business_gps[%0][%1]
#define SetBusinessGPSInfo(%0,%1,%2)	g_business_gps[%0][%1] = %2
#define AddBusinessGPSInfo(%0,%1,%2,%3) g_business_gps[%0][%1] %2= %3

// ------------------------------------------
#define GetFuelStationData(%0,%1)		g_fuel_station[%0][%1]
#define SetFuelStationData(%0,%1,%2)	g_fuel_station[%0][%1] = %2
#define AddFuelStationData(%0,%1,%2,%3)	g_fuel_station[%0][%1] %2= %3

#define IsFuelStationOwned(%0)			(GetFuelStationData(%0, FS_OWNER_ID) > 0) // куплена ли заправка

#define GetTeamRankName(%0,%1)			rank_names[%0-1][%1-1]
#define GetTeamData(%0,%1)				g_organization[%0-1][%1]
#define SetTeamData(%0,%1,%2)			g_organization[%0-1][%1] = %2
#define GetTeamName(%0)					GetTeamData(%0-1, O_NAME)

#define GetWeaponName(%0)				weapon_names[%0]

#define GetPlayerSpectateData(%0,%1)	g_spectate[%0][%1]
#define SetPlayerSpectateData(%0,%1,%2) g_spectate[%0][%1] = %2

// ------------------------------------------
stock Float: GetAngleToPoint(Float:x1, Float:y1, Float:x2, Float:y2) 
{
	return atan2(y1-y2, x1-x2)-90.0;
}

// ------------------------------------------
enum E_PLAYER_STRUCT // структура игрока
{
	P_ACCOUNT_ID, 	// ид аккаунта
	P_REFER,		// рефер
	P_SEX,			// пол игрока
	P_PASSWORD[16], // пароль игрока
	P_EMAIL[60 + 1],// емайл игрока
	bool: P_CONFIRM_EMAIL,// подтвержден ли емайл
	P_SKIN,			// скин игрока
	P_MONEY,		// деньги игрока
	P_BANK,			// деньги в банке
	P_ADMIN,		// уровень админки 
	P_DRIVING_LIC,	// лицензи€ на управление авто
	P_WEAPON_LIC,	// лицензи€ на оружие
	P_REG_TIME,		// врем€ регистрации
	P_REG_IP[16],	// ип при регистрации
	P_LAST_IP[16],	// ип при последнем входе
	P_LEVEL,		// уровень игрока
	P_EXP,			// очки опыта игрока
	P_SUSPECT,		// уровень розыска
	P_PHONE,		// номер телефона
	P_PHONE_BALANCE,// на счету телефона
	P_PHONE_COLOR,	// цвет телефона
	P_LAW_ABIDING,	// законопослушность
	P_IMPROVEMENTS, // улучшени€ 
	P_POWER,		// сила
	P_DRUGS,		// наркотики
	P_AMMO,			// патроны
	P_METALL,		// металл
	P_WIFE,			// жена
	P_TEAM,			// организаци€
	P_OSKIN,		// скин организации
	P_SUBDIVISON,	// подразделение
	P_WAGE,			// зарплата
	P_JOB,			// работа / должность(ранг) 
	P_HOUSE_TYPE,	// тип жиль€ (дом/отель/в гост€х)
	P_HOUSE_ROOM,	// комната в доме
	P_HOUSE,		// дом
	P_BUSINESS,		// бизнес
	P_FUEL_ST,	 	// заправка
	P_SETTING_PHONE[13],// реальный телефон игрока
	P_SETTING_PIN[5], 	// пин код
	P_REQUEST_PHONE,	// запрос телефона при авторизации
	P_REQUEST_PIN,		// запрос пин кода при авторизации
	// -------------------------
	P_LAST_LOGIN_TIME,	// врем€ последнего входа\выхода 
	// -------------------------
	P_GAME_FOR_HOUR,	// врем€ игры за час
	P_GAME_FOR_DAY,		// врем€ игры за день
	P_GAME_FOR_DAY_PREV,// врем€ игры за вчерашний день
	// -------------------------
	P_COLOR,		// цвет игрока
	P_SELECT_SKIN, 	// выбраный скин
	P_CHAT_TYPE,	// тип чата
	P_AFK_TIME,		// врем€ афк
	P_LAST_VEHICLE,	// ид последнего авто в котором сидел
	P_LAST_DIALOG,	// ид последнего диалога
	P_USE_ANIM_TYPE,// тип анимки который использует
	P_PASS_ATTEMPS, // кол-во попыток на авторизацию
	P_TARGET_ID,	// нацелен на игрока
	Float: P_HEALTH,// хп игрока
	// -------------------------
	P_TEMP_JOB,				// временна€ работа
	P_TEMP_JOB_STATE,		// действие что надо делать
	P_TEMP_JOB_CHECK,		// проверка анимки
	// -------------------------
	P_JOB_SERVICE_NAME[17],	// название службы
	P_JOB_TARIFF,			// тариф
	P_JOB_WAGE,				// «арплата
	P_JOB_LOAD_ITEMS,		// загружено/перенесено (груза/руды)
	P_JOB_CAR,				// рабочий транспорт
	P_END_JOB_TIMER,		// таймер окончани€ работы
	P_FACTORY_USE_DESK,		//  акой стол использует на заводе
	P_BUS_ROUTE, 			// маршрут автобуса
	P_BUS_ROUTE_STEP,		// шаг маршрута
	P_MECHANIC_FILL_PAY,	// заправлено на N руб
	P_MECHANIC_REPAIR_PAY,	// отремонтировано на N руб 
	bool: P_IN_JOB,			// на работе ли
	// -------------------------
	bool: P_LOGGED,				// статус авторизации
	bool: P_USE_ANIM,			// использует ли анимку (/anim)
	bool: P_BLOCK_LEAVE_AREA, 	// заблокировать вызов OnPlayerLeaveDynamicArea
	bool: P_ANIMS_INIT,			// прогружены ли анимки при спавне
	bool: P_ANIM_LIST_INIT,		// прогружен ли анимлист
	bool: P_SNACK,				// есть ли у игрока закуска
	Text3D: P_ADVISOR_LABEL,	// бейджик советника
	bool: P_ADVISOR_BLOCK_CHAT,	// отключение чата организации
	// -------------------------
	P_AUTH_TIME,		// врем€ на авторизаци
	P_IN_BUSINESS,		// в какой бизнес вошел
	P_IN_HOUSE,			// в какой дом вошел
	P_IN_ENTRANCE,		// в каком подъезде
	P_IN_ENTRANCE_FLOOR,// на каком этаже в подъезде
	P_LAST_PICKUP,		// ид пикапа на которым сто€л последний раз
	P_IN_HOTEL_ROOM,	// в каком номере в отеле
	P_IN_HOTEL_FLOOR,	// на каком этаже в отеле
	P_MED_CHEST,		// аптечка
	P_MASK,				// маска
	P_LOTTERY,			// лотерейный билет
	P_DRINK_STEP,		// кол-во использование напитка
	P_REALTOR_TYPE,		// риелторка
	P_USE_SELECT_PANEL,	// использует ли панель выбора
	P_OWNABLE_CAR,		// ид личного “—
	P_USE_TRUNK,		// ид авто используемого багажника
	// -------------------------
	P_IP[16], 			// ип игрока
	P_NAME[20 + 1], 	// им€ игрока
	P_WIFE_NAME[21],	// им€ жены
	// -------------------------
	P_ACCOUNT_STATE, 		// статус аккаунта (авторизаци/регистраци€)
	P_ACCOUNT_STEP_STATE, 	// шаг (регистрации/авторизации)
	// -------------------------
	P_WARN,             // варны
	P_WARN_TIME,        // врем€ варнов
	P_MUTE,             // врем€ мута
	// -------------------------
	P_SKILL_COLT,     	// скилл кольт
	P_SKILL_SDPISTOL,   // скилл пистолет с глушителем
	P_SKILL_DEAGLE,     // скилл дигл
	P_SKILL_SHOTGUN,    // скилл дробовик
	P_SKILL_MP5,        // скилл мп5
	P_SKILL_AK47,	    // скилл ак47
	P_SKILL_M4,         // скилл м4
	P_SKILL_SNIPER_RIFLE,	// скилл снайперска€ винтовка
	P_SKILL_SAWNOFF,    // скилл обрез
	P_SKILL_COMBAT_SG,  // скилл тактический дробовик
 	P_SKILL_MICRO_UZI,  // скилл микро-узи
 	// -------------------------
 	P_SPAWN,            // место спавна
 	// -------------------------
	P_DONATE_CURRENT,	// текущий баланс донат-очков
	P_DONATE_TOTAL,		// всего приобретено донат-очков
	// -------------------------
	bool: P_HOSPITAL,	// лежит ли в больнице
	P_OCCUPIED_BED,		// номер койки
	// -------------------------
	bool: P_WEAPON_RELOADING,	// перезар€жает ли оружие
	P_RELOADINGS_COUNT[11],		// количество перезар€док дл€ каждого оружи€
	bool: P_CUFFED,		// наручники на игроке
	P_BUY_CAR,			// покупает ли авто
	P_RENT_CAR,			// арендованна€ машина
	P_CAR_SLOTS,		// количество слотов дл€ авто
};

// ------------------------------------------

enum
{
	STORAGE_METALL = 0, // максимальное кол-во металла 
	STORAGE_AMMO, // максимальное кол-во патронов
	STORAGE_DRUGS // максимальное кол-во наркотиков
}	
// ------------------------------------------
enum E_OWNABLE_CAR_STRUCT
{
	OC_SQL_ID, 			// ид в базе
	OC_OWNER_ID,		// ид владельца
	OC_OWNER_NAME[21],	// им€ владельца
	OC_NUMBER[8],		// номер “—
	OC_MODEL_ID,		// модель
	OC_COLOR_1,			// цвет 1
	OC_COLOR_2,			// цвет 2	
	Float: OC_POS_X,	// позиции “—
	Float: OC_POS_Y,	// позиции “—
	Float: OC_POS_Z,	// позиции “—
	Float: OC_ANGLE,	// позиции “— (угол поворота)
	bool: OC_ALARM,		// сигнализаци€
	bool: OC_KEY_IN,	// вставлен ли ключ
	Float: OC_CREATE	// врем€ создани€
};

// ------------------------------------------
enum E_VEHICLE_TRUNK_STRUCT
{
	VT_SQL_ID, 
	VT_ITEM_TYPE, 		// тип предмета
	VT_ITEM_AMOUNT,		// кол-во
	VT_ITEM_VALUE
};

// ------------------------------------------
enum E_ITEM_STRUCT
{
	I_NAME[16],
	I_NAME_COUNT[8],
	bool: I_COMBINATION
};

// ------------------------------------------
enum E_ENTRANCE_STRUCT
{
	E_SQL_ID,		// ид в базе
	E_CITY, 		// город
	E_ZONE, 		// район / улица
	E_FLOORS,		// кол-во этажей
	Float: E_POS_X, // вход (пикап)
	Float: E_POS_Y, // вход (пикап)
	Float: E_POS_Z, // вход (пикап)
	Float: E_EXIT_POS_X,// выход
	Float: E_EXIT_POS_Y,// выход
	Float: E_EXIT_POS_Z,// выход
	Float: E_EXIT_ANGLE,// выход (угол)
	E_PICKUP_ID,		// ид пикапа
	E_MAP_ICON,			// иконка на карте
	Text3D: E_LABEL,	// 3д текст
	E_STATUS			// статус (куплены ли все квартиры)
};

// ------------------------------------------
enum E_HOTEL_STRUCT
{
	H_SQL_ID,
	H_OWNER_ID,
	H_RENT_DATE,
	bool: H_STATUS,
	H_OWNER_NAME[21]
};

enum E_HOTEL_CAR_PARK_STRUCT
{
	Float: HC_POS_X,
	Float: HC_POS_Y,
	Float: HC_POS_Z,
	Float: HC_ANGLE,
	HC_VEHICLE_ID
};

// ------------------------------------------
enum E_HOUSE_STRUCT
{
	H_SQL_ID,			// ид в базе данных
	H_NAME[20],			// название \ тип
	H_OWNER_ID,			// ид аккаунта владельца
	H_CITY,				// ид города
	H_ZONE,				// ид района
	H_IMPROVEMENTS,		// уровень улучшений
	H_RENT_DATE,		// аренда на n времени
	H_PRICE,			// стоимость дома
	H_RENT_PRICE,		// плата за аренду в день
	H_LOCK_STATUS,		// статус (открыто/закрыто)
	H_ENTRACE,			// ид подьезда
	H_TYPE,				// тип дома (интерьер)
	Float: H_POS_X,		// позици€ пикапа входа
	Float: H_POS_Y,		// позици€ пикапа входа
	Float: H_POS_Z,		// позици€ пикапа входа
	Float: H_EXIT_POS_X,// позици€ после выхода из дома
	Float: H_EXIT_POS_Y,// позици€ после выхода из дома
	Float: H_EXIT_POS_Z,// позици€ после выхода из дома
	Float: H_EXIT_ANGLE,// угол поворота
	Float: H_CAR_POS_X,	// позици€ транспорта
	Float: H_CAR_POS_Y,	// позици€ транспорта
	Float: H_CAR_POS_Z,	// позици€ транспорта
	Float: H_CAR_ANGLE,	// угол поворота транспорта
	Float: H_STORE_X,	// позици€ шкафа
	Float: H_STORE_Y,	// позици€ шкафа
	Float: H_STORE_Z,	// позици€ шкафа
	// -------------------------
	H_OWNER_NAME[20 + 1],	// им€ владельца
	Text3D: H_STORE_LABEL,	// 3д текст (шкаф)
	H_ENTER_PICKUP,			// пикап входа
	H_HEALTH_PICKUP,		// пикап аптечки
	H_MAP_ICON,				// иконка на карте
	H_FLAT_ID,				// номер квартиры
	// -------------------------
	H_EVICTION				// продажа из-за задолженности
};

enum E_HOUSE_TYPE_STRUCT
{
	HT_NAME[20],
	Float: HT_ENTER_POS_X,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Y,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_Z,		// позиции после входа в интерьера
	Float: HT_ENTER_POS_ANGLE,	// позиции после входа в интерьера
	Float: HT_HEALTH_POS_X,		// позиции аптечки
	Float: HT_HEALTH_POS_Y,		// позиции аптечки
	Float: HT_HEALTH_POS_Z,		// позиции аптечки
	Float: HT_STORE_POS_X,		// позиции шкафа
	Float: HT_STORE_POS_Y,		// позиции шкафа
	Float: HT_STORE_POS_Z,		// позиции шкафа
	HT_INTERIOR,				// ид интерьера
	HT_ROOMS					// кол-во комнат
};

enum E_HOUSE_ROOM_STRUCT
{
	HR_SQL_ID,			// ид в базе 
	HR_OWNER_ID,		// ид игрока
	HR_RENT_DATE,		// насколько арендована комната
	HR_RENT_TIME,		// когда поселилс€
	HR_OWNER_NAME[21]	// ник арендатора
};

enum // управление домом
{
	HOUSE_OPERATION_PARAMS, 		// изменение параметров дома
	HOUSE_OPERATION_LOCK,			// открыть / закрыть
	HOUSE_OPERATION_IMPROVEMENTS,	// улучшение 
	HOUSE_OPERATION_CAR_DELIVERY,	// доставить “— к дому
	HOUSE_OPERATION_CAR_GPS,		// отметить транспорт на GPS
	HOUSE_OPERATION_RENTERS			// список арендаторов
}

// ------------------------------------------
enum E_BUSINESS_STRUCT
{
	B_SQL_ID,			// ид в базе данных
	B_NAME[24],			// название
	B_OWNER_ID,			// ид аккаунта владельца
	B_CITY,				// ид города
	B_ZONE,				// ид района
	B_ENTER_PRICE,		// цена за вход в биз
	B_ENTER_MUSIC,		// звук при входе
	B_IMPROVEMENTS,		// уровень улучшений
	B_PRODS,			// количества продуктов
	B_PROD_PRICE,		// стоимость 1 продукта
	B_BALANCE,			// бюджет бизнеса
	B_RENT_DATE,		// аренда на n времени
	B_PRICE,			// стоимость бизнеса
	B_RENT_PRICE,		// плата за аренду в день
	B_LOCK_STATUS,		// статус (открыта/закрыта)
	B_TYPE,				// тип бизнеса
	B_INTERIOR,			// интерьер
	Float: B_POS_X,		// позици€ бизнеса
	Float: B_POS_Y,		// позици€ бизнеса
	Float: B_POS_Z,		// позици€ бизнеса
	Float: B_EXIT_POS_X,// позици€ после выхода из бизнеса
	Float: B_EXIT_POS_Y,// позици€ после выхода из бизнеса
	Float: B_EXIT_POS_Z,// позици€ после выхода из бизнеса
	Float: B_EXIT_ANGLE,// угол поворота
	// -------------------------
	B_OWNER_NAME[20 + 1],	// им€ владельца
	Text3D: B_LABEL,		// 3д текст
	B_ORDER_ID,				// слот заказа
	B_HEALTH_PICKUP,		// ид пикапа аптечки
	// -------------------------
	B_EVICTION				// продажа из-за задолженности
};

enum // типы бизнесов
{
	BUSINESS_TYPE_SHOP_24_7 = 1, 	// магазин 24/7
	BUSINESS_TYPE_CLUB = 2, 		// клуб (алхамбра)
	BUSINESS_TYPE_REALTOR_BIZ = 3, 	// управление статистики (бизнесы)
	BUSINESS_TYPE_REALTOR_HOME = 4,	// риелторское агенство (дома)
	BUSINESS_TYPE_CLOTHING_SHOP = 5,// магазин одежды
	BUSINESS_TYPE_HOTEL = 6,		// отель
	BUSINESS_TYPE_CAR_MARKET = 7,	// авторынок
};

enum //
{
	BIZ_OPERATION_PARAMS = 0,		// управление заправкой
	BIZ_OPERATION_LOCK,				// открыть / закрыть
	BIZ_OPERATION_ENTER_PRICE,		// установить цену за вход
	BIZ_OPERATION_PROD_PRICE,		// установить стоимость продукта
	BIZ_OPERATION_PROD_ORDER,		// заказать продукты
	BIZ_OPERATION_PROD_ORDER_CANCEL,// отменить заказ
	BIZ_OPERATION_PROFIT_STATS,		// финансова€ статистика	
	BIZ_OPERATION_IMPROVEMENTS		// ”лучшени€	
};

enum E_BUSINESS_INTERIOR_STRUCT
{
	Float: BT_EXIT_POS_X, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Y, 	// позиции пикапа выхода
	Float: BT_EXIT_POS_Z, 	// позиции пикапа выхода
	// -------------------
	Float: BT_ENTER_POS_X, 	// позиции входа
	Float: BT_ENTER_POS_Y, 	// позиции входа
	Float: BT_ENTER_POS_Z, 	// позиции входа
	Float: BT_ENTER_ANGLE, 	// угол поворота
	BT_ENTER_INTERIOR,		// интерьер
	// -------------------
	Float: BT_HEALTH_POS_X,	// позиции аптечки
	Float: BT_HEALTH_POS_Y,	// позиции аптечки
	Float: BT_HEALTH_POS_Z,	// позиции аптечки
	// -------------------
	Float: BT_BUY_POS_X, 	// позиции покупки
	Float: BT_BUY_POS_Y, 	// позиции покупки
	Float: BT_BUY_POS_Z, 	// позиции покупки
	// -------------------
	Float: BT_LABEL_POS_X,	// позиции 3д текста
	Float: BT_LABEL_POS_Y,	// позиции 3д текста
	Float: BT_LABEL_POS_Z,	// позиции 3д текста
	BT_BUY_CHECK_ID			// ид чекпоинта
}; 

enum E_BUSINESS_GPS_STRUCT // список бизнесов в GPS
{
	BG_SQL_ID,
	BG_BIZ_ID,
	BG_POS,
	BG_TIME
};

// ------------------------------------------

enum E_FUEL_STATION_STRUCT
{
	FS_SQL_ID,			// ид в базе данных
	FS_NAME[20],		// название
	FS_OWNER_ID,		// ид аккаунта владельца
	FS_CITY,			// ид города
	FS_ZONE,			// ид района
	FS_IMPROVEMENTS,	// уровень улучшений
	FS_FUELS,			// количества топлива
	FS_FUEL_PRICE,		// цена топлива за 1 л 
	FS_BUY_FUEL_PRICE,	// закупочна€ цена за 1 л
	FS_BALANCE,			// бюджет заправки
	FS_RENT_DATE,		// аренда на n времени
	FS_PRICE,			// стоимость заправки
	FS_RENT_PRICE,		// плата за аренду в день
	FS_LOCK_STATUS,		// статус (открыта/закрыта)
	Float: FS_POS_X,	// позици€ заправки	
	Float: FS_POS_Y,	// позици€ заправки
	Float: FS_POS_Z,	// позици€ заправки
	// -------------------------
	FS_OWNER_NAME[20 + 1],	// им€ владельца
	Text3D: FS_LABEL,		// 3д текст
	FS_ORDER_ID,			// слот заказа
	FS_AREA,				// зона
	// -------------------------
	FS_EVICTION				// продажа из-за задолженности
};

enum //
{
	FUEL_ST_OPERATION_PARAMS = 0,		// ”правление заправкой
	FUEL_ST_OPERATION_LOCK,				// ќткрыть / закрыть
	FUEL_ST_OPERATION_NEW_NAME,			// Ќовое название
	FUEL_ST_OPERATION_FUEL_PRICE,		// установить цену за топливо
	FUEL_ST_OPERATION_BUY_FUEL_PRIC,	// установить закупочную цену топлива
	FUEL_ST_OPERATION_FUEL_ORDER,		// заказать топливо
	FUEL_ST_OPERATION_FUEL_ORDER_CA, 	// отменить заказ
	FUEL_ST_OPERATION_PROFIT_STATS,		// финансова€ статистика	
	FUEL_ST_OPERATION_IMPROVEMENTS		// ”лучшени€	
};

// ------------------------------------------
enum E_WEATHER_STRUCT
{
	W_NAME[16],
	W_ID,
	W_DEGREES
};

// ------------------------------------------
enum E_ORDER_STRUCT
{
	O_SQL_ID, 		// ид заказа
	O_TYPE,			// тип (азс,биз)
	O_COMPANY_ID,	// ид предпри€ти€
	O_AMOUNT,		// кол-во
	O_PRICE,		// цена за 1 (продукт/л топлива/...)
	O_TIME,			// врем€ оформлени€
	O_USED			// выполн€етс€ ли
};

enum 
{
	ORDER_TYPE_FUEL_STATION = 1, // заправка
	ORDER_TYPE_BUSINESS 		// бизнес
};

// ------------------------------------------
// 			Ћичные настройки

enum E_PLAYER_SETTINGS_STRUCT 
{
	S_CHAT_TYPE,	// тип чата (ќтключен,—тандарт,Advance)
	S_TEAM_CHAT,	// отображение чата организации
	S_PLAYERS_NICK,	// отображение ников над игроками
	S_NICK_IN_CHAT,	// отображение ников в чате
	S_ID_IN_CHAT,	// отображение ид игрока в чате
	S_VEH_CONTROL	// управление транспортом (клавиши и команды/команды)
};

enum
{
	SETTING_CHAT_OFF = 0,
	SETTING_CHAT_STANDART,
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_OFF = 0,
	SETTING_TYPE_ON
};

// ------------------------------------------
enum E_IMPROVEMENTS_STRUCT
{
	I_NAME[32],
	I_PRICE,
	I_LEVEL
};

// ------------------------------------------
enum E_PLAYER_GPS_STRUCT
{
	bool: G_ENABLED,
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z
};

enum E_GPS_STURCT
{
	Float: G_POS_X,
	Float: G_POS_Y,
	Float: G_POS_Z,
	G_MARKET_TYPE
};

// ------------------------------------------
enum E_HELP_INFO_STRUCT
{
	H_TITLE[64],
	H_INFO[1024]
};

// ------------------------------------------
enum E_SERVER_RADIO_STRUCT
{
	SR_CHANNEL_NAME[32],
	SR_CHANNEL_URL[64]
};

// ------------------------------------------
enum E_ANIM_LIST_STRUCT
{
	AL_DESCRIPTION[32],
	AL_LIB[32],
	AL_NAME[32],
	Float: AL_DELTA,
	AL_LOOP,
	AL_LOCK_X,
	AL_LOCK_Y,
	AL_FREEZE,
	AL_TIME
};

// ------------------------------------------
enum E_MAP_ICONS_STRUCT 
{
	Float: MI_POS_X,
	Float: MI_POS_Y,
	Float: MI_POS_Z,
	MI_TYPE
};

// ------------------------------------------
enum E_TELEPORT_STRUCT
{
	T_NAME[64],
	Float: T_PICKUP_POS_X,
	Float: T_PICKUP_POS_Y,
	Float: T_PICKUP_POS_Z,
	T_PICKUP_VIRTUAL_WORLD,
	Float: T_POS_X,
	Float: T_POS_Y,
	Float: T_POS_Z,
	Float: T_ANGLE,
	T_INTERIOR,
	T_VIRTUAL_WORLD,
	T_ACTION_TYPE,
	Text3D: T_LABEL
};

enum // типы телепорта
{
	T_ACTION_TYPE_BLOCK_LEAVE_AREA = 1, // заблокировать вызов паблика OnPlayerLeaveDynamicArea
	T_ACTION_TYPE_END_JOB,	// анулировать деньги на временной работе если выходит из инта
	T_ACTION_TYPE_LEAVE_HOSPITAL, // проверить вылечилс€ или нет в больнице
};

// ------------------------------------------
enum E_DRIVING_TUTORIAL_STRUCT
{
	DT_TITLE[64],
	DT_INFO[2048]
};

enum E_PLAYER_DRIVING_EXAM_STRUCT
{
	DE_POINTS, // Ѕалы
	DE_EXAM_STEP, // теори€
	DE_ROUTE_STEP // практика
};

// ------------------------------------------
enum E_DRIVING_EXAM_STRUCT
{
	DE_TITLE[64],
	DE_LIST_ITEMS[256],
	DE_CORRECT_ANSWER
};

// ------------------------------------------
enum E_ATM_STRUCT
{
	Float: A_POS_X,
	Float: A_POS_Y,
	Float: A_POS_Z,
	Float: A_ROT_Z
};

// ------------------------------------------
enum E_GATE_STRUCT
{
	G_DESCRIPTION[16],	// описание (наприм. жд-вьезд/жд-выезд)
	G_TYPE,				// тип (шлагбаум,ворота)
	Float: G_POS_X,		// позиции
	Float: G_POS_Y,		// позиции
	Float: G_POS_Z,		// позиции
	Float: G_ANGLE,		// угол
	Float: G_OPEN_POS_X, // позиции открыти€
	Float: G_OPEN_POS_Y, // позиции открыти€
	Float: G_OPEN_POS_Z, // позиции открыти€
	Float: G_OPEN_ANGLE, // угол открыти€ (дл€ кнопки)
	bool: G_STATUS,		// статус
	G_OBJECT_ID[2]		// иды обьектов
};

enum 
{
	GATE_TYPE_BARRIER = 1,		// шлагбаум
	GATE_TYPE_BARRIER_MSG,		// шлагбаум (с сообщением)
	GATE_TYPE_BARRIER_BUTTON,	// шлагбаум (на кнопку)
	GATE_TYPE_NORMAL,	 		// ворота
}

// ------------------------------------------
enum E_BANK_ACCOUNT_STRUCT
{
	BA_ID,
	BA_NAME[20 + 1],
	BA_PIN_CODE[9],
	BA_BALANCE,
	BA_REG_TIME
};

enum E_BANK_TRANSFER_STRUCT 
{
	BT_ID,
	BT_NAME[20 + 1]
};

// ------------------------------------------
enum E_PHONE_CALL_STRUCT
{
	PC_INCOMING_PLAYER,		// исход€щий вызов
	PC_OUTCOMING_PLAYER,	// вход€щий вызов
	PC_TIME,				// врем€ звонка
	bool:PC_ENABLED		// режим телефона (вкл\откл)
};

// ------------------------------------------
enum E_PHONE_BOOK_STRUCT
{
	PB_SQL_ID,
	PB_NAME[21],
	PB_NUMBER[10],
	PB_TIME
};

enum 
{
	PHONE_BOOK_OPERATION_OPTIONS = 0,	// варианты
	PHONE_BOOK_OPERATION_CALL,			// позвонить
	PHONE_BOOK_OPERATION_SEND_SMS,		// отправить смс
	PHONE_BOOK_OPERATION_CHANGE_NAM,	// изменить им€
	PHONE_BOOK_OPERATION_CHANGE_NUM,	// изменить номер
	PHONE_BOOK_OPERATION_DELETE_CON,	// удалить контакт
};
// ------------------------------------------
enum E_INFO_PICKUP_STRUCT
{
	IP_TITLE[64],
	IP_INFO[1024],
	IP_LABEL_INFO[64],
	IP_TITLE_COLOR,
	Float: IP_POS_X,
	Float: IP_POS_Y,
	Float: IP_POS_Z
};

// ------------------------------------------
enum E_MINER_CARRIAGE_STRUCT
{
	Float: MC_START_POS_X,
	Float: MC_START_POS_Y,
	Float: MC_START_POS_Z,
	Float: MC_END_POS_X,
	Float: MC_END_POS_Y,
	Float: MC_END_POS_Z,
	bool: MC_STATUS,
	MC_OBJECT_ID
};

// ------------------------------------------
enum E_FACTORY_DESK_STRUCT
{
	Float: FD_POS_X,
	Float: FD_POS_Y,
	Float: FD_POS_Z,
	FD_CHEK_ID,
	FD_OBJECT_ID,
	bool: FD_USED,
	Text3D: FD_LABEl
};

// ------------------------------------------
enum E_REPOSITORY_STRUCT
{
	R_AMOUNT, // кол-во
	Text3D: R_LABEL,
	Text3D: R_LABEL_2,
	bool: R_NOT_SAVE
};

enum // типы складов
{
	REPOSITORY_TYPE_MINER, 		// шахта	
	REPOSITORY_TYPE_FACTORY, 	// завод
	REPOSITORY_TYPE_OIL_FACTORY, // нефтезавод
	REPOSITORY_TYPE_ARMY,		// воинска€ часть
};

enum
{
	// шахта
	REPOSITORY_ACTION_MINER_METAL = 0,	// металл шахты
	REPOSITORY_ACTION_MINER_ORE,		// руда
	REPOSITORY_ACTION_MINER_REMELTI,	// на переплавке
	
	// завод
	REPOSITORY_ACTION_FACTORY_METAL = 0, // металл 
	REPOSITORY_ACTION_FACTORY_FUEL,		// топливо
	REPOSITORY_ACTION_FACTORY_PROD,		// продукты
	
	// нефтезавод
	REPOSITORY_ACTION_OIL_FACTORY_F = 0, // топливо на нефтезаводе

	// воинска€ часть
	REPOSITORY_ACTION_ARMY_METAL = 0,	// металл на складе воинской части
	REPOSITORY_ACTION_ARMY_AMMO,		// патроны на складе воинской части
};
new g_repository[4][3][E_REPOSITORY_STRUCT]; // склады

// ------------------------------------------
enum E_BUS_ROUTE_STRUCT
{
	BR_NAME[32],
	BR_COLOR,
	BR_IN_JOB
};

enum E_BUS_ROUTE_STEP_STRUCT
{
	Float: BRS_POS_X,
	Float: BRS_POS_Y,
	Float: BRS_POS_Z,
	bool: BRS_STOP
};

enum E_PLAYER_SPECTATE_STRUCT
{
	Float: S_START_POS_X,
	Float: S_START_POS_Y,
	Float: S_START_POS_Z,
	Float: S_START_ANGLE,
	S_START_INTERIOR,
	S_START_VIRTUAL_WORLD,
	S_PLAYER	
};
new g_spectate[MAX_PLAYERS][E_PLAYER_SPECTATE_STRUCT];

// ------------------------------------------
enum // иды диалогов
{
	INVALID_DIALOG_ID,
	// ---------------
	DIALOG_LOGIN,					// јвторизаци€
	DIALOG_REGISTER,				// –егистраци€
	// ---------------
	DIALOG_PLAYER_MENU,  			// меню игрока
	DIALOG_PLAYER_STATS, 			// статистика игрока
	DIALOG_PLAYER_CMDS,  			// список команд 
	DIALOG_PLAYER_SETTINGS,			// личные настройки 
	DIALOG_PLAYER_SECURITY_SETTINGS,// настройки безопасности
	// ---------------
	DIALOG_SECURITY_SETTING_INFO,	// информацию о настройках
	DIALOG_SECURITY_SETTING_PHONE,	// запрос телефона при авторизации 
	DIALOG_SECURITY_SETTING_PHONE_S,// устанавить запрос телефона при авторизации 
	DIALOG_SECURITY_SETTING_PIN,	// запрос пин кода при авторизации 
	DIALOG_SECURITY_SETTING_PIN_SET,// устанавить запрос пин кода при авторизации 
	DIALOG_SECURITY_SETTING_PASS_1, // смена парол€ (проверка текущего)
	DIALOG_SECURITY_SETTING_PASS_2, // смена парол€ (смена)
	DIALOG_SECURITY_SETTING_EMAIL,	// подтверждени€ емайла
	// ---------------
	DIALOG_REPORT,					// репорт
	// ---------------
	DIALOG_PLAYER_IMPROVEMENTS, 	// улучшени€
	// ---------------
	DIALOG_CHANGE_NAME, 			// смена ника
	// ---------------
	DIALOG_GPS, 					// gps
	DIALOG_GPS_PUBLIC_PLACES, 		// общественные места
	DIALOG_GPS_TRANSPORT, 			// транспортные узлы
	DIALOG_GPS_STATE_ORGANIZATIONS, // государственные организации
	DIALOG_GPS_GANGS,				// базы банд и мафий
	DIALOG_GPS_JOBS,				// по работе
	DIALOG_GPS_BANKS,				// по работе
	DIALOG_GPS_ENTERTAINMENT,		// развлечени€
	DIALOG_GPS_BUSINESS,			// реклама бизнеса
	// ---------------
	DIALOG_HELP,					// помощь по игре
	DIALOG_HELP_SECTION,			// раздел 
	// ---------------
	DIALOG_SERVER_RADIO, 			// радио (/play)
	// ---------------
	DIALOG_ANIM_LIST, 				// аним лист (/anim) 
	// ---------------
	DIALOG_OPEN_HOOD_OR_TRUNK,		// управление капотом/багажником
	// ---------------
	DIALOG_DRIVING_TUTORIAL_START,	// теори€ в автошколе
	DIALOG_DRIVING_TUTORIAL,	 	// теори€ в автошколе
	DIALOG_DRIVING_TUTORIAL_END, 	// теори€ в автошколе
	DIALOG_DRIVING_EXAM_INFO, 		// экзамен по вождению
	DIALOG_DRIVING_EXAM_START,		// экзамен по вождению
	DIALOG_DRIVING_EXAM, 			// экзамен по вождению
	DIALOG_DRIVING_EXAM_RESULT, 	// экзамен по вождению
	// ---------------
	DIALOG_ATM, 					// банкомат
	DIALOG_ATM_TAKE_MONEY, 			// сн€ть деньги
	DIALOG_ATM_TAKE_OTHER_MONEY,	// сн€ть деньги (друга€ сума)
	DIALOG_ATM_PUT_MONEY, 			// положить деньги
	DIALOG_ATM_PUT_OTHER_MONEY, 	// положить деньги (друга€ сума)
	DIALOG_ATM_BALANCE, 			// баланс в банке
	DIALOG_ATM_PHONE_BALANCE,		// пополнить баланс телефона

	DIALOG_ATM_SELECT_COMPANY_TAKE,	// выбрать предпри€тие с которого сн€ть деньги
	DIALOG_ATM_SELECT_COMPANY_PUT,	// выбрать предпри€тие на которое положить деньги
	DIALOG_ATM_FUEL_ST_TAKE_MONEY,	// сн€ть деньги с заправочной станции
	DIALOG_ATM_FUEL_ST_PUT_MONEY,	// полижить деньги на счет заправочной станции
	DIALOG_ATM_BIZ_TAKE_MONEY,		// сн€ть деньги с предпри€ти€
	DIALOG_ATM_BIZ_PUT_MONEY,		// полижить деньги на счет предпри€ти€
	
	DIALOG_ATM_TRANSFER_MONEY_1, 	// перевод на банковский счет
	DIALOG_ATM_TRANSFER_MONEY_2, 	// перевод на банковский счет
	DIALOG_ATM_CHARITY, 			// Ѕлаготворительность
	// ---------------
	DIALOG_PAY_FOR_RENT,			// оплата аренды (биз,дом,азс)
	DIALOG_PAY_FOR_RENT_FUEL_ST,	// оплата за ј«—
	DIALOG_PAY_FOR_RENT_BIZ,		// оплата за бизнес
	DIALOG_PAY_FOR_RENT_HOUSE,		// оплата за дом
	// ---------------
	DIALOG_BANK,					// банк
	DIALOG_BANK_ACCOUNTS, 			// мои счета
	DIALOG_BANK_ACCOUNT_LOGIN, 		// авторизаци€ 
	DIALOG_BANK_ACCOUNT_OPERATION,	// —писок операций
	DIALOG_BANK_ACCOUNT_INFO, 		// информаци€ о счете
	DIALOG_BANK_ACCOUNT_TAKE_MONEY,	// сн€ть деньги
	DIALOG_BANK_ACCOUNT_PUT_MONEY,	// положить деньги
	DIALOG_BANK_ACCOUNT_TRANSFER_1, // перевод денег на другой счет 1
	DIALOG_BANK_ACCOUNT_TRANSFER_2, // перевод денег на другой счет 2
	DIALOG_BANK_ACCOUNT_CHANGE_NAME,// переименирование счета
	DIALOG_BANK_ACCOUNT_CHANGE_PIN,	// смена пин-кода
	
	DIALOG_BANK_CREATE_ACCOUNT, 	// создание счета
	DIALOG_BANK_CREATED_ACCOUNT, 	// создание счета
	// ---------------
	DIALOG_PHONE_CALL,				// Ќомера государственных организаций
	DIALOG_PHONE_CALL_BALANCE,		// ”знать баланс мобильного
	// ---------------
	DIALOG_ACTION,					// меню действи€
	// ---------------
	DIALOG_VIEV_JOBS_LIST,			// посмотреть список работ
	DIALOG_JOIN_TO_JOB,				// устроитс€ на работу
	// ---------------
	DIALOG_END_JOB,					// закончить работу
	// ---------------
	
	DIALOG_BUS_RENT_CAR,			// арендовать автобус
	DIALOG_BUS_ROUTE_COST,			// ввести стоимость проезда
	DIALOG_BUS_ROUTE_SELECTION,		// выбрать маршрут
	//---
	DIALOG_TAXI_RENT_CAR,			// арендовать такси
	DIALOG_TAXI_NAME,				// название такси
	DIALOG_TAXI_TARIFF,				// тариф
	//---
	DIALOG_MECHANIC_RENT_CAR,		// арендовать эвакуатор
	DIALOG_MECHANIC_START_JOB,		// начать работу механика
	DIALOG_MECHANIC_NAME,			// название службы
	
	// ---------------
	DIALOG_PHONE_BOOK,				// телефонна€ книга
	DIALOG_PHONE_BOOK_OPTION,		// варианты
	DIALOG_PHONE_BOOK_SEND_SMS,		// отправить смс
	DIALOG_PHONE_BOOK_CHANGE_NAME,	// сменить им€ контакта
	DIALOG_PHONE_BOOK_CHANGE_NUMBER,// сменить номер контакта
	
	DIALOG_PHONE_BOOK_ADD_CONTACT,	// телефонна€ книга (добавить контакт)
	// ---------------
	DIALOG_MINER_BUY_METALL, 		// покупка металла на шахте
	// ---------------
	DIALOG_TEMP_JOB_LOADER_START,	// Ќачать работу грузчика
	DIALOG_TEMP_JOB_LOADER_END,		// «акончить работу грузчика
	DIALOG_TEMP_JOB_MINER_START,	// Ќачать работу шахтера
	DIALOG_TEMP_JOB_MINER_END,		// «акончить работу шахтера
	DIALOG_TEMP_JOB_FACTORY_TRUCKER,// —лужба доставки завода
	DIALOG_TEMP_JOB_FACTORY,		// ѕроизводственный цех
	// ---------------
	DIALOG_FUEL_STATION_BUY,		// покупка заправочной станции
	DIALOG_FUEL_STATION_INFO,		// инфо о заправочной станции
	DIALOG_FUEL_STATION_PARAMS,		// меню управлени€ заправочной станцией
	DIALOG_FUEL_STATION_NAME,		// —мена названи€ 
	DIALOG_FUEL_STATION_PRICE_FUEL,	// ÷ена топлива
	DIALOG_FUEL_STATION_BUY_FUEL_PR,// закупочна€ цена
	DIALOG_FUEL_STATION_ORDER_FUELS,// заказ топлива
	DIALOG_FUEL_STATION_ORDER_CANCE,// отмена заказа
	DIALOG_FUEL_STATION_IMPROVEMENT,// улучшени€ ј«—
	DIALOG_FUEL_STATION_SELL,		// продажа ј«— государству
	DIALOG_FUEL_STATION_BUY_JERRICA,// покупка канистры на ј«—
	DIALOG_FUEL_STATION_BUY_FUEL_M,	// покупка топлива (механик)
	// ---------------
	DIALOG_JERRICAN_FILL_CAR,		// заправка авто с канистры
	// ---------------
	DIALOG_BIZ_BUY,					// покупка бизнеса
	DIALOG_BIZ_INFO,				// инфо о бизнесе
	DIALOG_BIZ_PARAMS,				// меню управлени€ бизнесом
	DIALOG_BIZ_ENTER_PRICE,			// установить цену за вход
	DIALOG_BIZ_PROD_PRICE,			// установить стоимость продутка
	DIALOG_BIZ_ORDER_PRODS,			// заказ продуктов
	DIALOG_BIZ_ORDER_CANCEL,		// отмена заказа
	DIALOG_BIZ_IMPROVEMENT,			// улучшение
	DIALOG_BIZ_SELL,				// продажа Ѕизнеса государству
	DIALOG_BIZ_ENTER_MUSIC,			// установить звук при входе
	DIALOG_BIZ_ENTER,				// платный вход
	
	DIALOG_BIZ_SHOP_24_7,			// магазин 24\7
	DIALOG_BIZ_CHANGE_PHONE_NUMBER,	// смена номера телефона
	DIALOG_BIZ_CHANGE_PHONE_COLOR,	// смена цвет телефона
	DIALOG_BIZ_LOTTERY,				// лотере€
	DIALOG_BIZ_CAR_MARKET,			// диалог авторынка
	DIALOG_BIZ_CAR_MARKET_BUY_CAR,	// покупка авто
	DIALOG_BIZ_CAR_MARKET_CAR_INFO,	// информаци€ об авто
	
	DIALOG_BIZ_CLUB,				// меню бара (клуб)
	
	DIALOG_BIZ_REALTOR_BIZ_LIST,	// список свободных бизнесов (управление статистики)
	DIALOG_BIZ_REALTOR_BIZ_INFO,	// фото бизнеса
	
	DIALOG_BIZ_REALTOR_HOME_GET,	// найти информацию о доме
	DIALOG_BIZ_REALTOR_HOME_INFO,	// фото дома
	
	DIALOG_BIZ_CLOTHING_BUY,		// покупка одежды
	// ---------------
	DIALOG_HOUSE_BUY,				// покупка дома
	DIALOG_HOUSE_SELL,				// продажа дома
	DIALOG_HOUSE_INFO,				// инфо о доме
	DIALOG_HOUSE_PARAMS,			// меню управлени€ домом
	DIALOG_HOUSE_IMPROVEMENTS,		// улучшение дл€ дома
	DIALOG_HOUSE_RENTERS,			// список арендаторов
	DIALOG_HOUSE_RENTER_INFO,		// информаци€ о арендаторе
	DIALOG_HOUSE_RENTER_EVICT,		// выселение арендатора
	DIALOG_HOUSE_EVICT,				// выселение арендатора (/liveout)
	DIALOG_HOUSE_MOVE_STORE,		// переставить шкаф (/makestore)
	
	DIALOG_HOUSE_ENTER,				// вход в дом
	// ---------------
	DIALOG_ENTRANCE_LIFT,			// лифт подъезда
	// ---------------
	DIALOG_HOTEL,					// меню отел€
	DIALOG_HOTEL_FLOOR_SELECT,		// ¬ыбрать этаж (просмотр инфы о номерах)
	DIALOG_HOTEL_FLOOR_INFO,		// »нформаци€ о номерах этажа
	DIALOG_HOTEL_FLOOR_LIFT,		// лифт в отеле
	DIALOG_HOTEL_REG_ROOM,			// регистраци€ в номере
	DIALOG_HOTEL_CLIENT_MENU,		// меню клиента
	DIALOG_HOTEL_PAY_FOR_ROOM,		// оплата за комнату
	DIALOG_HOTEL_OUT,				// выселитьс€
	// ---------------
	DIALOG_OWNABLE_CAR,				// система управлени€ транспортом
	DIALOG_OWNABLE_CAR_LOAD,		// загрузить транспорт
	DIALOG_OWNABLE_CAR_LIST,		// выбор транспорта из списка
	DIALOG_OWNABLE_CAR_SELL,		// продажа личного “—
	// ---------------
	DIALOG_VEHICLE_TRUNK,			// багажник
	DIALOG_VEHICLE_TRUNK_PUT,		// положить предмет
	DIALOG_VEHICLE_TRUNK_PUT_ITEM,	// количество предметов
	DIALOG_VEHICLE_TRUNK_TAKE,		// достать предмет
	// ---------------
	DIALOG_SET_SPAWN,               // диалог смены спавна
	// ---------------
	DIALOG_SPEC_MUTE,				// диалог выдачи мута в спеке
	DIALOG_SPEC_SKICK,				// диалог кика в спеке
	// ---------------
	DIALOG_DONATE_INFO, 			// информаци€ о донате (первый диалог)
	DIALOG_DONATE_MENU,				// меню доната
	DIALOG_DONATE_CONVERT,			// конвертаци€ валюты
	DIALOG_DONATE_GET_MONEY,		// получение денег
	DIALOG_DONATIONS,				// все пополнени€
	DIALOG_DONATE_ENROLLMENT,		// зачисление донат-очков
	// ---------------
	DIALOG_TEAM_CHANGE_SKIN,		// смена скина игрока
	DIALOG_DEBTORLIST, 				// —писок должников
	DIALOG_DEBTORLIST_HOUSE, 		// ƒома должников
	DIALOG_DEBTORLIST_BIZ, 			// Ѕизы должников
	DIALOG_DEBTORLIST_FUEL_ST, 		// ј«— должников
	
	DIALOG_DEBTOR_SELL_LIST, 		// ¬ыселение
	DIALOG_DEBTOR_SELL_HOUSE, 		// ¬ыселение дома
	DIALOG_DEBTOR_SELL_BIZ, 		// ¬ыселение биза
	DIALOG_DEBTOR_SELL_FUEL_ST, 	// ¬ыселение ј«—

	DIALOG_ADVISOR_MENU,			// ћеню советника прав-ва
	DIALOG_ADVISOR_TEAM_STRUCTURE,	// —труктура организации
	// ---------------
	DIALOG_ADMIN_PANEL,				// ѕанель управлени€ сервером
	DIALOG_ADMINS,					// —писок администраторов
	DIALOG_LEADERS,					// —писок лидеров
	DIALOG_EDIT_ADMIN,				// –едактирование администратора
	DIALOG_EDIT_LEADER,				// –едактирование лидера
	DIALOG_EDIT_ADMIN_RANG,			// ѕовысить/понизить администратора
	DIALOG_EDIT_LEADER_FRAC,		// —менить управл€емую фракцию
	DIALOG_REMOVE_ADMIN,			// –азжаловать администратора
	DIALOG_REMOVE_LEADER,			// –азжаловать лидера
	DIALOG_BLOCK_ACCOUNT,			// «аблокировать аккаунт
	DIALOG_BLOCK_ACCOUNT_CONFIRM,	// ѕодтвердить блокировку
};

// ------------------------------------------
enum // иды работ (официальные)
{
	JOB_BUS_DRIVER = 1, // водитель автобуса
	JOB_TAXI_DRIVER,	// таксист
	JOB_MECHANIC,		// механик
	JOB_TRUCKER			// дальнобойщик
};

// ------------------------------------------
enum // типы пикапов
{
	PICKUP_ACTION_TYPE_TELEPORT = 1, 	// “елепорт (входы/выходы)
	PICKUP_ACTION_TYPE_DRIVING_TUTO, 	// теори€ в автошколе
	PICKUP_ACTION_TYPE_ATM,				// банкомат
	PICKUP_ACTION_TYPE_BANK, 			// банк
	PICKUP_ACTION_TYPE_TEMP_JOB, 		// временна€ работа
	PICKUP_ACTION_TYPE_INFO_PICKUP, 	// инфо пикап
	PICKUP_ACTION_TYPE_MINER_SELL_M, 	// покупка металла на шахте
	PICKUP_ACTION_TYPE_FACTORY_MET,		// брать металл (завод)
	PICKUP_ACTION_TYPE_FUEL_STATION,	// покупка канистры на азс
	PICKUP_ACTION_TYPE_BIZ_ENTER,		// вход в бизнес
	PICKUP_ACTION_TYPE_BIZ_EXIT,		// выход в бизнес
	PICKUP_ACTION_TYPE_BIZ_HEALTH,		// аптечка в бизнесе
	PICKUP_ACTION_TYPE_BIZ_SHOP_247,	// покупка в 24\7
	PICKUP_ACTION_TYPE_HOUSE,			// вход в дом
	PICKUP_ACTION_TYPE_HOUSE_HEALTH,	// аптечка дома
	PICKUP_ACTION_TYPE_REALTOR_HOME,	// риелторское агенство
	PICKUP_ACTION_TYPE_BIZ_CLOTHING,	// магазин одежды
	PICKUP_ACTION_TYPE_ENTRANCE_ENT,	// вход в подъезд
	PICKUP_ACTION_TYPE_ENTRANCE_EXI,	// выход из подъезда
	PICKUP_ACTION_TYPE_ENTRANCE_LIF,	// лифт в подъезде
	PICKUP_ACTION_TYPE_ENTRANCE_FLA,	// квартира в подьезде
	PICKUP_ACTION_TYPE_HOTEL_ROOM,		// номер в отеле
	PICKUP_ACTION_TYPE_BIZ_CAR_MARK,	// покупка авто
	PICKUP_ACTION_TYPE_BIZ_CAR_ENT,		// телепорт ко входу в авторынок
	PICKUP_ACTION_TYPE_BIZ_CAR_EXI,		// телепорт к выходу из авторынка
};

enum // типы авто
{
	VEHICLE_ACTION_TYPE_DRIVING_SCH = 1, // ”чебный транспорт (дл€ сдачи на права)
	VEHICLE_ACTION_TYPE_OWNABLE_CAR,	// личный транспорт
	VEHICLE_ACTION_TYPE_LOADER, 		// погрузчик в порту
	VEHICLE_ACTION_TYPE_FACTORY, 		// завод (служба доставки)
	VEHICLE_ACTION_TYPE_BUS_DRIVER,		// ¬одитель автобуса
	VEHICLE_ACTION_TYPE_TAXI_DRIVER,	// “аксист
	VEHICLE_ACTION_TYPE_MECHANIC,		// јвтомеханик
	VEHICLE_ACTION_TYPE_TRUCKER,		// ƒальнобойщик
	VEHICLE_ACTION_TYPE_RENT_CAR,		// “ранспорт дл€ аренды
	VEHICLE_ACTION_TYPE_GOV_CAR,		// јвтомобили правительства
	VEHICLE_ACTION_TYPE_ARMY_CAR,		// јвтомобили воинской части
	VEHICLE_ACTION_TYPE_MED_CAR,		// јвтомобили больницы
	VEHICLE_ACTION_TYPE_RADIO_CAR,		// јвтомобили радиоцентра
	VEHICLE_ACTION_TYPE_DPS_CAR,		// јвтомобили ƒѕ—
	VEHICLE_ACTION_TYPE_PPS_CAR,		// јвтомобили ѕѕ—
	VEHICLE_ACTION_TYPE_FBI_CAR,		// јвтомобили ‘—Ѕ
	VEHICLE_ACTION_TYPE_ARZ_CAR,		// јвтомобили јрзамасской ќѕ√
	VEHICLE_ACTION_TYPE_BAT_CAR,		// јвтомобили Ѕатыревской ќѕ√
	VEHICLE_ACTION_TYPE_LYT_CAR,		// јвтомобили Ћыткаринской ќѕ√
	VEHICLE_ACTION_TYPE_ADMIN_CAR,		// “ранспорт, созданный администратором
};

enum // типы cp
{
	CP_ACTION_TYPE_LOADER_JOB_TAKE = 1,	// грузчик (брать груз)
	CP_ACTION_TYPE_LOADER_JOB_PUT, 		// грузчик (ложить груз)
	// -------
	CP_ACTION_TYPE_MINER_JOB_TAKE, 		// шахтер (брать руду)
	CP_ACTION_TYPE_MINER_JOB_PUT, 		// шахтер (ложить руду)
};

enum // типы race_cp
{
	RCP_ACTION_TYPE_DRIVING_EXAM = 1, // сдача на права (практика)
	RCP_ACTION_TYPE_BUS_ROUTE,	// водитель автобуса
};

// ------------------------------------------
enum // типы анимок
{
	USE_ANIM_TYPE_NONE,
	USE_ANIM_TYPE_CHAT, // анимка чата
};

// ------------------------------------------
enum // типы обьектов
{
	OBJECT_TYPE_FACTORY = 1,
};

// ------------------------------------------
enum E_PLAYER_OFFER_STURCT
{
	O_OUTCOMIG_PLAYER,  // отправленое предложение игроку
	O_INCOMING_PLAYER, 	// вход€щее предложение от игрока
	O_INCOMING_TYPE, 	// вход€щее предложение
	O_INCOMING_VALUE[2] // значение вход€щего предложени€
};

enum // типы предложений
{
	OFFER_TYPE_NONE = -1,
	OFFER_TYPE_HANDSHAKE, 		// приветствие
	OFFER_TYPE_SELL_FUEL_ST, 	// продажа ј«—
	OFFER_TYPE_FILL_CAR,		// заправка авто (механик) 
	OFFER_TYPE_REPAIR_CAR,		// починка авто (механик)
	OFFER_TYPE_SELL_BUSINESS,	// продажа бизнеса
	OFFER_TYPE_BUSINESS_MANAGER,// пригласить сотрудника себе на предпри€тие
	OFFER_TYPE_SELL_HOME,		// продать дом игроку
	OFFER_TYPE_HOME_RENT_ROOM,	// предложить поселитьс€ в комнате своего дома
	OFFER_TYPE_SELL_OWNABLE_CAR,// продать личный “—
	OFFER_TYPE_INVITE,			// предложить вступить в организацию
	OFFER_TYPE_MEDHELP,			// лечение
	OFFER_TYPE_HEAL,			// лечение в машине скорой помощи
	OFFER_TYPE_CHANGE_SEX,		// смена пола
	OFFER_TYPE_SHOW_SKILL,		// просмотр навыков владени€ оружием
};

// автосалон
enum	
	E_RENT_CARS
{
	rent_car_modelid,
	Float: rent_car_pos_x,
	Float: rent_car_pos_y,
	Float: rent_car_pos_z,
	Float: rent_car_angle,
	rent_car_tenant_id,
};

new first_rent_car_id;

new 
	rent_cars_data[][E_RENT_CARS] = 
{
	// --- ћото-¬ело рынок
	{509, -2229.4900, 266.4987, 24.1909, 115.0000}, // 0
	{510, -2230.2104, 268.7669, 24.1909, 115.0000}, // 1
	{481, -2230.9236, 270.7679, 24.1909, 115.0000}, // 2
	{462, -2249.3242, 267.3882, 24.0889, -98.0000}, // 3
	{468, -2248.8162, 270.7087, 24.1789, -97.6799}, // 4
	{586, -2248.0940, 274.1864, 24.2209, -97.6799}, // 5
	{463, -2246.8218, 283.6239, 24.0249, -97.6799}, // 6
	{581, -2246.5383, 286.7294, 24.0209, -97.6799}, // 7
	{461, -2247.7026, 277.5329, 24.0489, -97.6799}, // 8
	{521, -2247.3396, 280.6474, 24.0569, -97.6799}, // 9
	{471, -2246.1233, 290.3882, 23.9309, -97.6799}, // 10
	// --- ѕремиум класс
	{400, -1495.3239, 1619.6681, 36.3360, -90.3000}, // 11
	{402, -1495.5642, 1625.3456, 36.3300, -89.1000}, // 12
	{415, -1495.6725, 1644.7587, 36.0660, -90.3000}, // 13
	{451, -1495.5377, 1571.8040, 35.9300, -90.3000}, // 14
	{466, -1495.4659, 1638.5055, 36.0120, -90.3000}, // 15
	{506, -1495.5035, 1578.8970, 36.0280, -90.3000}, // 16
	{541, -1495.7814, 1585.6432, 35.9500, -90.3000}, // 17
	{579, -1494.8824, 1606.3674, 36.2500, -90.3000}, // 18
	{602, -1495.1407, 1592.9354, 36.0920, -90.3000}, // 19
	{603, -1495.0088, 1599.8911, 36.1160, -90.3000}, // 20
	{477, -1495.2375, 1631.8528, 36.0600, -89.4000}, // 21
	{409, -1494.6693, 1613.0238, 36.4440, -90.3000}, // 22
	{410, -1495.6715, 1565.8992, 36.1184, -90.3000}, // 23
	{405, -1495.7349, 1651.1383, 36.2316, -90.3000}, // 24
	// --- Ёконом класс
	{404, 1767.2644, 2306.8350, 15.9280, 133.2001}, // 25
	{439, 1767.3580, 2302.7463, 15.9280, 133.2001}, // 26
	{467, 1767.5084, 2298.6968, 15.9280, 133.2001}, // 27
	{496, 1767.6865, 2294.7922, 15.9280, 133.2001}, // 28
	{516, 1767.8269, 2291.0906, 15.9280, 133.2001}, // 29
	{545, 1767.9811, 2287.2329, 15.9280, 133.2001}, // 30
	{474, 1767.8712, 2283.1111, 15.9280, 133.2001}, // 31
	{600, 1767.1371, 2278.0391, 15.9280, 133.2001}, // 32
	{478, 1757.2560, 2306.9846, 15.9280, -133.2001}, // 33
	{424, 1757.0476, 2303.1274, 15.6560, -133.2001}, // 34
	{500, 1757.2192, 2298.8496, 15.9280, -133.2001}, // 35
	{545, 1757.1465, 2294.9729, 15.9280, -133.2001}, // 36
	{518, 1757.1348, 2291.0195, 16.2320, -133.2001}, // 37
	{546, 1757.5938, 2286.5496, 15.9280, -133.2001}, // 38
	{547, 1757.4060, 2282.4246, 15.9280, -133.2001}, // 39
	{549, 1757.5575, 2277.9214, 15.9280, -133.2001}, // 40
	// --- Cредний класс
	{411, 2526.7495, -666.9644, 11.9503, 270.4733}, // 41
	{418, 2527.0923, -674.6355, 12.1897, 269.9023}, // 42
	{419, 2527.2800, -682.2495, 11.8946, 270.1789}, // 43
	{421, 2527.0723, -690.0291, 11.9871, 269.1575}, // 44
	{422, 2526.9829, -697.6995, 12.1929, 269.5712}, // 45
	{426, 2527.2788, -705.3546, 12.1533, 269.7382}, // 45
	{429, 2527.1592, -713.1302, 12.0858, 270.0681}, // 47
	{434, 2520.6331, -670.8370, 12.0653, 89.7651}, // 48
	{436, 2520.3638, -678.4674, 11.9107, 90.4690}, // 49
	{440, 2520.3718, -686.2748, 12.2144, 90.5680}, // 50
	{442, 2520.6123, -693.8952, 11.7025, 89.8107}, // 51
	{445, 2520.2275, -701.6832, 11.9692, 91.2127}, // 52
	{458, 2520.4238, -709.3147, 12.0314, 89.6525}, // 53
	{459, 2520.2649, -717.0047, 12.1491, 89.8033} // 54
};

new buy_car_select_car[MAX_PLAYERS] = {-1, ...};
new buy_car_select_color[MAX_PLAYERS][2];
new buy_car_select_color_type[MAX_PLAYERS] = {0, ...};

new 
	rgb_array[127] = 
{
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF
};

new Text:buy_car_TD[2];
new PlayerText:buy_car_PTD[MAX_PLAYERS][6];
new PlayerText:buy_menu_PTD[MAX_PLAYERS];

new car_market_data[4][21][2] = 
{
	{ // --- ћото-¬ело рынок
		{509, 0},
		{510, 0},
		{481, 0},
		{462, 0},
		{468, 0},
		{586, 0},
		{463, 0},
		{581, 0},
		{461, 0},
		{521, 0},
		{471, 0},
		{400, 0}, // ------
		{400, 0}, 
		{400, 0}, 
		{400, 0}, 
		{400, 0}, 
		{400, 0}, 
		{400, 0}, 
		{400, 0}, 
		{400, 0}, 
		{400, 0}
	},
	{ // --- ѕремиум класс
		{400, 0},
		{409, 0},
		{410, 0},
		{415, 0},
		{426, 0},
		{436, 0},
		{444, 0},
		{451, 0},
		{466, 0},
		{477, 0},
		{506, 0},
		{541, 0},
		{556, 0},
		{557, 0},
		{559, 0},
		{573, 0},
		{579, 0},
		{580, 0},
		{587, 0},
		{602, 0},
		{603, 0}
	},
	{ // --- Ёконом класс
		{404, 0},
		{439, 0},
		{467, 0},
		{496, 0},
		{516, 0},
		{545, 0},
		{474, 0},
		{600, 0},
		{478, 0},
		{424, 0},
		{500, 0},
		{545, 0},
		{518, 0},
		{546, 0},
		{547, 0},
		{549, 0},
		{400, 0}, // ------
		{400, 0}, 
		{400, 0}, 
		{400, 0}, 
		{400, 0}
	},
	{ // --- Cредний класс
		{411, 0},
		{418, 0},
		{419, 0},
		{421, 0},
		{422, 0},
		{426, 0},
		{429, 0},
		{434, 0},
		{436, 0},
		{440, 0},
		{442, 0},
		{445, 0},
		{458, 0},
		{459, 0},
		{400, 0}, // ------
		{400, 0}, 
		{400, 0}, 
		{400, 0}, 
		{400, 0}, 
		{400, 0}, 
		{400, 0}
	}
};

new cars_after_purchase_count[4];
new 
	Float: cars_pos_after_purchase[4][5][4] = 
{
	{ // --- ћото-¬ело рынок
		{-2240.2588,292.2602,24.0131,205.0654},
		{-2238.8015,289.2990,24.0133,207.5119}, 
		{-2237.4824,286.7456,24.0122,207.1044}, 
		{-2236.2100,284.0617,24.0128,206.7947},
		{-2234.6184,280.7356,24.0120,207.2130}
	},
	{ // --- ѕремиум класс
		{-1474.5835, 1543.8743, 36.3916, 359.5458}, 
		{-1468.5662, 1543.8188, 36.3931, 358.3256}, 
		{-1461.8151, 1543.8234, 36.3970, 359.6618}, 
		{-1454.8085, 1543.5128, 36.4013, 358.4645}, 
		{-1447.7424, 1543.5994, 36.4023, 359.9661}
	},
	{ // --- Ёконом класс
		{1726.0829, 2268.9292, 15.8773, 269.6464},
		{1726.1605, 2264.9326, 15.8775, 269.6549},
		{1726.0776, 2260.7021, 15.8772, 269.6965},
		{1782.8536, 2247.1399, 15.7239, 359.3958},
		{1777.9191, 2247.3289, 15.8137, 1.424800}
	},
	{ // --- Cредний класс
		{2521.8230, -760.0287, 12.1080, 0.8372}, 
		{2515.2578, -760.3474, 12.1076, 359.80}, 
		{2508.4370, -759.8122, 12.1076, 0.1737}, 
		{2501.4944, -759.7260, 12.1092, 1.2387},
		{2494.7559, -760.1741, 12.1079, 0.7902}
	}
};

stock GetVehicleCarMarketID(vehicleid)
{
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_RENT_CAR) return -1;
	else return GetVehicleData(vehicleid, V_ACTION_ID);
}

stock BuyCarTDsShowForPlayer(playerid)
{
	for(new i; i < 2; i ++)
	{
		TextDrawShowForPlayer(playerid, buy_car_TD[i]);
		PlayerTextDrawShow(playerid, buy_car_PTD[playerid][i]);
	}
	return 1;
}

stock BuyCarTDsHideForPlayer(playerid)
{
	for(new i; i < 6; i ++)
		PlayerTextDrawHide(playerid, buy_car_PTD[playerid][i]);
		
	TextDrawHideForPlayer(playerid, buy_car_TD[0]);
	TextDrawHideForPlayer(playerid, buy_car_TD[1]);
	return 1;
}

// ------------------------------------------
enum E_ANTI_FLOOD_STRUCT
{
	AF_LAST_TICK,
	AF_RATE
}

// ------------------------------------------
enum E_TEMP_JOB_STRUCT // временные работы
{
	Float: TJ_POS_X,
	Float: TJ_POS_Y,
	Float: TJ_POS_Z,
	TJ_PAY_FOR_LOAD, // плата за 1 продукт (€щик/кг руды)
	TJ_SKIN[2]		// скин игрока (0 - мужской, 1 - женский) 
};

enum E_LOADER_JOB_ATTACH_OBJ_STRUCT
{
	L_OBJECT,
	Float: L_POS_X,
	Float: L_POS_Y,
	Float: L_POS_Z,
	Float: L_ROT_X,
	Float: L_ROT_Z
};

// ------------------------------------------
enum // иды временных работ
{
	TEMP_JOB_NONE = -1,
	// ----------------
	TEMP_JOB_LOADER = 0, 		// грузчик
	TEMP_JOB_MINER, 			// шахтер
	TEMP_JOB_FACTORY_TRUCKER,	// завод (служба доставки)
	TEMP_JOB_FACTORY			// завод
};

enum //
{
	TEMP_JOB_STATE_NONE, 
	// --------
	TEMP_JOB_STATE_LOADER_LOAD, 	// брать груз
	TEMP_JOB_STATE_LOADER_UNLOAD, 	// класть груз
	TEMP_JOB_STATE_LOADER_DROP_LOAD,// уронил груз
	// --------
	TEMP_JOB_STATE_MINER_LOAD, 		// добывать руду
	TEMP_JOB_STATE_MINER_UNLOAD, 	// нести на склад
	TEMP_JOB_STATE_MINER_DROP_LOAD, // уронил руду
	// --------
	TEMP_JOB_STATE_FACTORY_TAKE_MET, // брать металл
	TEMP_JOB_STATE_FACTORY_CREATE_P, // делать продукт
	TEMP_JOB_STATE_FACTORY_CREATED,  // делает продукт
	TEMP_JOB_STATE_FACTORY_PUT_PROD, // нести продукт на склад
	TEMP_JOB_STATE_FACTORY_DROP_P,	 // уронил продукт
};

// ------------------------------------------
// attached object (TODO)
enum 
{
	A_OBJECT_SLOT_SPINE = 0, 		// “орс
	A_OBJECT_SLOT_HEAD, 			// √олова
	A_OBJECT_SLOT_ARM, 				// ѕлечи
	A_OBJECT_SLOT_HAND, 			// –уки
	A_OBJECT_SLOT_THIGH, 			// Ѕедра
	A_OBJECT_SLOT_FOOT, 			// Ќоги
	A_OBJECT_SLOT_CALF, 			// √олень
	A_OBJECT_SLOT_FOREARM, 			// ѕредплечье
	A_OBJECT_SLOT_CLAVICLE,			//  лючица
	A_OBJECT_SLOT_NECK, 			// Ўе€
	//A_OBJECT_SLOT_JAW				// „елюсть
};

enum 
{
	A_OBJECT_BONE_SPINE = 1, 		// “орс
	A_OBJECT_BONE_HEAD, 			// √олова
	A_OBJECT_BONE_LEFT_ARM, 		// Ћевое плечо
	A_OBJECT_BONE_RIGHT_ARM, 		// ѕравое плечо
	A_OBJECT_BONE_LEFT_HAND, 		// Ћева€ рука
	A_OBJECT_BONE_RIGHT_HAND, 		// ѕрава€ рука
	A_OBJECT_BONE_LEFT_THIGH, 		// Ћевое бедро
 	A_OBJECT_BONE_RIGHT_THIGH,		// ѕравое бедро
	A_OBJECT_BONE_LEFT_FOOT, 		// Ћева€ нога
	A_OBJECT_BONE_RIGHT_FOOT, 		// ѕрава€ нога
	A_OBJECT_BONE_RIGHT_CALF, 		// ѕрава€ голень
	A_OBJECT_BONE_LEFT_CALF, 		// Ћева€ голень
	A_OBJECT_BONE_LEFT_FOREARM, 	// Ћевое предплечье
	A_OBJECT_BONE_RIGHT_FOREARM,	// ѕравое предплечье
	A_OBJECT_BONE_LEFT_CLAVICLE,	// Ћева€ ключица (плечо)
	A_OBJECT_BONE_RIGHT_CLAVICLE,	// ѕрава€ ключица (плечо)
	A_OBJECT_BONE_NECK, 			// Ўе€
	A_OBJECT_BONE_JAW				// „елюсть
};

// ------------------------------------------
enum // шаги регистрации
{
	REGISTER_STATE_PASSWORD = 1, // ввод парол€
	REGISTER_STATE_EMAIL, 		// ввод емайла
	REGISTER_STATE_REFER, 		// ввод ника пригласившего игрока
	REGISTER_STATE_SEX, 		// выбор пола
	REGISTER_STATE_RULES, 		// правила сервера
	REGISTER_STATE_CREATE_ACC 	// создание аккаунта
};

enum // шаги авторизации
{
	LOGIN_STATE_CHECK_BAN = 0,	// проверка бана
	LOGIN_STATE_PASSWORD, 		// ввод парол€
	LOGIN_STATE_PHONE,			// ввод 5 послед. цифр телефона
	LOGIN_STATE_PIN_CODE,		// ввод пин кода
	//LOGIN_STATE_GOOGLE_CODE,	// ввод кода от гугла
	LOGIN_STATE_LOAD_ACC	 	// «агрузка аккаунта
};
// ------------------------------------------
new mysql; // ид соединени€

// ------------------------------------------
new Text: server_logo_TD;	// лого сервера
new Text: gps_TD; 			// gps
new Text: anim_TD;			// anim list
new Text: speedometr_TD[2]; // спидометр
new Text: wait_panel_TD[4];	// текстдрав ожидани€
new Text: select_TD[8];		// панель выбора


new PlayerText: speedometr_PTD[MAX_PLAYERS][7]; 	// спидометр
new PlayerText: price_select_TD[MAX_PLAYERS][2]; 	// цена в панели выбора

// ------------------------------------------
new PlayerText:pin_code_PTD[MAX_PLAYERS][10];
new pin_code_value[MAX_PLAYERS][10];
new pin_code_state[MAX_PLAYERS] = {PIN_CODE_STATE_NONE, ...};
new pin_code_input[MAX_PLAYERS][5];

// ------------------------------------------
//new Menu: reg_select_skin_menu;

// ------------------------------------------

new Menu: admin_spec_menu;

// ------------------------------------------
new g_player[MAX_PLAYERS][E_PLAYER_STRUCT];
new 
	g_player_default_values[E_PLAYER_STRUCT] = 
{
	0,		// ид аккаунта
	0,		// рефер
	0,		// пол игрока
	"",		// пароль игрока
	"None",	// емайл игрока
	false, 	// подтвержден ли емайл
	0,		// скин игрока
	0,		// деньги игрока
	0,		// деньги в банке
	ADMIN_TYPE_NONE, // уровень админки
	false,	// лицензи€ на управление авто
	false,	// лицензи€ на оружие
	0,		// врем€ регистрации
	"255.255.255.255",	// ип при регистрации
	"255.255.255.255",	// ип при последнем входе
	1,		// уровень игрока
	0,		// очки опыта игрока
	0,		// уровень розыска
	0,		// номер телефона
	0,		// на счету телефона
	0,		// цвет телефона
	0,		// законопослушность
	0, 		// улучшени€ 
	0, 		// сила
	0,		// наркотики
	0,		// патроны
	0,		// металл
	0,		// жена
	0,		// организаци€
	0,		// скин организации
	0,		// подразделение
	0,		// зарплата
	0,		// работа / должность(ранг) 
	HOUSE_TYPE_NONE, // тип жиль€ (дом/отель/в гост€х)
	-1,		// комната в доме
	-1,		// дом
	-1,		// бизнес
	-1,	 	// заправка
	"None", // реальный телефон игрока
	"None", // пин код
	REQUEST_TYPE_OFF, // запрос телефона при авторизации
	REQUEST_TYPE_OFF, // запрос пин кода при авторизации
	// -------------------------
	0,					// врем€ последнего входа\выхода 
	// -------------------------
	0,					// врем€ игры за час
	0,					// врем€ игры за день
	0,					// врем€ игры за вчерашний день
	// -------------------------
	0xFFFFFF11,			// цвет игрока
	-1,					// выбраный скин
	0,					// тип чата
	0,					// врем€ афк
	INVALID_VEHICLE_ID, // ид последнего авто в котором сидел
	INVALID_DIALOG_ID,	// ид последнего диалога
	USE_ANIM_TYPE_NONE,	// тип анимки который использует
	ENTER_PASSWORD_ATTEMPS,// кол-во попыток на авторизацию
	INVALID_PLAYER_ID,	// нацелен на игрока
	100.0,				// хп игрока
	// -------------------------
	TEMP_JOB_NONE,		// временна€ работа
	TEMP_JOB_STATE_NONE,// действие что надо делать
	false,				// проверка анимки
	// ---------------------------------
	"",					// название службы
	0,					// тариф
	0,					// «арплата
	0,					// загружено/перенесено (груза/руды)
	INVALID_VEHICLE_ID,	// рабочий транспорт
	-1,					// таймер окончани€ работы
	-1,					//  акой стол использует на заводе
	0, 					// маршрут автобуса
	0,					// шаг маршрута
	0,					// заправлено на N 
	0,					// отремонтировано на N руб
	false,				// на работе ли
	// -------------------------
	false,				// статус авторизации
	false,				// использует ли анимку (/anim)
	false,				// заблокировать вызов OnPlayerLeaveDynamicArea
	false,				// прогружены ли анимки при спавне
	false,				// прогружен ли анимлист
	false,				// есть ли у игрока закуска
	Text3D: -1,			// бейджик советника
	false,				// отключение чата организации
	// -------------------------
	-1, 				// врем€ на авторизаци
	-1, 				// в какой бизнес вошел
	-1, 				// в какой дом вошел
	-1,					// в каком подъезде
	-1,					// на каком этаже в подъезде
	-1,					// ид пикапа на которым сто€л последний раз
	-1,					// в каком номере в отеле
	0,					// на каком этаже в отеле
	0,					// аптечка
	0,					// маска
	0,					// лотерейный билет
	0,					// кол-во использование напитка
	REALTOR_TYPE_NONE,	// риелторка
	SELECT_PANEL_TYPE_NONE, // использует ли панель выбора
	INVALID_VEHICLE_ID,	// ид личного “—
	INVALID_VEHICLE_ID,	// ид авто используемого багажника
	// -------------------------
	"255.255.255.255", 	// ип игрока
	"", 				// им€ игрока
	"Ч", 				// им€ жены/мужа
	// -------------------------
	ACCOUNT_STATE_NONE, // статус аккаунта (авторизаци/регистраци€)
	0, 					// шаг (регистрации/авторизации)
	// -------------------------
	0,             		// варны
	0,        			// врем€ варнов
	0,             		// врем€ мута
	// -------------------------
	0,     				// скилл кольт
	0,   				// скилл пистолет с глушителем
	0,     				// скилл дигл
	0,    				// скилл дробовик
	0,        			// скилл мп5
	0,	    			// скилл ак47
	0,         			// скилл м4
	0,					// скилл снайперска€ винтовка
	0,    				// скилл обрез
	0,  				// скилл тактический дробовик
 	0,  				// скилл микро-узи
 	// -------------------------
 	0,                   // место спавна
	// -------------------------
	0,					// текущий баланс донат-очков
	0,					// всего пополнений донат-очков
	// -------------------------
	false,				// лежит ли в больнице
	-1,					// номер койки
	// -------------------------
	false,				// перезар€жает ли оружие
	0,					// количество перезар€док
	false,				// есть ли наручники
	INVALID_VEHICLE_ID,	// покупает ли авто
	INVALID_VEHICLE_ID,	// арендованное авто
	1,					// количество слотов дл€ авто
};
new mysql_race[MAX_PLAYERS];
new g_speed_line_update[MAX_PLAYERS] = {-1, ...};

new Float: g_taxi_mileage[MAX_PLAYERS] = {0.0, ...};

// ------------------------------------------
new g_ownable_car[MAX_OWNABLE_CARS][E_OWNABLE_CAR_STRUCT];
new g_ownable_car_loaded;

// ------------------------------------------
new g_vehicle_trunk[MAX_VEHICLES][MAX_VEHICLE_TRUNK_SLOTS][E_VEHICLE_TRUNK_STRUCT];

// ------------------------------------------
new g_hotel[MAX_HOTELS][MAX_HOTEL_ROOMS][E_HOTEL_STRUCT];
new g_hotel_rooms_loaded[MAX_HOTELS];
new g_hotel_loaded;

new g_hotel_lift_CP[2];

new const 
	Float: g_hotel_room_exit_pos[3][3] = 
{
	{1275.9808, -772.4982, 1202.7220},
	{1275.9808, -764.2992, 1202.7220},
	{1275.9808, -756.2681, 1202.7220}
};

new const // позиции авто (парковка отел€ / подогнать тс к отелю)
	g_hotel_car_park_pos[1][33][E_HOTEL_CAR_PARK_STRUCT] = 
{
	{
		{-133.1494,	983.9849,	12.1618,	180.4495,	INVALID_VEHICLE_ID},
		{-137.5265,	983.8444,	12.1608,	179.9925,	INVALID_VEHICLE_ID},
		{-139.5423,	975.4324,	12.1614,	269.4506,	INVALID_VEHICLE_ID},
		{-139.2751,	971.6942,	12.1608,	267.8990,	INVALID_VEHICLE_ID},
		{-139.3615,	967.6329,	12.1618,	268.9070,	INVALID_VEHICLE_ID},
		{-139.2914,	963.4075,	12.1611,	270.4609,	INVALID_VEHICLE_ID},
		{-139.2221,	958.7978,	12.1608,	269.5585,	INVALID_VEHICLE_ID},
		{-116.4657,	971.6745,	12.1570,	89.46280,	INVALID_VEHICLE_ID},
		{-116.5386,	967.9235,	12.1557,	90.18910,	INVALID_VEHICLE_ID},
		{-116.5738,	963.9881,	12.1531,	90.00600,	INVALID_VEHICLE_ID},
		{-116.5876,	960.3621,	12.1551,	92.67610,	INVALID_VEHICLE_ID},
		{-116.2813,	950.5233,	12.1536,	90.45550,	INVALID_VEHICLE_ID},
		{-102.8195,	971.5937,	12.1614,	270.0878,	INVALID_VEHICLE_ID},
		{-102.6861,	968.0194,	12.1620,	269.5782,	INVALID_VEHICLE_ID},
		{-102.7776,	964.1411,	12.1621,	270.2165,	INVALID_VEHICLE_ID},
		{-102.9098,	960.6828,	12.1615,	270.6911,	INVALID_VEHICLE_ID},
		{-102.8726,	950.8474,	12.1610,	270.0904,	INVALID_VEHICLE_ID},
		{-116.2799,	950.5248,	12.1551,	90.53890,	INVALID_VEHICLE_ID},
		{-102.5865,	946.5525,	12.1611,	268.3489,	INVALID_VEHICLE_ID},
		{-94.7682,	983.9437,	12.1606,	178.0583,	INVALID_VEHICLE_ID},
		{-89.6837,	983.7529,	12.1627,	180.2712,	INVALID_VEHICLE_ID},
		{-88.7005,	975.4258,	12.1573,	91.58140,	INVALID_VEHICLE_ID},
		{-88.7543,	971.4301,	12.1574,	90.29010,	INVALID_VEHICLE_ID},
		{-88.7361,	968.0562,	12.1570,	90.12850,	INVALID_VEHICLE_ID},
		{-88.7494,	964.4591,	12.1579,	91.67410,	INVALID_VEHICLE_ID},
		{-88.6165,	960.7374,	12.1577,	90.89440,	INVALID_VEHICLE_ID},
		{-88.6389,	957.0118,	12.1556,	91.18100,	INVALID_VEHICLE_ID},
		{-88.5814,	953.0699,	12.1540,	90.86370,	INVALID_VEHICLE_ID},
		{-88.6637,	949.1523,	12.1536,	91.07860,	INVALID_VEHICLE_ID},
		{-88.6821,	945.1238,	12.1542,	91.11890,	INVALID_VEHICLE_ID},
		{-88.8479,	941.1545,	12.1542,	90.08610,	INVALID_VEHICLE_ID},
		{-88.8513,	937.4927,	12.1536,	90.22390,	INVALID_VEHICLE_ID},
		{-88.8047,	933.3365,	12.1541,	90.21220,	INVALID_VEHICLE_ID}
	}
};

// ------------------------------------------
new g_entrance[MAX_ENTRANCES][E_ENTRANCE_STRUCT];
new g_entrance_loaded;

new g_entrance_flat[MAX_ENTRANCES][MAX_ENTRANCE_FLOORS][4];
new g_entrance_flats_loaded[MAX_ENTRANCES];

new const 
	Float: g_entrance_flat_pos[4][6] = 
{
	{ // 1 квартира
		26.6000, 1370.2202, 1508.4100, // x | y | z
		24.1485, 1370.3602, 90.0 // x | y | angle
	},
	{ // 2 квартира
		21.9166, 1372.9000, 1508.4100,
		19.9516, 1370.4508, 90.0
	},
	{ // 3 квартира
		21.7802, 1367.9500, 1508.4100,
		19.9516, 1370.4508, 90.0
	},
	{ // 4 квартира
		15.2799, 1367.9500, 1508.4100,
		15.2469, 1369.9597, 0.0
	}
};

// ------------------------------------------
new g_house[MAX_HOUSES][E_HOUSE_STRUCT];
new g_house_loaded;

new g_house_renters[MAX_HOUSES][MAX_HOUSE_ROOMS][E_HOUSE_ROOM_STRUCT];
new g_house_renters_count[MAX_HOUSES];

new g_house_type[1][E_HOUSE_TYPE_STRUCT] = 
{
	{
		"—редний класс", 						// название / тип
		235.8167, -137.4595, 998.5732, 268.0, 	// после входа
		233.3636, -130.6102, 998.4639, 			// аптечка
		236.5589, -138.6849, 998.5800,			// шкаф 
		1,										// интерьер
		2										// комнат
	}
};

new const
	g_house_improvements[5][E_IMPROVEMENTS_STRUCT] = 
{
	{"јвтоматические двери", 	8_000, 	0},
	{"ƒомашн€€ аптечка", 		14_500, 0},
	{"—овместное проживание",	20_000, 0},
	{"ќформление субсидии",		55_000, 0},
	{"Ўкаф дл€ вещей",			60_000, 0}
	/*,
	{"—ейф дл€ вещей",			75_000, 0},
	{"—игнализаци€",			90_000, 0}
	*/
};

// ------------------------------------------
new g_business[MAX_BUSINESS][E_BUSINESS_STRUCT];
new g_business_loaded;

new const
	g_business_improvements[6][E_IMPROVEMENTS_STRUCT] = 
{
	{"ƒополнительные продукты", 			15_000,		0},
	{"ћедицинское обслуживание", 			30_000,		0},
	{"ѕониженное налогообложение",			80_000,		0},
	{"«вуковые эффекты при входе",			150_000,	0},
	{"ƒополн. склад дл€ продуктов",			300_000,	0},
	{"–екламна€ кампани€",					450_000,	0}
};

enum // иды интерьеров
{
	BUSINESS_INTERIOR_SHOP_24_7 = 0,	// магазин 24/7
	BUSINESS_INTERIOR_CLUB = 1,			// клуб
	BUSINESS_INTERIOR_REALTOR_BIZ = 2,	// управление статистики (бизнесы)
	BUSINESS_INTERIOR_REALTOR_HOME = 3,	// риелторское агенство (дома)
	BUSINESS_INTERIOR_CLOTHING_SHOP = 4,// магазин одежды
	BUSINESS_INTERIOR_HOTEL = 5,		// отель
	BUSINESS_INTERIOR_CAR_MARKET = 6,	// авторынок
};
new const
	g_business_interiors[7][E_BUSINESS_INTERIOR_STRUCT] = 
{
	{ // магазин 27/7
		364.6499, -10.2996, 993.3503, 		// позиции пикапа (выход)
		364.6720, -7.65120, 993.3503, 360.0,// позиции входа
		3, 									// интерьер
		374.3292, -7.2456, 993.3503, 		// позиции аптечки	
		369.3871, -5.5610, 993.1000, 		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1									// чекпоинт\пикап
	}, 
	{ // клуб (алхамбра)
		493.3602, -24.8439, 1000.6797, 		// позиции пикапа (выход)
		493.3910, -22.7228, 1000.6797, 0.0, // позиции входа
		17, 								// интерьер
		503.6340, -11.6332, 1000.6797, 		// позиции аптечки	
		499.970, -20.697, 1000.680, 		// позиции покупки
		498.365, -24.535, 1002.696, 		// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // управление статистики
		331.4905, 670.0544, 49.7217,		// позиции пикапа (выход)
		329.1160, 670.9569, 49.7217, 72.38,	// позиции входа
		0,									// интерьер
		323.4736, 671.9888, 49.7217,		// позиции аптечки	
		326.4846, 662.5015, 49.7217,		// позиции покупки
		326.4846, 662.5015, 51.2217,		// позиции 3д текста
		-1									// чекпоинт\пикап
	},
	{ // риелторское агенство
		162.4737, 742.7685, 25.8272,		// позиции пикапа (выход)
		163.3701, 745.0021, 25.8272, 339.92,// позиции входа
		0,									// интерьер
		161.4340, 748.0493, 25.8272,		// позиции аптечки	
		160.5056, 744.9833, 25.8272,		// позиции покупки
		154.5396, 748.7235, 26.9926,		// позиции 3д текста
		-1				
	},
	{ // магазин одежды
		334.3175, -151.2997, 999.6627,		// позиции пикапа (выход)
		334.2939, -153.6735,999.662, 178.12,// позиции входа
		6,									// интерьер
		330.0934, -156.9458, 999.6627,		// позиции аптечки
		334.6521, -160.5485, 999.6627,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1				
	},
	{ // отель
		725.0262, 592.7350, 1002.9598,		// позиции пикапа (выход)
		725.0227, 594.9494,1002.9598, 360.0,// позиции входа
		1,									// интерьер
		718.5051, 593.9505, 1002.9598,		// позиции аптечки
		724.8739, 602.2747, 1002.9598,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1				
	},
	{ // авторынок
		5.6404, -31.8285, 1080.9968,		// позиции пикапа (выход)
		5.6428, -28.8609, 1080.9968, 359.0130, // позиции входа
		5,									// интерьер
		1.9981, -25.4102, 1080.9968,		// позиции аптечки
		5.6207, -29.6107, 1085.9291,		// позиции покупки
		0.0, 0.0, 0.0,						// позиции 3д текста
		-1
	}
};
// ”правление статистики
new Text3D: g_business_realtor_label;

new g_business_realtor_list[2048];
new g_business_realtor_list_idx[MAX_BUSINESS];
// --------------------

// –иелторское агенство
new Text3D: g_house_realtor_label;
new g_house_realtor_list[2048];
// --------------------

// магазин одежды
new const
	g_business_clothing_skins[2][16][2] = 
{
	{// ћ,—кины 
		{22, 	10000},
		{7, 	2000}, 
		{14, 	10000},
		{17, 	25000},
		{20, 	10000},
		{21, 	10000},
		{23, 	10000},
		{24, 	10000}, 
		{25, 	10000}, 
		{26, 	12000},
		{59, 	18000},
		{60, 	12000},
		{107, 	10000},
		{184, 	12000},
		{240, 	10000},
		{242, 	12000}
	},
	{// ∆,—кины
		{11, 	15000},
		{12, 	10000},
		{13, 	10000}, 
		{40, 	20000}, 
		{41, 	12000},
		{55, 	15000}, 
		{56, 	12000},
		{76, 	25000},
		{87, 	5000},
		{91, 	25000}, 
		{93, 	12000}, 
		{141, 	20000},
		{150, 	25000},
		{169,	18000},
		{194, 	18000},
		{226, 	12000}
	}
};

new const 
	g_business_sound[5] = 
{
	17001,
	4203,
	21000,
	1135,
	1137
};


new g_business_gps[MAX_BUSINESS_GPS][E_BUSINESS_GPS_STRUCT];
new g_business_gps_count; 
new bool: g_business_gps_init;

// ------------------------------------------
new g_fuel_station[MAX_FUEL_STATIONS][E_FUEL_STATION_STRUCT];
new g_fuel_station_loaded;

new const
	g_fuel_station_improvements[4][E_IMPROVEMENTS_STRUCT] = 
{
	{"≈мкость хранилища топлива I", 	9_500, 	0},
	{"≈мкость хранилища топлива II", 	24_000, 0},
	{"≈мкость хранилища топлива III",	58_000, 0},
	{"ќтмена акцизного сбора", 			74_000, 0}
};

// ------------------------------------------
new g_order[MAX_FUEL_STATIONS + MAX_BUSINESS][E_ORDER_STRUCT]; // заказы

new 
	Float: g_med_bed_pos[][] = // позиции коек 
{
	{1119.4232,2.8454,1011.1254},
	{1119.3448,5.7645,1011.1254},
	{1119.3807,8.8700,1011.1254},
	{1119.4486,11.8738,1011.1254},
	{1125.5150,12.2641,1011.1254},
	{1125.6100,7.0507,1011.1254},
	{1125.4763,1.3009,1011.1254},
	{1137.6476,1.3226,1011.1254},
	{1137.6754,7.1543,1011.1254},
	{1137.6488,12.9785,1011.1254},
	{1143.8086,1.2005,1011.1254},
	{1143.7964,4.1174,1011.1254},
	{1143.8356,6.6185,1011.1254},
	{1143.8484,9.6199,1011.1254},
	{1143.7224,12.6108,1011.1254}
};
new g_med_bed_used[sizeof g_med_bed_pos] = {false, ...}; // зан€та ли койка
new Text3D: g_med_bed_label[sizeof g_med_bed_pos]; // зан€та ли койка

// ------------------------------------------
#if defined RAND_WEATHER
new const 
	g_weather[5][E_WEATHER_STRUCT] = 
{
	{"€сна€ погода", 18, 	22},
	{"туман", 		 9, 	15},
	{"гроза", 		 8, 	17},
	{"€сна€ погода", 3, 	21},
	{"€сна€ погода", 1, 	23}
};
#endif

// ------------------------------------------
new g_player_setting[MAX_PLAYERS][E_PLAYER_SETTINGS_STRUCT];
new 
	g_settings_default_values[E_PLAYER_SETTINGS_STRUCT] =
{
	SETTING_CHAT_ADVANCE,
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_ON,
	SETTING_TYPE_OFF,
	SETTING_TYPE_ON
};

// ------------------------------------------
new g_player_gps[MAX_PLAYERS][E_PLAYER_GPS_STRUCT];
new 
	g_gps_default_values[E_PLAYER_GPS_STRUCT] = 
{
	GPS_STATUS_OFF,
	0.0,
	0.0,
	0.0
};

// ------------------------------------------
new const 
	gps_public_places[16][E_GPS_STURCT] = // общественные места
{
	{1912.0990, 2227.6367, 16.0831, 36}, // gps јвтошкола
	{1916.5503,2302.2786,15.1412, 	46}, // gps ¬оенкомат
	{-109.3447,968.9085,11.9098, 	35}, // gps √остиница
	{-138.9926, 596.6835, 12.1355, 	24}, // ќтдел кадров
	{1757.3501, 2242.5107, 15.8600, 55}, // авторынок "батырево"
	{2503.4800, -653.8940, 12.2938, 55}, // авторынок "анашан"
	{-1511.0200, 1608.1721, 36.7735,55}, // авторынок "арзамас"
	{-2243.6758, 263.2350, 24.5337, 55}, // ћото-¬ело рынок
	{-29.9366,761.3693,12.2996, 	56}, // gps јрзамас
	{1825.4800,2095.7598,15.4157, 	56}, // gps Ѕатырево
	{-621.9496,-1653.4738,41.5620, 	56}, // gps Ѕусаево (школа)
	{618.5750,-1282.4309,40.1697, 	56}, // gps Ѕусаево (село)
	{2493.4399, -221.3504, 2.3224,	56}, // √орель
	{1996.1023,1322.5155,26.2795, 	56}, // gps –оговичи
	{-2204.3652,-64.2671,26.1503, 	56}, // gps Ћыткарино
	{-2376.4973,2705.3269,38.3477, 	56}  // gps Ёдово
};

new const 
	gps_transport[8][E_GPS_STURCT] = // транспортные узлы
{
	{531.1042,1660.5426,12.0471, 	42}, // gps ∆/ƒ ¬окзал јрзамаса
	{-93.5390,305.5346,11.6643, 	42}, // gps јвтовокзал јрзамаса
	{787.3928,804.7281,11.6656, 	42}, // gps ÷ентральна€ автостанци€
	{1811.2654,2509.0757,15.2431, 	42}, // gps јвтовокзал Ѕатырево
	{-2152.7932,-26.6614,26.7506, 	42}, // gps јвтовокзал Ћыткарино
	{-2476.7495,2840.1870,37.2047, 	42}, // gps јвтовокзал Ёдово
	{1870.7665,1653.4486,14.8702, 	5},  // gps јэропорт Ѕатырево
	{-2382.7354,330.6089,23.6337, 	5}   // gps јэропорт Ћыткарино	
};

new const 
	gps_state_organizations[7][E_GPS_STURCT] = // государственные организации
{
	{-104.4040, -304.4531, 4.2299, 	19}, // gps ѕравительство области
	{210.2719, 1472.5919, 12.6686, 	30}, // gps ƒѕ—
	{26.4780, 279.5637, 12.5592, 	30}, // gps ѕѕ—
	{-398.1014,928.1746,11.7182, 	30}, // gps ‘едеральна€ —лужба Ѕезопасности
	{-286.9034, 576.8859, 12.8447, 	22}, // gps √ородска€ больница
	{-317.9124,819.6490,12.6280, 	42}, // gps “–  "–итм"
	{1314.7473,-294.8979,3.9023, 	18}  // gps ¬оинска€ часть
};

new const 
	gps_gangs[3][E_GPS_STURCT] = // Ѕазы банд и мафий
{
	{1634.4454,-289.5074,4.0075, 	62}, // јрзамасска€ ќѕ√
	{1943.9056,2164.6016,15.2714, 	58}, // gps Ѕатыревска€ ќѕ√
	{-2379.8054,198.8082,20.7308, 	60}  // gps Ћыткаринска€ ќѕ√
};

new const 
	gps_jobs[11][E_GPS_STURCT] = // по работе
{
	{514.9210, 1641.4650, 12.5089, 	11}, // gps √рузчик
	{2296.8718, 1757.0005, 1.0234, 	11}, // gps шахтер
	{2396.0789, -592.4421, 12.1172, 11}, // gps лесоруб
	{-1060.9310, 2208.5684, 38.0988, 51}, // gps завод
	{357.0453, -450.2787, 3.8894,	51}, // gps Ќефтедобывающий завод
	{974.5341, 635.4688, 11.6643, 	51}, // gps Ќефтеперерабатывающий завод
	{-203.8864, 237.5492, 12.0956, 	40}, // gps јвтопарк дл€ развозчиков (дальнобойщиков) продуктов
	{0.0, 0.0, 0.0, 				40}, // gps јвтопарк дл€ развозчиков (дальнобойщиков) топлива
	{1841.5697, 2535.8357, 15.6639, 20}, // ѕожарна€ станци€ Ѕатырево
	{1591.9219, -281.4026, 4.0002, 	20}, // ѕожарна€ станци€ јрмейска€
	{1178.4241, 2505.9893, 12.4769, 27}  // gps —то€нка автомехаников
};

new const 
	gps_banks[3][E_GPS_STURCT] = // банки
{
	{627.2487, 799.3587, 12.6472, 	52}, // gps ÷ентральный банк јрзамаса
	{1853.5131, 2035.2599, 16.9742, 52}, // gps Ѕанк Ѕатырево
	{0.0, 0.0, 0.0, 				52}  // gps Ѕанк Ёдово
};

new const 
	gps_entertainment[11][E_GPS_STURCT] = // развлечени€
{
	{-2462.2595,1663.9941,52.2873, 	37}, // gps  ремль
	{2336.4331,962.5314,15.9075, 	37}, // gps √устой лес
	{-2154.9751,-619.4980,41.4841, 	37}, // gps ќхотничий лес
	{-171.7977,461.1872,12.4508, 	37}, // gps —тадион јрзамаса
	{1722.2754,-983.1115,9.2233, 	37}, // gps —тарый наркопритон
	{-13.4604,-2898.7205,32.9300, 	37}, // gps ћа€к на берегу мор€
	{-2478.4509,2515.4011,46.0109, 	37}, // gps ÷ентральное кладбище
	{495.0134,-2400.3999,34.8739, 	37}, // gps «акрыта€ электростанци€
	{-256.6781,509.1857,12.5414, 	37}, // gps Ќора в метро
	{1419.8693,1685.7460,15.3943, 	37}, // gps Ѕомбоубежище в аэропорту
	{2475.5024,-736.0927,12.1080, 	37}  // gps «аброшенный торговый центр
};

// ------------------------------------------
new help_info[14][E_HELP_INFO_STRUCT] = 
{
	{
		"ќ проекте",
		""SERVER_NAME" RolePlay - один из самых попул€рных проектов\n"\
		"многопользовательской GTA Criminal Russia Multiplayer. ¬ насто€щее\n"\
		"врем€ у нас работают 9 серверов, а увлекательные особенности игрового\n"\
		"процесса привлекают все больше и больше новых игроков.\n\n"\
		"ћы постарались объединить лучшие элементы ролевой игры SA-MP с\n"\
		"новыми иде€ми и возможност€ми. ¬ы сможете выбрать любимую\n"\
		"работу, или даже открыть свой собственный бизнес, зарабатыва€\n"\
		"неплохие деньги. ћожет ¬ам захочетс€ вступить в одну из организаций\n"\
		"и начать карьерный рост. »ли же можно просто при€тно провести\n"\
		"врем€, прин€в участие в гонках, или сыграв с друзь€ми в морской бой.\n\n"\
		"ћы уверены, что "SERVER_NAME" RolePlay поможет ¬ам при€тно провести пару\n"\
		"свободных часов за онлайн-игрой!"
	},
	{
		"Ѕезопасность",
		"¬аш аккаунт - это ваша собственность. Ќикому не давайте свой пароль,\n"\
		"иначе ¬ы рискуете утратить все свои достижени€. Ќе скачивайте\n"\
		"дополнительные программы - моды, читы, трейнеры. ¬се они\n"\
		"создаютс€ злоумышленниками только с одной целью - заполучить\n"\
		"доступ к ¬ашему аккаунту.\n\n"\
		"»гроки "SERVER_NAME" RolePlay могут использовать расширенные настройки\n"\
		"безопасности,  которые практически исключает возможность взлома.\n"\
		"ѕодробнее: команда {66CCFF}/menu > Ќастройки безопасности."
	},
	{
		"ќсновы игры",
		"»гра€ на сервере, ¬ы получаете очки опыта. ѕри накоплении их\n"\
		"определенного количества происходит переход на следующий уровень.\n"\
		"— каждым новым уровнем открываютс€ новые возможности и\n"\
		"станов€тс€ доступны более интересные функции.\n\n"\
		"ƒл€ просмотра статистики воспользуйтесь командой /menu. ¬ игровом\n"\
		"процессе посто€нно нужно будет пользоватьс€ подобными командами.\n"\
		"ќни ввод€тс€ в игровой чат (F6) через косую черту, например /anim\n"\
		"/help и т. п. ¬ведите /menu, далее выберите пункт \"—писок команд\". “ам\n"\
		"расположен полный перечень команд, а также кнопка \"ќписание команд\"\n"\
		"дл€ по€снени€ каждой из них."
	},
	{
		"RolePlay",
		"RolePlay - это такой вид игры, в котором у каждого есть сво€ роль. Ѕудь\n"\
		"то таксист, водитель автобуса или шахтер, полицейский или мафиози,\n"\
		"член банды или военный.  аждый игрок определ€ет, кем он хочет быть.\n\n"\
		"RolePlay (RP) режим подразумевает знание некоторых правил и\n"\
		"пон€тий, несоблюдение которых влечет за собой наказани€. — этой\n"\
		"информацией можно ознакомитьс€ на нашем форуме, там же можно\n"\
		"задать все интересующие ¬ас вопросы по игровому процессу."
	},
	{
		"ѕервые шаги",
		"ѕервым делом необходимо заработать деньги. ¬ государстве есть\n"\
		"предпри€ти€, куда ¬ы сможете устроитьс€ на первое врем€. Ёто шахта,\n"\
		"завод и городской склад. –абота€ там, ¬ы не только получите прибыль,\n"\
		"но и поддержите экономическую цепочку государства. ј еще ¬ы\n"\
		"найдете новых друзей и получите немало удовольстви€.\n\n"\
		"¬се эти места можно найти, использу€ команду /gps. ƒобратьс€ до\n"\
		"нужного объекта ¬ам поможет автобусный  транспорт. ѕр€мо с ∆ƒ\n"\
		"вокзала ходит автобус до шахты, а  до склада может подбросить любой\n"\
		"городской маршрут. „тобы узнать подробнее о автобусных схемах,\n"\
		"введите команду /bushelp.\n\n"\
		"ѕосле того, как ¬ы заработаете деньги, отправл€йтесь в автошколу и\n"\
		"сдавайте экзамен на права. ќни позвол€т купить или арендовать\n"\
		"автомобиль, устроитьс€ на более высокооплачиваемую и интересную\n"\
		"работу. —дача на права стоит 600 рублей, перед поездкой в автошколу\n"\
		"убедитесь, что имеете такую сумму."
	},
	{
		"ќбщение",
		"¬о врем€ игры вам посто€нно придетс€ взаимодействовать с людьми. —уществует 2\n"\
		"вида чатов:\n\n"\
		"\t1. IC (In Character) - общение внутри игры и только дл€ внутренних игровых\n"\
		"\tситуаций. „ат вызываетс€ клавишей F6.\n"\
		"\t2. OOC (Out Of Character) - все, что касаетс€ реального, не игрового мира.\n"\
		"\tЌажмите F6, далее введите команду /n и свое сообщение. ќно выделитс€ в\n"\
		"\tдвойные скобки.\n\n"\
		"ѕомимо этого, существуют много других способов общени€. ¬ы можете звонить по\n"\
		"телефону или отправл€ть SMS сообщени€. ¬ступив в организацию, по€витс€\n"\
		"возможность св€зыватьс€ с сотрудниками по рации, а также масса других\n"\
		"интересных функций.\n\n"\
		"»нформацию о командах общени€ можете узнать в соответствующем разделе меню:\n"\
		"{66CCFF}/menu > —писок команд"
	},
	{
		"“ранспорт",
		"“ранспортна€ система - одна из важнейших в стране. — ее помощью возможна\n"\
		"стабильна€ работа большинства предпри€тий и организаций.\n\n"\
		"ќсновной вид транспорта - это автобус. ћаршруты проложены по всему\n"\
		"государству и св€зывают все населенные пункты и предпри€ти€.\n"\
		"“акси - наиболее удобный вид транспорта. ¬ы сможете добратьс€ до любого места,\n"\
		"однако така€ поездка будет стоить значительно дороже, чем на автобусе.\n"\
		"ѕоезд - быстрый и недорогой вид транспорта. ¬ы за несколько минут сможете\n"\
		"добратьс€ до любой станции, но составы курсируют не так часто.\n\n"\
		"√осударственной транспортной компании всегда требуютс€ новые работники. ќ\n"\
		"ваканси€х и требовани€х можно узнать в ближайшей мэрии (/gps)."
	},
	{
		"√осударственна€ система",
		"¬с€ игрова€ жизнь проходит под контролем правительства -\n"\
		"основной организации в государстве. ¬ ее состав вход€т мэрии трех\n"\
		"городов и администраци€ ѕрезидента. –аз в мес€ц проход€т\n"\
		"выборы, где каждый имеет право голоса. ј перед этим проводитс€ не\n"\
		"менее интересна€ избирательна€ кампани€, где кандидаты на пост\n"\
		"ѕрезидента устраивают дебаты, концерты и митинги, завоевыва€\n"\
		"своих новых избирателейЕ\n\n"\
		"√осударственную систему и ее значение не опишешь несколькими\n"\
		"предложени€ми. ѕолитическа€ жизнь необычайно насыщенна€, и ¬ы\n"\
		"сами убедитесь в этом с первых дней жизни у нас!"
	},
	{
		"∆илье",
		"ѕо всему государству расположены жилые дома, которые можно купить.\n"\
		" аждый дом имеет свою стоимость, которую определ€ют множество\n"\
		"факторов. ћожно купить вагончик за небольшие деньги, или отдать\n"\
		"миллионы за роскошный особн€к в элитном районе.\n\n"\
		"≈сли у ¬ас есть дом, то вы сможете приобрести машину, или купить\n"\
		"дополнительные улучшени€, такие как шкаф дл€ хранени€ вещей или\n"\
		"автоматические двери. » это только некоторые возможности жиль€.\n\n"\
		"¬ зависимости от престижности дома, с ¬ас будет взиматьс€ ежедневна€\n"\
		"квартплата. ≈сли долгое врем€ на счету будет сохран€тьс€ отрицательный\n"\
		"баланс, есть веро€тность, что работники мэрии высел€т ¬ас."
	},
	{
		"Ѕизнес и ј«—",
		"¬ы можете открыть собственный бизнес, и зарабатывать неплохие\n"\
		"деньги. Ёто может быть небольша€ пекарн€, магазин одежды или\n"\
		"развлекательный центр, столова€, парикмахерска€, либо обычна€\n"\
		"продуктова€ лавка. »ли вы захотите стать совладельцем крупной сети\n"\
		"супермаркетов, ресторанов или театров. ¬ нашей стране существует\n"\
		"огромное количество разнообразных предпри€тий.\n\n"\
		"»ме€ бизнес, перед ¬ами откроютс€ большие возможности дл€\n"\
		"привлечени€ новых клиентов, что будет посто€нно повышать ¬аши\n"\
		"доходы. ¬ы сможете регулировать цены, улучшать различные\n"\
		"характеристики своего предпри€ти€, одновременно провод€ борьбу с\n"\
		"конкурентами.\n\n"\
		"ј«— (автозаправочные станции) - особый тип бизнеса, доходы от\n"\
		"которого значительно выше, чем от обычных предпри€тий. ƒл€\n"\
		"нормальной работы ј«— нужно посто€нно заключать контракты со\n"\
		"службой доставки топлива. Ѕизнесмен может владеть обычным\n"\
		"предпри€тием и ј«— одновременно."
	},
	{
		"Ѕанки, хранение средств",
		" аждый игрок получает свой счет в банке. Ќа него перечисл€етс€\n"\
		"зарплата и прочие доходы. Ётот счет называетс€ основным, и доступен в\n"\
		"любом банкомате.\n\n"\
		"ѕомимо этого, ¬ы можете воспользоватьс€ услугами профессиональных\n"\
		"банков, найти которые поможет GPS. “ам можно открыть до 8\n"\
		"дополнительных счетов.  аждый из них имеет свой номер, который\n"\
		"выдаетс€ банком при создании счета. «на€ его, любой игрок может\n"\
		"перечислить вам деньги, даже если вы оффлайн. Ќапример, можно\n"\
		"создать счет с названием \"Ѕлаготворительность\", написать об открытии\n"\
		"благотворительной организации через —ћ», сообщить номер счета, и\n"\
		"любой сможет перечислить на него деньги в отделении банка или через\n"\
		"банкомат.\n\n"\
		"ƒополнительные счета можно настраивать, устанавливать защиту\n"\
		"PIN-кодом, измен€ть названи€ а также просматривать подробную\n"\
		"историю операций."
	},
	{
		"ќрганизации",
		"¬ нашей стране работает большое количество организаций. ќни могут\n"\
		"быть как официальными (правительство, ћ¬ƒ, мин. ќбороны, мин.\n"\
		"«дравоохранени€, “¬ и радио), так и неофициальными (банды и мафии).\n\n"\
		"ѕри достижении определенного уровн€, ¬ы можете вступить в любую из\n"\
		"организаций. –уководство некоторых может выдвигать и дополнительные\n"\
		"требовани€ дл€ вступлени€. Ќапример, если ¬ы хотите попасть в банду,\n"\
		"то ¬ам придетс€ продемонстрировать свое умение владеть оружием. ј\n"\
		"если ¬ы видите себ€ в роли редактора объ€влений, то нужно красиво и\n"\
		"грамотно писать. ќ дополнительных требовани€х сообщит руководство\n"\
		"организации во врем€ набора сотрудников.\n\n"\
		"ѕосле вступлени€, ¬ам будет доступно продвижение по карьерной\n"\
		"лестнице, постепенно откроютс€ новые возможности. — каждым повышением\n"\
		"будет увеличиватьс€ ¬аша зарплата и статус в обществе. ¬ы найдете\n"\
		"новых друзей, а со временем сможете зан€ть одну из руковод€щих\n"\
		"должностей. ∆изнь в организации необычайно интересна€ и разнообразна€!"
	},
	{
		"–аботы",
		"¬ мэрии вашего города работает отдел зан€тости, где ¬ы можете\n"\
		"устроитьс€ на любую работу. —ледует обратить внимание, что некоторые\n"\
		"работы доступны при достижении определенного уровн€. ¬ы не можете\n"\
		"одновременно быть оформленным на работу в мэрии и состо€ть в\n"\
		"организации.\n\n"\
		"ѕомимо основных работ существуют и дополнительные.   ним относ€тс€\n"\
		"работы на шахте, заводе и складе. “акие работы можно совмещать с\n"\
		"основными и зарабатывать больше денег. »спользуйте команду /gps дл€\n"\
		"того, чтобы найти места расположени€ различных работ. Ќа месте вы\n"\
		"получите подробные инструкции, как и что следует делать."
	},
	{
		"–азвлечени€",
		"≈сли у вас по€вилось свободное врем€ и желание, то рекомендуем вам\n"\
		"посетить одно из развлекательных меропри€тий.  аждые 3 часа\n"\
		"провод€тс€ гонки, поучаствовать в которых может любой желающий.\n"\
		"—ейчас команда разработчиков проекта готовит и другие, не менее\n"\
		"интересные развлечени€!\n\n"\
		"ѕомимо событий по расписанию, администраторы сервера очень часто\n"\
		"провод€т разного рода меропри€ти€, участвовать в которых не только\n"\
		"интересно, но и выгодно - победители получают ценные подарки.\n\n"\
		"ќ проведении того или иного развлекательного меропри€ти€ вы узнаете\n"\
		"заранее из информационных сообщений в общем чате."
	}
};
new help_info_items[35 * (sizeof help_info) + 1];
new help_info_CP;

// ------------------------------------------
new info_pickup[9][E_INFO_PICKUP_STRUCT] = 
{
	{
		"–абота грузчика",
		"“ут ¬ы можете подработать грузчиком. „тобы устроитьс€ на работу\n"\
		"пройдите к раздевалке р€дом. “ам же можно получать зарплату.\n\n"\
		"¬ы можете переносить товары вручную или перевозить на погрузчике.\n"\
		"≈сли у ¬ас нет прав, то второй способ будет недоступен.\n\n"\
		"ѕри ручном переносе грузов старайтесь не бежать и не делать резких\n"\
		"движений, иначе ¬ы рискуете уронить его.", 
		"»нформаци€\nо работе",
		0x66CCFFFF,
		509.9358, 1639.0743, 12.1895
	},
	// -------------------------------
	{
		"Ўахта",
		"“ут ¬ы можете устроитьс€ на работу шахтером.\n"\
		"ƒл€ этого найдите служебное помещение на заднем дворе шахты,\n"\
		"там ¬ам выдадут спецодежду и необходимый инструмент, а также\n"\
		"расскажут что делать дальше.\n\n"\
		"Ўахта специализируетс€ на добыче железной руды, из которой\n"\
		"потом в кузнице получают металл. ќн широко примен€етс€ на\n"\
		"других предпри€ти€х, поэтому регул€рна€ добыча руды очень важна\n"\
		"дл€ экономики государства.", 
		"ќ шахте",
		0x66CCFFFF,
		2385.3167, 1766.6891, -1.7170
	},
	{
		"ќ подземной добыче",
		"”ченые вы€снили что руда, котора€ находитс€ в подземных залежах\n"\
		"намного качественнее той,  которую добывают на поверхности.\n"\
		"»менно поэтому было прин€то решение построить шахтовый\n"\
		"подъемник дл€ подземной добычи.\n\n"\
		"¬ св€зи со сложностью подземных работ шахтерам полагаетс€\n"\
		"преми€ за каждую партию руды, котора€ была добыта под землей.", 
		"ѕодземна€\nдобыча",
		0xFFCD00FF,
		2376.9819, 1729.6956, -2.1078
	},
	{
		"ќ применении металла",
		"ѕолученный на шахте металл достаточно широко примен€етс€\n"\
		"различными организаци€ми, однако основной потребитель - это\n"\
		"завод по производству продуктов. Ѕолее подробно о назначении\n"\
		"этого предпри€ти€ можно узнать, приехав туда (/gps).\n\n"\
		"ƒл€ нормальной работы заводу посто€нно требуетс€ металл,\n"\
		"транспортировкой которого занимаетс€ его служба доставки. Ќа\n"\
		"этом складе развозчики закупают металл дл€ предпри€ти€.",
		"–азвозчики\nметалла",
		0xFFCD00FF,
		2327.0488, 1741.1315, 0.9221
	},
	// -------------------------------
	{
		"«авод по производству продуктов",
		"«десь находитс€ одно из важнейших предпри€тий в государстве - завод\n"\
		"по производству продуктов. ќт его регул€рной работы зависит\n"\
		"де€тельность всего частного бизнеса.\n\n"\
		"¬ данный момент можно устроитьс€ на одну из двух специальностей -\n"\
		"работник производственного цеха или службы доставки. Ќа месте ¬ы\n"\
		"найдете более подробную информацию о каждой из них.",
		"ќ заводе\nпо производству\nпродуктов",
		0xFFCD00FF,
		-1055.7217, 2142.2402, 38.0322
	},
	{
		"«авод - —клад исходных материалов",
		"Ќа заводе хран€тс€ материалы, которые используютс€ работниками цеха\n"\
		"дл€ изготовлени€ продуктов, а также готовые продукты. »сходные\n"\
		"материалы доставл€ютс€ на завод его службой доставки. „тобы\n"\
		"устроитьс€ туда на работу, пройдите в раздевалку р€дом, далее\n"\
		"на территории завода подойдите и выберите транспорт в зависимости\n"\
		"от того, что именно ¬ы хотите привезти на завод.\n\n"\
		"ћатериалы покупаютс€ за свой личный счЄт, а ¬аша выручка - это\n"\
		"разница, котора€ выходит при продаже материалов заводу.",
		"–абота в\nслужбе доставки",
		0xFFCD00FF,
		-1084.9386, 2167.1868, 38.0369
	},
	{
		"«авод - ѕроизводственный цех",
		"„тобы начать рабочий день пройдите к любой раздевалке. “ам же\n"\
		"можно закончить его и получить выручку. ƒалее пройдите к\n"\
		"раздаточному столу (отмечены желтыми маркерами), возьмите\n"\
		"металл, после чего отправл€йтесь на любое свободное место в центре\n"\
		"цеха. “опливо, необходимое дл€ изготовлени€ продукта, автоматически\n"\
		"подаетс€ к каждому столу, и ¬ам не нужно брать его дополнительно.\n\n"\
		"„ем больше ¬ы работаете в цеху, тем выше ваши навыки производства,\n"\
		"и тем меньше шанс создать бракованный продукт. Ќавык будет\n"\
		"увеличиватьс€ по мере создани€ новых продуктов.",
		"–абота в\nпроизводственном цеху",
		0xFFCD00FF,
		317.1251, -210.3592, 1006.5694
	},
	// -------------------------------
	{
		"Ќефтезавод",
		"Ќа нефтезаводе можно приобрести топливо дл€ завода по производству\n"\
		"продуктов или дл€ развоза его по заправочным станци€м. –аботают 2\n"\
		"линии, выбрать нужную ¬ам помогут указатели.\n\n"\
		"«апасы хранилища нефтезавода посто€нно пополн€ютс€ по мере\n"\
		"добычи и очистки нефти.",
		"Ќефтезавод",
		0xFFCD00FF,
		1023.0947, 637.6918, 12.0272
	},
	// -------------------------------
	{
		"√остиницы и отели",
		"{FFFFFF}¬ гостиницах можно сн€ть один из номеров. ¬ам будет выделено\n"\
		"место дл€ парковки автомобил€, который можно купить на любом\n"\
		"авторынке или подержанный с рук. —утки в номере обойдутс€ в 1000 руб\n\n"\
		"»нформацию о свободных номерах можно узнать в окошке р€дом с ¬ами.",
		"",
		0x99CC00FF,
		722.0862, 602.2735, 1002.9598
	}
};

// ------------------------------------------
new g_server_radio[7][E_SERVER_RADIO_STRUCT] = 
{
	{
		"–адио ћелоди€",
		"http://online-radiomelodia.tavrmedia.ua/RadioMelodia.m3u"
	},
	{
		"Kiss FM (UA)",
		"http://kissfm.ua/v3/kiss-2.m3u"
	},
	{
		"–адио Ўансон",
		"http://radio02-cn03.akadostream.ru:8108/shanson128.mp3"
	},
	{
		"–адио –екорд",
		"http://online.radiorecord.ru:8101/rr_128"
	},
	{
		"Sky Radio",
		"http://stream05.akaver.com/skyradio_hi.mp3"
	},
	{
		"DFM Radio",
		"http://striiming.trio.ee/dfm64.mp3.m3u"
	},
	{
		"Rock Online",
		"http://skycast.su:2007/rock-online.m3u"
	}
};
new g_server_radio_items[37 * (sizeof g_server_radio) + 1];

// ------------------------------------------
new anim_list[74][E_ANIM_LIST_STRUCT] = 
{
	{"“анец 1",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"“анец 2",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"“анец 3",                         "",					"",						0.0, false, 0, 0, 0, 0},
	{"“анец 4", 						"",					"",						0.0, false, 0, 0, 0, 0},
	{"“анец 5",							"DANCING",			"DAN_Left_A",			4.0, true,  0, 0, 0, 0},
	{"“анец 6",							"DANCING",			"dnce_M_a",				4.0, true,  0, 0, 0, 0},
	{"ћахать рукой",					"ON_LOOKERS",		"wave_loop",			4.0, true,  0, 0, 0, 0},
	{"Ћечь на землю",					"BEACH",			"bather",				4.0, true,  0, 0, 0, 0},
	{"ѕоходка пь€ного",					"PED",				"WALK_DRUNK",			4.0, true,  1, 1, 1, 0},
	{" увыркатьс€",						"ped",				"Crouch_Roll_L",		4.0, true,  1, 1, 1, 1},
	{"ѕопрощатьс€",						"ped",				"endchat_03",			4.0, true,  1, 1, 1, 0},
	{"„итать рэп",						"benchpress",		"gym_bp_celebrate",		4.0, true,  0, 1, 1, 0},
	{"”крытьс€",						"ped",				"cower", 				3.0, true,  0, 0, 0, 0},
	{"ѕодложить бомбу",					"BOMBER",			"BOM_Plant",			4.0, false, 0, 0, 0, 0},                    
	{"Ќадеть маску",					"SHOP",				"ROB_Shifty",			4.0, false, 0, 0, 0, 0},                       
	{"¬ыт€нуть руку перед собой",		"SHOP",				"ROB_Loop_Threat",		4.0, true,  0, 0, 0, 0},          
	{"—ложить руки вместе",				"COP_AMBIENT",		"Coplook_loop",			4.0, true,  0, 1, 1, 0},                
	{"—ъел что-то не то...",			"FOOD",				"EAT_Vomit_P", 			3.0, false, 0, 0, 0, 0},               
	{"ѕерекусить",						"FOOD",				"EAT_Burger", 			3.0, false, 0, 0, 0, 0},                         
	{"Ўлепнуть кому-то по заднице",		"SWEET",			"sweet_ass_slap",		4.0, false, 0, 0, 0, 0},        
	{"ѕредложить наркотики",			"DEALER",			"DEALER_DEAL",			4.0, false, 0, 0, 0, 0},               
	{"Ёффект электрошокера",			"CRACK",			"crckdeth2",			4.0, true,  0, 0, 0, 0},               
	{"ћужское курение",					"SMOKING",			"M_smklean_loop",		4.0, true,  0, 0, 0, 0},                    
	{"∆енское курение",					"SMOKING",			"F_smklean_loop",		4.0, true,  0, 0, 0, 0},                    
	{"ѕрисесть",						"BEACH",			"ParkSit_M_loop",		4.0, true,  0, 0, 0, 0},                           
	{"¬осточное единоборство",			"PARK",				"Tai_Chi_Loop",			4.0, true,  0, 0, 0, 0},             
	{"¬ыпить напиток",					"BAR",				"dnk_stndF_loop",		4.0, true,  0, 0, 0, 0},                     
	{"–асслаблено сесть",				"BLOWJOBZ",			"BJ_COUCH_LOOP_P",		4.0, true,  0, 0, 0, 0},                  
	{"ѕоза вратар€",					"BSKTBALL",			"BBALL_def_loop",		4.0, true,  0, 0, 0, 0},                       
	{"Facepalm",						"MISC",				"plyr_shkhead",			4.0, false, 0, 0, 0, 0},                           
	{"Ёлемент восточного танца",		"BSKTBALL",			"BBALL_idle",			4.0, true,  0, 0, 0, 0},           
	{"ѕозвать кого-то",					"CAMERA",			"camstnd_cmon",			4.0, true,  0, 0, 0, 0},                    
	{"–уки вверх!",						"PED",				"HANDSUP",				4.0, 2, 1, 0, 1, 0},                        
	{"—пать на боку",					"CRACK",			"crckidle2",			4.0, true,  0, 0, 0, 0},                      
	{"—пать на спине",					"CRACK",			"crckidle4",			4.0, true,  0, 0, 0, 0},                     
	{"—мотреть по сторонам",			"DEALER",			"DEALER_IDLE",			4.0, true,  0, 0, 0, 0},               
	{"ќблокотитьс€ на бок",				"GANGS",			"leanIDLE",				4.0, true,  0, 0, 0, 0},                
	{"“олкнуть боком",					"GANGS",			"shake_carSH",			4.0, false, 0, 0, 0, 0},                     
	{"–аздумье",						"GANGS",			"smkcig_prtl",			4.0, false, 0, 0, 0, 0},                           
	{"Ћечь, оперевшись на ладонь",		"BEACH",			"ParkSit_W_loop",		4.0, true,  0, 0, 0, 0},         
	{"—есть на стул",					"INT_HOUSE",		"LOU_Loop",				4.0, true,  0, 0, 0, 0},                      
	{"—идеть уставшим за компьютером",	"INT_OFFICE",		"OFF_Sit_Bored_Loop",	4.0, true,  0, 0, 0, 0},     
	{"—идеть за столом",				"INT_OFFICE",		"OFF_Sit_Idle_Loop",	4.0, true,  0, 0, 0, 0},                   
	{"—идеть и печатать",				"INT_OFFICE",		"OFF_Sit_Type_Loop",	4.0, true,  0, 0, 0, 0},                  
	{"¬з€ть что-то и рассмотреть",		"INT_SHOP",			"shop_shelf",			4.0, false, 0, 0, 0, 0},         
	{"—есть, закинув ногу на ногу",		"JST_BUISNESS",		"girl_02",				4.0, true,  0, 0, 0, 0},        
	{"ќтказатьс€ от чего-либо",			"KISSING",			"GF_StreetArgue_02",	4.0, false, 0, 0, 0, 0},            
	{"ѕоцелуй 1",						"KISSING",			"Grlfrd_Kiss_01",		4.0, false, 0, 0, 0, 0},                          
	{"ѕоцелуй 2",						"KISSING",			"Grlfrd_Kiss_02",		4.0, false, 0, 0, 0, 0},                          
	{"ѕоцелуй 3",						"KISSING",			"Grlfrd_Kiss_03",		4.0, false, 0, 0, 0, 0},                          
	{"–азмахивать руками на месте",		"LOWRIDER",			"RAP_B_Loop",			4.0, true,  0, 0, 0, 0},        
	{"»скуственное дыхание",			"MEDIC",			"CPR",					4.0, false, 0, 0, 0, 0},               
	{"ѕощечины дл€ лежачего",			"MISC",				"bitchslap",			4.0, true,  0, 0, 0, 0},              
	{"ѕодгл€дывать через что-то",		"MISC",				"bng_wndw",				4.0, false, 0, 0, 0, 0},          
	{"ƒвижени€ тореодора",				"MISC",				"KAT_Throw_K",			4.0, false, 0, 0, 0, 0},                 
	{"—есть на стул (2)",				"MISC",				"SEAT_LR",				4.0, true,  0, 0, 0, 0},                  
	{"—есть на стул (3)",				"ped",				"SEAT_idle",			4.0, true,  0, 0, 0, 0},                  
	{"—мотреть наверх",					"ON_LOOKERS",		"lkup_loop",			4.0, true,  0, 0, 0, 0},                    
	{"”казать рукой наверх",			"ON_LOOKERS",		"Pointup_loop",			4.0, true,  0, 0, 0, 0},               
	{"Ѕыть в страхе",					"ON_LOOKERS",		"panic_loop",			4.0, true,  0, 0, 0, 0},                      
	{"ѕризывать к чему-либо",			"ON_LOOKERS",		"shout_02",				4.0, true,  0, 0, 0, 0},              
	{"—ходить по-маленькому",			"PAULNMAC",			"Piss_loop",			4.0, true,  0, 0, 0, 0},              
	{"√ангстерский жест",				"GHANDS",			"gsign1LH", 			3.0, true,  0, 0, 0, 0},                  
	{"√олосовать на остановке",			"ped",				"IDLE_taxi", 			3.0, true,  0, 0, 0, 0},            
	{"”дар ногой",						"POLICE",			"Door_Kick",			4.0, false, 0, 0, 0, 0},                         
	{"—тучатьс€ в дверь",				"POLICE",			"CopTraf_Stop",			4.0, true,  0, 0, 0, 0},                  
	{"”строить бунт",					"RIOT",				"RIOT_ANGRY_B",			4.0, true,  0, 0, 0, 0},                      
	{"ѕританцовывать",					"RAPPING",			"RAP_C_Loop",			4.0, true,  0, 0, 0, 0},                     
	{"Ћечь на землю (2)",				"SWAT",				"gnstwall_injurd",		4.0, true,  0, 0, 0, 0},                  
	{"ѕлохое самочувствие",				"SWEET",			"Sweet_injuredloop",	4.0, true,  0, 0, 0, 0},                
	{"ѕриветствие 1",					"RIOT",				"RIOT_ANGRY",			4.0, false, 0, 0, 0, 0},                      
	{"ѕриветствие 2",					"GHANDS",			"gsign2",				4.0, false, 0, 0, 0, 0},                      
	{"ѕриветствие 3",					"GHANDS",			"gsign5",				4.0, false, 0, 0, 0, 0},                      
	{"ѕриветствие 4",					"GHANDS",			"gsign4",				4.0, false, 0, 0, 0, 0}
};
new anim_list_items[34 * (sizeof(anim_list)+1) + 1];
new 
	g_anim_libs[38][13] = 
{
	"BAR",
	"BASEBALL",
	"BEACH",
	"BENCHPRESS",
	"BLOWJOBZ",
	"BOMBER",
	"BSKTBALL",
	"CAMERA",
	"CARRY",
	"COP_AMBIENT",
	"CRACK",
	"CRIB",
	"DANCING",		
	"DEALER",
	"FOOD",
	"GANGS",
	"GHANDS",
	"GRAVEYARD",
	"INT_HOUSE",
	"INT_OFFICE",
	"INT_SHOP",
	"JST_BUISNESS",
	"KISSING",
	"LOWRIDER",
	"MEDIC",
	"MISC",
	"ON_LOOKERS",
	"OTB",
	"PARK",
	"PAULNMAC",
	"PED",
	"POLICE",
	"RAPPING",
	"RIOT",
	"SHOP",
	"SMOKING",
	"SWAT",
	"SWEET"
};

// ------------------------------------------
new map_icons[11][E_MAP_ICONS_STRUCT] = 
{
	{514.92100, 1641.4650, 	12.5089, 	11},	// грузчик
	{2296.8718, 1757.0005, 	1.02340, 	11}, 	// шахтер
	{1912.0990, 2227.6367, 	16.0831, 	36}, 	// автошкола
	{627.24870, 799.35870, 	12.6472, 	52}, 	// ÷ентральный банк арзамаса
	{-138.9926, 596.6835, 	12.1355, 	24}, 	// отдел кадров (устройство на работу)
	{-286.9034, 576.8859, 	12.8447, 	22}, 	// больница јрзамаса
	{210.2719, 	1472.5919, 	12.6686, 	30},	// ƒѕ—
	{26.4780, 	279.5637, 	12.5592, 	30},	// ѕѕ—
	{-402.3015, 928.0378, 	12.5063, 	30},	// ‘Ѕ–
	{-104.4065, -304.4529, 	4.2299, 	19}, 	// ѕравительство
	{-1085.168, 2182.3547, 	38.0679, 	51} 	// завод
	
	//{1841.5697, 2535.8357, 15.6639, 20}, 	// работа пожарника
	//{1591.9219, -281.4026, 4.0002, 20}, 	// работа пожарника
	//{-2243.6758, 263.2350, 24.5337, 55}, 	// ћото-¬ело рынок
	//{-1511.0200, 1608.1721, 36.7735, 55}, // авторынок "арзамас"
	//{1757.3501, 2242.5107, 15.8600, 55}, 	// авторынок "батырево"
	//{2503.4800, -653.8940, 12.2938, 55}, 	// авторынок "анашан"
	//{2396.0789, -592.4421, 12.1172, 11}, 	// лесоруб
	/*
	{287.500, -1611.920, 32.957, 	19},	// ѕолитический центр
	{1481.051, -1800.310, 18.796, 	19},	// ћэри€ Ћос-—антоса
	{-2766.552, 375.595, 6.335, 	19},	// ћэри€ —ан-‘иерро
	{2388.997, 2466.012, 10.820, 	19},	// ћэри€ Ћас-¬ентураса
	{954.032, -909.013, 45.766, 	19},	// јдминистраци€ ѕрезидента
	{-2026.628, -102.066, 35.164, 	36},	// јвтошкола
	{1040.088, 1303.406, 10.820, 	46},	// ¬оенкомат
	{543.785, -1285.105, 17.242, 	55},	// јвторынок эконом-класса (Ћ—)
	{-1969.977, 293.892, 35.172, 	55},	// јвторынок среднего класса (—‘)
	{-1639.857, 1203.093, 7.232, 	55},	// јвторынок среднего класса є2 (—‘)
	{2467.908, 1344.219, 10.820, 	55},	// јвторынок премиум класса (Ћ¬)
	{2132.337, -1141.279, 25.148, 	55},  	// ћото-¬ело рынок (Ћ—)
	{-2934.215, 472.714, 4.907,   	9},		// Ћодочна€ станци€ —ан-‘иерро
	{2695.593, -1704.764, 11.844, 	33},	// ќлимпийский стадион (Ћос-—антос)
	{-2110.070, -445.780, 38.734, 	33},	// —тадион —ан-‘иерро
	{1094.051, 1597.350, 12.547,  	33},	// —тадион Ћас-¬ентураса
	{-1987.333, 1117.820, 54.231, 	21},	// ÷ерковь —ан-‘иерро
	{1124.510, -2037.007, 69.884, 	34},	// Ѕиблиотека
	{1685.279, -2326.648, 13.547, 	5}, 	// јэропорт Ћос-—антоса
	{-1423.747, -287.906, 14.148,	5}, 	// јэропорт —ан-‘иерро
	{1687.536, 1448.273, 10.768, 	5},		// јэропорт Ћас-¬ентураса
	{-2057.501, 455.467, 35.172,	30},	// ћинистерство внутренних дел
	{1555.497, -1675.592, 16.195, 	30},    // ѕолици€ Ћос-—антоса
	{-1605.628, 710.627, 13.867, 	30},    // ѕолици€ —ан-‘иерро
	{2287.098, 2432.367, 10.820, 	30},    // ѕолици€ Ћас-¬ентураса
	{-2440.141, 505.018, 29.945, 	30},    // Ѕаза ‘Ѕ–
	{-2723.119, -318.415, 7.844, 	22},    // ћинистерство здравоохранени€
	{1172.645, -1323.426, 15.403, 	22},    // Ѕольница Ћос-—антоса
	{-2655.147, 636.045, 14.453, 	22},    // Ѕольница —ан-‘иерро
	{1607.554, 1820.330, 10.828, 	22},    // Ѕольница Ћас-¬ентураса
	{2799.1135, -2393.9070, 13.956, 11},	// √ородской склад (работа грузчика)
	{570.8985, 845.2556, -42.0601, 	11},    // Ўахта (работа шахтера)
	{25.2571, 2016.1414, 17.6406, 	11},    // ќружейный «авод
	{1755.867, -1471.561, 13.547, 	20},    // ѕожарна€ станци€ Ћос-—антоса
	{-2026.678, 67.173, 28.692, 	20},    // ѕожарна€ станци€ —ан-‘иерро
	{1737.635, 2086.132, 12.355, 	20},    // ѕожарна€ станци€ Ћас-¬ентураса
	{1420.517, -1623.777, 13.547, 	52},	// Ѕанк Ћос-—антоса
	{-1497.862, 920.231, 7.188, 	52},	// Ѕанк —ан-‘иерро
	{2303.827, -16.188, 26.484, 	52},	// Ѕанк Palomino Creek
	{-2164.409, -2417.677, 30.625, 	52},	// „астный банк Angel Pine
	{-828.056, 1502.750, 19.547, 	52},	// „астный банк Las Barrancas
	{-180.739, 1133.177, 19.742, 	52},	// „астный банк Fort Carson
	{1368.9955, -1279.7224, 13.546,	18},	// јммо Ћ—
	{-2625.8804, 208.2350, 4.8125, 	18}, 	// јммо —‘
	{2159.5447, 943.2023, 10.8203, 	18} 	// јммо Ћ¬
	*/
};

// ------------------------------------------
/*
new g_teleport[52][E_TELEPORT_STRUCT] =
{
	{"¬ход\nЎахта", 570.8985,845.2556,-42.0601, 0, 2397.721923, -1506.840820, 1402.199951, 270.0, 1, 1, T_ACTION_TYPE_BLOCK_LEAVE_AREA},
	{"¬ыход\nЎахта", 2395.729003,-1506.856323,1402.199951, 1, 570.8123,846.9236,-42.1782, 0.0, 0, 0},
	{"ќружейный завод\n{33CC00}ѕроизводственный цех", 25.2571,2016.1414,17.6406, 0, 2575.1948,-1293.1644,1044.1250,180.0, 2, 1},
	{"¬ыход из цеха", 2577.2488,-1289.8835,1044.1250, 1, 21.7136,2016.1512,17.6406,90.0, 0, 0, T_ACTION_TYPE_END_JOB},
	{"¬ход\n—епаратисты", 1033.8883, -325.4606, 73.9922, 0, 2575.3811, -1290.1753, 1044.1250, 180.0, 2, 2},
	{"¬ыход\n—епаратисты", 2577.2488,-1289.8835,1044.1250, 2, 1033.4058,-328.9309,73.9922, 180.0, 0, 0},
	{"¬ход\nћагазин одежды", 461.7169,-1500.8733,31.0444, 0, 206.9517,-138.5365,1003.5078, 0.0, 3, 1},
	{"¬ыход\nћагазин одежды", 207.0709,-140.3752,1003.5078, 1, 459.2207,-1501.2341,31.0386, 100.0, 0, 0},
	{"¬ход\n луб парашютистов", 1956.732177, -2183.552978, 13.546875, 0, 2477.898437, -1659.801879, 1301.085937, 250.0, 1, 1},
	{"¬ыход\n луб парашютистов", 2476.794921, -1658.118896, 1301.085937, 1, 1959.842651, -2183.815673, 13.546875, 270.0, 0, 0},
	{"¬ход\n»таль€нска€ мафи€", 1455.9126,751.0781,11.0234, 0, 2778.327636, -68.417030, 1318.838989, 180.0, 5, 2},
	{"¬ыход\n»таль€нска€ мафи€", 2778.209472, -65.624015, 1318.838989, 1, 1452.3975,751.8056,11.0234, 90.0, 0, 0},
	{"¬ход\n итайска€ мафи€", 691.5789,-1275.8549,13.5607, 0, 2778.327636, -68.417030, 1318.838989, 180.0, 5, 3},
	{"¬ыход\n итайска€ мафи€", 2778.209472, -65.624015, 1318.838989, 3, 687.0280,-1275.7273,13.5569, 90.0, 0, 0},
    {"¬ход\n–усска€ мафи", -2719.3574,-319.1553,7.8438, 0, 2778.327636, -68.417030, 1318.838989, 180.0, 5, 1},
	{"¬ыход\n–усска€ мафи€", 2778.209472, -65.624015, 1318.838989, 1, -2720.8040,-317.0984,7.8438, 46.0, 0, 0},
	{"¬ход\n÷ентр новостей", -2520.9468,-624.9526,132.7846, 0, 302.0153,309.8619,1003.3047, 270.0, 4, 1},
	{"¬ыход\n÷ентр новостей", -2514.9038,-631.6369,548.1392, 1, 2260.8569,-1020.9139,59.2800, 180.0, 0, 0},
	{"¬ход\n¬агос", 2259.4182,-1019.1157,59.2972,0, 302.0153,309.8619,1003.3047, 270.0, 4, 1},
	{"¬ыход\n¬агос", 299.7824,310.0197,1003.3047,1, 2260.8569,-1020.9139,59.2800, 180.0, 0, 0},
	{"¬ход\n√рув", 2495.3813,-1691.1393,14.7656,0, 2496.049804,-1695.238159,1014.742187, 180.0, 3, 1},
	{"¬ыход\n√рув", 2495.9705,-1692.0834,1014.7422,1, 2495.2136,-1687.4659,13.5154, 0.0, 0, 0},
	{"¬ход\nЅаллас", 2148.9360,-1484.8567,26.6241,0, -42.5746,1407.6147,1084.4297, 0.0, 8, 1},
	{"¬ыход\nЅаллас", -42.5770,1405.4683,1084.4297,1, 2144.9917,-1484.8490,25.5391, 90.0, 0, 0},
	{"¬ход\nјцтек", 1898.9922,-2037.9436,13.5469,0, 223.8624,1239.9827,1082.1406, 90.0, 2, 5},
	{"¬ыход\nјцтек", 226.7878,1239.9513,1082.1406,5, 1896.7347,-2037.7805,13.5469, 90.0, 0, 0},
	{"¬ход\n–ифа", 2736.6499,-1952.5166,13.5469,0, 2807.7478,-1172.0414,1025.5703, 0.0, 8, 1},
	{"¬ыход\n–ифа", 2807.6338,-1174.7565,1025.5703,1, 2734.1616,-1952.8425,13.5469, 90.0, 0, 0},
	{"¬ход\nјммо Ћ—", 	1368.9955,-1279.7224,13.5469, 0, 286.3327,-39.3856,1001.5156, 0.0, 1, 1},
	{"¬ыход\nјммо Ћ—", 	285.4695,-41.8051,1001.5156, 1, 1366.2191,-1279.9414,13.5469, 90.0, 0, 0},
	{"¬ход\nјммо —‘", 	-2625.8804,208.2350,4.8125, 0, 286.3327,-39.3856,1001.5156, 0.0, 2, 1},
	{"¬ыход\nјммо —‘",	285.4695,-41.8051,1001.5156, 2, -2625.3286,210.9437,4.6314, 360.0, 0, 0},
	{"¬ход\nјммо Ћ¬", 	2159.5447,943.2023,10.8203, 0, 286.3327,-39.3856,1001.5156, 0.0, 1, 3},
	{"¬ыход\nјммо Ћ¬", 	285.4695,-41.8051,1001.5156,3, 2156.4705,943.6053,10.8203, 90.0, 0, 0},
	{"¬ход\n‘Ѕ–", 1038.8992,1013.1218,11.0000, 0, 207.6686,157.0205,925.4333, 270.0, 1, 1},
	{"¬ыход\n‘Ѕ–", 204.9490,157.1571,925.4330, 1, 1041.0848,1014.7623,11.0000, 315.0, 0, 0},
	{"¬ход\n азарма", 155.7305,1901.9454,18.6063, 0, -2487.3525,178.0012,2621.0859, 90.0, 1, 1},
	{"¬ыход\n азарма", -2485.2573,177.7570,2621.0859, 1, 153.7357,1902.3890,18.9145, 90.0, 0, 0},
	{"¬ход\n—клад оружи€", 206.9499,1923.3923,18.6550, 0, 316.6254,-168.4615,999.5938, 0.0, 6, 6},
	{"¬ыход\n—клад оружи€", 316.3639,-170.2976,999.5938,6, 210.9184,1921.5452,17.6406, 180.0, 0, 0},
	{"јвтошкола", -2026.5953,-102.0658,35.1641, 0, 525.1722,-47.5821,712.8599, 270.0, 1, 1},
	{"¬ыход\nјвтошкола", 523.1808,-47.5365,712.8599, 1, -2026.3342,-99.7921,35.1641, 0.0, 0, 0},
	{"¬ход\nЅанк", 1465.0688,-1009.9221,26.8438, 0, 1468.7880,-1014.1956,38.1769, 90.0, 0, 0},
	{"¬ыход\nЅанк", 1471.1272,-1014.2170,38.1769, 0, 1465.6125,-1012.0323,26.8438, 180.0, 0, 0},
	{"¬ход\nЅольница", 1172.0773,-1323.3893,15.4031, 0, 2051.1880,-1417.5800,2070.2959, 0.0, 1, 1},
	{"¬ыход\nЅольница", 2051.3533,-1419.9624,2070.2959, 1, 1176.6151,-1323.4407,14.0301, 270.0, 0, 0},
	{"ћэри€\nЋос-—антоса", 	1482.6595,-1772.2944,18.7958, 0, 406.8736,212.2076,1043.6328, 90.0, 1, 1},
	{"¬ыход\nћэри€ Ћ—", 	410.2859,212.3754,1043.6328, 1, 1482.6603, -1768.4550, 18.7958, 360.0, 0, 0},
	{"ћэри€\n—ан-‘иерро", 	-2766.5405,375.6842,6.3347, 0, 406.8736,212.2076,1043.6328, 90.0, 1, 2},
	{"¬ыход\nћэри€ —‘", 	410.2859,212.3754,1043.6328, 2, -2762.1362,375.5802,5.5070, 270.0, 0, 0},
	{"ћэри€\nЋас-¬ентураса", 2388.9978,2466.0266,10.8203, 0, 406.8736,212.2076,1043.6328, 90.0, 1, 3},
	{"¬ыход\nћэри€ Ћ¬", 	410.2859,212.3754,1043.6328, 3, 2386.4724,2465.7424,10.8203, 90.0, 0, 0}
};
*/

new g_teleport[34][E_TELEPORT_STRUCT] =
{
	{"«авод\n{33CC00}ѕроизводственный цех", -1060.9310, 2208.5684, 38.0988, 0, 315.6848, -204.5266, 1006.5694, 90.0, 1, 0, T_ACTION_TYPE_BLOCK_LEAVE_AREA},
	{"", 318.0378,-204.4543,1006.5694, 0, -1060.7987,2203.4385,38.0989, 180.0, 0, 0},
	// -------------------------------------------------------------------------------
	{"", -1102.7938, 2208.4773, 37.8580, 0, 314.6193, -218.8094, 1006.5694, 90.0, 1, 0, T_ACTION_TYPE_BLOCK_LEAVE_AREA}, // парковка завод
	{"", 317.0608, -221.2321, 1006.5694, 0, -1102.7172, 2206.0437, 37.8877, 180.0, 0, 0}, // парковка завод
	// -------------------------------------------------------------------------------
	{"ќтдел кадров", -138.9926, 596.6835, 12.1355, 0, 489.8380, -12.5441, 1052.0000, 358.9150, 1, 4},
	{"", 489.8348, -15.8222, 1052.0000, 4, -139.4077, 592.3151, 12.1494, 179.5118, 0, 0},
	// -------------------------------------------------------------------------------
	{"Ѕольница јрзамаса", -286.9034, 576.8859, 12.8447, 0, 1120.3513, -22.6750, 1011.1254, 269.5909, 1, 5},
	{"", 1118.1277, -22.5806, 1011.1254, 5, -286.9034, 579.4, 12.8447, 354.4593, 0, 0, T_ACTION_TYPE_LEAVE_HOSPITAL},
	// -------------------------------------------------------------------------------
	{"", 538.3043,1672.0179,12.1955, 0, 538.5048,1674.9487,12.0097,356.6738, 0, 0}, // вход на ∆ƒ
	{"", 538.3818,1672.8396,12.0097, 0, 538.1058,1670.1481,12.1955,174.7493, 0, 0}, // выход на жд
	// -------------------------------------------------------------------------------
	{"÷ентральный\nЅанк јрзамаса", 627.2487, 799.3587, 12.6472, 0, 911.2521, -786.0607, 1000.5416, 89.0107, 1, 16}, // вход в ÷ентральный Ѕанк јрзамаса
	{"", 914.2891, -786.1344, 1000.5416, 16, 623.4645, 800.7191, 12.0192, 69.1266, 0, 0}, // выход из ÷ентральный Ѕанк јрзамаса
	// -------------------------------------------------------------------------------
	{"Ўахта", 2377.1404, 1725.7539, -2.1648, 0, -2558.8240, 314.2043, -15.7640, 180.6500, 2, 1, T_ACTION_TYPE_BLOCK_LEAVE_AREA}, // вход в шахту
	{"", -2558.7898, 316.3336, -15.7640, 1, 2379.3459,1725.8730,-2.1649,274.3989, 0, 0}, // выход из шахты
	// -------------------------------------------------------------------------------
	{"ѕожарна€ часть\n{33CC00}'Ѕатырево'", 1841.5697, 2535.8357, 15.6639, 0, 1799.6274, 2513.4370, -5.8868, 182.5208, 6, 2}, // вход в мчс
	{"", 1799.5596, 2515.1777, -5.8868, 2, 1844.3589, 2537.6721, 15.6639, 306.2065, 0, 0}, // выход из мчс		
	// -------------------------------------------------------------------------------
	{"ѕожарна€ часть\n{33CC00}'јрмейска€'", 1591.9219, -281.4026, 4.0002, 0, 1799.6274, 2513.4370, -5.8868, 182.5208, 6, 3}, // вход в мчс
	{"", 1799.5596, 2515.1777, -5.8868, 3, 1593.8488, -281.4505, 4.0055, 270.6624, 0, 0}, // выход из мчс		
	// -------------------------------------------------------------------------------
	{"«дание\nƒорожно-патрульной службы", 210.2719, 1472.5919, 12.6686, 0, 431.2317, 58.0819, 996.7030, 88.9639, 1, 5}, // вход ƒѕ—
	{"", 433.6407, 57.9804, 996.7030, 5, 207.2138, 1473.2456,12.0191, 75.8276, 0, 0}, // выход ƒѕ—
	// -------------------------------------------------------------------------------
	{"«дание\nѕатрульно-постовой службы", 26.4780, 279.5637, 12.5592, 0, 431.2317, 58.0819, 996.7030, 88.9639, 1, 6}, // вход ѕѕ—
	{"", 433.6407, 57.9804, 996.7030, 6, 23.4808, 280.7559, 12.0264, 69.2843, 0, 0}, // выход ѕѕ—
	// -------------------------------------------------------------------------------
	{"‘едеральна€\n—лужба Ѕезопасности", -402.3015, 928.0378, 12.5063, 0, 209.4036, -467.8933, 1006.4179, 0.9636, 3, 17},
	{"", 209.4896, -469.7577, 1006.4179, 17, -399.4424, 928.1506,12.1524, 272.3279, 0, 0},
	// -------------------------------------------------------------------------------
	{"", 1163.9615, -443.4521, 4.2487, 0, 792.1524, -126.2730, 1014.2467, 180.3368, 3, 18}, // арми€ вход в склад
	{"", 792.1251, -124.4529, 1014.2467, 18, 1165.9470, -443.2975, 4.2890, 270.8603, 0, 0}, // арми€
	// -------------------------------------------------------------------------------
	{"ћузей", 2275.4463, 1420.2875, 11.7898, 0, 37.2773, 1108.3313, 1007.2911, 90.2186, 3, 19}, // музей вход 
	{"", 40.7215, 1108.4600, 1007.2911, 19, 2275.3875, 1416.4816, 11.4501, 181.8038, 0, 0}, // выход из музе€
	// -------------------------------------------------------------------------------
	{" анализаци€", 62.7362, 675.2307, 7.9805, 0, 599.9689, -447.8394, 974.5893, 93.5427, 3, 20}, //  анализаци€ вход 
	{"", 602.1327, -447.7533, 974.5909, 20, 63.4048, 677.4546, 6.7843, 344.1649, 0, 0}, // выход из  анализации
	// -------------------------------------------------------------------------------
	{"ѕравительство\nобласти", -104.4065, -304.4529, 4.2299, 0, 1581.5858, -774.3824, 1114.7073, 90.8444, 3, 21}, // ѕравительство вход 
	{"", 1583.7642, -774.3983, 1114.7073, 21, -101.4107, -302.7359, 4.2319, 280.4361, 0, 0}, // выход из ѕравительства
	// -------------------------------------------------------------------------------
	{"", -95.6682, -324.0653, 4.2266, 0, 1571.8551, -782.3239, 1114.7073, 358.7234, 3, 21}, // ѕравительство вход (из верт. площадки)
	{"", 1571.8879, -785.3734, 1114.7073, 21, -95.2252, -327.4579, 4.2266, 187.1833, 0, 0} // выход из ѕравительства (на верт. площадку)
	// -------------------------------------------------------------------------------
};
new g_teleport_object[MAX_PLAYERS][2];

// ------------------------------------------
new driving_tutorial[4][E_DRIVING_TUTORIAL_STRUCT] = 
{
	{
		"”правление системами автомобил€", 
		"{669900}Ќиже приведен перечень клавиш управлени€ транспортом и их описание:\n\n"\
		"{3399FF}Ћевый Ctrl\t{FFFFFF}завести или заглушить двигатель\n"\
		"{3399FF}Ћевый Alt\t{FFFFFF}включить или выключить фары\n"\
		"{3399FF}ѕравый Ctrl\t{FFFFFF}открыть или закрыть машину {9966FF}(только дл€ домашней машины)\n"\
		"{3399FF}Num 4\t\t{FFFFFF}включить или выключить ограничитель скорости\n"\
		"{3399FF}Num 8\t\t{FFFFFF}управление капотом и багажником {9966FF}(если они имеютс€ у данной модели)\n"\
		"{3399FF}Num 2\t\t{FFFFFF}заправить транспорт {9966FF}(подробнее в следующих разделах)\n\n"\
		"{FFFF00}ѕостарайтесь запомнить назначени€ клавиш управлени€\n"\
		" огда будете готовы нажмите \"ƒалее\""
	},
	{
		"ѕанель индикаторов", 
		"{FFFFFF}ѕанель индикаторов по€вл€етс€ в правом нижнем углу экрана как только вы заходите в любой транспорт\n"\
		"ќна информирует водител€ о его текущем состо€нии. »так, рассмотрим основные элементы этой панели:\n\n"\
		"\t{3366FF}25 km/h  {00CCFF}Fuel: 45  {006699}1000\n"\
		"\t{00CC00}Open  {FF3300}max  {FFFFFF}E {009933}S   M {FFFFFF}L B\n\n"\
		"{FFFF00}Ќа первой строчке панели наход€тс€ числовые индикаторы:\n"\
		"{3366FF}25 km/h\t{FFFFFF}показывает текущую скорость транспорта\n"\
		"{00CCFF}Fuel: 45\t{FFFFFF}показывает количество бензина в баке\n"\
		"{006699}1000\t\t{FFFFFF}показывает \"здоровье\" транспорта. ≈сли у него нет повреждений, то оно будет равно 1000\n\n"\
		"{FFFF00}Ќа второй строчке наход€тс€ цветовые индикаторы:\n"\
		"{00CC00}Open\t\t{FFFFFF}(или {FF3300}Close{FFFFFF}) показывают открыт или закрыт транспорт\n"\
		"{FF3300}max\t\t{FFFFFF}загораетс€ красным при включенном ограничителе скорости\n"\
		"E\t\tзагораетс€ красным при низком уровне бензина в баке\n"\
		"{CC99CC}S\t\t{FFFFFF}загораетс€ пурпурным при включенной сигнализации\n"\
		"{009933}M\t\t{FFFFFF}индикатор включенного двигател€\n"\
		"L\t\tиндикатор включенного света фар\n"\
		"B\t\tзагораетс€ красным при открытом багажнике или капоте\n\n"\
		"{9966FF}ѕримечани€:\n"\
		"1. ѕанель индикаторов обновл€етс€ раз в секунду\n"\
		"2. ¬ыключенные индикаторы во втором р€ду {FFFFFF}белого {9966FF}цвета"
	},
	{
		"«аправка и ремонт",
		"{FFFFFF}“ранспорт врем€ от времени необходимо заправл€ть. —делать это можно двум€ способами:\n\n"\
		"{FFFF00}1. Ќа заправочной станции\n"\
		"{FFFFFF}ƒл€ этого подъедьте к ней и нажмите {3366FF}Num 2{FFFFFF}.  аждое нажатие заправл€ет ваш транспорт на 10 литров\n\n"\
		"{FFFF00}2. «аправка с канистры\n"\
		"{FFFFFF}“акой способ подойдет если автомобиль не может ездить из-за отсутстви€ бензина\n"\
		"Ќайдите ближайшую заправку и напишите {3366FF}/buyfuel{FFFFFF}. ¬ы получите канистру емкостью 15 литров\n"\
		"ѕосле этого просто подойдите к транспорту, который хотите заправить. 15 литров вполне хватит чтобы доехать до ближайшей заправки\n\n"\
		"{66CCCC}ѕолезные советы:\n"\
		"1. Ѕензобак может вместить максимум 150 литров бензина. Ёто хватит на 50 минут беспрерывной работы двигател€\n"\
		"2. ¬сегда выключайте двигатель когда выходите из машины или долго стоите на месте! Ётим вы намного уменьшите расход бензина\n"\
		"3. „тобы не бежать за канистрой бензина если бензобак опустел можно вызвать механика (/c)\n\n"\
		"{99CC66}ѕочинить транспорт можно в любом покрасочном салоне либо вызвав механика (/c)\n"\
		"ќбратите внимание, что если купленный или арендованный вами транспорт взорветс€, то придетс€ покупать или арендовать его заново!"
	},
	{
		"ѕравила дорожного движени€",
		"{66CC00}1. ќбщие положени€\n"\
		"{FFFFFF}ќбгон транспортных средств разрешен только с левой стороны\n"\
		"ѕри этом водитель должен убедитьс€ что встречна€ полоса свободна на достаточном дл€ обгона рассто€нии\n"\
		"ѕри ƒ“ѕ водител€м рекомендуетс€ вызвать полицию (/c) и дождатьс€ приезда ƒѕ—\n"\
		"{66CC00}2. —корость движени€\n"\
		"{FFFFFF}ќграничение скорости движени€ в пределах городов и поселков 50 км/ч\n"\
		"«а пределами населенных пунктов ограничений скорости нет\n"\
		"ƒл€ соблюдени€ скоростного режима рекомендуетс€ пользоватьс€ ограничителем скорости, который включаетс€ клавишей {3366FF}Num 4\n"\
		"{66CC00}3. ќстановка и сто€нка\n"\
		"{FFFFFF}ќстановка и сто€нка транспортных средств разрешаетс€ только на обочине дороги или в специально отведенных дл€ этого местах\n"\
		"«а нарушение этого правила ваш автомобиль может быть отправлен на штрафсто€нку\n"\
		"{66CC00}4. ƒѕ—\n"\
		"{FFFFFF}ѕри виде автомобил€ с включенной сиреной водитель об€зан снизить скорость и прижатьс€ к обочине\n"\
		"¬одитель об€зан предъ€вить работнику ƒѕ— документы, которые он попросит"
	}
};

new const 
	Float: driving_exam_route[27][3] = // маршрут практики
{
	{1908.1394,2246.4573,15.2793}, // 1
	{1887.2677,2233.8284,15.5133},
	{1827.6771,2229.1616,15.4069},
	{1768.4437,2204.5515,15.5672},
	{1769.0942,2057.4329,15.5118},
	{1876.7019,2053.6848,15.4542},
	{1963.1599,2027.2074,15.4588},
	{1962.9563,1917.6659,15.0649},
	{1984.8197,1902.6099,15.0857},
	{2235.5906,1903.8340,15.4785}, //10
	{2359.4978,1911.4387,15.4939},
	{2382.5203,1892.3778,15.2946},
	{2751.3455,1892.0446,15.8760},
	{2762.2747,2107.1575,17.6485},
	{2755.5586,2339.7378,15.6725},
	{2437.3162,2951.3494,22.6093},
	{2093.8494,2965.3408,11.5355},
	{2070.2361,2940.9878,11.4323},
	{1935.4342,2709.0713,14.7915}, // 20
	{1746.3171,2531.9512,14.9293},
	{1882.4036,2312.2119,15.5184},
	{1888.2998,2255.1619,15.5189},
	{1896.7715,2246.6313,15.3917},
	{1910.5236,2246.4551,15.2868},
	{1919.3710,2248.3159,15.2849},
	{1924.2465,2228.0378,15.7248},
	{0.0, 0.0, 0.0}
};

new driving_exam[12][E_DRIVING_EXAM_STRUCT] = 
{
	{
		"„то означает зелена€ буква \"M\" на панели индикаторов?",
		"¬ключенные фары\n"\
		"¬ыключенные фары\n"\
		"¬ключенный двигатель\n"\
		"¬ыключенные двигатель\n"\
		"ќткрытый багажник\n"\
		"«акрытый багажник\n"\
		"¬ключенна€ сигнализаци€\n"\
		"ќткрытый капот",
		3
	},
	{
		" акой клавишей вкл. и откл. фары?",
		"Ћевый Ctrl\n"\
		"Ћевый Alt\n"\
		"ѕравый Ctrl\n"\
		"Num 2\n"\
		"Num 4",
		2
	},
	{
		"ќграничение скорости движени€ по городу:",
		"50 км/ч\n"\
		"60 км/ч\n"\
		"70 км/ч\n"\
		"80 км/ч\n"\
		"90 км/ч",
		1
	},
	{
		"„тобы заправитьс€ на заправочной станции надо:",
		"¬ызвать механика\n"\
		"Ќажать {0099CC}правый Ctrl\n"\
		"¬вести команду {0099CC}/fill\n"\
		"Ќажать {0099CC}левый Alt\n"\
		"Ќажать {0099CC}Num 2\n"\
		"Ќи один из вариантов не подходит",
		5
	},
	{
		" ак включить или выключить двигатель?",
		"¬вести команду {0099CC}/buyfuel\n"\
		"Ќажать {0099CC}левый Ctrl\n"\
		"Ќажать {0099CC}левый Alt\n"\
		"¬вести команду {0099CC}/start\n"\
		"Ќажать {0099CC}Num 2\n"\
		"¬се ответы неверны",
		2
	},
	{
		"„то означает \"Fuel: 45\" на панели индикаторов?",
		"“екуща€ скорость {0099CC}45 км/ч\n"\
		"”ровень повреждений авто {0099CC}45 единиц\n"\
		"÷вет транспорта {0099CC}45\n"\
		"¬ бензобаке осталось {0099CC}45 литров\n"\
		"Ќет правильного ответа",
		4
	},
	{
		"„то можно сделать, чтобы сократить расход бензина?",
		"¬ыйти из машины\n"\
		"¬ыключить двигатель\n"\
		"ќтключить фары / сигнализацию\n"\
		"¬ключить ограничитеть скорости\n"\
		"«акрыть машину\n"\
		"ќтремонтировать транспорт",
		2
	},
	{
		" ак открыть или закрыть домашнюю машину?",
		"Ќажать {0099CC}Num 8\n"\
		"Ќажать {0099CC}левый Ctrl\n"\
		"Ќажать {0099CC}правый Ctrl\n"\
		"Ќажать {0099CC}Num 2\n"\
		"¬вести команду {0099CC}/fill\n"\
		"¬вести команду {0099CC}/buyfuel\n"\
		"¬се ответы неверны",
		3
	},
	{
		"ѕри полном бензобаке врем€ работы двигател€?",
		"20 минут\n"\
		"30 минут\n"\
		"40 минут\n"\
		"50 минут\n"\
		"1 час\n"\
		"более 1 часа",
		4
	},
	{
		" ак включить или выключить ограничитель скорости?",
		" лавишей {0099CC}Num 2\n"\
		" лавишей {0099CC}Num 4\n"\
		" лавишей {0099CC}H\n"\
		" лавишей {0099CC}левый Ctrl\n"\
		"Ќет правильных ответов",
		2
	},
	{
		"Ќа панели индикаторов загорелась \"≈\". „то это значит?",
		"Ѕыл включен ограничитель скорости\n"\
		"Ѕыл открыт капот или багажник\n"\
		"Ѕыла включена сигнализаци€\n"\
		"Ќизкий уровень бензина в баке\n"\
		"Ќизкий уровень \"здоровь€\" авто\n"\
		"¬ключены фары",
		4
	},
	{
		"ѕри виде автомобил€ с включенной сиреной вы:",
		"ѕродолжите движение с нормальной скоростью\n"\
		"ѕродолжите движение снизив скорость\n"\
		"”величите скорость\n"\
		"ѕопытаетесь скрытьс€\n"\
		"—реди предложенных вариантов нет правильного",
		5
	}
};
new driving_exam_CP; // чепоинт сдачи на права

new g_player_driving_exam[MAX_PLAYERS][E_PLAYER_DRIVING_EXAM_STRUCT];
new g_driving_exam_default_values[E_PLAYER_DRIVING_EXAM_STRUCT] = {-1, ...};

// ------------------------------------------
new const 
	g_atm[8][E_ATM_STRUCT] = 
{
	{-1511.15027, 1636.50964, 36.41260, 90.0},
	{-2464.71216, 2830.91772, 37.48680, 0.0},
	{-2214.18066, 225.81171, 24.06897, -5.7},
	{1602.33472, -249.26440, 3.59900, 90.0},
	{2473.59741, -726.61267, 11.91240, 0.0},
	{1851.37952, 2243.51758, 14.90830, 90.0},
	{1596.67590, 2935.94165, 11.71050, 90.0},
	{-524.22839, -1651.11462, 40.40490, 58.86000}
};
new const 
	atm_item_sum[7] = {100, 200, 500, 1000, 2000, 5000, 10000};
	
// ------------------------------------------
enum 
{
	GATE_ID_DRIVING_SCHOOL = 0, // автошкола
	GATE_ID_ARMY,				// воинска€ часть	
}
new 
	g_gate[MAX_GATES][E_GATE_STRUCT] = 
{
	{"јЎ", GATE_TYPE_BARRIER, 1906.5250, 2248.1470, 14.0, 90.0, 0.0, 0.0, 0.0, 0.0, GATE_STATUS_CLOSE, {0, 0}},
	{"ƒѕ—", GATE_TYPE_BARRIER_BUTTON, 214.5169, 1503.8608, 10.9933, 78.1200, 213.18, 1496.79, 12.66, 260.0, GATE_STATUS_CLOSE, {0, 0}}
};
new g_gate_button[MAX_GATES][2];
new g_gate_buttons_count;

// ------------------------------------------
new g_bank_account[MAX_PLAYERS][MAX_BANK_ACCOUNTS][E_BANK_ACCOUNT_STRUCT];
new g_player_bank_transfer[MAX_PLAYERS][E_BANK_TRANSFER_STRUCT];

// ------------------------------------------
new g_player_listitem[MAX_PLAYERS][32]; 
new g_listitem_values[sizeof(g_player_listitem[])] = {0, ...};

new g_player_listitem_use[MAX_PLAYERS] = {-1, ...};
// ------------------------------------------
new g_player_offer[MAX_PLAYERS][E_PLAYER_OFFER_STURCT];
new const
	g_offer_default_values[E_PLAYER_OFFER_STURCT] = 
{
	INVALID_PLAYER_ID,	// отправленое предложение игроку
	INVALID_PLAYER_ID, 	// вход€щее предложение от игрока
	OFFER_TYPE_NONE, 	// вход€щее предложение
	{-1, -1} 			// значение вход€щего предложени€
};

// ------------------------------------------
new g_player_phone_call[MAX_PLAYERS][E_PHONE_CALL_STRUCT];
new 
	g_phone_call_default_values[E_PHONE_CALL_STRUCT] = 
{
	INVALID_PLAYER_ID,
	INVALID_PLAYER_ID,
	-1,
	true
};

// ------------------------------------------
new g_player_phone_book[MAX_PLAYERS][MAX_PHONE_BOOK_CONTACTS][E_PHONE_BOOK_STRUCT];

new g_player_phone_book_contacts[MAX_PLAYERS] = {0, ...};
new g_player_phone_book_select_cont[MAX_PLAYERS] = {INVALID_PLAYER_ID, ...};

new bool: g_player_phone_book_init[MAX_PLAYERS] = {false, ...};

new bool: g_admin_ears;

// ------------------------------------------
new g_player_flood[MAX_PLAYERS][E_ANTI_FLOOD_STRUCT];
new const
	g_flood_default_values[E_ANTI_FLOOD_STRUCT] = 
{
	0,
	0
};

// ------------------------------------------
new g_bus_routes[5][E_BUS_ROUTE_STRUCT] = 
{
	{"∆ƒ ¬окзал Ћ— Ч Ѕольшой карьер",	0, 0},
	{"∆ƒ ¬окзал Ћ— Ч ¬оенный завод", 	0, 0},
	{"∆ƒ ¬окзал Ћ— Ч —ельский завод", 	0, 0},
	{"∆ƒ ¬окзал Ћ— Ч “оварный порт",	0, 0},
	{"∆ƒ ¬окзал Ћ— Ч јвтошкола", 		0, 0}
};
new g_bus_routes_list[40 * (sizeof g_bus_routes) + 1];

new g_bus_route[sizeof g_bus_routes][20][E_BUS_ROUTE_STEP_STRUCT] = 
{
	{ // ∆ƒ ¬окзал Ћ— Ч Ѕольшой карьер
		{1181.8380,-1837.0826,13.5410, false}, 	
		{1184.6484,-1759.5533,13.6079, true}, // остановка
		{1189.1763,-1714.2538,13.5531, false},
		{1295.2434,-1725.2010,13.5198, false},
		{1301.7908,-1854.7548,13.5090, false},
		{1371.1842,-1874.0991,13.5163, false},
		{1391.9124,-1838.7012,13.5122, false},
		{1379.3752,-1729.9628,13.5138, false},
		{1295.8943,-1844.2878,13.5161, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ∆ƒ ¬окзал Ћ— Ч ¬оенный завод
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ∆ƒ ¬окзал Ћ— Ч “оварный порт
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ∆ƒ ¬окзал Ћ— Ч —ельский завод
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	},
	{ // ∆ƒ ¬окзал Ћ— Ч јвтошкола
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false},
		{0.0, 0.0, 0.0, false}
	}
};

// ------------------------------------------
new g_temp_jobs[4][E_TEMP_JOB_STRUCT] = 
{
	{514.9210, 1641.4650, 12.5089, 		45,	{27, 157}},  	// грузчик
	{2296.8718, 1757.0005, 1.0234, 		3,	{16, 157}},  	// шахтер
	{-1088.2688, 2167.4514, 38.0373, 	0,	{16, 157}}, 	// завод (служба доставки)
	{264.9694, -215.0847, 1006.5694, 	0,	{258, 157}}  	// завод
};

// ---------------------------------------
new const
	Float: loader_job_unload_cp[2][3] = // позиции загрузки (грузчик)
{
	{554.7645, 1621.5302, 12.2395},
	{555.4839, 1624.9852, 12.2395}
};
new const 
	loader_job_attach_obj[15][E_LOADER_JOB_ATTACH_OBJ_STRUCT] = // грузы (аттач) (грузчик)
{
	{912,  0.6,  -0.6,   -0.2, 90.0, 90.0},
	{918,  0.42, -0.25, -0.1,  0.0,  90.0},
	{1271, 0.5,  -0.36,  -0.2, 90.0, 90.0},
	{1578, 0.42, 0.0,   -0.16, 90.0, 90.0},
	{1580, 0.42, 0.0,   0.16,  90.0, 90.0},
	{2060, 0.42, -0.145, -0.2, 90.0, 90.0},
	{2103, 0.45, -0.02, -0.15, 90.0, 90.0},
	{2478, 0.4,  -0.3,   -0.2, 90.0, 90.0},
	{2652, 0.5,  -0.52, -0.18, 90.0, 0.0,},
	{2654, 0.4,  -0.23, -0.18, 89.0, 0.0,},
	{2900, 0.7,  -0.03, -0.2,  90.0, 90.0},
	{2912, 0.55, -0.01, -0.2,  90.0, 90.0},
	{2968, 0.5,  -0.31, -0.2,  90.0, 90.0},
	{3052, 0.4,  -0.13, -0.2,  90.0, 90.0},
	{3057, 0.5,  -0.35, -0.2,  90.0, 0.0}
};
new loader_job_area; // зона порта (грузчик)

// ---------------------------------------
new const
	Float: miner_job_load_cp[12][3] = // позиции загрузки (шахтер)
{
	{-2356.0146, 305.7356, -16.6097},
	{-2340.7490, 299.3799, -17.3427},
	{-2350.4976, 287.7560, -17.5309},
	{-2342.8169, 283.4503, -16.9091},
	{-2327.5500, 291.7040, -17.2260},
	{-2318.9883, 290.0369, -17.3081},
	{-2314.9695, 282.2800, -16.9994},
	{-2320.3093, 276.6367, -17.2911},
	{-2325.9856, 271.0159, -17.7371},
	{-2351.9478, 304.3510, -17.1377},
	{-2344.1338, 301.0893, -16.6733},
	{-2343.0308, 287.8077, -16.8458}
};
new miner_carriage[1][E_MINER_CARRIAGE_STRUCT] = 
{
	{-2375.1228, 294.7194, -15.4815, -2548.1228, 294.7194, -15.4815, false, 0}
};
new miner_job_area; // зона шахты (шахтер)

// ---------------------------------------
new Text3D: factory_store_label[2];

new factory_job_area;
new factory_put_zone;
new
	Float: factory_take_metall_pos[5][3] = 
{
	{305.7406, -199.4771, 1006.5694},
	{300.1811, -199.4061, 1006.5694},
	{316.2808, -215.5371, 1006.5694},
	{306.0207, -219.4838, 1006.5694},
	{264.5123, -208.1692, 1006.5694}
};
new factory_desk[16][E_FACTORY_DESK_STRUCT];

// ------------------------------------------
new Cache: charity_cache_data; 	// кэш пожертвований
new g_last_pay_day_time; 		// врем€ последнего пейде€
new g_last_lottery_time; 		// врем€ последнего розыгрыша лотереи
new g_last_m_timer_time;		// врем€ последнего 1-мин таймера

// ------------------------------------------
new const 
	numeric_name[7][11] = 
{
	"первого",
	"второго", 
	"третьего", 
	"четвертого",
	"п€того", 
	"шестого",
	"седьмого"
};

new const 
	job_name[5][18] =
{
	"Ѕезработный",
	"¬одитель автобуса",
	"“аксист",
	"јвтомеханик",
	"ƒальнобойщик"
};

new const
	month_name[12][8 + 1] = 
{	
	"€нвар€", 
	"феврал€", 
	"марта",
	"апрел€",
	"ма€",
	"июн€", 
	"июл€", 
	"августа",
	"сент€бр€", 
	"окт€бр€",
	"но€бр€", 
	"декабр€"
};

new const 
	day_name[7][12] =
{
	"ѕонедельник",
	"¬торник",
	"—реда",
	"„етверг",
	"ѕ€тница",
	"—уббота",
	"¬оскресенье"
};

new speedometr_line[32] = "IIIIIIIIIIIIIIIIIIIIIIIIIIIIII_";
new speedo_line_color[32] =
{
	0xE25047FF,
	0xDE5448FF,
	0xDA5849FF,
	0xD65C4AFF,
	0xD2604BFF,
	0xCE644CFF,
	0xCA684DFF,
	0xC66C4EFF,
	0xC2704FFF,
	0xBE7450FF,
	0xBA7851FF,
	0xB67C52FF,
	0xB28053FF,
	0xAE8454FF,
	0xAA8855FF,
	0xA68C56FF,
	0xA29057FF,
	0x9E9458FF,
	0x9A9859FF,
	0x969C5AFF,
	0x92A05BFF,
	0x8EA45CFF,
	0x8AA85DFF,
	0x86AC5EFF,
	0x82B05FFF,
	0x7EB460FF,
	0x7AB861FF,
	0x76BC62FF,
	0x72C063FF,
	0x6EC464FF,
	0x6AC865FF,
	0x6AC865FF //
};

new join_to_job_CP; // прием на работу


new army_ammo_CP; // вз€тие патронов со склада воинской части
// ------------------------------------------
new const 
	g_item_type[7][E_ITEM_STRUCT] = 
{
	{"Error",		"ххх", 	false},
	{"ƒеньги", 		"руб", 	true},
	{" анистра", 	"л", 	false},
	{"јптечка", 	"шт", 	true},
	{"ћеталл", 		"кг", 	true},
	{"ѕатроны", 	"шт", 	true},
	{"Ќаркотики", 	"г", 	true}
};

enum // типы предметов
{
	ITEM_TYPE_NONE = 0,	// пустой слот
	ITEM_TYPE_MONEY = 1, // деньги
	ITEM_TYPE_JERRICAN, // канистра
	ITEM_TYPE_MED, // аптечка
	ITEM_TYPE_METALL, // металл
	ITEM_TYPE_AMMO,	// патроны
	ITEM_TYPE_DRUGS, // наркотики
}

// ------------------------------------------
new const
	g_player_improvements[5][E_IMPROVEMENTS_STRUCT] = 
{
	{"¬ыносливость", 	50_000, 	5},
	{"–ешительность", 	75_000, 	8},
	{"–юкзак", 			100_000, 	11},
	{"ћастер вождени€", 125_000, 	15},
	{"ѕолна€ экипировка",150_000, 	17}
};

new chat_message[5][128 + 1];
new const
	reg_skin_data[2][14] = // скины при регистрации
{
	{78, 79, 132, 134, 135, 136, 137, 200, 212, 213, 230, 160, 0, 0}, // мужские
	{10, 13, 31, 39, 54, 77, 129, 130, 151, 157, 196, 197, 198, 218} // женские
};

new const
	Float: spawn_pos_data[4][4] = // позиции спавнов
{	
	{538.3125, 1682.2540, 12.0097, 180.0},	// јрзамас
	{-93.5919, 288.62830, 12.8760, 360.0},	// јрзамас (авто-вокзал) / 3 лвл
	{1800.764, 2503.5032, 15.8725, 304.8},	// Ѕатырево / 5 лвл
	{-2459.09, 2840.1787, 38.4074, 90.00}	// Ёдово / 10 лвл
};

stock GetSkillBar(amount)
{
	new tmp_bar[101];
	if(!amount) return tmp_bar;
 	for(new i = 0; i < amount; i++)
		strcat(tmp_bar, "|");

 	return tmp_bar;
}

stock ShowPlayerSkills(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;

	new tmp_skills[1560];
	format
	(
	    tmp_skills,
	    sizeof(tmp_skills),
	    "—ила\t\t%d%s\t%s\n\
	    {99ff66}\
		Colt 45\t\t%d%s\t%s\n\
		SD Pistol\t%d%s\t%s\n\
	    Desert Eagle\t%d%s\t%s\n\
	    Shotgun\t%d%s\t%s\n\
	    MP5\t\t%d%s\t%s\n\
	    AK47\t\t%d%s\t%s\n\
	    M4\t\t%d%s\t%s\n\
	    Sniper Rifle\t%d%s\t%s\n\
		Sawnoff\t%d%s\t%s\n\
		Combat SG\t%d%s\t%s\n\
		Micro Uzi\t%d%s\t%s\
	    ",
	    GetPlayerData(playerid, P_POWER), "%",
	    GetSkillBar(GetPlayerData(playerid, P_POWER)),
	    GetPlayerData(playerid, P_SKILL_COLT), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COLT)),
		GetPlayerData(playerid, P_SKILL_SDPISTOL), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SDPISTOL)),
		GetPlayerData(playerid, P_SKILL_DEAGLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_DEAGLE)),
		GetPlayerData(playerid, P_SKILL_SHOTGUN), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SHOTGUN)),
		GetPlayerData(playerid, P_SKILL_MP5), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MP5)),
		GetPlayerData(playerid, P_SKILL_AK47), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_AK47)),
		GetPlayerData(playerid, P_SKILL_M4), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_M4)),
		GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE)),
		GetPlayerData(playerid, P_SKILL_SAWNOFF), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_SAWNOFF)),
		GetPlayerData(playerid, P_SKILL_COMBAT_SG), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_COMBAT_SG)),
		GetPlayerData(playerid, P_SKILL_MICRO_UZI), "%",
		GetSkillBar(GetPlayerData(playerid, P_SKILL_MICRO_UZI))
	);
	Dialog(to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}Ќавыки владени€ оружием", tmp_skills, "«акрыть", "");

	return 1;
}

stock StartSpectate(playerid, for_player)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	SetPlayerSpectateData(playerid, S_PLAYER, for_player);

	SetPlayerInterior(playerid, GetPlayerInterior(for_player));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(for_player));
	
	TogglePlayerSpectating(playerid, true);
	
	if(IsPlayerInAnyVehicle(for_player))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(for_player));
		//ShowSpeedometrTD(playerid);
	}
	else PlayerSpectatePlayer(playerid, for_player);

	ShowMenuForPlayer(admin_spec_menu, playerid);

	return 1;
}

stock StopSpectate(playerid)
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return 1;

	TogglePlayerSpectating(playerid, false);
	
	SetPlayerSpectateData(playerid, S_PLAYER, -1);
	
	SetPlayerPosEx
	(
		playerid, 
		GetPlayerSpectateData(playerid, S_START_POS_X),
		GetPlayerSpectateData(playerid, S_START_POS_Y),
		GetPlayerSpectateData(playerid, S_START_POS_Z),
		GetPlayerSpectateData(playerid, S_START_ANGLE),
		GetPlayerSpectateData(playerid, S_START_INTERIOR),
		GetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD)
	);
	
	return 1;
}

stock UpdateSpectate(playerid, disconnect)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerAdminEx(i) < 1) continue;
		else if(GetPlayerSpectateData(i, S_PLAYER) != playerid) continue;
	
		if(disconnect)
		{
			StopSpectate(i);
			GameTextForPlayer(i, "~r~~h~player disconnect", 4000, 4);	
		}
		else if(IsPlayerInAnyVehicle(playerid))
		{
			PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
			//ShowSpeedometrTD(playerid);
		}
		else
		{
			//HideSpeedometrTD(playerid);
			PlayerSpectatePlayer(i, playerid);
		}
	}
	return 1;
}

// ---------------------------------------------------------------

new const
	weapon_names[47][30] =
{
	"ѕусто",
	" астет",
	" люшка дл€ гольфа",
	"ƒубинка",
	"Ќож",
	"Ѕита",
	"Ћопата",
	" ий",
	" атана",
	"Ѕензопила",
	"‘иолетовый дилдо",
	"ƒилдо",
	"¬ибратор",
	"—еребр€ный вибратор",
	"÷веты",
	"“опор",
	"√раната",
	"ƒымова€ граната",
	" октейль молотова",
	"ѕусто",
	"ѕусто",
	"ѕусто",
	"ѕистолет",
	"ѕистолет с глушителем",
	"ѕустынный орЄл",
	"ƒробовик",
	"ќбрез",
	"“актический дробовик",
	"Micro-Uzi",
	"MP5",
	"AK-47",
	"M4",
	"TEC-9",
	"¬интовка",
	"—найперска€ винтовка",
	"–ѕ√",
	"—амонавод€ща€с€ установка",
	"ќгнемет",
	"ћиниган",
	"C4",
	" нопка детонатора",
	"Ѕаллончик",
	"ќгнетушитель",
	"‘отоаппарат",
	"ќчки ночного видени€",
	"ќчки с тепловизором",
	"ѕарашют"
};

new const
	weapon_dialog_tabulation[47][7] =
{
	"\t\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t\t",
	"\t\t",
	"\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t",
	"\t\t\t",
	"\t",
	"\t\t",
	"\t\t",
	"\t\t",
	"\t",
	"\t",
	"\t\t"
};

// ---------------------------------------------------------------

new donate_prices[8] =
{
	8, 65, 1, 4, 70, 1, 85, 80
}; // цены на товары в меню ƒополнительно

new donate_exchange_price = 2000; // курс перевода валют

// ---------------------------------------------------------------
// иды фрак
enum
{
	TEAM_NONE = 0,
	// ----
	TEAM_GOVERNMENT, // ѕравительство
	// ----
	TEAM_ARMY, // ¬оинска€ часть
	// ----
	TEAM_HOSPITAL, // √ородска€ больница
	// ----
	TEAM_RADIO, // √“–  Ђ–итмї
	// ----
	TEAM_DPS, // ƒѕ—
	TEAM_PPS, // ѕѕ—
	TEAM_FBI, // ‘едеральна€ —лужба Ѕезопасности
	// ----
	TEAM_OPG_ARZAMASKAYA = 8, // јрзамасска€ ќѕ√
	TEAM_OPG_BATYREVSKAYA = 9, // Ѕатыревска€ ќѕ√
	TEAM_OPG_LYTKARINSKAYA = 10 // Ћыткаринска€ ќѕ√
};

new const
	team_names[9][28] =
{
	"Ќет",
	"ѕравительство области",
	"¬оинска€ часть",
	"√ородска€ больница",
	"√“–  Ђ–итмї",
	"ѕравоохранительные органы",
	"јрзамасска€ ќѕ√",
	"Ѕатыревска€ ќѕ√",
	"Ћыткаринска€ ќѕ√"
};

new const
	team_colors[11] = // цвета
{
	0xFFFFFF11, // √ражданин / безработный
	0xCCFF00FF, // ѕравительство
	0x996633FF, // ¬оинска€ часть
	0xFF6666FF, // √ородска€ больница
	0xFF6600FF, // √“–  Ђ–итмї
	0x0000FFFF, // ќтдел полиции є1 (ƒѕ—)
	0x0000FFFF, // ќтдел полиции є2 (ѕѕ—)
	0x0000FFFF, // ‘едеральна€ —лужба Ѕезопасности
	0x009900FF, // јрзамасска€ ќѕ√
	0x00CCFFFF, // Ѕатыревска€ ќѕ√
	0xFFCC00FF  // Ћыткаринска€ ќѕ√
};

new const
	team_subdivision_name[4][32] =
{
	"Ќет",
	"ќтдел полиции є1 (ƒѕ—)",
	"ќтдел полиции є2 (ѕѕ—)",
	"‘едеральна€ —лужба Ѕезопасности"
};

enum
	E_ORG_DATA
{
	O_NAME[32],
	O_SKINS[10],
	O_WOMEN_SKIN,
	Float: O_SPAWN[4],
	Float: O_REPOSITORY_POS[3],
	O_SPAWN_INT,
	O_SPAWN_VW
};

new
	g_organization[10][E_ORG_DATA] =
{
	{"ѕравительство области",					{208, 164, 290, 186, 228, 228, 187, 227, 295, 147}, 141, 	{1562.3208,-761.5000,1114.7073,92.0}, 		{0.0, 0.0, 0.0}, 					3, 21},
	{"¬оинска€ часть",							{287, 287, 287, 287, 287, 179, 179, 255, 255,  61}, 191, 	{1228.2125,-357.5044,4.0020,90.1114}, 		{779.7195,-131.1022,1014.2467}, 	0, 0},
	{"√ородска€ больница",						{275, 275, 275, 276, 276, 276, 276, 276, 70,   70},	91, 	{1138.5909,-31.7728,1011.1254,92.5955}, 	{0.0, 0.0, 0.0}, 					1, 5},
	{"√“–  Ђ–итмї",								{170, 188, 188, 171, 189, 217, 217, 217, 59,   57},	172, 	{-317.7421,817.1414,13.0635,355.2643}, 		{0.0, 0.0, 0.0}, 					0, 0},
	{"ќтдел полиции є1 (ƒѕ—)",					{266, 284, 284, 284, 284, 284, 284, 284, 284, 288},	93, 	{435.0118,67.5200,996.7030,180.2526}, 		{0.0, 0.0, 0.0}, 					1, 5},
	{"ќтдел полиции є2 (ѕѕ—)",					{266, 280, 280, 281, 281, 282, 282, 283, 283, 288}, 93, 	{423.8528,61.2479,996.7030,175.1969}, 		{0.0, 0.0, 0.0}, 					1, 6},
	{"‘едеральна€ —лужба Ѕезопасности", 		{286, 286, 286, 286, 285, 285, 165, 165, 294, 295}, 192, 	{209.2309,-446.4144,1006.4179,179.5543}, 	{0.0, 0.0, 0.0}, 					3, 17},
	{"јрзамасска€ ќѕ√",							{103, 104, 102, 125, 111, 124, 124, 299, 112, 272},	93, 	{1642.5455,-276.7511,4.4555,92.6003}, 		{0.0, 0.0, 0.0}, 					0, 0},
	{"Ѕатыревска€ ќѕ√",							{103, 104, 102, 247, 247, 247, 248, 248, 100, 249},	246, 	{1939.6000,2160.7805,15.7026,266.1447}, 	{0.0, 0.0, 0.0}, 					0, 0},
	{"Ћыткаринска€ ќѕ√",						{103, 104, 102, 117, 118, 122, 123, 123, 126, 127},	263, 	{-2348.7202,72.4850,21.3173,326.9116}, 		{0.0, 0.0, 0.0}, 					0, 0}
};



new const
	rank_names[10][10][50] =
{
	// ѕравительство области
	{"—екретарь", "ќхранник", "јдвокат", "»нспектор", "—оветник по √ќ—ќ–√", "—оветник по ќѕ√", "ƒепутат", "ѕрокурор", "ћэр города", "√убернатор"},

	// ¬оинска€ часть
	{"–€довой", "≈фрейтор", "—ержант", "—таршина", "ѕрапорщик", "Ћейтенант", " апитан", "ћайор", "ѕолковник", "√енерал-майор"},

	// √ородска€ больница
	{"»нтерн", "ѕарамедик", "‘ельдшер", "Ќарколог", "ѕедиатр", "“ерапевт", "“равматолог", "’ирург", "«аведующий", "√лав. врач"},

	// —ћ»
	{"ѕрактикант", "‘отограф", "∆урналист", " орреспондент", "¬едущий", "–едактор", "ћаркетолог", "ћенеджер", "ѕродюсер", "ƒиректор"},

	// ќтдел полиции є1 (ƒѕ—)
	{" урсант полиции", "–€довой полиции", "ћл. сержант полиции", "—ержант полиции", "—т. сержант полиции", "—таршина полиции", "ѕрапорщик полиции", "Ћейтенант полиции", " апитан полиции", "ѕолковник полиции"},

	// ќтдел полиции є2 (ѕѕ—)
	{" урсант полиции", "–€довой полиции", "ћл. сержант полиции", "—ержант полиции", "—т. сержант полиции", "—таршина полиции", "ѕрапорщик полиции", "Ћейтенант полиции", " апитан полиции", "ѕолковник полиции"},

	// ‘едеральна€ —лужба Ѕезопасности
	{"—отрудник ќЅЁѕ", "—отрудник ќЅЌќЌ", "Ќачальник ќЅЁѕ", "Ќачальник ќЅЌќЌ", "Ѕоец —ќЅ–", " омандир —ќЅ–", "—пец. сотрудник ‘—Ѕ", "»нспектор ‘—Ѕ", "ѕолковник ‘—Ѕ", "√енерал-полковник ‘—Ѕ"},

	// јрзамасска€ ќѕ√
	{"ѕацан", "Ўнырь", "‘раер", "Ѕарыга", "Ѕлатной", "—во€к", "Ѕраток", "—мотр€щий", "јвторитет", "¬ор в законе"},

	// Ѕатыревска€ ќѕ√
	{"ѕацан", "Ўнырь", "‘раер", "Ѕарыга", "Ѕлатной", "—во€к", "Ѕраток", "—мотр€щий", "јвторитет", "¬ор в законе"},

	// Ћыткаринска€ ќѕ√
	{"ѕацан", "Ўнырь", "‘раер", "Ѕарыга", "Ѕлатной", "—во€к", "Ѕраток", "—мотр€щий", "јвторитет", "¬ор в законе"}
};

// ------------------------------------------

public OnGameModeInit()
{
	new hour;
	gettime(hour);
	
	SetWorldTime(hour);
	AddPlayerClass(0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);

	SendRconCommand("hostname "SERVER_NAME" RolePlay | Closed test server");
	SendRconCommand("weburl www."SERVER_SITE"");
	SendRconCommand("mapname "SERVER_MAP_NAME"");
	
	ShowNameTags(true);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(false);
	ManualVehicleEngineAndLights();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	SetNameTagDrawDistance(30.0);
	
	// streamer
	
	//Streamer_SetMaxItems(STREAMER_TYPE_MAP_ICON, 98);
	Streamer_SetVisibleItems(STREAMER_TYPE_MAP_ICON, 98);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 650); // Default: 500
	
	Streamer_SetTypePriority
	(
		{
			STREAMER_TYPE_OBJECT, 
			STREAMER_TYPE_CP,
			STREAMER_TYPE_AREA,
			STREAMER_TYPE_3D_TEXT_LABEL,
			STREAMER_TYPE_MAP_ICON,
			STREAMER_TYPE_RACE_CP,
			STREAMER_TYPE_PICKUP
		}
	);
	Streamer_ToggleErrorCallback(true);
	Streamer_SetTickRate(40); // Default: 50
	
	//LimitPlayerMarkerRadius(200.0);
	//LimitGlobalChatRadius(30.0);
	
	CreateDynamic3DTextLabel("ѕрием на работу", 0xFFFF00FF, 489.7003, 5.9846, 1052.0 + 1.8, 10.0);
	join_to_job_CP = CreateDynamicCP(489.7003, 5.9846, 1052.0, 1.5, _, _, _, 15.0);
	CreatePickup(1210, 23, 489.7003, 5.9846, 1052.0, -1);

	army_ammo_CP = CreateDynamicCP(759.6569, -132.3118, 1014.2467, 1.5, -1, -1, _, 7.0);
	CreatePickup(1239, 2, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2], -1);

	g_last_lottery_time =
	g_last_pay_day_time = 
	g_last_m_timer_time = gettime();
	
	CreateTextDraws();
	CreateMenus();
	CreateVehicles();
	CreateMedBeds();
	
	HelpInfoInit();
	ServerRadioInit();
	AnimListInit();
	BusRoutesInit();
	BanksInit();
	TempJobsInit();
	MapIconsInit();
	InfoPickupsInit();
	TeleportPickupsInit();
	DrivingSchoolInit();
	AtmsInit();
	GatesInit();
	
	#if defined RAND_WEATHER
	SetRandomWeather();
	#endif
	
	//#if defined _MAP_INCLUDED
	CreateMAP();
	//#endif
	
	#if defined _GANG_ZONES_INC
	CreateGangZonesCR();
	#endif
	
	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML);
	mysql = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_BASE, MYSQL_PASS, 3306, true, 2);
	mysql_set_charset("cp1251");
	
	if(mysql_errno() != 0)
		return print("Ќе удалось подключитс€ к базе данных!");
	
	UpdateCharity();
	RepositoriesLoad();
	
	LoadEntrances();
	LoadHouses();
	LoadHousesRenters();
	EntranceStatusInitAll();
	
	LoadHotels();
	
	LoadFuelStations();
	LoadBusinesses();
	LoadOrders();
	
	//LoadOwnableCars();
	//LoadTrunks();
	
	SetTimer("ClearBanList", 15_000, false);
	SetTimer_("OnSecondTimer", 1000, 0, -1);

	CallLocalFunction("HospitalTreatment", "");
	
	SetGameModeText(SERVER_VERSION);
	
	return 1;
}

public OnGameModeExit()
{
	SaveRepository();

	mysql_close(mysql);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);
	
	if(IsPlayerLogged(playerid))
	{
		SetPlayerSpawnInit(playerid);
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK);

	if(!IsPlayerLogged(playerid))
	{
		new a_state = GetPlayerData(playerid, P_ACCOUNT_STATE);
		if(a_state != ACCOUNT_STATE_REG_SKIN)
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}ƒл€ игры на сервере ¬ы должны %s", a_state == ACCOUNT_STATE_REGISTER ? ("пройти регистрацию") : ("авторизироватьс€"));
			
			Dialog
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FF6600}ќшибка",
				fmt_str,
				"«акрыть", ""
			);
			Kick:(playerid);
			SendClientMessage(playerid, 0xFF6600FF, fmt_str[8]);
		}
	}	
	else if(IsPlayerLogged(playerid))
	{
		//SetPlayerSpawnInit(playerid);
		//SpawnPlayer(playerid);
		
		SendClientMessage(playerid, 0xFFFF00FF, "ƒл€ смены внешности посетите любой магазин одежды");
	}

	return 1;
}

public OnPlayerConnect(playerid)
{
	new hour, minute;
	gettime(hour, minute);
	
	SetPlayerTime(playerid, hour, minute);

	SetPlayerColor(playerid, 0x999999FF);
	TextDrawShowForPlayer(playerid, server_logo_TD);
	
	SetPlayerVirtualWorld(playerid, playerid + 0xFF);
	ClearPlayerInfo(playerid);
	
	GetPlayerName(playerid, g_player[playerid][P_NAME], 20 + 1);
	GetPlayerIp(playerid, g_player[playerid][P_IP], 16);

	new fmt_text[80];

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] подключилс€ к серверу. IP: %s", GetPlayerNameEx(playerid), playerid, GetPlayerIpEx(playerid));
	SendMessageToAdmins(fmt_text, 0x999999FF);

	#if defined _GANG_ZONES_INC
	ShowForPlayerGangZonesCR(playerid);
	#endif
	
	SetTimerEx("CheckPlayerAccount", 1000, false, "ii", playerid, mysql_race[playerid]);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	new buffer = GetPlayerLastVehicle(playerid);
	
	if(buffer != INVALID_VEHICLE_ID)
	{
		if(GetVehicleData(buffer, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
		{
			if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
			{
				SetVehicleToRespawn(buffer);
			}
		}	
	}
	if(IsPlayerInJob(playerid))
	{
		buffer = GetPlayerJobCar(playerid);
		if(buffer != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(buffer);
		}
	}
	KillEndJobTimer(playerid);
	
	buffer = GetPlayerData(playerid, P_FACTORY_USE_DESK);
	SetPlayerFactoryDeskUse(playerid, buffer, false);

	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
	}

	if(GetPlayerTeamEx(playerid) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL)))
	{
		DestroyDynamic3DTextLabel(GetPlayerData(playerid, P_ADVISOR_LABEL));
		SetPlayerData(playerid, P_ADVISOR_LABEL, Text3D: -1);
	}

	if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
	{
		SaveOwnableCar(GetPlayerOwnableCar(playerid));
		UnloadPlayerOwnableCar(playerid, true);
	}

	new fmt_text[92];

	format(fmt_text, sizeof fmt_text, "[A] %s[%d] отключилс€ от сервера (%s). IP: %s", GetPlayerNameEx(playerid), playerid, reason == 0 ?  "вылет" : (reason == 1 ? "выход" : "кик/бан"), GetPlayerIpEx(playerid));
	SendMessageToAdmins(fmt_text, 0x999999FF);

	SavePlayerAccount(playerid);
	ClearPlayerInfo(playerid);

	UpdateSpectate(playerid, true);
	return 1;
}

public: SavePlayerAccount(playerid)
{
	new query[155];
	format
	(
		query, sizeof query, 
		"UPDATE accounts SET "\ 
		"last_login=%d,"\ 
		"game_for_hour=%d,"\
		"game_for_day=%d,"\
		"game_for_day_prev=%d,"\
		"health=%f,"\
		"hospital=%d,",\
		"mute=%d",\
		" WHERE id=%d LIMIT 1",
		gettime(),
		GetPlayerData(playerid, P_GAME_FOR_HOUR),
		GetPlayerData(playerid, P_GAME_FOR_DAY),
		GetPlayerData(playerid, P_GAME_FOR_DAY_PREV),
		GetPlayerData(playerid, P_HEALTH),
		GetPlayerData(playerid, P_HOSPITAL),
		GetPlayerData(playerid, P_MUTE),
		GetPlayerAccountID(playerid)
	);
	mysql_query(mysql, query, false);
	
	return 1;
}

public OnPlayerSpawn(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	SetPlayerSkillsInit(playerid);

	if(!IsPlayerLogged(playerid))
	{
		if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
		{
			new sex = bool: GetPlayerSex(playerid);
			
			TogglePlayerControllable(playerid, false);
			SetPlayerSelectSkin(playerid, 0, reg_skin_data[sex][0]);
			
			SetPlayerPosEx(playerid, 332.2033, -174.1066, 999.6743, 1.0, 10);
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM, 1210, A_OBJECT_BONE_RIGHT_FOREARM, 0.535, 0.01, 0.1, 45.0, 270.0, 318.0, 1.0, 1.0, 1.0, 0);
		
			SetPlayerCameraPos(playerid, 335.067718, -170.856231, 1000.424804);
			SetPlayerCameraLookAt(playerid, 332.006469, -174.727508, 999.623596, 2);

			ShowPlayerSelectPanel(playerid, SELECT_PANEL_TYPE_REG_SKIN);
			ShowPlayerSelectPanelPrice(playerid, -1);
			
			PlayerTextDrawSetString(playerid, price_select_TD[playerid][1], "GREAT");
			//ShowMenuForPlayer(reg_select_skin_menu, playerid);
		}
	}
	else 
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SetPlayerSpawnPos(playerid);

		if(GetPlayerData(playerid, P_HOSPITAL)) SetPlayerHealthEx(playerid, 15.0);
		
		if(!GetPlayerData(playerid, P_ANIMS_INIT))		
		{
			PreLoadPlayerAnims(playerid);
			SetPlayerData(playerid, P_ANIMS_INIT, true);
		}
		
		if(GetPlayerData(playerid, P_MASK) >= 2)
		{
			SetPlayerColorInit(playerid);
			SetPlayerData(playerid, P_MASK, 0);
		}	
	}

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(!IsPlayerLogged(playerid))
	{
		return Kick:(playerid, " ");
	}
	if(IsPlayerInJob(playerid))
	{
		EndPlayerJob(playerid);
	}
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		TogglePlayerDynamicCP(playerid, help_info_CP, true);
	}
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
	}
	SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
	
	SetPlayerDrivingExamInfo(playerid, DE_POINTS, 0);
	SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);
	
	SetPlayerData(playerid, P_IN_HOUSE, 		-1);
	SetPlayerData(playerid, P_IN_BUSINESS, 		-1);
	SetPlayerData(playerid, P_IN_HOTEL_FLOOR, 	-1);
	SetPlayerData(playerid, P_IN_HOTEL_ROOM, 	-1);
	SetPlayerData(playerid, P_IN_ENTRANCE,		-1);
	SetPlayerData(playerid, P_IN_ENTRANCE_FLOOR,-1);
	
	new fmt_text[120];

	if(killerid != INVALID_PLAYER_ID && IsPlayerInPoliceTeam(killerid))
	{
		format(fmt_text, sizeof fmt_text, "[¬сем постам] %s %s нейтрализовал преступника %s", GetPlayerJobAndRankName(killerid), GetPlayerNameEx(killerid), GetPlayerNameEx(playerid));
		SendMessageToPoliceTeam(fmt_text, 0x00CCFFFF);
	}

	if(killerid == INVALID_PLAYER_ID)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] убил себ€", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}
	else
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] убил %s[%d] (%s)", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid, GetWeaponName(reason));
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	if(GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
		SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);
		
		BuyCarTDsHideForPlayer(playerid);
		HidePlayerSelectPanel(playerid);
	}

	if(GetPlayerRentCar(playerid) != -1)
	{
		new vehicleid = GetPlayerRentCar(playerid);

		rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = INVALID_PLAYER_ID;

		SetVehicleToRespawn(vehicleid);
		
		SetPlayerData(playerid, P_RENT_CAR, -1);
	}

	SetPlayerJobLoadItems(playerid, 0);
	SetPlayerTempJob(playerid, TEMP_JOB_NONE);
	
	SetPlayerData(playerid, P_HOSPITAL, true);

	SetPlayerSpawnInit(playerid);
	
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(issuerid == INVALID_PLAYER_ID) return 1;

	if(TEAM_DPS <= GetPlayerTeamEx(issuerid) <= TEAM_FBI)
	{
		if(weaponid == WEAPON_NITESTICK)
		{
			SetPlayerAnimation(playerid, 21);
			TogglePlayerControllable(playerid, false);

			SetTimerEx("UnfreezePlayer", 15000, false, "i", playerid);
			
			new fmt_text[90];

			format(fmt_text, sizeof fmt_text, "¬ы оглушили %s на 15 секунд", GetPlayerNameEx(playerid));
			SendClientMessage(issuerid, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "%s оглушил ¬ас на 15 секунд", GetPlayerNameEx(issuerid));
			SendClientMessage(playerid, 0x3399FFFF, fmt_text);

			CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
		}
	}

	return 1;
}

public: UnfreezePlayer(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);
	
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_ADMIN_CAR)
	    return DestroyVehicle(vehicleid);
	
	if(IsAOwnableCar(vehicleid))
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		
		SetVehiclePos
		(
			vehicleid,
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z)
		);
		SetVehicleZAngle(vehicleid, GetOwnableCarData(index, OC_ANGLE));
	}
	else 
	{
		DestroyVehicleLabel(vehicleid);
		SetVehicleData(vehicleid, V_FUEL, 40.0);
	}
	SetVehicleData(vehicleid, V_LIMIT, true);
	SetVehicleParamsEx(vehicleid, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF, VEHICLE_PARAM_OFF);

	if(IsAOwnableCar(vehicleid)) SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, V_HEALTH));

	switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
	{
		case 
			VEHICLE_ACTION_TYPE_FACTORY, 
			VEHICLE_ACTION_TYPE_BUS_DRIVER, 
			VEHICLE_ACTION_TYPE_TAXI_DRIVER, 
			VEHICLE_ACTION_TYPE_MECHANIC: 
		{
			SetVehicleData(vehicleid, V_ACTION_ID, VEHICLE_ACTION_ID_NONE);
		}
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(GetVehicleCarMarketID(vehicleid))
		rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = INVALID_PLAYER_ID;

	return 1;
}

public OnPlayerText(playerid, text[])
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);

	if(!IsPlayerLogged(playerid)) return 0;
	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "Ќе флудите");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "ѕожалуйста, подождите несколько секунд...");

		return 0;
	}
	if(strlen(text) > 90) return 0;
	
	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
	{
		new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
		new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);

		new fmt_str[128];
		format(fmt_str, sizeof fmt_str, "[“ел] %s: %s", GetPlayerNameEx(playerid), text);
		
		if(call_to != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER))
		{
			SendClientMessage(call_to, 0xFFFF00FF, fmt_str);
		}	
		else if(caller != INVALID_PLAYER_ID && playerid == GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER))
		{
			SendClientMessage(caller, 0xFFFF00FF, fmt_str);
		}
		SendMessageInLocal(playerid, fmt_str, 0x999999FF, 25.0);
		
		return 0;
	}
	else if(!strcmp(text, "(", true))
	{
		Action(playerid, "расстроилс€", _, false);
	}	
	else if(!strcmp(text, "((", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
			ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.1, false, 0, 0, 0, 0, 0);
				
		Action(playerid, "сильно расстроилс€", _, false);
	}
	else if(!strcmp(text, ")", true))
	{
		Action(playerid, "улыбаетс€", _, false);
	}
	else if(!strcmp(text, "))", true))
	{
		Action(playerid, "смеЄтс€", _, false);
	}	
	else if(!strcmp(text, "=0", true))
	{
		Action(playerid, "удивилс€", _, false);
	}
	else SendMessageInChat(playerid, text);
	
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC, FLOOD_RATE_KICK))
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "ѕри продолжении ¬ы будете отключены от сервера");
		
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "ѕожалуйста, подождите несколько секунд...");
		return 0;
	}
	
	if(!ispassenger)
	{
		if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
		{
			if(!IsABike(vehicleid))
			{
				ClearAnimations(playerid);
				return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет прав");
			}
		}

		if(GetPlayerData(playerid, P_CUFFED))
		{
			ClearAnimations(playerid);

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);

			return SendClientMessage(playerid, 0x999999FF, "¬ы закованы в наручники");
		}

		if(IsPlayerInVehicle(GetVehicleData(vehicleid, V_DRIVER_ID), vehicleid) && GetPlayerState(GetVehicleData(vehicleid, V_DRIVER_ID)) == PLAYER_STATE_DRIVER)
		{
			ClearAnimations(playerid);

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);
		
			return GameTextForPlayer(playerid, "~r~~h~car is used", 1000, 4);
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		
		if(vehicleid)
			OnPlayerEnterVehicleEx(playerid, vehicleid, !(newstate % 2));
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		new vehicleid = GetPlayerLastVehicle(playerid);
		
		if(vehicleid != INVALID_VEHICLE_ID)
			OnPlayerExitVehicleEx(playerid, vehicleid, !(oldstate % 2));
	}

	UpdateSpectate(playerid, false);
	return 1;
}

public: OnPlayerEnterVehicleEx(playerid, vehicleid, is_driver)
{
	SetVehicleData(vehicleid, V_DRIVER_ID, playerid);
	SetPlayerData(playerid, P_LAST_VEHICLE, vehicleid);
	
	new vehicle_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
	new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
	
	if(is_driver)
	{
		if(!GetVehicleParam(vehicleid, V_LOCK))
		{
			if(GetPlayerData(playerid, P_DRIVING_LIC) > 0)
			{
				if(!IsABike(vehicleid))
					SpeedometrShowForPlayer(playerid, vehicleid);
				
				switch(vehicle_type)
				{
					case VEHICLE_ACTION_TYPE_DRIVING_SCH:
					{
						if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
						{
							SetPVarFloat(playerid, "car_damage", 1000.0);
							
							SetVehicleParam(vehicleid, V_LOCK, VEHICLE_PARAM_ON);
							NextDrivingExamRouteCP(playerid);
							
							SendClientMessage(playerid, 0x66CC00FF, "[»нструктор] ѕроедьтесь немного по городу");
							SendClientMessage(playerid, 0xFFFF00FF, "¬нимание! ≈сли вы попадете в аварию или выйдите из машины экзамен будет завершен");
							SendClientMessage(playerid, 0xFFFFFFFF, "„тобы открыть ворота подайте {0099FF}звуковой сигнал");
						}
						else 
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "“ранспорт принадлежит автошколе");
						}
					}
					case VEHICLE_ACTION_TYPE_LOADER:
					{
						RemovePlayerFromVehicle(playerid);
						SendClientMessage(playerid, 0xCECECEFF, "¬ам недоступен данный транспорт");
						/*if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
						{
							SetVehicleParam(vehicleid, V_LOCK, true);
						
							DisablePlayerCheckpoint(playerid);
						
							SendClientMessage(playerid, 0xFFFFFFFF, "»спользуйте {00CC00}Num 2 {FFFFFF}и {00CC00}Num 8 {FFFFFF}дл€ управлени€ погрузчиком");
							SendClientMessage(playerid, 0xFFFFFFFF, "„тобы вз€ть или положить груз можно использовать {3399FF}/take");
						}
						else 
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "¬ы не грузчик");
						}*/
					}
					case VEHICLE_ACTION_TYPE_FACTORY:
					{
						if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER)
						{
							new job_car = GetPlayerJobCar(playerid);
							
							if(job_car == INVALID_VEHICLE_ID && action_id == VEHICLE_ACTION_ID_NONE)
							{
								new bool: take_car = true;
								switch(GetVehicleData(vehicleid, V_MODELID))
								{
									case 514:
									{
										CreateVehicleLabel(vehicleid, "ƒоставка топлива\n{FFFFFF}«агрузка 0 / 8000 л", 0xFF6600FF, 0.0, 2.1, 2.1, 20.0);

										SendClientMessage(playerid, 0x66CC00FF, "ѕрицепите цистерну и отправл€йтесь на нефтезавод дл€ закупки топлива");
										SendClientMessage(playerid, 0xFFFFFFFF, "”бедитесь, что склад не полон и заводу действительно необходимо топливо");
									}
									case 498:
									{
										CreateVehicleLabel(vehicleid, "ƒоставка металла\n{FFFFFF}«агрузка 0 / 500 кг", 0x3399FFFF, 0.0, 0.0, 1.8, 20.0);

										SendClientMessage(playerid, 0x66CC00FF, "ќтправл€йтесь на шахту, чтобы закупить металл дл€ завода");
										SendClientMessage(playerid, 0xFFFFFFFF, "”бедитесь, что склад не полон и заводу действительно нужен металл");				
									}
									default: take_car = false;
								}
								if(take_car)
								{
									SetVehicleData(vehicleid, V_ACTION_ID, true);
									SetPlayerData(playerid, P_JOB_CAR, vehicleid);
								}
							}
							else if(vehicleid != job_car) 
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "¬ы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else 
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "¬ы не работник службы доставки завода");
						}
					}
					case VEHICLE_ACTION_TYPE_BUS_DRIVER: // ¬одитель автобуса
					{
						if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);
							
							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_BUS_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}јвтобусный парк",
									"{FFFFFF}„тобы вз€ть машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"¬ы действительно хотите вз€ть автобус в аренду?", 
									"ƒа", "Ќет"
								);
							}
							else if(vehicleid != job_car) 
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "¬ы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else 
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "¬ы не водитель автобуса");
						}
					}
					case VEHICLE_ACTION_TYPE_TAXI_DRIVER: // “аксист
					{
						if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
						{
							new job_car = GetPlayerJobCar(playerid);
							
							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_TAXI_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}“аксопарк",
									"{FFFFFF}„тобы вз€ть машину, необходимо заплатить городскому таксопарку 200 рублей\n"\
									"¬ы действительно хотите заключить договор аренды?", 
									"ƒа", "Ќет"
								);
							}
							else if(vehicleid != job_car) 
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "¬ы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else 
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "¬ы не таксист");
						}
					}
					case VEHICLE_ACTION_TYPE_MECHANIC: // јвтомеханик
					{
						if(GetPlayerJob(playerid) == JOB_MECHANIC)
						{
							new job_car = GetPlayerJobCar(playerid);
							
							if(!IsPlayerInJob(playerid) && job_car != vehicleid && action_id == VEHICLE_ACTION_ID_NONE)
							{
								Dialog
								(
									playerid, DIALOG_MECHANIC_RENT_CAR, DIALOG_STYLE_MSGBOX,
									"{FFCD00}јвтопарк",
									"{FFFFFF}„тобы вз€ть машину, необходимо заплатить городскому автопарку 180 рублей\n"\
									"¬ы действительно хотите заключить договор аренды?", 
									"ƒа", "Ќет"
								);
							}
							else if(vehicleid != job_car) 
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xCECECEFF, "¬ы не можете использовать этот транспорт в данный момент");
							}
							else KillEndJobTimer(playerid);
						}
						else 
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "¬ы не автомеханик");
						}
					}
					case VEHICLE_ACTION_TYPE_TRUCKER: // ƒальнобойщик
					{
						if(GetPlayerJob(playerid) == JOB_TRUCKER)
						{
							
						}
						else
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "¬ы не дальнобойщик");
						}
					}
					case VEHICLE_ACTION_TYPE_GOV_CAR..VEHICLE_ACTION_TYPE_LYT_CAR:
					{
						if(GetPlayerTeamEx(playerid) != vehicle_type - 9)
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "¬ам недоступен данный транспорт");
						}
					}
					case VEHICLE_ACTION_TYPE_RENT_CAR:
					{
						if(!(playerid == rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] && GetPlayerRentCar(playerid) == vehicleid))
						{
							TogglePlayerControllable(playerid, false);
							CallLocalFunction("ShowBuyCarInfo", "ii", playerid, vehicleid);
						}
					}
					case VEHICLE_ACTION_TYPE_ADMIN_CAR:
					{
						if(!GetPlayerAdminEx(playerid))
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xCECECEFF, "¬ам недоступен данный транспорт");
						}
					}
				}
			}
			else 
			{	
				if(!IsABike(vehicleid))
				{
					RemovePlayerFromVehicle(playerid);
					SendClientMessage(playerid, 0x999999FF, "” ¬ас нет прав");
				}
			}
		}
		else RemovePlayerFromVehicle(playerid);
	}
	else 
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, false);

		switch(vehicle_type)
		{
			case VEHICLE_ACTION_TYPE_BUS_DRIVER, VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				new driver = GetVehicleData(vehicleid, V_DRIVER_ID);
				if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
				{
					if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
					{
						new tariff = GetPlayerData(driver, P_JOB_TARIFF);
						
						if(vehicle_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER)
						{
							if(GetPlayerMoneyEx(playerid) >= tariff)
							{
								new fmt_str[90];
								g_taxi_mileage[playerid] = 0.0;
								
								format(fmt_str, sizeof fmt_str, "%s сел в ваше такси. —четчик включен", GetPlayerNameEx(playerid));
								SendClientMessage(driver, 0x3399FFFF, fmt_str);
								
								format(fmt_str, sizeof fmt_str, "¬ы сели в такси %s. “ариф: %d рублей (оплата за каждые 100 м поездки)", GetPlayerNameEx(driver), tariff);
								SendClientMessage(playerid, 0x3399FFFF, fmt_str);
								
								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);							
							}
							else 
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Ќедостаточно денег дл€ оплаты тарифа");
							}
						}
						else 
						{
							if(GetPlayerMoneyEx(playerid) >= tariff)
							{
								AddPlayerData(driver, P_JOB_LOAD_ITEMS, +, 1);
								GivePlayerMoneyEx(driver, tariff, "+ ќплата проезда в автобусе", true, true);
							}
							else 
							{
								RemovePlayerFromVehicle(playerid);
								SendClientMessage(playerid, 0xFF6600FF, "Ќедостаточно денег дл€ оплаты проезда");
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public: OnPlayerExitVehicleEx(playerid, vehicleid, is_driver)
{
	SetVehicleData(vehicleid, V_DRIVER_ID, INVALID_PLAYER_ID);
	SetPlayerData(playerid, P_LAST_VEHICLE, INVALID_VEHICLE_ID);
	
	if(is_driver)
	{
		if(!IsABike(vehicleid))
			SpeedometrHideForPlayer(playerid);
		
		if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
		{
			DisablePlayerRaceCheckpoint(playerid);
			
			if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
			{			
				SetVehicleToRespawn(vehicleid);
			}
			SetPlayerData(playerid, P_DRIVING_LIC, 0);
			ClearPlayerDrivingExamInfo(playerid);
			
			SendClientMessage(playerid, 0xFF6600FF, "¬ы покинули учебный автомобиль");
			SendClientMessage(playerid, 0xFF0000FF, "Ёкзамен провален!");
			
			DeletePVar(playerid, "car_damage");
		}
		
		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
			case VEHICLE_ACTION_TYPE_LOADER:
			{
				SetPlayerLoaderJobLoadCP(playerid);
			}
			case VEHICLE_ACTION_TYPE_FACTORY:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER)
				{
					if(GetPlayerJobCar(playerid) == vehicleid)
					{
						StartEndJobTimer(playerid);
						SendClientMessage(playerid, 0xFF6600FF, "” ¬ас есть 15 секунд чтобы вернутьс€ в транспорт");
					}
				}
			}
			case VEHICLE_ACTION_TYPE_BUS_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "” ¬ас есть 15 секунд чтобы вернутьс€ в автобус");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_TAXI_DRIVER:
			{
				if(GetPlayerJob(playerid) == JOB_TAXI_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "” ¬ас есть 15 секунд чтобы вернутьс€ в транспорт");
						}
					}
				}
			}
			case VEHICLE_ACTION_TYPE_MECHANIC:
			{
				if(GetPlayerJob(playerid) == JOB_MECHANIC)
				{
					if(IsPlayerInJob(playerid))
					{
						if(GetPlayerJobCar(playerid) == vehicleid)
						{
							StartEndJobTimer(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "” ¬ас есть 15 секунд чтобы вернутьс€ в транспорт");
						}
					}
				}
			}
		}
	}
	else
	{
		if(GetPlayerData(playerid, P_CUFFED)) TogglePlayerControllable(playerid, true);
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON && GetPlayerData(playerid, P_IMPROVEMENTS) < 4)
	{
		SetVehicleParam(vehicleid, V_ENGINE, VEHICLE_PARAM_OFF);
		GameTextForPlayer(playerid, "~r~~h~engine off", 4000, 6);

		new Float: veh_health;
			
		GetVehicleHealth(vehicleid, veh_health);

		SetVehicleData(vehicleid, V_HEALTH, veh_health);
		
		switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
		{
			case VEHICLE_ACTION_TYPE_DRIVING_SCH, VEHICLE_ACTION_TYPE_BUS_DRIVER:
			{
				new Float: health = GetPVarFloat(playerid, "car_damage");

				health -= floatabs((health - veh_health));
				
				SetPVarFloat(playerid, "car_damage", health);
			}
		}
	}
    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new action_type = GetPlayerCPInfo(playerid, CP_ACTION_TYPE);
	if(IsPlayerInCheckpoint(playerid))
	{
		switch(action_type)
		{
			case CP_ACTION_TYPE_LOADER_JOB_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_LOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							DisablePlayerCheckpoint(playerid);
							
							ClearAnimations(playerid);
							ApplyAnimationEx(playerid, "CARRY", "liftup", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
							SetTimerEx("SetPlayerLoaderJobLoad", 1000, false, "i", playerid);
						}
					}
				}
			}
			case CP_ACTION_TYPE_LOADER_JOB_PUT:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_UNLOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + 1);
							
							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
							ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);							

							SetPlayerLoaderJobLoadCP(playerid);
							
							new fmt_str[70];
							format(fmt_str, sizeof fmt_str, "√руз доставлен на склад! ¬сего перенесено грузов: {FF9900}%d", GetPlayerJobLoadItems(playerid));
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);						
						}
					}
				}
			}
			case CP_ACTION_TYPE_MINER_JOB_TAKE:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_LOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{				
							DisablePlayerCheckpoint(playerid);
							
							ApplyAnimationEx(playerid, "BASEBALL", "Bat_4", 3.1, 1, 1, 1, 0, 0, 0, USE_ANIM_TYPE_NONE - 1);
							SetTimerEx("SetPlayerMinerJobTakeOre", 15_000, false, "ii", playerid, 1);
						}
					}
				}
			}
			case CP_ACTION_TYPE_MINER_JOB_PUT:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
				{
					if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
					{
						if(!IsPlayerInAnyVehicle(playerid))
						{
							new fmt_str[64];
							
							new rand = random(45) + 16;
							new items = GetPlayerJobLoadItems(playerid) + rand;
							
							RemovePlayerAttachedObjects(playerid);
							SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);
							
							ApplyAnimationEx(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0, 0);
							SetPlayerJobLoadItems(playerid, items);
							
							format(fmt_str, sizeof fmt_str, "¬ы доставили на склад {FF9900}%d кг {66CC00}руды", rand);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);
							
							format(fmt_str, sizeof fmt_str, "ќбщее количество добытого сырь€: {FF9900}%d кг", items);
							SendClientMessage(playerid, 0x3399FFFF, fmt_str);
						
							format(fmt_str, sizeof fmt_str, "+ %d кг", rand);
							SetPlayerChatBubble(playerid, fmt_str, 0x66CC00FF, 10.0, 2000);
							
							items = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);
							SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, items + rand);
							
							UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
							
							SetPlayerMinerJobLoadCP(playerid);
						}
					}
				}
			}
		}	
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	new action_type = GetPlayerRaceCPInfo(playerid, RCP_ACTION_TYPE);
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(IsPlayerInRaceCheckpoint(playerid))
	{
		switch(action_type)
		{
			case RCP_ACTION_TYPE_DRIVING_EXAM:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_DRIVING_SCH)
				{
					new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);
					
					if(step >= sizeof driving_exam_route - 1)
					{
						ClearPlayerDrivingExamInfo(playerid);
						DisablePlayerRaceCheckpoint(playerid);
						
						new Float: health = GetPVarFloat(playerid, "car_damage");
						SetVehicleToRespawn(vehicleid);
					
						if(health < 900.0)
						{
							SetPlayerData(playerid, P_DRIVING_LIC, 0);
							
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF9900}Ёкзамен провален",
								"{FFFFFF}  сожалению, ¬ам не удалось справитьс€ с практической частью экзамена.\n"\
								"”ровень повреждений машины слишком высокий.\n\n"\
								"¬ сдедующий раз постарайтесь ехать аккуратнее, соблюда€ ѕƒƒ.\n"\
								"∆дем ¬ас на пересдаче!",
								"ќк", ""
							);
						}
						else
						{
							new query[64];
							format(query, sizeof query, "UPDATE accounts SET driving_lic=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_DRIVING_LIC), GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);
							
							if(!mysql_errno())
							{
								Dialog
								(
									playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
									"{66CC00}Ёкзамен пройден успешно",
									"{FFFFFF}¬ы успешно сдали практическую часть экзамена по вождению\n"\
									"и получаете водительское удостоверение!\n"\
									"{9999FF}Ќа ¬ашей машине не обнаружено никаких повреждений, либо\n"\
									"они незначительны.\n"\
									"{FFFFFF}Ќе забывайте клавиши управлени€ транспортом, а также\n"\
									"правила дорожного движени€. ќни будут посто€нно нужны\n"\
									"¬ам на дороге. ќбучающий раздел в автошколе будет все\n"\
									"врем€ доступен если понадобитс€ кака€-либо помощь.",
									"ќк", ""
								);
							}
							else
							{
								SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, обратитесь к администрации {FF0000}(equ-code 07)");
							}
						}
					}
					else if(step >= 0) 
					{
						NextDrivingExamRouteCP(playerid);
					}
				}
			}
			case RCP_ACTION_TYPE_BUS_ROUTE:
			{
				if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_BUS_DRIVER)
				{
					if(IsPlayerInJob(playerid))
					{
						new route_id = GetPlayerData(playerid, P_BUS_ROUTE);
						new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);
						
						if(g_bus_route[route_id][route_step][BRS_POS_X] == 0.0)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
						}
						
						if(g_bus_route[route_id][route_step - 1][BRS_STOP])
						{
							new fmt_str[90];
							DisablePlayerRaceCheckpoint(playerid);
							
							GameTextForPlayer(playerid, "~r~Stop", 4000, 1);
							SendClientMessage(playerid, 0x66CC00FF, "ќстановка. ∆дите пассажиров");
							
							format(fmt_str, sizeof fmt_str, "јвтобус по маршруту %s отправл€етс€ через 10 секунд", g_bus_routes[route_id][BR_NAME]);
							SendMessageInLocal(playerid, fmt_str, 0x669999FF, 45.0);
							
							SetTimerEx("NextBusRouteCP", 10_000, false, "i", playerid);
						}
						else 
						{
							AddPlayerData(playerid, P_JOB_WAGE, +, random(30) + 20);
							NextBusRouteCP(playerid);
						}
					}
				}
			}
			default:
			{
			
			}
		}
	
	}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

stock ClearMedBed(playerid, bedid)
{
	if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
	{
		SetPlayerData(playerid, P_OCCUPIED_BED, -1);
	}
	
	g_med_bed_used[bedid] = false;
	UpdateMedBed(bedid);
	
	return 1;
}

stock UpdateMedBed(bedid) // обновить койку
{
	new fmt_text[85];

	format(fmt_text, sizeof fmt_text, " ойка є%d\n{00CC00}—вободна\n\n{AAAAAA}Ќажмите левый ALT\nчтобы зан€ть ее", bedid + 1);
	UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_text);
	
	return 1;
}

public: HospitalTreatment()
{
	for(new playerid; playerid < MAX_PLAYERS; playerid ++)
	{
		if(!IsPlayerConnected(playerid)) continue;
		else if(!IsPlayerLogged(playerid)) continue;
		else if(GetPlayerData(playerid, P_OCCUPIED_BED) == -1) continue;
		
		if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1131.1603, -8.5709, 1011.1254)) 
		{
			ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
		}	
		else if(random(2) == 1)
		{
			GameTextForPlayer(playerid, "~g~~h~~h~+ 1 HP", 1000, 4);
			SetPlayerChatBubble(playerid, "+1 hp", 0x33CC33FF, 5.0, 1000);
			
			SetPlayerHealthEx(playerid, 1.0, true);	
		}
	}
	SetTimer("HospitalTreatment", (random(5) + 3) * 1000, false);
	return 1;
}

public: BuyCarPTDUpdate(playerid)
{
	if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;
	
	new type = buy_car_select_color_type[playerid];
	new car_market_id = GetPlayerInBiz(playerid) - 33;
	new select_car = buy_car_select_car[playerid]; 
	new modelid = car_market_data[car_market_id][select_car][0];

	new fmt_td_text[85];
	format(fmt_td_text, sizeof fmt_td_text, "ЙBEП %d", type + 1);
	
	PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][2], fmt_td_text);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][2]);

	static const 
		car_market_name[][] = {"MOTO-BEЗO", "£PEЦЕYЦ", "™KOмOЦ", "CPEГмЕЖ"};
	
	
	format(fmt_td_text, sizeof fmt_td_text, "TPAHCМOPT #%d", select_car + 1);
	PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][0], fmt_td_text);

	format(fmt_td_text, sizeof fmt_td_text, "~b~~h~ЙEмA: %d P~n~МPOАEВ: 0 km~n~~b~~h~CKOPOCПТ: %d km/h~n~KЗACC: %s", GetVehicleInfo(modelid - 400, VI_PRICE), 0, car_market_name[car_market_id]);
	PlayerTextDrawSetString(playerid, buy_car_PTD[playerid][1], fmt_td_text);

	new color_index = buy_car_select_color[playerid][type];
	
	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][4], rgb_array[color_index]);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][4]);

	if(--color_index < 0)
		color_index = sizeof rgb_array - 1;

	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][3], rgb_array[color_index] - 0xAA);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][3]);
	
	color_index += 2;
	if(color_index > sizeof rgb_array - 1)
		color_index = 1;
		
	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][5], rgb_array[color_index] - 0xAA);
	PlayerTextDrawShow(playerid, buy_car_PTD[playerid][5]);

	ChangeVehicleColor(GetPlayerData(playerid, P_BUY_CAR), buy_car_select_color[playerid][0], buy_car_select_color[playerid][1]);
	return 1;
}

public: ShowBuyCarInfo(playerid, vehicleid)
{
	new text[275];

	//static const vehicle_class_name[][] = {"ћото-вело", "Ёконом", "—редний", "ѕремиум"};
	
	new modelid = GetVehicleModel(vehicleid) - 400;
	format
	(
		text, sizeof text, 
		"{FFFFFF}“ип автомобил€:\t%s класс\n\
		Ќазвание:\t\t%s\n\
		Ќомер модели:\t%d\n\
		—тоимость аренды:\t{FFFF00}%d руб.\n\
		{FFFFFF}—тоимость покупки:\t{00CC00}%d руб.\n\n\
		{FFFFFF}ƒл€ покупки этой модели нажмите \" упить\"\n\
		„тобы вз€ть авто в аренду используйте /rentcar",
		"ЌеопределЄнный",
		//vehicle_class_name[ GetVehicleInfo(modelid, VI_TYPE) ],
		GetVehicleInfo(modelid, VI_NAME),
		modelid + 400,
		GetVehicleInfo(modelid, VI_PRICE) / 100,
		GetVehicleInfo(modelid, VI_PRICE)
	);

	Dialog(playerid, DIALOG_BIZ_CAR_MARKET_CAR_INFO, DIALOG_STYLE_MSGBOX, "{FF9900}јвторынок", text, " упить", "¬ыйти");
	return 1;
}

stock ExitPlayerBuyCarMarket(playerid)
{
	if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return -1;
	
	DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
	SetPlayerData(playerid, P_BUY_CAR, INVALID_VEHICLE_ID);

	new biz_id = GetPlayerInBiz(playerid);

	BuyCarTDsHideForPlayer(playerid);
	HidePlayerSelectPanel(playerid);
	CancelSelectTextDraw(playerid);

	SetPlayerPosEx(playerid, 9.6948, -28.2245, 1086.0945, 88.0005, 5, biz_id + 6000);

	TogglePlayerControllable(playerid, true);
	return 1;
}

stock CarMarketShowNextCar(playerid, next = '+')
{
	new biz_id = GetPlayerInBiz(playerid);
	new car_market_id = biz_id - 33;

	if(biz_id == -1 || GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET) return 1;
	
	static const max_car_index[] = {10, 14, 16, 14};
	
	if(next == '+')
	{
		if(++buy_car_select_car[playerid] > max_car_index[car_market_id])
			buy_car_select_car[playerid] = 0;
	}
	else 
	{
		if(--buy_car_select_car[playerid] < 0)
			buy_car_select_car[playerid] = max_car_index[car_market_id];
	}
	
	new select_car = buy_car_select_car[playerid];
	new color_1 = buy_car_select_color[playerid][0];
	new color_2 = buy_car_select_color[playerid][1];
	
	DestroyVehicle(GetPlayerData(playerid, P_BUY_CAR));
	SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(car_market_data[car_market_id][select_car][0], 147.7250, -82.9883, 1001.8265, 180.0, color_1, color_2, 5));
	SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
	LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 5);	
	
	CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
	return 1;
}

public OnPlayerPickUpPickupEx(playerid, pickupid, action_type, action_id)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
	{
		SetPlayerData(playerid, P_LAST_PICKUP, pickupid);
		
		switch(action_type)
		{
			case PICKUP_ACTION_TYPE_TELEPORT:
			{
				if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
				{
					switch(GetTeleportData(action_id, T_ACTION_TYPE))
					{
						case T_ACTION_TYPE_BLOCK_LEAVE_AREA:
						{
							SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, true);
						}
						case T_ACTION_TYPE_END_JOB:
						{
							EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
						}
						case T_ACTION_TYPE_LEAVE_HOSPITAL:
						{
							if(GetPlayerData(playerid, P_HOSPITAL))
							{
								if(GetPlayerHealthEx(playerid) < 70.0) return SendClientMessage(playerid, -1, "ћедперсонал не может отпустить ¬ас в таком состо€нии. ќтправл€йтесь на лечение"); 
								else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
								{
									SendClientMessage(playerid, 0x66CC00FF, "¬ы выписались из больницы");
									ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
								}
								SetPlayerData(playerid, P_HOSPITAL, false);
							}
						}
					}
				
					SetPlayerPosEx
					(
						playerid, 
						GetTeleportData(action_id, T_POS_X), 
						GetTeleportData(action_id, T_POS_Y), 
						GetTeleportData(action_id, T_POS_Z), 
						GetTeleportData(action_id, T_ANGLE),
						GetTeleportData(action_id, T_INTERIOR),
						GetTeleportData(action_id, T_VIRTUAL_WORLD)
					);
				}
			}
			case PICKUP_ACTION_TYPE_DRIVING_TUTO:
			{
				ShowPlayerDrivingTutorial(playerid);
			}
			case PICKUP_ACTION_TYPE_ATM:
			{
				ShowPlayerATMDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_BANK:
			{
				if(action_id)
				{
					cmd::bank(playerid, "");
				}
				else ShowPlayerPayForRentDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_TEMP_JOB:
			{
				new job = GetPlayerTempJob(playerid);
				if(job != action_id && IsPlayerInJob(playerid) || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE)
				{
					job = TEMP_JOB_NONE - 1;
				}
				
				switch(action_id)
				{
					case TEMP_JOB_LOADER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LOADER_START, DIALOG_STYLE_MSGBOX,
								"{FFCD00}–абота грузчика",
								"{FFFFFF}¬ы хотите устроитьс€ на работу грузчиком?",
								"ƒа", "Ќет"
							);					
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_LOADER_END, DIALOG_STYLE_MSGBOX,
								"{FFCD00}–абота грузчика",
								"{FFFFFF}¬ы уверены что хотите завершить рабочий день?",
								"ƒа", "Ќет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "„тобы устроитьс€ сюда закончите текущую работу");
					}
					case TEMP_JOB_MINER:
					{
						if(job == TEMP_JOB_NONE)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_MINER_START, DIALOG_STYLE_MSGBOX,
								"{FFCD00}–абота шахтера",
								"{FFFFFF}¬ы хотите устроитьс€ на работу шахтера?",
								"ƒа", "Ќет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_MINER_END, DIALOG_STYLE_MSGBOX,
								"{FFCD00}–абота шахтера",
								"{FFFFFF}¬ы уверены что хотите завершить рабочий день?",
								"ƒа", "Ќет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ данный момент устроитьс€ на эту работу нельз€");
					}
					case TEMP_JOB_FACTORY_TRUCKER:
					{
						if(job == TEMP_JOB_NONE)
						{	
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
								"{FFCD00}«авод",
								"{FFFFFF}¬ы хотите начать работу в отделе доставки исходных материалов?",
								"ƒа", "Ќет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY_TRUCKER, DIALOG_STYLE_MSGBOX,
								"{FFCD00}«авод",
								"{FFFFFF}«акончить работу в отделе доставки исходных материалов?",
								"ƒа", "Ќет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ данный момент устроитьс€ на эту работу нельз€");
					}
					case TEMP_JOB_FACTORY:
					{
						if(job == TEMP_JOB_NONE)
						{	
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
								"{FFCD00}«авод",
								"{FFFFFF}¬ы хотите начать работу в производственном цеху?",
								"ƒа", "Ќет"
							);
						}
						else if(job == action_id)
						{
							Dialog
							(
								playerid, DIALOG_TEMP_JOB_FACTORY, DIALOG_STYLE_MSGBOX,
								"{FFCD00}«авод",
								"{FFFFFF}«акончить работу в производственном цеху?",
								"ƒа", "Ќет"
							);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ данный момент устроитьс€ на эту работу нельз€");
					}
				}
			}
			case PICKUP_ACTION_TYPE_INFO_PICKUP:
			{
				Dialog
				(
					playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
					GetInfoPickupData(action_id, IP_TITLE),
					GetInfoPickupData(action_id, IP_INFO),
					"ќк", ""
				);
			}
			case PICKUP_ACTION_TYPE_MINER_SELL_M:
			{
				ShowPlayerBuyMetalDialog(playerid);
			}
			case PICKUP_ACTION_TYPE_FACTORY_MET:
			{
				if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
				{
					new j_state = GetPlayerTempJobState(playerid);
					switch(j_state)
					{
						case TEMP_JOB_STATE_FACTORY_TAKE_MET:
						{
							new factory_metal = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT);
							new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);
							
							new take_metall = random(2) + 1;
							if(factory_metal > take_metall && factory_fuel > (take_metall * 6))
							{
								SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, factory_metal - take_metall);
								UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);
							
								new fmt_str[16];
								SetPVarInt(playerid, "factory_take_metall", take_metall);
								
								format(fmt_str, sizeof fmt_str, "~b~~h~+%d kg", take_metall);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);
								
								SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATE_P);
							}
							else GameTextForPlayer(playerid, "~r~no fuel or metal", 4000, 1);
						}
						case TEMP_JOB_STATE_FACTORY_CREATE_P:
						{
							SendClientMessage(playerid, 0x999999FF, "¬ы уже вз€ли металл");
						}
					}
				}
			}
			case PICKUP_ACTION_TYPE_FUEL_STATION:
			{
				ShowPlayerBuyJerricanDialog(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_BIZ_ENTER:
			{
				if(GetPlayerInBiz(playerid) == -1)
				{	
					new i_paid_biz = GetPlayerUseListitem(playerid);
					
					if(IsBusinessOwned(action_id))
					{
						if(GetBusinessData(action_id, B_OWNER_ID) != GetPlayerAccountID(playerid))
						{
							if(GetBusinessData(action_id, B_LOCK_STATUS))
								return GameTextForPlayer(playerid, "~w~business~n~~r~closed", 4000, 1);
							
							if(GetBusinessData(action_id, B_ENTER_PRICE) > 0 && i_paid_biz != action_id)
							{
								new fmt_str[128];
								SetPVarInt(playerid, "biz_enter", action_id + 1);
							
								format
								(
									fmt_str, sizeof fmt_str, 
									"{FFFFFF}¬ход платный и составл€ет {FF9900}%d руб\n"\
									"{99FF00}¬ы уверены что хотите войти сюда?", 
									GetBusinessData(action_id, B_ENTER_PRICE)
								);
								return Dialog(playerid, DIALOG_BIZ_ENTER, DIALOG_STYLE_MSGBOX, GetBusinessData(action_id, B_NAME), fmt_str, "ƒа", "Ќет");
							}
						}
					}
					EnterPlayerToBiz(playerid, action_id);
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_EXIT:
			{
				new in_biz = GetPlayerInBiz(playerid);
				if(in_biz != -1)
				{
					new type = GetBusinessData(in_biz, B_INTERIOR);
					if(action_id == type)
					{
						SetPlayerPosEx
						(
							playerid, 
							GetBusinessData(in_biz, B_EXIT_POS_X),
							GetBusinessData(in_biz, B_EXIT_POS_Y),
							GetBusinessData(in_biz, B_EXIT_POS_Z),
							GetBusinessData(in_biz, B_EXIT_ANGLE),
							0,
							0
						);					
						SetPlayerInBiz(playerid, -1);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_HEALTH:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(businessid == action_id)
					{
						new time = gettime();
						if(GetPVarInt(playerid, "biz_health_use") <= time)
						{
							new price = BIZ_HEALTH_SERVICE_PRICE;
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								new query[155];
							
								format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS) > 0 ? GetBusinessData(businessid, B_PRODS)-1 : 0, GetBusinessData(businessid, B_PRODS) > 0 ? GetBusinessData(businessid, B_BALANCE)+price : 0, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);
								
								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -price, "»спользование аптечки в бизнесе", false, true);
									
									if(GetBusinessData(businessid, B_PRODS) >= 1)
									{
										AddBusinessData(businessid, B_PRODS, -, 1);
										AddBusinessData(businessid, B_BALANCE, +, price);
									}
									SetPlayerHealthEx(playerid, 99.0);
									SetPVarInt(playerid, "biz_health_use", time + 300); // 300 сек (5 минут)	
									
									mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), time, price, IsBusinessOwned(businessid));
									mysql_query(mysql, query, false);
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 24)");
							}
							else SendClientMessage(playerid, 0x999999FF, "”слуги медпункта сто€т 150 рублей");
						}
						else SendClientMessage(playerid, 0x999999FF, "Ќедавно ¬ы уже пользовались услугами медпункта");	
						
						// SetPlayerHealthEx(playerid, 95.0); 
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_SHOP_247:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_SHOP_24_7)
					{
						cmd::buy(playerid, "");
					}	
				}
			}
			case PICKUP_ACTION_TYPE_HOUSE:
			{
				ShowPlayerHouseInfo(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_HOUSE_HEALTH:
			{
				new houseid = GetPlayerInHouse(playerid);
				if(houseid != -1)
				{
					new type = GetHouseData(houseid, H_TYPE);
				
					if(IsPlayerInRangeOfPoint(playerid, 4.0, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z)))
					{
						SetPlayerHealthEx(playerid, 100.0);
						GameTextForPlayer(playerid, "~b~~h~100 hp", 3000, 1);					
					}
				}
			}
			case PICKUP_ACTION_TYPE_REALTOR_HOME:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_REALTOR_HOME)
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, 
							"{99CC00}Ќомера свободных домов",
							g_house_realtor_list, 
							"«акрыть", ""
						);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CLOTHING:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_TYPE);
					if(type == BUSINESS_TYPE_CLOTHING_SHOP)
					{
						ShowPlayerClothingShopPanel(playerid);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_MARK:
			{
				Dialog
				(
					playerid, DIALOG_BIZ_CAR_MARKET, DIALOG_STYLE_MSGBOX,
					"{FFCC00}ѕокупка транспорта",
					"{FFFFFF}Ќа территории авторынка могут находитьс€ не все модели транспорта, которые\n\
					можно приобрести (некоторые отсутствуют из-за того, что их вз€ли на прокат)\n\
					Ќажмите кнопку \"ƒалее\" чтобы посмотреть весь доступный дл€ покупки транспорт",
					"ƒалее", "ќтмена"
				);
			}
			case PICKUP_ACTION_TYPE_ENTRANCE_ENT:
			{
				EnterPlayerToEntrance(playerid, action_id);
			}
			case PICKUP_ACTION_TYPE_ENTRANCE_EXI:
			{
				new entranceid = GetPlayerInEntrance(playerid);
				if(entranceid != -1)
				{
					if(GetPlayerInEntranceFloor(playerid) == 0)
					{
						SetPlayerPosEx
						( 
							playerid,
							GetEntranceData(entranceid, E_EXIT_POS_X),
							GetEntranceData(entranceid, E_EXIT_POS_Y),
							GetEntranceData(entranceid, E_EXIT_POS_Z),
							GetEntranceData(entranceid, E_EXIT_ANGLE),
							0,
							0
						);
						
						SetPlayerInEntrance(playerid, -1);
						SetPlayerInEntranceFloor(playerid, -1);
					}
				}
			}
			case PICKUP_ACTION_TYPE_ENTRANCE_LIF: 
			{
				new entranceid = GetPlayerInEntrance(playerid);
				if(entranceid != -1)
				{
					new floor = GetPlayerInEntranceFloor(playerid);
					if(floor != -1)
					{
						ShowPlayerEntranceFloorsLift(playerid, entranceid, floor);
					}
				}
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_ENT:
			{
				SetPlayerPos(playerid, 5.4881, -27.7033, 1085.9291);
				SetPlayerFacingAngle(playerid, 180.0);
			}
			case PICKUP_ACTION_TYPE_BIZ_CAR_EXI:
			{
				SetPlayerPos(playerid, 5.4975, -26.3967, 1080.9968);
				SetPlayerFacingAngle(playerid, 0.0);
			} 
		}
	}
	return 1;
}

public: HidePlayerSelectPanelPriceTimer(playerid)
{
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_NONE)
	{
		HidePlayerSelectPanelPrice(playerid);
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);

	if(GetPlayerMenu(playerid) == admin_spec_menu)
	{
		if(GetPlayerSpectateData(playerid, S_PLAYER) == -1) return HideMenuForPlayer(admin_spec_menu, playerid);
		
		new fmt_text[100],
			spec_player = GetPlayerSpectateData(playerid, S_PLAYER);

		switch(row)
		{
			case 0, 8: StopSpectate(playerid);
			case 1:
			{
				StartSpectate(playerid, spec_player);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 2:
			{
				ShowPlayerStats(spec_player, playerid);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 3:
			{
				SetPVarInt(playerid, "specplayer", spec_player);
				format(fmt_text, sizeof fmt_text, "{ffffff}¬ы действительно хотите кикнуть игрока %s[%d] без лишнего шума?", GetPlayerNameEx(spec_player), spec_player);
				Dialog
				(
					playerid, DIALOG_SPEC_SKICK, DIALOG_STYLE_MSGBOX,
					"{FFCC00} ик игрока",
					fmt_text,
					"ƒа", "Ќет"
				);
			}
			case 4:
			{
				SetPVarInt(playerid, "specplayer", spec_player);
				format
				(
					fmt_text, sizeof fmt_text,
					"{ffffff}\
					¬ведите через пробел причину и врем€\n\
					блокировки чата игроку %s[%d]\n\n\
					{6699ff}ѕример: 20 Offtop\n\
					{ffffff}¬ы можете оставить поле причины пустым\
					",
					GetPlayerNameEx(spec_player), spec_player
				);
				Dialog(playerid, DIALOG_SPEC_MUTE, DIALOG_STYLE_INPUT, "{FFCC00}Ѕлокировка чата игроку", fmt_text, "ƒалее", "ќтмена");
			}
			case 5:
			{
				cmd::slap(playerid, "");
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 6:
			{
				cmd::test(playerid, "");
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
			case 7:
			{
				format(fmt_text, sizeof fmt_text, "[SP] %s[%d]  |  PING %d  |  IP  %s  |  L-IP  %s");
				SendClientMessage(playerid, 0x00CC66FF, fmt_text);
				ShowMenuForPlayer(admin_spec_menu, playerid);
			}
		}
	}

	/*
	if(GetPlayerMenu(playerid) == reg_select_skin_menu)
    {
		if(!IsPlayerLogged(playerid))
		{
			if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
			{
				new sex = GetPlayerSex(playerid);
				new select_skin = GetPlayerSelectSkin(playerid);
		
				switch(row)
				{
					case 0: 
					{
						if(++select_skin >= sizeof reg_skin_data[] || !reg_skin_data[sex][select_skin])
						{
							select_skin = 0;
						}
					}
					case 1:
					{
						if(--select_skin < 0)
						{
							select_skin = sizeof(reg_skin_data[])-1;
							
							if(!sex) 
								select_skin -= 2;
						}
					}
					case 2: 
					{
						SetPlayerData(playerid, P_SKIN, reg_skin_data[sex][select_skin]);
						
						new query[90];
						format(query, sizeof query, "UPDATE accounts SET skin=%d,last_login=%d WHERE id=%d LIMIT 1", GetPlayerSkinEx(playerid), gettime(), GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
						
						if(!mysql_errno())
						{
							SetPlayerData(playerid, P_MONEY, 500);
							SetPlayerData(playerid, P_SELECT_SKIN, -1);
							
							HideMenuForPlayer(reg_select_skin_menu, playerid);
							
							SetPlayerSpawnInit(playerid);
							SpawnPlayer(playerid);
			
							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
							SetPlayerInit(playerid);
						
							SendClientMessage(playerid, 0xFFFF00FF, "–екомендуем прочитать раздел {FF3300}ѕомощь по игре.{FFFF00} ќн находитс€ слева от ¬ас");
							SendClientMessage(playerid, 0xFFFF00FF, "¬ нем ¬ы найдете всю интересующую ¬ас информацию. ”дачи и при€тной игры!");
							
							return 1;
						}
						else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 01)");
					}
				}
				
				SetPlayerSelectSkin(playerid, select_skin, reg_skin_data[sex][select_skin]);
				ShowMenuForPlayer(reg_select_skin_menu, playerid);
			}
		}
    }
	*/
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	/*
	if(GetPlayerMenu(playerid) == reg_select_skin_menu)
	{
		if(!IsPlayerLogged(playerid))
		{
			if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
			{
				ShowMenuForPlayer(reg_select_skin_menu, playerid);
			}
		}
	}
	*/
	if(GetPlayerMenu(playerid) == admin_spec_menu)
	{
		if(GetPlayerSpectateData(playerid, S_PLAYER) != -1)
		{
			ShowMenuForPlayer(admin_spec_menu, playerid);
		}
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(PRESSED(KEY_NO))
		cmd::no(playerid, "");
		
	if(PRESSED(KEY_YES))
		cmd::yes(playerid, "");

	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(GetPlayerSettingData(playerid, S_VEH_CONTROL) == SETTING_TYPE_ON)
			{
				if(PRESSED(KEY_HANDBRAKE | KEY_FIRE)) // правый ctrl
				{
					if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
					{
						cmd::lock(playerid, "1");
					}
				}
				if(PRESSED(KEY_ACTION)) 
				{
					cmd::e(playerid, "");
				}	
				if(PRESSED(KEY_FIRE)) 
				{
					cmd::l(playerid, "");
				}	
				if(PRESSED(KEY_ANALOG_UP)) // num 8
				{
					cmd::b(playerid, "");
				}	
				if(PRESSED(KEY_ANALOG_DOWN)) // num 2
				{
					cmd::i(playerid, "");
				}	
				if(PRESSED(KEY_ANALOG_LEFT)) // num 4
				{
					cmd::sl(playerid, "");
				}
				if(PRESSED(KEY_ANALOG_RIGHT)) // num 6
				{
					cmd::alarm(playerid, "");
				}
			}
			
			if(PRESSED(KEY_SUBMISSION))
			{
				if(!IsPlayerInVehicle(playerid, GetPlayerOwnableCar(playerid)))
				{
					new job_car = GetPlayerJobCar(playerid);
					if(IsPlayerInVehicle(playerid, job_car)) 
					{
						new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
						new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1; 
						
						new job_id = GetPlayerJob(playerid);
						if(job_id == car_type)
						{
							switch(job_id)
							{
								case JOB_BUS_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}ƒиспетчер автопарка", 
											"{FFFFFF}¬ы уверены что хотите завершить рабочий день?", 
											"ƒа", "Ќет"
										);
									}
									else 
									{
										Dialog
										(
											playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT, 
											"{FFCD00}—тоимость проезда", 
											"{FFFFFF}—колько будет стоить проезд?\n"\
											"”кажите цену от 0 до 100 рублей", 
											"ƒалее", "ќтмена"
										);
									}
								}
								case JOB_TAXI_DRIVER:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}ƒиспетчер таксопарка", 
											"{FFFFFF}¬ы уверены что хотите завершить рабочий день?", 
											"ƒа", "Ќет"
										);
									}
									else 
									{
										Dialog
										(
											playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT, 
											"{FFCD00}Ќазвание такси", 
											"{FFFFFF}ѕридумайте название дл€ вашего такси\n"\
											"ћаксимальна€ длина 15 символов\n\n"\
											"≈сли вы не хотите как-то называтьс€\n"\
											"нажмите кнопку \"ѕропустить\"",
											"ƒалее", "ѕропустить"
										);
									}
								}
								case JOB_MECHANIC:
								{
									if(IsPlayerInJob(playerid))
									{
										Dialog
										(
											playerid, DIALOG_END_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}јвтомеханик", 
											"{FFFFFF}¬ы уверены что хотите завершить рабочий день?", 
											"ƒа", "Ќет"
										);
									}
									else 
									{
										Dialog
										(	
											playerid, DIALOG_MECHANIC_START_JOB, DIALOG_STYLE_MSGBOX,
											"{FFCD00}ƒиспетчер", 
											"{FFFFFF}¬ы хотите начать работу автомеханика?",
											"ƒа", "Ќет"
										);
									}
								}
							}
						}
					}	
				}
				else cmd::car(playerid, "");
			}
			if(HOLDING(KEY_CROUCH))
			{
				CallLocalFunction("CheckNearestGate", "i", playerid);
			}
		}
	}
	else 
	{
		if(PRESSED(KEY_FIRE))
		{
			if(GetPlayerData(playerid, P_SNACK))
			{
				SetPlayerData(playerid, P_SNACK, false);
				
				SetPlayerHealthEx(playerid, 25.0, true);
				GameTextForPlayer(playerid, "~g~~h~+25 hp", 2500, 6);
				
				ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.0, 0, 0, 0, 0, 0, 0);
				SetTimerEx("T_RemovePlayerAttachedObject", 3000, false, "ii", playerid, A_OBJECT_SLOT_HAND);
			}
			if(GetPlayerData(playerid, P_DRINK_STEP) >= 1)
			{
				AddPlayerData(playerid, P_DRINK_STEP, -, 1);
				if(!GetPlayerData(playerid, P_DRINK_STEP))
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
		}
		if(PRESSED(KEY_SPRINT))
		{
			if(IsPlayerUseAnim(playerid))
			{
				ClearPlayerUseAnim(playerid);
			}
			
			if(GetPlayerData(playerid, P_REALTOR_TYPE) != REALTOR_TYPE_NONE)
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					new type = GetBusinessData(businessid, B_INTERIOR);
					new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);
					
					HidePlayerWaitPanel(playerid);
					TogglePlayerSpectating(playerid, false);
					
					if(GetPlayerData(playerid, P_REALTOR_TYPE) == REALTOR_TYPE_BIZ)
					{
						PlayerTeleportInit(playerid, 331.0103, 662.5683, 49.7290, 67.7277);
						SetPlayerPosEx(playerid, 331.0103, 662.5683, 49.7290, 67.7277, interior, businessid + 255);
					}
					else 
					{
						PlayerTeleportInit(playerid, 160.7020, 745.5962, 25.8272, 159.1750);
						SetPlayerPosEx(playerid, 160.7020, 745.5962, 25.8272, 159.1750, interior, businessid + 255);
					}
				}
				SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_NONE);
			}
		}
		if(PRESSED(KEY_WALK))
		{
			if(IsPlayerInRangeOfPoint(playerid, 70.0, 1131.1603, -8.5709, 1011.1254))
			{
				new bedid = -1;
			
				for(new i; i < sizeof g_med_bed_pos; i++)
				{
					if(!IsPlayerInRangeOfPoint(playerid, 0.7, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2])) continue;
					bedid = i;
					break;
				}
			
				if(bedid == -1) return 1;
				else if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1) return SendClientMessage(playerid, 0xCECECEFF, "¬ы уже зан€ли койку");
				else if(GetPlayerHealthEx(playerid) >= 95.0)
				{
					return SendClientMessage(playerid, 0xCECECEFF, "¬ы не нуждаетесь в лечении");
				}
				else if(g_med_bed_used[bedid]) return SendClientMessage(playerid, 0xCECECEFF, "Ёта койка зан€та");
				
				else
				{
					SetPlayerData(playerid, P_OCCUPIED_BED, bedid);
					
					g_med_bed_used[bedid] = true;
					
					new fmt_msg[85];
					
					format(fmt_msg, sizeof fmt_msg, " ойка є%d\n\n{FFCC00}ѕациент:\n%s", bedid + 1, GetPlayerNameEx(playerid));
					UpdateDynamic3DTextLabelText(g_med_bed_label[bedid], 0xFFFFFFEE, fmt_msg);
					
					format(fmt_msg, sizeof fmt_msg, "¬ы зан€ли койку є%d. ¬ зависимости от состо€ни€ здоровь€ лечение может зан€ть врем€", bedid + 1);
					SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
				
					SendClientMessage(playerid, -1, "„тобы выписатьс€ подойдите к врачу или выйдите за пределы больницы");
				}
			}

			if(GetPlayerNearestATM(playerid) != -1)
			{
				ShowPlayerATMDialog(playerid);
			}
			if(GetPlayerInHouse(playerid) != -1)
			{
				new houseid = GetPlayerInHouse(playerid);
				if(GetHouseData(houseid, H_IMPROVEMENTS) >= 1)
				{
					ExitPlayerFromHouse(playerid, 1.1);
				}
			}
			
			if(GetPlayerData(playerid, P_LAST_PICKUP) != -1)
			{
				new pickupid = GetPlayerData(playerid, P_LAST_PICKUP);
				new action_id = GetPickupInfo(pickupid, P_ACTION_ID);
				
				if(IsPlayerInRangeOfPoint(playerid, 1.7, GetPickupInfo(pickupid, P_POS_X), GetPickupInfo(pickupid, P_POS_Y), GetPickupInfo(pickupid, P_POS_Z)))
				{
					switch(GetPickupInfo(pickupid, P_ACTION_TYPE))
					{
						case PICKUP_ACTION_TYPE_ENTRANCE_FLA:
						{
							new entranceid = GetPlayerInEntrance(playerid);
							new floor = GetPlayerInEntranceFloor(playerid);
							
							if(entranceid != -1 && floor >= 1)
							{
								ShowPlayerHouseInfo(playerid, g_entrance_flat[entranceid][floor - 1][action_id]);
							}						
						}
						case PICKUP_ACTION_TYPE_HOTEL_ROOM:
						{
							new hotel_id = GetPlayerInHotelID(playerid);
							new floor = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);
							
							if(hotel_id != -1 && floor >= 1)
							{
								new room_id = ((floor-1)*12) + action_id;
								EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
							}
						}
					}
				}
				SetPlayerData(playerid, P_LAST_PICKUP, -1);
			}
			if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1)
			{
				ExitPlayerFromHotelRoom(playerid);
			}
		}
		if(PRESSED(KEY_HANDBRAKE | KEY_WALK))
		{
			new targetid = GetPlayerTargetPlayer(playerid);
			//new targetid = playerid;
			
			if(targetid != INVALID_PLAYER_ID && !GetPlayerWeapon(playerid))
			{
				SetPlayerData(playerid, P_TARGET_ID, targetid);
			
				new fmt_str[64];
				format(fmt_str, sizeof fmt_str, "{FFCD00}ƒействи€ (%s)", GetPlayerNameEx(targetid));
			
				Dialog
				(
					playerid, DIALOG_ACTION, DIALOG_STYLE_LIST,
					fmt_str,
					"1. ѕриветствие\n\
					2. ѕоказать паспорт\n\
					3. ѕоказать лицензии",
					"¬ыбрать", "«акрыть"
				);
			}	 
		}
		if(PRESSED(KEY_HANDBRAKE))
		{
			if(GetPVarInt(playerid, "have_jerrican") == 1 && GetPlayerSpeed(playerid) == 0.0)
			{
				new vehicleid = GetNearestVehicleID(playerid, 2.3);
				if(vehicleid != INVALID_VEHICLE_ID)
				{
					SetPVarInt(playerid, "jerrican_fill_car", vehicleid);
		
					Dialog
					(
						playerid, DIALOG_JERRICAN_FILL_CAR, DIALOG_STYLE_MSGBOX,
						"{6699FF} анистра", 
						"{FFFFFF}¬ы хотите заправить этот транспорт с канистры?",
						"ƒа", "Ќет"
					);
				}			
			}
		}
		if(PRESSED(KEY_CTRL_BACK | KEY_HANDBRAKE))
		{
			if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
			{
				cmd::car(playerid, "");
			}
		}
		else if(PRESSED(KEY_CTRL_BACK))
		{
			CallLocalFunction("cmd_trunk", "i", playerid);
		}
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	SetPlayerData(playerid, P_AFK_TIME, 0);
	SpeedometrLineInit(playerid);
	
	if(GetPlayerTempJobCheckAnim(playerid))
	{
		new anim_index = GetPlayerAnimationIndex(playerid);
		
		/*
			new fmt_str[32];
			
			format(fmt_str, sizeof fmt_str, "index: %d", anim_index);
			SendClientMessage(playerid, 0xCECECEFF, fmt_str);
		*/
		
		switch(GetPlayerTempJob(playerid))
		{
			case TEMP_JOB_LOADER:
			{
				if(!GetPlayerSex(playerid))
				{
					if(!(anim_index == 259 || anim_index == 1189 || anim_index == 1224))
					{
						anim_index = -1;
					}
				}
				else
				{	
					if(!(anim_index == 259 || anim_index == 260 || anim_index == 1275 || anim_index == 1276 || anim_index == 1289))
					{
						anim_index = -1;
					}
				}
				
				if(anim_index == -1)
				{
					SetPlayerTempJobCheckAnim(playerid, false);
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_DROP_LOAD);
				}
			}
			case TEMP_JOB_MINER:
			{
				
			}
			case TEMP_JOB_FACTORY:
			{
				if(!GetPlayerSex(playerid))
				{
					if(!(anim_index == 259 || anim_index == 949 || anim_index == 1189 || anim_index == 1224 || anim_index == 1257 || anim_index == 1269))
					{
						anim_index = -1;
					}
				}
				else
				{	
					if(!(anim_index == 259 || anim_index == 1196 || anim_index == 1275 || anim_index == 1276 || anim_index == 1269 || anim_index == 1283)) 
					{
						anim_index = -1;
					}
				}

				if(anim_index == -1)
				{
					SetPlayerTempJobCheckAnim(playerid, false);
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_DROP_P);
				}
			}
			default:
			{
				SetPlayerTempJobCheckAnim(playerid, false);
			}
		}
	}
	/*
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_MINER_UNLOAD)
		{
			new anim_idx = GetPlayerAnimationIndex(playerid);
			
			if(!(anim_idx == 616 || anim_idx == 1189 || anim_idx == 1224))
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_DROP_LOAD);
		}
	}
	*/
	
	if(GetPVarInt(playerid, "test") == 1)
	{
		new fmt_str[64];
		
		format(fmt_str, sizeof fmt_str, "a_index: %d", GetPlayerAnimationIndex(playerid));
		SendClientMessage(playerid, 0xCECECEFF, fmt_str);
	}

	if(GetPlayerWeaponState(playerid) == 2) SetPlayerData(playerid, P_WEAPON_RELOADING, false);
	if(GetPlayerWeaponState(playerid) == 3 && !GetPlayerData(playerid, P_WEAPON_RELOADING))
	{
		SetPlayerData(playerid, P_WEAPON_RELOADING, true);

		switch(GetPlayerWeapon(playerid))
		{
			case 22:
			{
				if(GetPlayerData(playerid, P_SKILL_COLT) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][0]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[0] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][0] = 0;

						AddPlayerData(playerid, P_SKILL_COLT, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_colt", GetPlayerData(playerid, P_SKILL_COLT));

						SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
					}
				}
			}
			case 23:
			{
				if(GetPlayerData(playerid, P_SKILL_SDPISTOL) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][1]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[1] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][1] = 0;

						AddPlayerData(playerid, P_SKILL_SDPISTOL, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sdpistol", GetPlayerData(playerid, P_SKILL_SDPISTOL));

						SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
					}
				}
			}
			case 24:
			{
				if(GetPlayerData(playerid, P_SKILL_DEAGLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][2]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[2] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][2] = 0;

						AddPlayerData(playerid, P_SKILL_DEAGLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_deagle", GetPlayerData(playerid, P_SKILL_DEAGLE));

						SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
					}
				}
			}
			case 25:
			{
				if(GetPlayerData(playerid, P_SKILL_SHOTGUN) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][3]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[3] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][3] = 0;

						AddPlayerData(playerid, P_SKILL_SHOTGUN, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_shotgun", GetPlayerData(playerid, P_SKILL_SHOTGUN));

						SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
					}
				}
			}
			case 29:
			{
				if(GetPlayerData(playerid, P_SKILL_MP5) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][4]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[4] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][4] = 0;

						AddPlayerData(playerid, P_SKILL_MP5, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_mp5", GetPlayerData(playerid, P_SKILL_MP5));

						SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
					}
				}
			}
			case 30:
			{
				if(GetPlayerData(playerid, P_SKILL_AK47) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][5]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[5] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][5] = 0;

						AddPlayerData(playerid, P_SKILL_AK47, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_ak47", GetPlayerData(playerid, P_SKILL_AK47));

						SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
					}
				}
			}
			case 31:
			{
				if(GetPlayerData(playerid, P_SKILL_M4) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][6]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[6] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][6] = 0;

						AddPlayerData(playerid, P_SKILL_M4, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_m4", GetPlayerData(playerid, P_SKILL_M4));

						SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
					}
				}
			}
			case 34:
			{
				if(GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][7]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[7] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][7] = 0;

						AddPlayerData(playerid, P_SKILL_SNIPER_RIFLE, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sniper_rifle", GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE));

						SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);
					}
				}
			}
			case 26:
			{
				if(GetPlayerData(playerid, P_SKILL_SAWNOFF) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][8]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[8] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][8] = 0;

						AddPlayerData(playerid, P_SKILL_SAWNOFF, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_sawnoff", GetPlayerData(playerid, P_SKILL_SAWNOFF));

						SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
					}
				}
			}
			case 27:
			{
				if(GetPlayerData(playerid, P_SKILL_COMBAT_SG) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][9]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[9] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][9] = 0;

						AddPlayerData(playerid, P_SKILL_COMBAT_SG, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_combat_sg", GetPlayerData(playerid, P_SKILL_COMBAT_SG));

						SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
					}
				}
			}
			case 28:
			{
				if(GetPlayerData(playerid, P_SKILL_MICRO_UZI) < 100)
				{
					g_player[playerid][P_RELOADINGS_COUNT][10]++;

					if(GetPlayerData(playerid, P_RELOADINGS_COUNT)[10] == 3)
					{
						g_player[playerid][P_RELOADINGS_COUNT][10] = 0;

						AddPlayerData(playerid, P_SKILL_MICRO_UZI, +, 1);
						UpdatePlayerDatabaseInt(playerid, "skill_micro_uzi", GetPlayerData(playerid, P_SKILL_MICRO_UZI));

						SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, 500, FLOOD_RATE_KICK);
	
	new last_dialog = GetPlayerData(playerid, P_LAST_DIALOG);
	SetPlayerData(playerid, P_LAST_DIALOG, INVALID_DIALOG_ID);
	
	if(last_dialog == dialogid) 
	{
		switch(dialogid)
		{
			case DIALOG_LOGIN: // јвторизаци€
			{
				if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_LOGIN)
				{
					if(response)
					{
						new login_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
						new str_len = strlen(inputtext);
						new bool: wrong_password = false;
						
						switch(login_step)
						{
							case LOGIN_STATE_PASSWORD:
							{
								if(1 <= str_len <= 15)
								{
									str_len = strlen(GetPlayerData(playerid, P_PASSWORD));
									if(!str_len || strcmp(inputtext, GetPlayerData(playerid, P_PASSWORD), false, 16) != 0)
									{
										wrong_password = true;
										login_step --;
									}
								}
								else login_step --;
							}
							case LOGIN_STATE_PHONE:
							{
								str_len = strlen(GetPlayerData(playerid, P_SETTING_PHONE));
								if(!str_len || strcmp(GetPlayerData(playerid, P_SETTING_PHONE)[str_len - 5], inputtext) != 0)
								{
									wrong_password = true;
									login_step--;
								}
							}
							default:
								return 1;
						}
						ShowPlayerLoginDialog(playerid, login_step + 1, wrong_password);
					}
					else Kick:(playerid);
				}
			}
			case DIALOG_REGISTER: // –егистраци€
			{
				if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REGISTER)
				{
					new reg_step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
					new str_len = strlen(inputtext);
					
					switch(reg_step)
					{
						case REGISTER_STATE_PASSWORD: // ввод парол€
						{
							if(str_len)
							{
								if(!(6 <= str_len <= 15))
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}ќшибка",
										"{FFFFFF}ƒлина парол€ должна быть от 6 до 15 символов\n"\
										"–екомендуетс€ использовать русские и латинские буквы, а также любые знаки",
										"ѕовтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else if(strfind(inputtext, "%") != -1 || strfind(inputtext, " ") != -1)
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}ќшибка",
										"{FFFFFF}¬веденный ¬ами пароль содержит недопустимые символы или пробелы",
										"ѕовтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else if(IsNumeric(GetPlayerNameEx(playerid)))
								{
									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"{FF9900}ќшибка",
										"{FFFFFF}¬аш ник не должен содержать цифры. »змените его и повторите регистрацию",
										"ѕовтор", ""
									);
									return Kick:(playerid);
								}
								else 
								{
									format(g_player[playerid][P_PASSWORD], 16, "%s", inputtext);
								}
							}
							else reg_step --;
						}
						case REGISTER_STATE_EMAIL: 		// ввод емайла
						{
							if(str_len)
							{
								if(!IsValidMail(inputtext, str_len))
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}ќшибка",
										"{FFFFFF}јдрес электронной почты введен неверно",
										"ѕовтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								new query[128];
								new Cache: result, is_email_exist;
								
								mysql_format(mysql, query, sizeof query, "SELECT email FROM accounts WHERE email='%e' LIMIT 1", inputtext);
								result = mysql_query(mysql, query);
								
								is_email_exist = cache_num_rows();
								cache_delete(result);
								
								if(is_email_exist)
								{
									Dialog
									(
										playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
										"{FF9900}ќшибка",
										"{FFFFFF}Ётот адрес электронной почты уже прив€зан к другому аккаунту",
										"ѕовтор", ""
									);
									return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
								}
								else 
								{
									format(g_player[playerid][P_EMAIL], 61, "%s", inputtext);
								}
							}
							else reg_step --;
						}
						case REGISTER_STATE_REFER: 		// ввод ника пригласившего игрока
						{
							if(response)
							{
								if(2 <= str_len <= 20)
								{
									new query[75];
									new Cache: result;
									
									mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
									result = mysql_query(mysql, query);
									
									if(cache_num_rows())
										SetPlayerData(playerid, P_REFER, cache_get_row_int(0, 0));
									
									cache_delete(result);
									
									if(!GetPlayerData(playerid, P_REFER))
									{
										Dialog
										(
											playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
											"{FF9900}ќшибка",
											"{FFFFFF}“акого игрока не существует.\n"\
											"≈сли вы не знаете других игроков нажмите кнопку \"ѕропустить\"",
											"ѕовтор", "ѕропустить"
										);
										return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
									}
								}
								else reg_step --;
							}
						}
						case REGISTER_STATE_SEX:		// выбор пола
						{
							SetPlayerData(playerid, P_SEX, !response);
						}
					}
					ShowPlayerRegDialog(playerid, reg_step + 1);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PLAYER_MENU:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: ShowPlayerStats(playerid);
						case 2: ShowPlayerCMDSDialog(playerid);
						case 3: ShowPlayerSettings(playerid);
						case 4: ShowPlayerSecuritySettings(playerid);
						case 5: ShowPlayerReportDialog(playerid);
						case 6: ShowPlayerImprovementsDialog(playerid);
						case 7: ShowServerRules(playerid);
						case 8: ShowPlayerChangeNameDialog(playerid);
						case 9: ShowPlayerDonateDialog(playerid);
						default: 
							return 1;
					}
				}
			}
			case DIALOG_PLAYER_STATS:
			{
				if(response)
				{
					cmd::menu(playerid, "");
				}
			}
			case DIALOG_PLAYER_CMDS:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_INPUT,
								"{99CC00}ќписание команды",
								"{FFFFFF}¬ведите интересующую ¬ас команду\n"\
								"дл€ получени€ ее описани€:",
								"ќписание", "Ќазад"
							);
							return 1;
						}
						case 2:
						{
							SendClientMessage(playerid, 0x99FF00FF, "/menu (/mn)  /gps  /help  /find  /leaders  /buy  /leave  /healme  /pay  /givemet  /givepatr  /charity  /lic  /liclist  /adlist  /play  /style");
							SendClientMessage(playerid, 0x99FF00FF, "/anim(list)  /yes  /no  /cancel  /setspawn  /skill  /eject  /pass  /drugs  /togphone  /book  /wbook  /add  /returnskin  /returnmoney  /hospital");
							SendClientMessage(playerid, 0x99FF00FF, "/fuel  /bushelp  /take  /donat(e)  /blow  /reset  /hreset  /set  /eat  /put  /pick  /id  /unwarn  /radio  /time  /wedding  /divorce  /bank  /history  /dice");
							SendClientMessage(playerid, 0xFFC000FF, "“ранспорт: /lock  /buyfuel  /rentcar  /unrent  /tune  /e  /l  /sl  /b  /i  /alarm");
							SendClientMessage(playerid, 0xFFC000FF, "Ћичный транспорт: /sellcar  /sellmycar  /key  /car  /allow  /getmycar  /park");
						}
						case 3:
						{
							SendClientMessage(playerid, 0x00CC33FF, "/c(all)  /sms  /p  /h  /f  /r  /me  /do  /try  /s  /w  /ad  /gnews  /n");
						}
						case 4:
						{
							SendClientMessage(playerid, 0x00CCFFFF, "/home  /sellhome  /sellmyhome  /exit  /tv  /makestore  /use  /live  /liveout  /homelock");
						}
						case 5:
						{
							SendClientMessage(playerid, 0x33CC66FF, "Ѕизнес: /business  /buybiz  /sellbiz  /sellmybiz  /bizmusic  /manager");
							SendClientMessage(playerid, 0x33CC66FF, "ј«—: /fuelst  /buyfuelst  /sellfuelst  /sellmyfuelst");
						}
						case 6:
						{
							SendClientMessage(playerid, 0x6699CCFF, "ѕожарный: /fire");
							SendClientMessage(playerid, 0x6699CCFF, "–азвозчик: /buyprod  /buyf  /bizlist  /fuellist");
							SendClientMessage(playerid, 0x6699CCFF, "јвтомеханик: /getfuel  /fill  /repair");
							SendClientMessage(playerid, 0x6699CCFF, "”личный торговец: /market");
						}
						case 7:
						{
							SendClientMessage(playerid, 0xCCCC33FF, "Ѕанды: /makegun  /sellgun  /selldrugs  /capture  /sellzone  /hack  /robstore  /robcar  /close");
							SendClientMessage(playerid, 0xCCCC33FF, "ћафии: /affect  /stopaffect  /tie  /bag  /object  /pickammo  /putammo  /takeammo  /bomb  /close");
						}
						case 8:
						{
							SendClientMessage(playerid, 0x99CC33FF, "јдм. ѕрезидента: /smenu  /ap  /court");
							SendClientMessage(playerid, 0x99CC33FF, "¬ыселение должников: /debtorlist  /debtorsell");
							SendClientMessage(playerid, 0x99CC33FF, "Ћицензерам: /givelic.  јдвокатам: /free");
						}
						case 9:
						{
							SendClientMessage(playerid, 0x0066FFFF, "/search  /remove  /cuff  /uncuff  /clear  /arrest  /su  /m  /ticket");
							SendClientMessage(playerid, 0x0066FFFF, "/takelic  /wanted  /setmark  /putpl  /open  /break  /skip");
							SendClientMessage(playerid, 0x0066FFFF, "‘—Ѕ: /fbi  /hack  /follow  /untie");
						}
						case 10:
						{
							SendClientMessage(playerid, 0xCC9900FF, "/makegun  /gate  /gun  /shot  /takem  /putm  /buym");
							SendClientMessage(playerid, 0xCC9900FF, "/pickammo  /putammo  /takeammo");
						}
						case 11:
						{
							SendClientMessage(playerid, 0xFF66FFFF, "/heal  /out  /medhelp  /medskip  /changesex");
						}
						case 12:
						{
							SendClientMessage(playerid, 0xFFCC33FF, "/t  /u  /edit  /bring  /audience  /tvlift  /tvjoin  /camera  /light  /makeskin  /givemic");
						}
						case 13:
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "/newleader  /invite  /uninvite  /rang  /changeskin  /showall  /uninviteoff");
						}
						case 14:
						{
							SendClientMessage(playerid, 0x999999FF, "/buym  /sellm  /buyf  /sellf  /lift  /lifthelp  /tmenu  /card  /showcard");
							SendClientMessage(playerid, 0x999999FF, "/mask  /present  /to  /race  /end  /tp");
						}
						default: 
							return 1;
					}
					ShowPlayerCMDSDialog(playerid);
				}
				else cmd::menu(playerid, "");
			}
			case DIALOG_PLAYER_SETTINGS:
			{
				if(response)
				{
					new E_PLAYER_SETTINGS_STRUCT: setting_id = E_PLAYER_SETTINGS_STRUCT: listitem;
					if(S_CHAT_TYPE <= setting_id <= S_VEH_CONTROL)
					{
						new setting_type = GetPlayerSettingData(playerid, setting_id);
						
						switch(setting_id)
						{
							case S_CHAT_TYPE:
							{
								if(!(SETTING_CHAT_OFF <= ++setting_type <= SETTING_CHAT_ADVANCE))
								{
									setting_type = SETTING_CHAT_OFF;
								}
							}
							case S_TEAM_CHAT..S_VEH_CONTROL:
							{
								setting_type ^= SETTING_TYPE_ON;
							}
						}
						if(setting_id == S_PLAYERS_NICK)
						{
							foreach(new idx : Player)
								ShowPlayerNameTagForPlayer(playerid, idx, setting_type);
						}	
						
						SetPlayerSettingData(playerid, setting_id, setting_type);
						SetPlayerChatInit(playerid);
						
						ShowPlayerSettings(playerid);
					}
					else 
					{
						new query[128];
						
						format
						(
							query, sizeof query,
							"UPDATE accounts SET "\
							"setting1=%d,"\
							"setting2=%d,"\
							"setting4=%d,"\
							"setting5=%d,"\
							"setting6=%d"\
							" WHERE id=%d LIMIT 1",
							GetPlayerSettingData(playerid, S_CHAT_TYPE),
							GetPlayerSettingData(playerid, S_TEAM_CHAT),
							GetPlayerSettingData(playerid, S_NICK_IN_CHAT),
							GetPlayerSettingData(playerid, S_ID_IN_CHAT),
							GetPlayerSettingData(playerid, S_VEH_CONTROL),
							GetPlayerAccountID(playerid)							
						);
						mysql_query(mysql, query, false);
						
						if(!mysql_errno())
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FFCD00}—охранено",
								"{FFFFFF}Ќовые настройки будут автоматически устанавливатьс€ после каждой авторизации",
								"ќк", ""
							);
						}
						else 
						{
							SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 02)");
							ShowPlayerSettings(playerid);
						}
					}
				}
				else cmd::menu(playerid, "");
			}
			case DIALOG_PLAYER_SECURITY_SETTINGS:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
								"{FFCD00}»нформаци€ о настройках",
								"{FFFFFF}“ут ¬ы можете изменить настройки безопасности вашего аккаунта. Ёто\n"\
								"поможет защитить его от взлома.\n\n"\
								"—уществуют 3 вида защиты: с использованием мобильного приложени€\n"\
								"{6699FF}Google Authenticator{FFFFFF}, системы '—лучайный код' или номера мобильного\n"\
								"телефона. ≈сли ¬ы включите защиту, то при авторизации, помимо\n"\
								"парол€, будет запрашиватьс€ ввод кода или части номера телефона\n"\
								"(в зависимости от ваших настроек). ѕодробнее ¬ы можете узнать, выбрав\n"\
								"нужный пункт в меню безопасности.\n\n"\
								"—истема будет запрашивать ввод только если ¬аш IP адрес или подсеть\n"\
								"(первые 2 цифры IP адреса) игрока не совпадают с теми, которые были\n"\
								"записаны при успешном входе в игру. ƒругими словами, система\n"\
								"выдаст запрос, если под ¬ашим аккаунтом попытаютс€ зайти с другого\n"\
								"компьютера.",
								"Ќазад", ""
							);
						}
						case 2:
						{
							if(strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true) != 0)
							{
								// установлен
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PHONE, DIALOG_STYLE_LIST,
									"{FFCD00}ѕри авторизации запрашивать мобильный...",
									"Ќе запрашивать\n"\
									"≈сли подсеть не совпадает с моей\n"\
									"≈сли IP не совпадает с моим",
									"—охранить", "Ќазад"
								);
							}
							else 
							{
								// не установлен
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
									"{FFCD00}ћобильный телефон",
									"{FFFFFF}¬ данный момент мы проводим обновление этой системы безопасности.\n"\
									"ѕриносим свои извинени€ за временные неудобства.",
									"Ќазад", ""
								);
							}

						}
						case 3:
						{
							if(strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true) != 0)
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN, DIALOG_STYLE_LIST,
									"{FFCD00}ѕри авторизации запрашивать случайный PIN-код...",
									"Ќе запрашивать\n"\
									"≈сли подсеть не совпадает с моей\n"\
									"≈сли IP не совпадает с моим",
									"—охранить", "Ќазад"
								);
							}
							else
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN_SET, DIALOG_STYLE_MSGBOX,
									"{FFCD00}—лучайный PIN-код",
									"{FFFFFF}ƒл€ продолжени€, вам необходимо придумать и набрать 4-х значный код.\n\n"\
									"Ёта система безопасности поможет защитить ¬аш аккаунт, если на\n"\
									"компьютер попадет вирус-кейлоггер, который перехватывает данные с\n"\
									"клавиатуры.   нопки всегда располагаютс€ в случайном пор€дке, что не даст\n"\
									"злоумышленникам возможность узнать ваш PIN-код.",
									"ƒалее", "Ќазад"
								);
							}
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX,
								"{FFCD00}«ащита с использованием приложени€ Authenticator",
								"{FFFFFF}Ётот тип защиты €вл€етс€ самым надежным дл€ ¬ашего аккаунта. „тобы его активировать,\n"\
								"зайдите в Ћичный  абинет на сайте {33CCFF}"SERVER_SITE" (Ќастройки > «ащитить акк.) {FFFFFF}и следуйте\n"\
								"инструкци€м.\n\n"\
								"¬ам потребуетс€ мобильное устройство с поддержкой сторонних приложений (Android, iOS,\n"\
								"Windows Phone и другие). ѕосле включени€ защиты на сайте, вернитесь в это меню дл€\n"\
								"завершени€ настройки.",
								"Ќазад", ""
							);
						}
						case 5:
						{
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_PASS_1, DIALOG_STYLE_INPUT,
								"{FFCD00}»зменение парол€",
								"{FFFFFF}¬ведите ¬аш текущий пароль в поле ниже:",
								"ƒалее", "Ќазад"
							);
						}
						case 6:
						{
							if(!strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true))
							{
								Dialog
								(
									playerid, DIALOG_SECURITY_SETTING_PIN_SET, DIALOG_STYLE_MSGBOX,
									"{FFCD00}—лучайный PIN-код",
									"{FFFFFF}ƒл€ продолжени€, вам необходимо придумать и набрать 4-х значный код.\n\n"\
									"Ёта система безопасности поможет защитить ¬аш аккаунт, если на\n"\
									"компьютер попадет вирус-кейлоггер, который перехватывает данные с\n"\
									"клавиатуры.   нопки всегда располагаютс€ в случайном пор€дке, что не даст\n"\
									"злоумышленникам возможность узнать ваш PIN-код.",
									"ƒалее", "Ќазад"
								);
							}
							else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_CHECK);
						}
						case 7:
						{
							// 7. —татус безопасности
							static const 
								setting_status_name[3][64] = 
							{
								"{CC9900}Ќе запрашиваетс€",
								"{3399FF}«апрашиваетс€ при несовпадении подсети", 
								"{009900}«апрашиваетс€ при несовпадении IP"
							};
							
							new fmt_str[364];
							format
							(
								fmt_str, sizeof fmt_str,
								"{FFFFFF}“ут ¬ы можете увидеть статус всех ¬аших настроек безопасности.\n"\
								"ƒл€ их изменени€, выберите нужный пункт в меню настроек\n\n"\
								"ћобильный телефон:\t\t%s\n"\
								"{FFFFFF}—лучайный PIN-код:\t\t%s\n"\
								"{FFFFFF}Google Authenticator:\t\t{CC9900}Ќе запрашиваетс€",
								setting_status_name[GetPlayerData(playerid, P_REQUEST_PHONE)],
								setting_status_name[GetPlayerData(playerid, P_REQUEST_PIN)]
							);
							Dialog(playerid, DIALOG_SECURITY_SETTING_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}—татус безопасности", fmt_str, "Ќазад", "");
						}
						case 8:
						{
							if(GetPlayerData(playerid, P_CONFIRM_EMAIL))
								return SendClientMessage(playerid, 0xFFFFFFFF, "¬аш Email-адрес уже подтвержден");
							
							Dialog
							(
								playerid, DIALOG_SECURITY_SETTING_EMAIL, DIALOG_STYLE_MSGBOX,
								"{6699FF}ѕодтверждение Email",
								"{FFFFFF}ѕри регистрации на сервере на ¬ашу почту мы выслали ссылку дл€\n"\
								"подтверждени€ Email. ќна действительна в течение 14 дней.\n"\
								"ѕожалуйста, проверьте почту и подтвердите ее.\n\n"\
								"¬ случае, если вы не получили наше письмо, нажмите кнопку \"ѕовтор\".\n"\
								"ћы отправим ¬ам новую ссылку.",
								"«акрыть", "ѕовтор"
							);
						}
						default: 
							return 1;
					}
				}
				else cmd::menu(playerid, "");
			}
			case DIALOG_SECURITY_SETTING_INFO:
			{
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PHONE:
			{
				if(!strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true)) return 1;
				
				if(response)
				{
					if(0 <= listitem <= 2)
					{
						new query[64 + 1];
						SetPlayerData(playerid, P_REQUEST_PHONE, listitem);
						
						format(query, sizeof query, "UPDATE accounts SET request_phone=%d WHERE id=%d LIMIT 1", listitem, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
				
						if(!mysql_errno())
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "»зменени€ в настройках безопасности {00FFCC}сохранены");
							switch(listitem + 1)
							{
								case 1: SendClientMessage(playerid, 0xFF6600FF, "«апрос на ввод мобильного телефона отключен");
								case 2: SendClientMessage(playerid, 0xFFFF00FF, "¬аш мобильный телефон будет запрашиватьс€ при несовпадении подсети");
								case 3: SendClientMessage(playerid, 0x66CC00FF, "ћобильный телефон будет запрашиватьс€ при несовпадении IP адресов");
							}
						}
						else 
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "»зменени€ в настройках безопасности {FF3333}не сохранены");
							SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 03)");
						}
					}
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PHONE_S:
			{
				// установить телефон
				if(strcmp(GetPlayerData(playerid, P_SETTING_PHONE), "None", true) != 0) return 1;
			}
			case DIALOG_SECURITY_SETTING_PIN:
			{
				if(!strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true)) return 1;
				
				if(response)
				{
					if(0 <= listitem <= 2)
					{
						new query[64 + 1];
						SetPlayerData(playerid, P_REQUEST_PIN, listitem);
						
						format(query, sizeof query, "UPDATE accounts SET request_pin=%d WHERE id=%d LIMIT 1", listitem, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
				
						if(!mysql_errno())
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "»зменени€ в настройках безопасности {00FFCC}сохранены");
							switch(listitem + 1)
							{
								case 1: SendClientMessage(playerid, 0xFF6600FF, "«апрос случайного PIN-кода отключен");
								case 2: SendClientMessage(playerid, 0xFFFF00FF, "¬аш случайный PIN-код будет запрашиватьс€ при несовпадении подсети");
								case 3: SendClientMessage(playerid, 0x66CC00FF, "—лучайный PIN-код будет запрашиватьс€ при несовпадении IP адресов");
							}
						}
						else 
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "»зменени€ в настройках безопасности {FF3333}не сохранены");
							SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 03)");
						}
					}
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PIN_SET:
			{
				// установить пин код
				if(strcmp(GetPlayerData(playerid, P_SETTING_PIN), "None", true) != 0) return 1;
				
				if(response)
				{
					ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_SET);
				}
				else ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PASS_1:
			{
				if(response)
				{
					if
					(
						strlen(inputtext) 
						&& !strcmp(inputtext, GetPlayerData(playerid, P_PASSWORD), false)
					)
					{
						Dialog
						(
							playerid, DIALOG_SECURITY_SETTING_PASS_2, DIALOG_STYLE_INPUT,
							"{FFCD00}Ќовый пароль",
							"{FFFFFF}¬ведите новый пароль в поле ниже:",
							"»зменить", "ќтмена"
						);
						return 1;
					}
					else SendClientMessage(playerid, 0xFF6600FF, "¬ы ввели неверный пароль");
				}
				ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_PASS_2:
			{
				if(response)
				{
					if(!(1 <= strlen(inputtext) <= 15) || strfind(inputtext, " ") != -1)
					{
						SendClientMessage(playerid, 0xFF6600FF, "ƒлина парол€ должна быть от 6 до 15 символов");
						SendClientMessage(playerid, 0xFF6600FF, "“акже не допускаетс€ использование пробелов");
					}
					else 
					{
						new query[85];
						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET password='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
						
						if(!mysql_errno())
						{
							format(g_player[playerid][P_PASSWORD], 16, "%s", inputtext);
							format(query, sizeof query, "¬аш новый пароль: {3399FF}%s", GetPlayerData(playerid, P_PASSWORD));
							
							SendClientMessage(playerid, 0xFFFF00FF, query);
							SendClientMessage(playerid, 0xFFFFFFFF, "–екомендуем сделать скрин {00CC00}(клавиша F8) {FFFFFF}чтобы не забыть его");
							
							ShowPlayerSecuritySettings(playerid);
							return 1;
						}
						else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 05)");
					}
					
					Dialog
					(
						playerid, DIALOG_SECURITY_SETTING_PASS_2, DIALOG_STYLE_INPUT,
						"{FFCD00}Ќовый пароль",
						"{FFFFFF}¬ведите новый пароль в поле ниже:",
						"»зменить", "ќтмена"
					);
				}
				else ShowPlayerSecuritySettings(playerid);
			}
			case DIALOG_SECURITY_SETTING_EMAIL:
			{
				if(!response)
				{
					// отправка кода на почту
					Dialog
					(
						playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
						"{FFCD00}ѕисьмо отправлено",
						"{FFFFFF}¬ течение нескольких минут на ¬ашу почту придет письмо с новой ссылкой.\n"\
						"ѕерейдите по ней дл€ подтверждени€ Email.",
						"«акрыть", ""
					);
				}
			}
			case DIALOG_REPORT:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(1 <= len <= 80)
					{
						new fmt_str[128];
						
						format(fmt_str, sizeof fmt_str, "%s[%d] : {FFCD00}%s", GetPlayerNameEx(playerid), playerid, inputtext);
						SendMessageToAdmins(fmt_str, 0x66CC00FF);
						
						if(GetPlayerAdminEx(playerid) < 1)
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);
							
						SendClientMessage(playerid, 0xFFFFFFFF, "¬аше сообщение отправлено");
						
						return 1;
					}
					else if(len > 80)
					{	
						SendClientMessage(playerid, 0x999999FF, "—лишком длинное сообщение");
					}
					ShowPlayerReportDialog(playerid);
				}
				else cmd::menu(playerid, "");
			}
			case DIALOG_PLAYER_IMPROVEMENTS:
			{
				if(response)
				{
					new my_i_level = GetPlayerData(playerid, P_IMPROVEMENTS);
					
					if(0 <= listitem <= sizeof(g_player_improvements)-1)
					{
						new i_level = GetPlayerImprovementInfo(listitem, I_LEVEL);
						new i_price = GetPlayerImprovementInfo(listitem, I_PRICE);
						
						if(my_i_level < listitem)
						{
							SendClientMessage(playerid, 0xCECECEFF, "Ёто улучшение пока не доступно");
						}
						else if(my_i_level > listitem)
						{
							SendClientMessage(playerid, 0xCECECEFF, "¬ы уже купили это улучшение");
						}
						else if(GetPlayerLevel(playerid) < i_level || GetPlayerMoneyEx(playerid) < i_price)
						{
							new fmt_str[64 + 1];
							
							format(fmt_str, sizeof fmt_str, "ƒл€ покупки этого улучшени€ необходим %d уровень и %d рублей", i_level, i_price);
							SendClientMessage(playerid, 0x999999FF, fmt_str);
						}
						else 
						{
							new fmt_str[85];
			
							format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,improvements=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - i_price, my_i_level + 1, GetPlayerAccountID(playerid));
							mysql_query(mysql, fmt_str, false);
							
							if(!mysql_errno())
							{
								GivePlayerMoneyEx(playerid, -i_price, "ѕокупка улучшени€ аккаунта", false);
								
								AddPlayerData(playerid, P_IMPROVEMENTS, +, 1);
								
								format(fmt_str, sizeof fmt_str, "¬ы приобрели улучшение {FFCD00}\"%s\"", GetPlayerImprovementInfo(listitem, I_NAME));
								SendClientMessage(playerid, 0x3399FFFF, fmt_str);
							
								switch(listitem + 1)
								{
									case 1: 
										SendClientMessage(playerid, 0xCECECEFF, "ѕолоска здоровь€ будет уменьшатьс€ значительно медленнее");
								
									case 2: 
										SendClientMessage(playerid, 0xCECECEFF, "“еперь ¬ы можете покидать организацию по собственному желанию {33FF33}(/leave)");
									
									case 3: 
										SendClientMessage(playerid, 0xCECECEFF, "“еперь ¬ы можете носить с собой в 2 раза больше металла, патронов и наркотиков");
									
									case 4: 
										SendClientMessage(playerid, 0xCECECEFF, "-TODO (No Info)-");
									
									case 5: 
										SendClientMessage(playerid, 0xCECECEFF, "-TODO (No Info)-");
								}
							}
							else 
							{
								SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 06)");
								ShowPlayerImprovementsDialog(playerid);
							}
						}
					}
					else 
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{0099CC}»нформаци€",
							"{FFFFFF}1. ¬ыносливость позволит находитьс€ в хорошей форме длительное\n"\
							"врем€. ѕолоска здоровь€ будет уменьшатьс€ медленнее.\n\n"\
							"2. –ешительность позволит вам самосто€тельно прин€ть решение об\n"\
							"увольнении с организации (команда /leave). Ѕез решительности вы не\n"\
							"сможете покинуть организацию по собственному желанию.\n\n"\
							"3. –юкзак даст возможность переносить с собой металл, патроны и\n"\
							"наркотики в гораздо большем количестве.\n\n"\
							"4. —тав мастером вождени€, двигатель транспорта под ¬ашим управлением\n"\
							"больше не будет глохнуть при различных ударах.\n\n"\
							"5. ѕолна€ экипировка сохран€ет все ваше оружие в полном объеме,\n"\
							"при выходе из игры.",
							"«акрыть", ""
						);
					}
				}
				else cmd::menu(playerid, "");
			}
			case DIALOG_CHANGE_NAME:
			{
				if(response)
				{
					if(!GetPVarInt(playerid, "change_name_status"))
					{
						new len = strlen(inputtext);
						if(4 <= len <= 20) 
						{
							new bool: valid_name = true;
							for(new idx; idx < len; idx ++)
							{
								switch(inputtext[idx])
								{
									case 'a'..'z', 'A'..'Z', '[', ']', '_': continue;
									default:
										valid_name = false;
								}
							}
							
							if(!strcmp(GetPlayerNameEx(playerid), inputtext, true))
							{
								SendClientMessage(playerid, 0xFF6600FF, "¬ы уже используете это им€");
							}
							else if(valid_name)
							{
								new query[128];
								new Cache: result, rows;
								
								mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", inputtext);
								result = mysql_query(mysql, query, true);
								
								rows = cache_num_rows();
								cache_delete(result);
								
								if(!rows)
								{
									SetPVarInt(playerid, "change_name_status", 1);
									SetPVarString(playerid, "change_name", inputtext);
								
									Dialog
									(
										playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
										"{FFCD00}«а€вка на изменение имени",
										"{FFFFFF}¬аша просьба об изменении ника отправлена администрации.\n"\
										"¬ы получите сообщение, как только за€вка будет обработана.\n\n"\
										"≈сли в течении нескольких минут ¬аше им€ не было изменено,\n"\
										"то, скорее всего, оно не соответствует RP правилам,\n"\
										"либо ¬ы уже используете RP им€.",
										"ќк", ""
									);

									format(query, sizeof query, "[—мена non rp имени] %s >> %s {FFCD00}| /okay %d дл€ одобрени€" , GetPlayerNameEx(playerid), inputtext, playerid);
									SendMessageToAdmins(query, 0x66CC99FF);
									
								}
								else SendClientMessage(playerid, 0xFF6600FF, "¬веденное ¬ами им€ уже используетс€");
								
							}
							else 
							{
								SendClientMessage(playerid, 0xFF6600FF, "»м€ уже используетс€ или содержит недопустимые символы");
								SendClientMessage(playerid, 0xFFFFFFFF, "»спользуйте латинские буквы a-z A-Z, а также символы [ ] _");
							}
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ќедопустимый формат ввода");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "¬ы уже подавали за€вку на изменение имени");
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_GPS:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1:
						{
							Dialog
							(
								playerid, DIALOG_GPS_PUBLIC_PLACES, DIALOG_STYLE_LIST,
								"{FFCC00}ќбщественные места", 
								"1. јвтошкола\n\
								2. ¬оенкомат\n\
								3. √остиница\n\
								4. ќтдел кадров\n\
								5. јвторынок эконом класса\n\
								6. јвторынок среднего класса\n\
								7. јвторынок премиум класса\n\
								8. ћото-¬ело рынок\n\
								9. јрзамас\n\
								10. Ѕатырево\n\
								11. Ѕусаево (школа)\n\
								12. Ѕусаево (село)\n\
								13. √орель\n\
								14. –оговичи\n\
								15. Ћыткарино\n\
								16. Ќовое Ёдово",
								"ќтметить", "Ќазад"
							);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_GPS_TRANSPORT, DIALOG_STYLE_LIST,
								"{FFCC00}“ранспортные узлы", 
								"1. ∆/ƒ ¬окзал јрзамаса\n\
								2. јвтовокзал јрзамаса\n\
								3. ÷ентральна€ автостанци€ (автопарк)\n\
								4. јвтовокзал Ѕатырево\n\
								5. јвтовокзал Ћыткарино\n\
								6. јвтовокзал Ёдово\n\
								7. јэропорт Ѕатырево\n\
								8. јэропорт Ћыткарино",
								"ќтметить", "Ќазад"
							);
						}
						case 3:
						{
							Dialog
							(
								playerid, DIALOG_GPS_STATE_ORGANIZATIONS, DIALOG_STYLE_LIST,
								"{FFCC00}√осударственные организации", 
								"1. ѕравительство области\n\
								2. ќтдел полиции є1 (ƒѕ—)\n\
								3. ќтдел полиции є2 (ѕѕ—)\n\
								4. ‘едеральна€ —лужба Ѕезопасности\n\
								5. √ородска€ больница\n\
								6. √“–  Ђ–итмї\n\
								7. ¬оинска€ часть",
								"ќтметить", "Ќазад"
							);
						}
						case 4:
						{
							Dialog
							(
								playerid, DIALOG_GPS_GANGS, DIALOG_STYLE_LIST,
								"{FFCC00}Ѕазы преступных группировок",
								"1. јрзамасска€ ќѕ√\n\
								2. Ѕатыревска€ ќѕ√\n\
								3. Ћыткаринска€ ќѕ√",
								"ќтметить", "Ќазад"
							);
						}
						case 5:
						{
							Dialog
							(
								playerid, DIALOG_GPS_JOBS, DIALOG_STYLE_LIST,
								"{FFCC00}ѕо работе",
								"1. √ородской склад {CC9900}(работа грузчика)\n\
								2. Ўахта {CC9900}(работа шахтера)\n\
								3. Ћесопилка {CC9900}(работа лесоруба)\n\
								4. «авод по производству продуктов\n\
								5. Ќефтедобывающий завод\n\
								6. Ќефтеперерабатывающий завод \n\
								7. јвтопарк дл€ дальнобойщиков (продукты)\n\
								8. јвтопарк дл€ дальнобойщиков (топливо)\n\
								9. ѕожарна€ станци€ є1\n\
								10. ѕожарна€ станци€ є2\n\
								11. —то€нка автомехаников",
								"ќтметить", "Ќазад"
							);
						}
						case 6:
						{
							Dialog
							(
								playerid, DIALOG_GPS_BANKS, DIALOG_STYLE_LIST,
								"{FFCC00}Ѕанки", 
								"1. ÷ентральный банк јрзамаса\n\
								2. Ѕанк Ѕатырево\n\
								3. Ѕанк Ёдово", // (частный)
								"ќтметить", "Ќазад"
							);
						}
						case 7:
						{
							Dialog
							(
								playerid, DIALOG_GPS_ENTERTAINMENT, DIALOG_STYLE_LIST,
								"{FFCC00}–азвлечени€", 
								"1. –айский остров\n\
								2. ќбластной дом культуры\n\
								3. √оночна€ трасса дл€ картинга\n\
								4. √оночна€ трасса дл€ мотоциклов\n\
								5. √оночна€ трасса дл€ катеров\n\
								6. »гровой клуб јрзамаса (в разработке)\n\
								7. »гровой клуб Ѕатырево (в разработке)\n\
								8. »гровой клуб Ћыткарино (в разработке)\n\
								9. ѕл€ж \" ордон\"\n\
								10. ѕл€ж \"јнашан\"\n\
								11. ѕл€ж \"–оговичи\"\n\
								12. ѕарк јрзамаса",
								"ќтметить", "Ќазад"
							);
						}
						case 8: // 8. Ѕизнес
						{
							CallLocalFunction("ShowPlayerGPSBusinessList", "i", playerid);
						}
						case 9:
						{
							new fmt_str[128];
							
							new stationid;
							new Float: dist;
							
							stationid = GetNearestFuelStation(playerid, 0.0);
							dist = GetPlayerDistanceFromPoint(playerid, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z));
							
							EnablePlayerGPS
							(
								playerid,
								47,
								GetFuelStationData(stationid, FS_POS_X),
								GetFuelStationData(stationid, FS_POS_Y),
								GetFuelStationData(stationid, FS_POS_Z),
								""
							);
							
							format(fmt_str, sizeof fmt_str, "Ѕлиже всех к ¬ам находитс€ ј«— є%d \"%s\" (рассто€ние %.1f м)", stationid, GetFuelStationData(stationid, FS_NAME), dist);
							SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
						
							SendClientMessage(playerid, 0xFFFF00FF, "ќна отмечена у ¬ас буквой {0099CC}Z");
						}
						default: 
							return 1;
					}
				}
			}
			case DIALOG_GPS_PUBLIC_PLACES:
			{		
				if(response)
				{
					if(0 <= listitem <= sizeof gps_public_places-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_public_places[listitem][G_MARKET_TYPE],
							gps_public_places[listitem][G_POS_X],
							gps_public_places[listitem][G_POS_Y],
							gps_public_places[listitem][G_POS_Z],
							"ћесто отмечено у ¬ас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_TRANSPORT:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_transport-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_transport[listitem][G_MARKET_TYPE],
							gps_transport[listitem][G_POS_X],
							gps_transport[listitem][G_POS_Y],
							gps_transport[listitem][G_POS_Z],
							"ћесто отмечено у ¬ас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_STATE_ORGANIZATIONS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_state_organizations-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_state_organizations[listitem][G_MARKET_TYPE],
							gps_state_organizations[listitem][G_POS_X],
							gps_state_organizations[listitem][G_POS_Y],
							gps_state_organizations[listitem][G_POS_Z],
							"ћестоположение организации отмечено у ¬ас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_GANGS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_gangs-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_gangs[listitem][G_MARKET_TYPE],
							gps_gangs[listitem][G_POS_X],
							gps_gangs[listitem][G_POS_Y],
							gps_gangs[listitem][G_POS_Z],
							"ћесто отмечено у ¬ас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_JOBS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_jobs-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_jobs[listitem][G_MARKET_TYPE],
							gps_jobs[listitem][G_POS_X],
							gps_jobs[listitem][G_POS_Y],
							gps_jobs[listitem][G_POS_Z],
							"ћесто отмечено у ¬ас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_BANKS:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_banks-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_banks[listitem][G_MARKET_TYPE],
							gps_banks[listitem][G_POS_X],
							gps_banks[listitem][G_POS_Y],
							gps_banks[listitem][G_POS_Z],
							"Ѕанк отмечен у ¬ас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_ENTERTAINMENT:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof gps_entertainment-1)
					{
						EnablePlayerGPS
						(
							playerid,
							gps_entertainment[listitem][G_MARKET_TYPE],
							gps_entertainment[listitem][G_POS_X],
							gps_entertainment[listitem][G_POS_Y],
							gps_entertainment[listitem][G_POS_Z],
							"ћесто отмечено у ¬ас на GPS"
						);
					}
				}
				else cmd::gps(playerid, "");
			}
			case DIALOG_GPS_BUSINESS:
			{
				if(response)
				{
					if(0 <= listitem <= MAX_BUSINESS_GPS-1)
					{
						new idx = GetPlayerListitemValue(playerid, listitem);
						new businessid = GetBusinessGPSInfo(idx, BG_BIZ_ID);
						
						if(GetBusinessGPSInfo(idx, BG_SQL_ID))
						{
							EnablePlayerGPS
							(
								playerid,								
								56,
								GetBusinessData(businessid, B_POS_X),
								GetBusinessData(businessid, B_POS_Y),
								GetBusinessData(businessid, B_POS_Z),
								"Ѕизнес отмечен у ¬ас на GPS"
							);
						}
						else cmd::gps(playerid, "");
					}
				}
				else cmd::gps(playerid, "");
			}
			// -----------------------------------------------------------------
			case DIALOG_HELP:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof help_info - 1)
						ShowPlayerHelpSection(playerid, listitem);
				}
				else DeletePVar(playerid, "help_section");
			}
			case DIALOG_HELP_SECTION:
			{
				new sectionid = GetPVarInt(playerid, "help_section");
				
				if(!response && sectionid < sizeof help_info - 1)
				{
					ShowPlayerHelpSection(playerid, sectionid + 1);
				}
				else cmd::help(playerid, "");
			}
			// -----------------------------------------------------------------
			case DIALOG_SERVER_RADIO:
			{
				if(response)
				{
					if(0 <= listitem <= sizeof g_server_radio - 1)
					{
						PlayAudioStreamForPlayer(playerid, GetServerRadioData(listitem, SR_CHANNEL_URL));

						SetPVarInt(playerid, "server_radio_enabled", 1);
						SendClientMessage(playerid, 0x66CC00FF, "ќнлайн радио включено");
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ANIM_LIST:
			{
				if(response)
				{
					if(!SetPlayerAnimation(playerid, listitem))
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"»нформаци€",
							"ƒл€ быстрого запуска нужной анимации можно использовать {FFFFFF}/anim(list) [номер анимации из списка]",
							"«акрыть", ""
						);
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_OPEN_HOOD_OR_TRUNK:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid)
				{
					new E_VEHICLE_PARAMS_STRUCT: param = response ? V_BONNET : V_BOOT;
					new set_status = GetVehicleParam(vehicleid, param) ^ VEHICLE_PARAM_ON;
				
					SetVehicleParam(vehicleid, param, set_status);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_DRIVING_TUTORIAL_START:
			{
				if(response)
					ShowDrivingTutorialSection(playerid, 0);
			}
			case DIALOG_DRIVING_TUTORIAL:
			{
				new step = GetPVarInt(playerid, "driving_tutorial_step");
				if(response)
				{
					step ++;
				}
				else step --;
				
				if(step >= sizeof driving_tutorial)
				{
					Dialog
					(
						playerid, DIALOG_DRIVING_TUTORIAL_END, DIALOG_STYLE_MSGBOX,
						"{0099FF}«авершение",
						"{FFFFFF}Ќадеемс€ вы все внимательно прочли и готовы приступить к сдаче экзамена\n"\
						"≈сли вы сомневаетесь в чем-либо, то рекомендуем не рисковать и прочитать нужный раздел еще раз!\n\n"\
						"{CC9900}∆елаем ¬ам удачи на экзамене!\n"\
						"ƒл€ того, чтобы завершить обучение нажмите \"¬ыход\"",
						"¬ыход", "Ќазад"
					);
				}
				else if(step < 0)
				{
					ShowPlayerDrivingTutorial(playerid);
				}
				else 
				{
					ShowDrivingTutorialSection(playerid, step);
					
					if(step == 1)
					{
						SpeedometrShowForPlayer(playerid);
					}
					else SpeedometrHideForPlayer(playerid);
				}
			}
			case DIALOG_DRIVING_TUTORIAL_END:
			{
				if(!response)
					ShowDrivingTutorialSection(playerid, sizeof driving_tutorial - 1);
			}
			case DIALOG_DRIVING_EXAM_INFO:
			{
				if(response)
				{
					if(GetPlayerData(playerid, P_DRIVING_LIC) < 1)
					{
						if(GetPlayerMoneyEx(playerid) >= 600) 
						{
							GivePlayerMoneyEx(playerid, -600, "—дача на права");

							Dialog
							(
								playerid, DIALOG_DRIVING_EXAM_START, DIALOG_STYLE_MSGBOX,
								"{CCCC00}“еоретическа€ часть",
								"{FFFFFF}¬ам будет предложено 12 вопросов дл€ проверки теоретических знаний\n"\
								"„тобы сдать эту часть экзамена необходимо ответить минимум на 9 из них\n"\
								"≈сли правильных ответов будет меньше, то вы не будете допущены до практический части\n\n"\
								"{33CCFF}Ќа каждый вопрос будет несколько вариантов ответа, правильный из который только один.\n"\
								"ќ результате вы узнаете когда ответите на все 12 вопросов", 
								"ƒалее", "ќтмена"
							);
							ClearPlayerDrivingExamInfo(playerid);
						}
						else SendClientMessage(playerid, 0xCECECEFF, "—дача на права стоит 600 рублей");
					}				
					else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас уже есть права");
				}
			}
			case DIALOG_DRIVING_EXAM_START:
			{
				if(response)
				{
					SetPlayerDrivingExamInfo(playerid, DE_POINTS, 0);	
					ShowPlayerDrivingExam(playerid, 0);
				}
			}
			case DIALOG_DRIVING_EXAM:
			{
				new step = GetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP);
			
				if(driving_exam[step][DE_CORRECT_ANSWER] == (listitem + 1))
				{
					SetPlayerChatBubble(playerid, "+1", 0xFFFF00FF, 5.0, 2000);
					SetPlayerDrivingExamInfo(playerid, DE_POINTS, GetPlayerDrivingExamInfo(playerid, DE_POINTS) + 1);
				}
				ShowPlayerDrivingExam(playerid, step + 1);
			}
			case DIALOG_DRIVING_EXAM_RESULT:
			{
				if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
				{
					Dialog
					(
						playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
						"{CCCC00}ѕрактическа€ часть",
						"{FFFFFF}ќтлично, теперь приступим к практической части\n"\
						"¬ам нужно будет немного проехатьс€ по городу на учебном авто\n"\
						"Ќайти его можно на сто€нке слева от выхода\n\n"\
						"{FF9900}¬нимание! —облюдайте осторожность и не превышайте скорость\n"\
						"≈сли вы повредите автомобиль экзамен будет провален",
						"Ќачать", ""
					);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ATM:
			{
				if(response)
				{
					switch(listitem+1)
					{
						case 1,2: // —н€ть\ѕоложить с банковского счета
						{
							ShowPlayerATMSelectSumDialog(playerid, !listitem);
						}
						case 3: // Ѕаланс банковского счета
						{
							new fmt_str[64];
							format(fmt_str, sizeof fmt_str, "{FFFFFF}Ќа ¬ашем банковском счету {%s}%d руб", GetPlayerBankMoney(playerid) > 0 ? ("00CC00") : ("FF6633"), GetPlayerBankMoney(playerid));
							
							Dialog
							(
								playerid, DIALOG_ATM_BALANCE, DIALOG_STYLE_MSGBOX, 
								"{FFCD00}Ѕаланс счета",
								fmt_str, 
								"Ќазад", "¬ыйти"
							);
						}
						case 4: // —н€ть со счета предпри€ти€
						{
							ShowPlayerATMCompanyDialog(playerid, true);
						}
						case 5: // ѕоложить на счет предпри€ти€
						{
							ShowPlayerATMCompanyDialog(playerid, false);
						}
						case 6: // ѕополнить мобильный телефон
						{
							if(GetPlayerPhone(playerid) != 0)
							{
								Dialog
								(
									playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT, 
									"{FFCD00}ѕополнени€ мобильного телефона", 
									"{FFFFFF}”кажите сумму, на которую хотите пополнить счет:",
									"√отово", "Ќазад"
								);
							}
							else 
							{
								SendClientMessage(playerid, 0x999999FF, "” ¬ас нет телефона. ≈го можно купить в магазине 24/7");
								ShowPlayerATMDialog(playerid);
							}
						}
						case 7: // Ѕезналичный перевод
						{
							Dialog
							(
								playerid, DIALOG_ATM_TRANSFER_MONEY_1, DIALOG_STYLE_INPUT, 
								"{FFCD00}Ѕезналичный перевод", 
								"{FFFFFF}”кажите номер банковского счета:", 
								"ƒалее", "ќтмена"
							);
						}
						case 8: // Ѕлаготворительность
						{
							ShowPlayerATMCharityDialog(playerid);
						}
						default: 
							return 1;
					}
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_ATM_TAKE_MONEY: // сн€ть деньги
			{
				if(response)
				{
					if(0 <= listitem <= 6)
					{
						new sum = atm_item_sum[listitem];
						if(GetPlayerBankMoney(playerid) >= sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + sum, GetPlayerBankMoney(playerid) - sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);
							
							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, -, sum);
								GivePlayerMoneyEx(playerid, sum, "—н€тие денег с банкомата", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 08)");
						
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Ќа ¬ашем банковском счету недостаточно средств");
							ShowPlayerATMSelectSumDialog(playerid, true);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, true);
				}
				else 
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_TAKE_OTHER_MONEY: // сн€ть деньги (друга€ сума)
			{
				if(response)
				{
					new take_sum = strval(inputtext);
					if(take_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerBankMoney(playerid) >= take_sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + take_sum, GetPlayerBankMoney(playerid) - take_sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);
							
							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, -, take_sum);
								GivePlayerMoneyEx(playerid, take_sum, "—н€тие денег с банкомата (друга€ сумма)", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 08)");
						
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "Ќа ¬ашем банковском счету недостаточно средств");
							ShowPlayerATMSelectOtherSum(playerid, true);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, true);
				}
				else
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMSelectSumDialog(playerid, true);
				}
			}
			case DIALOG_ATM_PUT_MONEY: // положить деньги
			{
				if(response)
				{
					if(0 <= listitem <= 6)
					{
						new sum = atm_item_sum[listitem];
						if(GetPlayerMoneyEx(playerid) >= sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - sum, GetPlayerBankMoney(playerid) + sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);
							
							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, +, sum);
								GivePlayerMoneyEx(playerid, -sum, "ѕополнение денег в банкомате", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 08)");
						
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "” ¬ас с собой нет столько денег");
							ShowPlayerATMSelectSumDialog(playerid, false);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, false);
				}
				else 
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_PUT_OTHER_MONEY: // положить деньги (друга€ сума)
			{
				if(response)
				{
					new put_sum = strval(inputtext);
					if(put_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= put_sum)
						{
							new query[85];
							format(query, sizeof query, "UPDATE accounts SET money=%d,bank=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) - put_sum, GetPlayerBankMoney(playerid) + put_sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);
							
							if(!mysql_errno())
							{
								AddPlayerData(playerid, P_BANK, +, put_sum);
								GivePlayerMoneyEx(playerid, -put_sum, "ѕополнение денег в банкомате (друга€ сумма)", false, true);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 08)");
						
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
							ShowPlayerATMDialog(playerid);
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "” ¬ас с собой нет столько денег");
							ShowPlayerATMSelectOtherSum(playerid, false);
						}
					}
					else ShowPlayerATMSelectOtherSum(playerid, false);
				}
				else 
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMSelectSumDialog(playerid, false);
				}
			}
			case DIALOG_ATM_BALANCE:
			{
				if(response)
				{
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					ShowPlayerATMDialog(playerid);
				}
			}
			case DIALOG_ATM_PHONE_BALANCE:
			{
				if(response)
				{
					new sum = strval(inputtext);
					if(sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= sum)
						{
							new query[128];
							
							format(query, sizeof query, "UPDATE accounts SET money=%d,phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_PHONE_BALANCE)+sum, GetPlayerAccountID(playerid));
							mysql_query(mysql, query, false);
							
							if(!mysql_errno())
							{
								GivePlayerMoneyEx(playerid, -sum, "ѕополнение счета телефона", false, true);
								AddPlayerData(playerid, P_PHONE_BALANCE, +, sum);
								
								format(query, sizeof query, "¬ы пополнили счет мобильного телефона на {FF9900}%d руб", sum);
								SendClientMessage(playerid, 0x66CC00FF, query);
								
								format(query, sizeof query, "—ейчас на счету %d руб", GetPlayerData(playerid, P_PHONE_BALANCE));
								SendClientMessage(playerid, 0x66CC00FF, query);
								
								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 15)");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас не хватает денег");
						
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
					
					Dialog
					(
						playerid, DIALOG_ATM_PHONE_BALANCE, DIALOG_STYLE_INPUT, 
						"{FFCD00}ѕополнени€ мобильного телефона", 
						"{FFFFFF}”кажите сумму, на которую хотите пополнить счет:",
						"√отово", "Ќазад"
					);
				}
				else 
				{
					ShowPlayerATMDialog(playerid);
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_ATM_SELECT_COMPANY_TAKE, DIALOG_ATM_SELECT_COMPANY_PUT:
			{
				if(response)
				{
					new bool: action = (dialogid == DIALOG_ATM_SELECT_COMPANY_TAKE);
					
					switch(listitem + 1)
					{
						case 1:
							ShowPlayerATMBusinessDialog(playerid, action);
							
						case 2:
							ShowPlayerATMFuelStationDialog(playerid, action);
					}
				}
				else 
				{
					ShowPlayerATMDialog(playerid);
					ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
				}
			}
			case DIALOG_ATM_FUEL_ST_TAKE_MONEY:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetFuelStationData(stationid, FS_BALANCE) >= sum)
							{
								new query[128 + 1];
								
								format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)+sum, GetFuelStationData(stationid, FS_BALANCE)-sum, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, query, false);
								
								if(!mysql_errno())
								{
									AddFuelStationData(stationid, FS_BALANCE, -, sum);
									GivePlayerMoneyEx(playerid, sum, "+ —н€тие средств со счета ј«—", false, true);
									
									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ќа счету предпри€ти€ нет такой суммы");
						}
						ShowPlayerATMFuelStationDialog(playerid, true);
					}
					else 
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_FUEL_ST_PUT_MONEY:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetPlayerMoneyEx(playerid) >= sum)
							{
								new query[128 + 1];
								
								format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-sum, GetFuelStationData(stationid, FS_BALANCE)+sum, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, query, false);
								
								if(!mysql_errno())
								{
									AddFuelStationData(stationid, FS_BALANCE, +, sum);
									GivePlayerMoneyEx(playerid, -sum, "ѕополнение счета ј«—", false, true);
									
									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас с собой нет столько денег");
						}
						ShowPlayerATMFuelStationDialog(playerid, false);
					}
					else 
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_BIZ_TAKE_MONEY:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetBusinessData(businessid, B_BALANCE) >= sum)
							{
								new query[128 + 1];
								
								format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)+sum, GetBusinessData(businessid, B_BALANCE)-sum, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);
								
								if(!mysql_errno())
								{
									AddBusinessData(businessid, B_BALANCE, -, sum);
									GivePlayerMoneyEx(playerid, sum, "+ —н€тие средств со счета Ѕизнеса", false, true);
									
									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ќа счету предпри€ти€ нет такой суммы");
						}
						ShowPlayerATMBusinessDialog(playerid, true);
					}
					else 
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_BIZ_PUT_MONEY:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new sum = strval(inputtext);
						if(sum > 0 && IsNumeric(inputtext))
						{
							if(GetPlayerMoneyEx(playerid) >= sum)
							{
								new query[128 + 1];
								
								format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-sum, GetBusinessData(businessid, B_BALANCE)+sum, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);
								
								if(!mysql_errno())
								{
									AddBusinessData(businessid, B_BALANCE, +, sum);
									GivePlayerMoneyEx(playerid, -sum, "ѕополнение счета Ѕизнеса", false, true);
									
									ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
									ShowPlayerATMDialog(playerid);
									return 1;
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 18)");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас с собой нет столько денег");
						}
						ShowPlayerATMBusinessDialog(playerid, false);
					}
					else 
					{
						ShowPlayerATMDialog(playerid);
						ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);
					}
				}
			}
			case DIALOG_ATM_TRANSFER_MONEY_1:
			{
				if(response)
				{
					new transfer_id = strval(inputtext);
					
					if(transfer_id > 0 && IsNumeric(inputtext))
					{
						SetPlayerBankTransfer(playerid, BT_ID, 0);
						
						new query[64 + 1];
						new Cache: result;
						
						format(query, sizeof query, "SELECT id FROM bank_accounts WHERE id=%d LIMIT 1", transfer_id);
						result = mysql_query(mysql, query);
						
						if(cache_num_rows())
							SetPlayerBankTransfer(playerid, BT_ID, cache_get_row_int(0, 0));
		
						cache_delete(result);
						
						if(GetPlayerBankTransfer(playerid, BT_ID))
						{
							return ShowPlayerATMTransfer(playerid);
						}
						else SendClientMessage(playerid, 0xFF6600FF, "—чета с таким номером не существует");
					}
					
					Dialog
					(
						playerid, DIALOG_ATM_TRANSFER_MONEY_1, DIALOG_STYLE_INPUT, 
						"{FFCD00}Ѕезналичный перевод", 
						"{FFFFFF}”кажите номер банковского счета:", 
						"ƒалее", "ќтмена"
					);
				}
				else ShowPlayerATMDialog(playerid);
			}
			case DIALOG_ATM_TRANSFER_MONEY_2:
			{
				new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
				if(response && transfer_id)
				{
					new transfer_sum = strval(inputtext);
					if(transfer_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerBankMoney(playerid) >= transfer_sum)
						{
							new fmt_str[155];

							format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.bank=%d,ba.balance=ba.balance + %d WHERE a.id=%d AND ba.id=%d", GetPlayerBankMoney(playerid)-transfer_sum, transfer_sum, GetPlayerAccountID(playerid), transfer_id);
							mysql_query(mysql, fmt_str, false);
						
							if(!mysql_errno())
							{
								format(fmt_str, sizeof fmt_str, "+ ѕополнени€ с банкомата %d руб", transfer_sum);
								BankAccountLog(playerid, transfer_id, fmt_str);
							
								AddPlayerData(playerid, P_BANK, -, transfer_sum);
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}ќткуда:\t\t\tќсновной счет\n"\
									" уда:\t\t\t\t—чет є%d\n"\
									"—умма:\t\t\t\t%d руб\n"\
									"ќстаток на ¬ашем счету:\t%d руб",
									transfer_id,
									transfer_sum,
									GetPlayerBankMoney(playerid)
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{99FF00}ѕеревод завершен", fmt_str, "«акрыть", "");
								
								return PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 11)");
						}
						else SendClientMessage(playerid, 0xFF6600FF, "Ќа основном банковском счете недостаточно денег");
					}
					ShowPlayerATMTransfer(playerid);
				}
				else ShowPlayerATMDialog(playerid); 
			}
			case DIALOG_ATM_CHARITY:
			{
				if(response)
				{
					new put_sum = strval(inputtext);
					if(put_sum > 0 && IsNumeric(inputtext))
					{
						if(GetPlayerMoneyEx(playerid) >= put_sum)
						{
							new fmt_str[85];
							format(fmt_str, sizeof fmt_str, "INSERT INTO charity (uid,money,time) VALUES (%d,%d,%d)", GetPlayerAccountID(playerid), put_sum, gettime());
							mysql_query(mysql, fmt_str, false);
							
							GivePlayerMoneyEx(playerid, -put_sum, "Ѕлаготворительность", true, true);
							
							format(fmt_str, sizeof fmt_str, "¬ы сделали пожертвование в размере %d рублей", put_sum);
							SendClientMessage(playerid, 0x3399FFFF, fmt_str);
							
							UpdateCharity();
						}
						else 
						{
							SendClientMessage(playerid, 0xCECECEFF, "” ¬ас недостаточно денег");
							ShowPlayerATMCharityDialog(playerid);
						}
					}
					else ShowPlayerATMCharityDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PAY_FOR_RENT:
			{
				if(response)
				{
					new buffer = -1;
					switch(listitem + 1)
					{
						case 1: // «аплатить за дом
						{
							buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
							if(buffer != -1)
							{
								ShowPlayerHousePayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет дома");
						}
						case 2: // ќплатить аренду бизнеса
						{
							buffer = GetPlayerBusiness(playerid);
							if(buffer != -1)
							{
								ShowPlayerBusinessPayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет бизнеса");
						}
						case 3: // ќплатить аренду ј«—
						{
							buffer = GetPlayerFuelStation(playerid);
							if(buffer != -1)
							{
								ShowPlayerFuelStationPayForRent(playerid);
								return 1;
							}
							else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет заправки");
						}
					}
					ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_FUEL_ST:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];
						
							new time = gettime();
							new rent_time = GetFuelStationData(stationid, FS_RENT_DATE);
						
							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2;
							
							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);
								
									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.bank=%d,f.rent_time=%d WHERE a.id=%d AND f.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									
									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetFuelStationData(stationid, FS_RENT_DATE, rent_time);
									
										format(fmt_str, sizeof fmt_str, "— банковского счета сн€то {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
										
										format(fmt_str, sizeof fmt_str, "¬ы успешно продлили аренду ј«— еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else 
								{
									SendClientMessage(playerid, 0xB5B500FF, "Ќа основном банковском счету не хватает денег дл€ оплаты");
									
									format(fmt_str, sizeof fmt_str, "ƒл€ продлени€ аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "¬ы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerFuelStationPayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_BIZ:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];
						
							new time = gettime();
							new rent_time = GetBusinessData(businessid, B_RENT_DATE);
						
							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2;
							
							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);
								
									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.bank=%d,b.rent_time=%d WHERE a.id=%d AND b.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									
									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetBusinessData(businessid, B_RENT_DATE, rent_time);
									
										format(fmt_str, sizeof fmt_str, "— банковского счета сн€то {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
										
										format(fmt_str, sizeof fmt_str, "¬ы успешно продлили аренду бизнеса еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else 
								{
									SendClientMessage(playerid, 0xB5B500FF, "Ќа основном банковском счету не хватает денег дл€ оплаты");
									
									format(fmt_str, sizeof fmt_str, "ƒл€ продлени€ аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "¬ы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerBusinessPayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			case DIALOG_PAY_FOR_RENT_HOUSE:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];
						
							new time = gettime();
							new rent_time = GetHouseData(houseid, H_RENT_DATE);
						
							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new rent_price = GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? GetHouseData(houseid, H_RENT_PRICE) : GetHouseData(houseid, H_RENT_PRICE) / 2;
							
							new total_price = rent_price * days;
							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);
								
									format(fmt_str, sizeof fmt_str, "UPDATE accounts a,houses h SET a.bank=%d,h.rent_time=%d WHERE a.id=%d AND h.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									
									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetHouseData(houseid, H_RENT_DATE, rent_time);
									
										format(fmt_str, sizeof fmt_str, "— банковского счета сн€то {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
										
										format(fmt_str, sizeof fmt_str, "¬ы успешно оплатили дом еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else 
								{
									SendClientMessage(playerid, 0xB5B500FF, "Ќа основном банковском счету не хватает денег дл€ оплаты");
									
									format(fmt_str, sizeof fmt_str, "ƒл€ продлени€ аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "¬ы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerHousePayForRent(playerid);
					}
					else ShowPlayerPayForRentDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_BANK:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case 1: 
						{
							ShowPlayerBankAccounts(playerid);
						}
						case 2:
						{
							Dialog
							(
								playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT,
								"{FFCD00}—оздание нового счета",
								"{FFFFFF}¬ведите название дл€ нового счета.\n"\
								"ћаксимальна€ длина 20 символов:",
								"ќк", "ќтмена"
							);
						}
					}
				}
			}
			case DIALOG_BANK_ACCOUNTS:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0:
						{
							Dialog
							(
								playerid, DIALOG_ATM, DIALOG_STYLE_LIST,
								"{FFCD00}ќсновной счет",
								"1. —н€ть с банковского счета\n"\
								"2. ѕоложить на банковский счет\n"\
								"3. Ѕаланс банковского счета\n"\
								"4. —н€ть со счета предпри€ти€\n"\
								"5. ѕоложить на счет предпри€ти€\n"\
								"6. ѕополнить мобильный телефон\n"\
								"7. Ѕезналичный перевод\n"\
								"8. Ѕлаготворительность",
								"¬ыбрать", "¬ыйти"
							);
						}
						case 1..(MAX_BANK_ACCOUNTS):
						{
							new accountid = GetPlayerListitemValue(playerid, listitem - 1);
							if(IsValidBankAccount(playerid, accountid))
							{
								SetPlayerUseListitem(playerid, accountid);
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_LOGIN, DIALOG_STYLE_PASSWORD,
									"{FFCD00}јвторизаци€",
									"{FFFFFF}¬ведите PIN-код счета:",
									"¬вести", "ќтмена"
								);
							}
						}
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_ACCOUNT_LOGIN:
			{
				if(response)
				{
					new accountid = GetPlayerUseListitem(playerid);
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);
						new pin_len = strlen(GetBankAccountData(playerid, accountid, BA_PIN_CODE));
						if(!strcmp(GetBankAccountData(playerid, accountid, BA_PIN_CODE), inputtext, false) && pin_len && len)
						{
							ShowPlayerBankAccountOperation(playerid);
						}
						else 
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF9900}ќшибка",
								"{FFFFFF}¬ы допустили ошибку при вводе PIN-кода",
								"«акрыть", ""
							);
						}
					}
				}
			}
			case DIALOG_BANK_ACCOUNT_OPERATION:
			{
				if(response)
				{
					new accountid = GetPlayerUseListitem(playerid);
					if(IsValidBankAccount(playerid, accountid))
					{
						switch(listitem + 1)
						{
							case 1: // »нформаци€ о счете
							{
								UpdateBankAccountData(playerid, accountid);
								
								new fmt_str[128];
								format
								(
									fmt_str, sizeof fmt_str, 
									"{FFFFFF}Ќомер счета:\t\t%d\n"\
									"Ќаименование:\t\"%s\"\n"\
									"Ѕаланс:\t\t{00CC66}%d руб",
									GetBankAccountData(playerid, accountid, BA_ID),
									GetBankAccountData(playerid, accountid, BA_NAME),
									GetBankAccountData(playerid, accountid, BA_BALANCE)
								);
								Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}»нформаци€", fmt_str, "¬ернутьс€", "");
							}
							case 2: // »стори€ операций
							{
								ShowPlayerBankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID));
							}
							case 3: // —н€ть деньги
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
									"{FFCD00}—н€ть деньги",
									"{FFFFFF}”кажите сумму:",
									"—н€ть", "ќтмена"
								);
							}
							case 4: // ѕоложить деньги
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
									"{FFCD00}ѕоложить деньги",
									"{FFFFFF}”кажите сумму:",
									"ѕоложить", "ќтмена"
								);
							}
							case 5: // ѕеревести на другой счет
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_TRANSFER_1, DIALOG_STYLE_INPUT,
									"{FFCD00}ѕеревод средств",
									"{FFFFFF}”кажите номер счета, на который\n"\
									"хотите осуществить перевод:",
									"ƒалее", "ќтмена"
								);
							}
							case 6: // ѕереименовать счет
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
									"{FFCD00}ѕереименование счета",
									"{FFFFFF}¬ведите новое название дл€ этого счета.\n"\
									"ћаксимальна€ длина 20 символов:",
									"ќк", "ќтмена"
								);
							}
							case 7: // »зменить PIN-код
							{
								Dialog
								(
									playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
									"{FFCD00}»зменение PIN-кода",
									"{FFFFFF}¬ведите новый PIN-код.\n"\
									"ƒлина от 4 до 8 цифр:",
									"ќк", "ќтмена"
								);
							}
						}
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_ACCOUNT_INFO:
			{
				ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TAKE_MONEY:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new take_sum = strval(inputtext);
						if(take_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);
							
							new fmt_str[155];
							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);
							
							if(balance >= take_sum)
							{
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.money=%d,ba.balance=ba.balance - %d WHERE a.id=%d AND ba.id=%d", GetPlayerMoneyEx(playerid)+take_sum, take_sum, GetPlayerAccountID(playerid), GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);
								
								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, take_sum, "—н€тие с банк. счета (банк)", false, true);
									SetBankAccountData(playerid, accountid, BA_BALANCE, balance - take_sum);
									
									format(fmt_str, sizeof fmt_str, "- —н€тие наличных %d руб", take_sum);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);
									
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}—чет:\t\tє%d\n"\
										"¬ы сн€ли:\t{FF9900}%d руб\n"\
										"{FFFFFF}ќстаток:\t%d руб",	
										GetBankAccountData(playerid, accountid, BA_ID),
										take_sum,
										GetBankAccountData(playerid, accountid, BA_BALANCE)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}ќпераци€ завершена успешно", fmt_str, "¬ернутьс€", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 09)");
							}
							else 
							{
								format(fmt_str, sizeof fmt_str, "Ќедостаточно средств. “екущий баланс счета є%d: {009966}%d руб", GetBankAccountData(playerid, accountid, BA_ID), balance);
								SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
							}
						}
						
						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TAKE_MONEY, DIALOG_STYLE_INPUT,
							"{FFCD00}—н€ть деньги",
							"{FFFFFF}”кажите сумму:",
							"—н€ть", "ќтмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_PUT_MONEY:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new put_sum = strval(inputtext);
						if(put_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);
							
							new fmt_str[155];
							new money = GetPlayerMoneyEx(playerid);
							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);
							
							if(money >= put_sum)
							{
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a,bank_accounts ba SET a.money=%d,ba.balance=ba.balance + %d WHERE a.id=%d AND ba.id=%d", money-put_sum, put_sum, GetPlayerAccountID(playerid), GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);
								
								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -put_sum, "ѕополнение банк. счета (банк)", false, true);
									SetBankAccountData(playerid, accountid, BA_BALANCE, balance + put_sum);
									
									format(fmt_str, sizeof fmt_str, "+ ѕополнение на сумму %d руб", put_sum);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);
									
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}—чет:\t\t\tє%d\n"\
										"¬ы положили:\t{00CC00}%d руб\n"\
										"{FFFFFF}»тоговый баланс:\t%d руб",	
										GetBankAccountData(playerid, accountid, BA_ID),
										put_sum,
										GetBankAccountData(playerid, accountid, BA_BALANCE)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}ќпераци€ завершена успешно", fmt_str, "¬ернутьс€", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 09)");
							}
							else SendClientMessage(playerid, 0xFFFFFFFF, "Ќедостаточно средств");
						}
						
						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_PUT_MONEY, DIALOG_STYLE_INPUT,
							"{FFCD00}ѕоложить деньги",
							"{FFFFFF}”кажите сумму:",
							"ѕоложить", "ќтмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TRANSFER_1:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new transfer_id = strval(inputtext);
						if(transfer_id > 0 && IsNumeric(inputtext))
						{
							new fmt_str[64 + 1];
							new Cache: result;
							new rows;
							
							format(fmt_str, sizeof fmt_str, "SELECT id,name FROM bank_accounts WHERE id=%d LIMIT 1", transfer_id);
							result = mysql_query(mysql, fmt_str);
							
							if((rows = cache_num_rows()))
							{
								SetPlayerBankTransfer(playerid, BT_ID, cache_get_row_int(0, 0));
								cache_get_row(0, 1, g_player_bank_transfer[playerid][BT_NAME], mysql, 21);
							}
							cache_delete(result);
							
							if(rows)
							{
								return ShowPlayerBankAccountTransfer(playerid, accountid);
							}
							else SendClientMessage(playerid, 0xFF6600FF, "—чета с таким номером не существует");
						}
					
						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_TRANSFER_1, DIALOG_STYLE_INPUT,
							"{FFCD00}ѕеревод средств",
							"{FFFFFF}”кажите номер счета, на который\n"\
							"хотите осуществить перевод:",
							"ƒалее", "ќтмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_TRANSFER_2:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new transfer_sum = strval(inputtext);
						new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
						
						if(transfer_sum > 0 && IsNumeric(inputtext))
						{
							UpdateBankAccountData(playerid, accountid);
							
							new balance = GetBankAccountData(playerid, accountid, BA_BALANCE);
							if(balance >= transfer_sum)
							{
								new fmt_str[160];
								
								if(GetBankAccountData(playerid, accountid, BA_ID) != transfer_id)
								{
									format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=balance-%d WHERE id=%d LIMIT 1", transfer_sum, GetBankAccountData(playerid, accountid, BA_ID));
									mysql_query(mysql, fmt_str, false);
									
									format(fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET balance=balance+%d WHERE id=%d LIMIT 1", transfer_sum, transfer_id);
									mysql_query(mysql, fmt_str, false);
									
									SetBankAccountData(playerid, accountid, BA_BALANCE, balance - transfer_sum);
								}
								format(fmt_str, sizeof fmt_str, "- ѕеревод %d руб на счет є%d", transfer_sum, transfer_id);
								BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);
								
								format(fmt_str, sizeof fmt_str, "+ ѕеревод %d руб со счета є%d", transfer_sum, GetBankAccountData(playerid, accountid, BA_ID));
								BankAccountLog(playerid, transfer_id, fmt_str);
			
								SetPlayerBankTransfer(playerid, BT_ID, 0);
								
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}—о счета:\t\t\tє%d\n"\
									"Ќа счет:\t\t\tє%d\n"\
									"Cумма перевода:\t\t{FF9900}%d руб\n"\
									"{FFFFFF}ќстаток на ¬ашем счете:\t{00CC66}%d руб",
									GetBankAccountData(playerid, accountid, BA_ID),
									transfer_id,
									transfer_sum,
									GetBankAccountData(playerid, accountid, BA_BALANCE)
								);
								Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{3399FF}ѕеревод успешно выполнен", fmt_str, "¬ернутьс€", "");
							}
							else 
							{
								SendClientMessage(playerid, 0xFF6600FF, "Ќа счету недостаточно средств дл€ перевода");
								ShowPlayerBankAccountTransfer(playerid, accountid);
							}
						}
						else ShowPlayerBankAccountTransfer(playerid, accountid);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_CHANGE_NAME:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);
						
						if(3 <= len <= 20)
						{
							if(!IsABadBankAccountName(inputtext))
							{
								new fmt_str[128];
								
								mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET name='%e' WHERE id=%d LIMIT 1", inputtext, GetBankAccountData(playerid, accountid, BA_ID));
								mysql_query(mysql, fmt_str, false);
								
								if(!mysql_errno())
								{
									format(g_bank_account[playerid][accountid][BA_NAME], 21, "%s", inputtext);
									
									format(fmt_str, sizeof fmt_str, "* ѕереименование счета на \"%s\"", inputtext);
									BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), fmt_str);
									
									format
									(
										fmt_str, sizeof fmt_str,
										"{FFFFFF}—чет успешно переименован.\n"\
										"“еперь он будет доступен под названием \"%s\"",
										GetBankAccountData(playerid, accountid, BA_NAME)
									);
									return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}«авершение", fmt_str, "¬ернутьс€", "");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 10)");
							}
							else 
							{
								SendClientMessage(playerid, 0xFF6600FF, "Ќедопустимые символы в новом названии");
								SendClientMessage(playerid, 0xFF6600FF, "ћожно использовать {FFCC15}русские {FF6600}и {FFCC15}английские {FF6600}буквы, а также {FFCC15}цифры");
							}
						}
						else SendClientMessage(playerid, 0xFF6600FF, "ƒлина названи€ счета может быть от {FFCC15}3 до 20 {FF6600}символов");
						
						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_NAME, DIALOG_STYLE_INPUT,
							"{FFCD00}ѕереименование счета",
							"{FFFFFF}¬ведите новое название дл€ этого счета.\n"\
							"ћаксимальна€ длина 20 символов:",
							"ќк", "ќтмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_ACCOUNT_CHANGE_PIN:
			{
				new accountid = GetPlayerUseListitem(playerid);
				if(response)
				{
					if(IsValidBankAccount(playerid, accountid))
					{
						new len = strlen(inputtext);
						
						if(4 <= len <= 8 && IsNumeric(inputtext))
						{
							new fmt_str[128];
					
							mysql_format(mysql, fmt_str, sizeof fmt_str, "UPDATE bank_accounts SET pin='%e' WHERE id=%d LIMIT 1", inputtext, GetBankAccountData(playerid, accountid, BA_ID));
							mysql_query(mysql, fmt_str, false);
						
							if(!mysql_errno())
							{
								format(g_bank_account[playerid][accountid][BA_PIN_CODE], 9, "%s", inputtext);
								BankAccountLog(playerid, GetBankAccountData(playerid, accountid, BA_ID), "* »зменение PIN-кода");
								
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}PIN-код успешно изменен.\n"\
									"–екомендуем сделать скрин (F8) чтобы не забыть его: {CCFF00}%s",
									GetBankAccountData(playerid, accountid, BA_PIN_CODE)
								);
								return Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}»зменение PIN", fmt_str, "¬ернутьс€", "");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 10)");
						}
						
						Dialog
						(
							playerid, DIALOG_BANK_ACCOUNT_CHANGE_PIN, DIALOG_STYLE_INPUT,
							"{FFCD00}»зменение PIN-кода",
							"{FFFFFF}¬ведите новый PIN-код.\n"\
							"ƒлина от 4 до 8 цифр:",
							"ќк", "ќтмена"
						);
					}
				}
				else ShowPlayerBankAccountOperation(playerid);
			}
			case DIALOG_BANK_CREATE_ACCOUNT:
			{
				if(response)
				{
					new len = strlen(inputtext);
					if(3 <= len <= 20)
					{
						if(!IsABadBankAccountName(inputtext))
						{
							new query[128];
							new Cache: result;
							new total_accounts;
							
							format(query, sizeof query, "SELECT COUNT(*) FROM bank_accounts WHERE uid=%d", GetPlayerAccountID(playerid));
							result = mysql_query(mysql, query);
							
							total_accounts = cache_get_row_int(0, 0);
							cache_delete(result);
							
							if(total_accounts < MAX_BANK_ACCOUNTS)
							{
								mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts (uid,name,reg_time) VALUES (%d,'%e',%d)", GetPlayerAccountID(playerid), inputtext, gettime());
								mysql_query(mysql, query, false);
								
								if(!mysql_errno())
								{
									Dialog
									(
										playerid, DIALOG_BANK_CREATED_ACCOUNT, DIALOG_STYLE_MSGBOX, 
										"{FFCD00}—чет создан",
										"{FFFFFF}¬ы создали новый счет в банке.\n\n"\
										"ƒл€ доступа к нему используйте PIN-код {00FF66}0000{FFFFFF}. ѕосле входа\n"\
										"насто€тельно рекомендуем изменить его на более сложный.\n"\
										"Ёто поможет защитить счет от несанкционированного доступа.",
										"√отово", ""
									);
								}
							}
							else Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}Ћимит счетов", "{FFFFFF}ћожно создать не более восьми банковских счетов", "ќк", "");
						}
						else 
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF3300}ќшибка",
								"{FFFFFF}ќпераци€ запрещена. Ќедопустимые символы в названии счета\n"\
								"ћожно использовать {FFCC15}русские {FFFFFF}и {FFCC15}английские {FFFFFF}буквы, а также {FFCC15}цифры",
								"¬ыход", ""
							);
						}
					}
					else 
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{FF3300}ќшибка",
							"{FFFFFF}ƒлина названи€ счета может быть от {FFCC15}3 до 20 {FFFFFF}символов",
							"«акрыть", ""
						);
					}
				}
				else ShowPlayerBankDialog(playerid);
			}
			case DIALOG_BANK_CREATED_ACCOUNT:
			{
				ShowPlayerBankDialog(playerid);
			}
			// -----------------------------------------------------------------
			case DIALOG_PHONE_CALL:
			{
				if(response)
				{
					new number = strval(inputtext);
					
					if(number >= 0 && strlen(inputtext))
					{
						new params[16];
						valstr(params, number);
						
						cmd::c(playerid, params);				
					}
					else SendClientMessage(playerid, 0xCECECEFF, "ќшибка набора");
				}
			}
			case DIALOG_PHONE_CALL_BALANCE:
			{
				SetPlayerPhoneUseState(playerid, false);
			}
			// -----------------------------------------------------------------
			case DIALOG_ACTION:
			{
				if(response)
				{
					if(1 <= (listitem+1) <= 3)
					{
						new targetid = GetPlayerData(playerid, P_TARGET_ID);
						
						if(IsPlayerConnected(targetid) && IsPlayerLogged(targetid)) 
						{
							if(IsPlayerInRangeOfPlayer(playerid, targetid, 10.0)) 
							{
								new params[5];
								valstr(params, targetid);
								
								new cmd[3][16] = {"cmd_hi", "cmd_pass", "cmd_lic"};
								CallLocalFunction(cmd[listitem], "ds", playerid, params);
							}
							else SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");
						}
						else SendClientMessage(playerid, 0x999999FF, "»грок вышел из игры");
					}
					SetPlayerData(playerid, P_TARGET_ID, INVALID_PLAYER_ID);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_VIEV_JOBS_LIST:
			{
				if(response)
				{
					Dialog
					(
						playerid, DIALOG_JOIN_TO_JOB, DIALOG_STYLE_LIST,
						"{FFCD00}—писок доступных работ", 
						"1. ¬одитель автобуса\t\t\t{0099FF}2 лвл\n"\
						"2. “аксист\t\t\t\t{0099FF}3 лвл\n"\
						"3. јвтомехнаник\t\t\t{0099FF}4 лвл\n"\
						"4. ƒальнобойщик\t\t\t{0099FF}4 лвл",
						
						/*
						"5. ”личный торговец\t\t\t{0099FF}6 лвл\n"\
						"6. —отрудник ћ„—\t\t\t{0099FF}7 лвл",
						*/
						"¬ыбрать", "ќтмена"
					);
				}
			}
			case DIALOG_JOIN_TO_JOB:
			{
				if(response)
				{
					switch(listitem + 1)
					{
						case JOB_BUS_DRIVER:
						{
							if(GetPlayerLevel(playerid) < 2) 
								return SendClientMessage(playerid, 0xCECECEFF, "„тобы устроитьс€ на работу водител€ автобуса необходим 2 уровень");
						
							SendClientMessage(playerid, 0xFFFF00FF, "ѕоздравл€ем! {66CC00}¬ы устроились на работу водител€ автобуса");
							SendClientMessage(playerid, 0xFFFFFFFF, "—то€нки автобусов наход€тс€ на всех автостанци€х. »спользуйте {0099FF}/gps {FFFFFF}чтобы найти ближайшую к вам");
						}
						case JOB_TAXI_DRIVER:
						{
							if(GetPlayerLevel(playerid) < 3) 
								return SendClientMessage(playerid, 0xCECECEFF, "„тобы устроитьс€ на работу водител€ такси необходим 3 уровень");
						
							SendClientMessage(playerid, 0xFFFF00FF, "ѕоздравл€ем! {66CC00}¬ы устроились на работу таксиста");
							SendClientMessage(playerid, 0xFFFFFFFF, "—то€нки такси можно найти возле автостанций, ∆ƒ вокзалов и других людных местах");
						}
						case JOB_MECHANIC:
						{
							if(GetPlayerLevel(playerid) < 4) 
								return SendClientMessage(playerid, 0xCECECEFF, "„тобы устроитьс€ на работу автомеханика необходим 4 уровень");
						
							SendClientMessage(playerid, 0xFFFF00FF, "ѕоздравл€ем! {66CC00}¬ы устроились на работу автомеханика");
							SendClientMessage(playerid, 0xFFFFFFFF, "„тобы начать работу найдите служебный транспорт в ¬ашем городе. »спользуйте {FF9900}/gps {FFFFFF}при необходимости");
							SendClientMessage(playerid, 0xFFFFFFFF, " оманды: /getfuel - закупить топливо; /fill - заправить транспорт; /repair - починить транспорт");
						}
						case JOB_TRUCKER:
						{
							if(GetPlayerLevel(playerid) < 4) 
								return SendClientMessage(playerid, 0xCECECEFF, "„тобы устроитьс€ на работу дальнобойщика необходим 4 уровень");
						
							SendClientMessage(playerid, 0xFFFF00FF, "ѕоздравл€ем! {66CC00}¬ы устроились на работу дальнобойщика");
							SendClientMessage(playerid, 0xFFFFFFFF, "»спользуйте {FF9900}/gps {FFFFFF}чтобы найти сто€нки транспорта дл€ развозчиков");
							SendClientMessage(playerid, 0xFFFFFFFF, "ƒополнительные инструкции и указани€ ¬ы будете получать в процессе работы");
						}
						default:
							return 1;
					}
					new query[64];
					
					format(query, sizeof query, "UPDATE accounts SET job=%d WHERE id=%d LIMIT 1", listitem + 1, GetPlayerAccountID(playerid));
					mysql_query(mysql, query, false);
					
					if(!mysql_errno())
					{
						SetPlayerData(playerid, P_JOB, listitem + 1);
					}
					else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 14)");
				}
			}
			case DIALOG_END_JOB:
			{
				if(response)
					EndPlayerJob(playerid);
			}
			case DIALOG_BUS_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					
					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 180)
						{
							GivePlayerMoneyEx(playerid, -180, "јренда автобуса", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);
							
							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "ƒл€ того, чтобы начать работу водител€ автобуса {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "” ¬ас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_BUS_ROUTE_COST:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						new route_cost = strval(inputtext);
					
						if(0 <= route_cost <= 100 && IsNumeric(inputtext))
						{
							SetPlayerData(playerid, P_JOB_TARIFF, route_cost);
							
							Dialog
							(
								playerid, DIALOG_BUS_ROUTE_SELECTION, DIALOG_STYLE_LIST, 
								"{FFCD00}¬ыберите маршрут", 
								g_bus_routes_list,
								"ќк", "ќтмена"
							);
						}
						else 
						{
							Dialog
							(
								playerid, DIALOG_BUS_ROUTE_COST, DIALOG_STYLE_INPUT, 
								"{FFCD00}—тоимость проезда", 
								"{FFFFFF}—колько будет стоить проезд?\n"\
								"”кажите цену от 0 до 100 рублей", 
								"ƒалее", "ќтмена"
							);
						}
					}
				}
			}
			case DIALOG_BUS_ROUTE_SELECTION:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);

					if(action_type == VEHICLE_ACTION_TYPE_BUS_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(0 <= listitem <= sizeof g_bus_routes - 1)
						{
							SetPlayerData(playerid, P_BUS_ROUTE_STEP, 0);
							SetPlayerData(playerid, P_BUS_ROUTE, listitem);
				
							StartPlayerJob(playerid, JOB_BUS_DRIVER);
						}
					}
				}
			}
			case DIALOG_TAXI_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					
					if(action_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 200)
						{
							GivePlayerMoneyEx(playerid, -200, "јренда такси", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);
							
							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "ƒл€ того, чтобы начать работу таксиста {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "” ¬ас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_TAXI_NAME:
			{
				if(response)
				{
					if(!(1 <= strlen(inputtext) <= 15))
					{
						Dialog
						(
							playerid, DIALOG_TAXI_NAME, DIALOG_STYLE_INPUT, 
							"{FFCD00}Ќазвание такси", 
							"{FFFFFF}ѕридумайте название дл€ вашего такси\n"\
							"ћаксимальна€ длина 15 символов\n\n"\
							"≈сли вы не хотите как-то называтьс€\n"\
							"нажмите кнопку \"ѕропустить\"",
							"ƒалее", "ѕропустить"
						);
						return 1;
					}
					else format(g_player[playerid][P_JOB_SERVICE_NAME], 17, "%s\n", inputtext);
				}
				else g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;
				
				Dialog
				(
					playerid, DIALOG_TAXI_TARIFF, DIALOG_STYLE_INPUT, 
					"{FFCD00}Ќастройка счетчика", 
					"{FFFFFF}”кажите тариф по которому будет работать ваше такси\n"\
					"Ёта сумма будет сниматьс€ с пассажира каждые 100 м поездки\n"\
					"“арифна€ ставка может быть от 0 до 200 рублей", 
					"ќк", "ќтмена"
				);
			}
			case DIALOG_TAXI_TARIFF:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					
					if(action_type == VEHICLE_ACTION_TYPE_TAXI_DRIVER && action_id == VEHICLE_ACTION_ID_NONE)
					{
						new tariff = strval(inputtext);
						
						if(!(0 <= tariff <= 200) || !IsNumeric(inputtext))
						{
							Dialog
							(
								playerid, DIALOG_TAXI_TARIFF, DIALOG_STYLE_INPUT, 
								"{FFCD00}Ќастройка счетчика", 
								"{FFFFFF}”кажите тариф по которому будет работать ваше такси\n"\
								"Ёта сумма будет сниматьс€ с пассажира каждые 100 м поездки\n"\
								"“арифна€ ставка может быть от 0 до 200 рублей", 
								"ќк", "ќтмена"
							);
							return 1;
						}
						else 
						{
							SetPlayerData(playerid, P_JOB_TARIFF, tariff);
							StartPlayerJob(playerid, JOB_TAXI_DRIVER);
						}
					}
				}
				g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;
			}
			case DIALOG_MECHANIC_RENT_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					
					if(action_type == VEHICLE_ACTION_TYPE_MECHANIC && action_id == VEHICLE_ACTION_ID_NONE)
					{
						if(GetPlayerMoneyEx(playerid) >= 180)
						{
							GivePlayerMoneyEx(playerid, -180, "јренда эвакуатора", true, true);
							//SetVehicleData(vehicleid, V_ACTION_ID, true);
							
							SetPlayerData(playerid, P_JOB_CAR, vehicleid);
							return SendClientMessage(playerid, 0x66CC00FF, "ƒл€ того, чтобы начать работу автомеханика {FF9900}нажмите ~k~~TOGGLE_SUBMISSIONS~");
						}
						else SendClientMessage(playerid, 0x999999FF, "” ¬ас недостаточно денег чтобы заключить договор аренды");
					}
				}
				RemovePlayerFromVehicle(playerid);
			}
			case DIALOG_MECHANIC_START_JOB:
			{
				if(response)
				{	
					new vehicleid = GetPlayerVehicleID(playerid);
					
					new action_type = GetVehicleData(vehicleid, V_ACTION_TYPE);
					new action_id = GetVehicleData(vehicleid, V_ACTION_ID);
					
					if(action_type == VEHICLE_ACTION_TYPE_MECHANIC && action_id == VEHICLE_ACTION_ID_NONE)
					{
						Dialog
						(
							playerid, DIALOG_MECHANIC_NAME, DIALOG_STYLE_INPUT,
							"{FFCD00}јвтомеханик", 
							"{FFFFFF}¬ведите название дл€ ¬ашей техслужбы,\n"\
							"или оставьте поле пустым", 
							"√отово", "ќтмена"
						);	
					}					
				}
			}
			case DIALOG_MECHANIC_NAME:
			{
				if(response)
				{
					new len = strlen(inputtext);
					
					if(len)
					{
						if(!(1 <= len <= 15))
						{
							Dialog
							(
								playerid, DIALOG_MECHANIC_NAME, DIALOG_STYLE_INPUT,
								"{FFCD00}јвтомеханик", 
								"{FFFFFF}¬ведите название дл€ ¬ашей техслужбы,\n"\
								"или оставьте поле пустым", 
								"√отово", "ќтмена"
							);	
							return SendClientMessage(playerid, 0xCECECEFF, "—лишком длинное название | 15 символов максимум");
						}
						else format(g_player[playerid][P_JOB_SERVICE_NAME], 17, "%s\n", inputtext);
					}
					else g_player[playerid][P_JOB_SERVICE_NAME][0] = 0;

					StartPlayerJob(playerid, JOB_MECHANIC);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_PHONE_BOOK:
			{
				if(response && (0 <= listitem <= MAX_PHONE_BOOK_CONTACTS-1))
				{
					ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS, listitem);
				}
			}
			case DIALOG_PHONE_BOOK_OPTION:
			{
				new contactid = GetPlayerPhoneBookSelectContact(playerid);
				if(contactid != INVALID_PLAYER_ID)
				{
					if(response)
					{
						ShowPhoneBookOperation(playerid, listitem + 1, contactid);
					}
					else ShowPlayerPhoneBook(playerid);
				}
			}
			case DIALOG_PHONE_BOOK_SEND_SMS:
			{
				if(response) 
				{
					new len = strlen(inputtext);
					if(len)
					{
						if(len < 65)
						{
							new contactid = GetPlayerPhoneBookSelectContact(playerid);
							new fmt_str[90];

							format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER), inputtext);
							cmd::sms(playerid, fmt_str);
							return 1;
						}
						else SendClientMessage(playerid, 0xCECECEFF, "—лишком длинное сообщение");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "¬ведите сообщение дл€ отправки");
					
					ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_SEND_SMS);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_CHANGE_NAME:
			{
				if(response) 
				{
					if(3 <= strlen(inputtext) <= 20)
					{
						new contactid = GetPlayerPhoneBookSelectContact(playerid);
						new query[90];
						
						format(g_player_phone_book[playerid][contactid][PB_NAME], 21, "%s", inputtext);

						mysql_format(mysql, query, sizeof query, "UPDATE phone_books SET name='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
						mysql_query(mysql, query, false);
					
						SendClientMessage(playerid, 0x99CC33FF, "»м€ контакта изменено");
						ShowPlayerPhoneBook(playerid);
					}
					else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_CHANGE_NAM);				
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_CHANGE_NUMBER:
			{
				if(response) 
				{
					if(3 <= strlen(inputtext) <= 9 && strval(inputtext) > 0 && IsNumeric(inputtext)) 
					{
						if(!CheckPhoneBookUsedNumber(playerid, inputtext))
						{
							new contactid = GetPlayerPhoneBookSelectContact(playerid);
							new query[90];
							
							format(g_player_phone_book[playerid][contactid][PB_NUMBER], 10, "%s", inputtext);

							mysql_format(mysql, query, sizeof query, "UPDATE phone_books SET number='%e' WHERE id=%d LIMIT 1", inputtext, GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
							mysql_query(mysql, query, false);
						
							SendClientMessage(playerid, 0x99CC33FF, "Ќомер контакта изменен");
							ShowPlayerPhoneBook(playerid);
						}		
					}
					else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_CHANGE_NUM);
				}
				else ShowPhoneBookOperation(playerid, PHONE_BOOK_OPERATION_OPTIONS);
			}
			case DIALOG_PHONE_BOOK_ADD_CONTACT:
			{
				if(response)
				{
					new player_name[20 + 1];
					GetPVarString(playerid, "add_contact_name", player_name, sizeof(player_name));
					
					if(!(3 <= strlen(inputtext) <= 9) || strval(inputtext) < 1 || !IsNumeric(inputtext))
					{
						new fmt_str[64 + 1];
						
						format(fmt_str, sizeof fmt_str, "{FFFFFF}¬ведите номер телефона дл€ контакта %s", player_name);
						Dialog(playerid, DIALOG_PHONE_BOOK_ADD_CONTACT, DIALOG_STYLE_INPUT, "{FFCD00}ƒобавление нового контакта", fmt_str, "ƒобавить", "ќтмена");
						
						return 1;
					}
					AddPhoneBookContact(playerid, player_name, inputtext);
				}
				DeletePVar(playerid, "add_contact_name");
			}
			// -----------------------------------------------------------------
			case DIALOG_MINER_BUY_METALL:
			{
				if(response)
				{
					new count = strval(inputtext);
					new metall = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);
					
					if(IsNumeric(inputtext))
					{
						if(metall >= count)
						{
							if(1 <= count <= 50)
							{	
								if((GetPlayerData(playerid, P_METALL) + count) <= 20) 
								{
									new sum = count * 15;
									if(GetPlayerMoneyEx(playerid) >= sum)
									{
										new fmt_str[80];
										
										format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,metall=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-sum, GetPlayerData(playerid, P_METALL) + count, GetPlayerAccountID(playerid));
										mysql_query(mysql, fmt_str, false);
										
										if(!mysql_errno())
										{
											SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, metall - count);
											UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);
										
											AddPlayerData(playerid, P_METALL, +, count);
										
											format(fmt_str, sizeof fmt_str, "¬ы купили %d кг за %d рублей", count, count * 15);
											SendClientMessage(playerid, 0x3399FFFF, fmt_str);

											return GivePlayerMoneyEx(playerid, -sum, "ѕокупка металла на шахте", false, true);
										}
										else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 12)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ќедостаточно денег дл€ покупки такого количества металла");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "¬ы не можете носить с собой более 20 кг металла");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "ћожно купить от 1 до 50 кг металла");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Ќа складе шахты нет такого количества металла");
					}
					ShowPlayerBuyMetalDialog(playerid);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_TEMP_JOB_LOADER_START:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						TogglePlayerDynamicCP(playerid, help_info_CP, false);
						
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_LOADER, TJ_SKIN)[GetPlayerSex(playerid)]);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_THIGH, 18635, A_OBJECT_BONE_RIGHT_THIGH, 0.2, -0.06, 0.1, 0.0, -90.0, 90.0, 1.0, 1.0, 1.0, 0);
						
						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_LOADER);
						
						SetPlayerLoaderJobLoadCP(playerid);
						
						SendClientMessage(playerid, 0x3399FFFF, "¬ы начали работу грузчика");
						SendClientMessage(playerid, 0x3399FFFF, "“очки доставки товаров помечены {FF0000}красными {3399FF}маркерами");
					}
				}
			}
			case DIALOG_TEMP_JOB_LOADER_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_LOADER);
				}
			}
			case DIALOG_TEMP_JOB_MINER_START:
			{
				if(response)
				{
					if(GetPlayerTempJob(playerid) == TEMP_JOB_NONE)
					{
						SetPlayerSkin(playerid, GetTempJobInfo(TEMP_JOB_MINER, TJ_SKIN)[GetPlayerSex(playerid)]);
						SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);
						
						SetPlayerJobLoadItems(playerid, 0);
						SetPlayerTempJob(playerid, TEMP_JOB_MINER);
						
						SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
						SetPlayerMinerJobLoadCP(playerid);
						
						SendClientMessage(playerid, 0x3399FFFF, "¬ы начали работу шахтера");
						SendClientMessage(playerid, 0x66CC00FF, "»щите месторождени€ железной руды на территории шахты");
						SendClientMessage(playerid, 0x66CC00FF, "ƒобытое сырье относите на склад дл€ переплавки");
					}
				}
			}
			case DIALOG_TEMP_JOB_MINER_END:
			{
				if(response)
				{
					EndPlayerTempJob(playerid, TEMP_JOB_MINER);
				}
			}
			case DIALOG_TEMP_JOB_FACTORY_TRUCKER:
			{
				if(response)
				{	
					new job = GetPlayerTempJob(playerid);

					switch(job)
					{
						case TEMP_JOB_NONE:
						{
							new skin = GetTempJobInfo(TEMP_JOB_FACTORY_TRUCKER, TJ_SKIN)[GetPlayerSex(playerid)];
							
							ClearAnimations(playerid);
							SetPlayerSkin(playerid, skin);
					
							if(GetPlayerSex(playerid))
								SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HEAD, 18638, A_OBJECT_BONE_HEAD, 0.16, 0.02, 0.0, 0.0, 0.0, 0.0, 1.0, 1.1, 1.12, 0);
				
							SetPlayerJobLoadItems(playerid, 0);
							SetPlayerTempJob(playerid, TEMP_JOB_FACTORY_TRUCKER);
							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_NONE);
						
							SendClientMessage(playerid, 0x3399FFFF, "¬ы начали работу в службе доставки завода");
							SendClientMessage(playerid, 0x66CC00FF, "ƒл€ получени€ информации воспользуйтесь инструкцией р€дом с ¬ами");
						
							SetPlayerData(playerid, P_IN_JOB, true);
						}
						case TEMP_JOB_FACTORY_TRUCKER:
						{
							EndPlayerJob(playerid);
						}
					}
				}
			}
			case DIALOG_TEMP_JOB_FACTORY:
			{
				if(response)
				{
					new job = GetPlayerTempJob(playerid);
					
					switch(job)
					{
						case TEMP_JOB_NONE:
						{
							new skin = GetTempJobInfo(TEMP_JOB_FACTORY, TJ_SKIN)[GetPlayerSex(playerid)];
							if(!GetPlayerSex(playerid))
							{	
								skin += random(2);
							}
				
							ClearAnimations(playerid);
							SetPlayerSkin(playerid, skin);
							SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HEAD, 18638, A_OBJECT_BONE_HEAD, 0.16, 0.02, 0.0, 0.0, 0.0, 0.0, 1.0, 1.1, 1.12, 0);
					
							TogglePlayerFactoryCP(playerid, true);
							SetPlayerData(playerid, P_JOB_WAGE, 0);
							
							SetPlayerJobLoadItems(playerid, 0);
							SetPlayerTempJob(playerid, TEMP_JOB_FACTORY);
							
							SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);
						
							SendClientMessage(playerid, 0x3399FFFF, "¬ы начали работу в производственном цеху завода");
							SendClientMessage(playerid, 0x66CC00FF, "ƒл€ получени€ информации воспользуйтесь инструкцией у входа в цех");
						
							DeletePVar(playerid, "factory_skill");
							DeletePVar(playerid, "factory_bad_prods");
							DeletePVar(playerid, "factory_take_metall");
						}
						case TEMP_JOB_FACTORY:
						{
							EndPlayerTempJob(playerid, TEMP_JOB_FACTORY);
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_FUEL_STATION_BUY:
			{
				if(response)
				{
					new stationid = GetPVarInt(playerid, "buy_fuel_st");
					
					if(IsPlayerInRangeOfPoint(playerid, 15.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
					{
						if(!IsFuelStationOwned(stationid))
						{
							if(GetPlayerMoneyEx(playerid) >= GetFuelStationData(stationid, FS_PRICE))
							{
								SendClientMessage(playerid, 0xFFFFFFFF, "ѕоздравл€ем! ¬ы купили заправочную станцию");
								BuyPlayerFuelStation(playerid, stationid);
								
								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Ќова€ заправочна€ станци€", "{FFFFFF}¬ам нужно заплатить за аренду ј«— в ближайшем отделением банка {FFCD00}(/gps)", "ќк", "");						
							}	
							else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас недостаточно денег дл€ покупки этой заправочной станции");
						}
						else 
						{
							new fmt_str[75];
							
							format(fmt_str, sizeof fmt_str, "Ёта заправочна€ станци€ уже куплена. ¬ладелец: %s", GetFuelStationData(stationid, FS_OWNER_NAME));
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}	
					}
				}
				DeletePVar(playerid, "buy_fuel_st");
			}
			case DIALOG_FUEL_STATION_INFO:
			{
				if(response)
				{	
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_PARAMS:
			{
				if(response)
				{
					ShowPlayerFuelStationDialog(playerid, listitem + 1);
				}
				else cmd::fuelst(playerid, "");
			}
			case DIALOG_FUEL_STATION_NAME:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(3 <= strlen(inputtext) <= 15)
						{
							format(g_fuel_station[stationid][FS_NAME], 20, inputtext, 0);
							UpdateFuelStationLabel(stationid);
							
							SendClientMessage(playerid, 0x66CC00FF, "Ќазвание заправочной станции изменено");		
						}
						else 
						{
							SendClientMessage(playerid, 0xCECECEFF, "ƒлина названи€ должна быть от 3-х до 15-ти символов");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_NEW_NAME);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_PRICE_FUEL:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(2 <= price <= 15 && IsNumeric(inputtext))
						{
							new fmt_str[75];
							
							SetFuelStationData(stationid, FS_FUEL_PRICE, price);
							UpdateFuelStationLabel(stationid);
							
							format(fmt_str, sizeof fmt_str, "“еперь топливо на ¬ашей заправке будет продаватьс€ по %d руб за 1 литр", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);
							
							format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET fuel_price=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_FUEL_PRICE), GetFuelStationData(stationid, FS_SQL_ID));
							mysql_query(mysql, fmt_str, false);
						}
						else 
						{
							SendClientMessage(playerid, 0xCECECEFF, "”кажите отпускную цену от 2 до 15 рублей за 1 литр");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_FUEL_PRICE);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_BUY_FUEL_PR:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(2 <= price <= 10 && IsNumeric(inputtext))
						{
							new fmt_str[90];
							SetFuelStationData(stationid, FS_BUY_FUEL_PRICE, price);
						
							format(fmt_str, sizeof fmt_str, "“еперь топливо дл€ ¬ашей заправки будет закупатьс€ по %d руб за 1 литр", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);
							
							format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET buy_fuel_price=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_BUY_FUEL_PRICE), GetFuelStationData(stationid, FS_SQL_ID));
							mysql_query(mysql, fmt_str, false);
						}
						else 
						{
							SendClientMessage(playerid, 0xCECECEFF, "”кажите закупочную цену от 2 до 10 рублей за 1 литр");
							return ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_BUY_FUEL_PRIC);
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_ORDER_FUELS:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(GetFuelStationData(stationid, FS_ORDER_ID) != -1)
						{
							SendClientMessage(playerid, 0x999999FF, "«аказ дл€ ¬ашей заправочной станции уже оформлен");
							ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
							
							return 1;
						}
						
						if(GetFuelStationData(stationid, FS_BUY_FUEL_PRICE) > 0)
						{
							new order_fuels = strval(inputtext);
							new fuel_price = GetFuelStationData(stationid, FS_BUY_FUEL_PRICE);
							new price = order_fuels * fuel_price;
							
							if(order_fuels > 0 && IsNumeric(inputtext))
							{
								new fmt_str[256];
								if(order_fuels <= GetFuelStationMaxFuel(stationid))
								{
									if(GetFuelStationData(stationid, FS_BALANCE) >= price)
									{
										new order_id = CreateOrder(ORDER_TYPE_FUEL_STATION, stationid, order_fuels, fuel_price);
										if(order_id != -1)
										{
											AddFuelStationData(stationid, FS_BALANCE, -, price);
							
											format(fmt_str, sizeof fmt_str, "~w~fuel st. bank~n~~r~-%d rub", price);
											GameTextForPlayer(playerid, fmt_str, 4000, 1);
											
											format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET balance=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_SQL_ID));
											mysql_query(mysql, fmt_str, false);
											
											new year, month, day;
											timestamp_to_date(GetOrderData(order_id, O_TIME), year, month, day);
										
											format
											(
												fmt_str, sizeof fmt_str,
												"{FFFFFF}ѕараметры заказа:\n\n"\
												" оличество топлива:\t\t\t%d л\n"\
												"—тоимость 1 литра:\t\t\t%d руб\n"\
												"ќбща€ стоимость заказа:\t\t%d руб\n"\
												"ƒата оформлени€ заказа:\t\t%02d-%02d-%d\n\n"\
												"ƒанные были переданы службе развозчиков топлива\n"\
												"ќжидайте выполнени€ ¬ашего заказа", 
												order_fuels,
												fuel_price,
												price,
												day, month, year
											);	
											Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{99CC00}«аказ оформлен", fmt_str, "«акрыть", "");
										}
										else SendClientMessage(playerid, 0x999999FF, "¬ данный момент ¬ы не можете оформить заказ");
										
										return 1;
									}
									else 
									{
										format(fmt_str, sizeof fmt_str, "„тобы оплатить заказ необходимо иметь %d руб на счету ј«—", price);
										SendClientMessage(playerid, 0xFF6600FF, fmt_str);
									}
								}
								else 
								{
									format(fmt_str, sizeof fmt_str, "¬ы не можете заказать более %d литров топлива", GetFuelStationMaxFuel(stationid));
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
						}
						else 
						{
							SendClientMessage(playerid, 0xFF6600FF, "ѕеред тем как оформить заказ, установите закупочную цену");
							ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_BUY_FUEL_PRIC);
							
							return 1;
						}
						ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_FUEL_ORDER);
					}
					else ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_ORDER_CANCE:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						new order_id = GetFuelStationData(stationid, FS_ORDER_ID);
						if(order_id != -1 && GetOrderData(order_id, O_SQL_ID) > 0)
						{
							if(!GetOrderData(order_id, O_USED))
							{
								new fmt_str[128];
								new return_money = GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE);
								
								DeleteOrder(order_id);
								AddFuelStationData(stationid, FS_BALANCE, +, return_money);
								
								format(fmt_str, sizeof fmt_str, "UPDATE fuel_stations SET balance=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, fmt_str, false);
								
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}¬ы отменили заказ топлива\n"\
									"Ќа счет заправочной станции было возвращено {00CC00}%d руб",
									return_money
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF9900}ќтмена заказа", fmt_str, "«акрыть", "");
								
								format(fmt_str, sizeof fmt_str, "~w~fuel st. bank~n~~g~+%d rub", return_money);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);
							
								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "¬аш заказ выполн€етс€, его нельз€ отменить");
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_IMPROVEMENT:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_fuel_station_improvements - 1)
						{
							new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);
							new i_price = g_fuel_station_improvements[listitem][I_PRICE];
							
							if(i_level < listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Ётот уровень улучшений пока недоступен");
							}
							else if(i_level > listitem) 
							{
								SendClientMessage(playerid, 0xCECECEFF, "¬ы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];
								
								format(fmt_str, sizeof fmt_str, "ƒл€ покупки %d уровн€ улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else 
							{
								new fmt_str[128];
								
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, fuel_stations f SET a.money=%d, f.improvements=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								mysql_query(mysql, fmt_str, false);
								
								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -i_price, "ѕокупка улучшений дл€ ј«—", false, true);
								
									format(fmt_str, sizeof fmt_str, "¬ы улучшили свою заправочную станцию до {FFCD00}%s {3399FF}уровн€", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);
									
									AddFuelStationData(stationid, FS_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1..3:
										{
											format(fmt_str, sizeof fmt_str, "≈мкость топливного хранилища увеличена до %d литров", GetFuelStationMaxFuel(stationid));
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);
											
											SendClientMessage(playerid, 0x999999FF, "“еперь можно меньше заботитьс€ о его наполнении");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "јкцизный сбор на бензин больше не распростран€етс€ на ¬ашу заправочную станцию");
											SendClientMessage(playerid, 0x999999FF, "Ѕлагодар€ этому, плата за аренду территории ј«— уменьшена в 2 раза");		
										}
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 17)");
							}
						}
					}
					ShowPlayerFuelStationDialog(playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case DIALOG_FUEL_STATION_SELL:
			{
				new stationid = GetPlayerFuelStation(playerid);
				if(stationid != -1)
				{
					if(response)
					{
						if(GetFuelStationData(stationid, FS_ORDER_ID) != -1)
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF6600}ѕродажа заправочной станции",
								"{FFFFFF}ѕеред тем как продать ј«— государству\n"\
								"заказ топлива нужно {FF3333}отменить",
								"«акрыть", ""
							);
						}
						else SellFuelStation(playerid);
					}
				}
			}
			case DIALOG_FUEL_STATION_BUY_JERRICA:
			{
				new stationid = GetPVarInt(playerid, "buy_jerrican_in_fuelst");
				DeletePVar(playerid, "buy_jerrican_in_fuelst");
				
				if(response)
				{
					if(IsPlayerInRangeOfPoint(playerid, 10.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
					{
						if(!GetPVarInt(playerid, "have_jerrican")) 
						{
							new price = GetFuelStationData(stationid, FS_FUEL_PRICE) * 15;
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								new query[150];
							
								if(IsFuelStationOwned(stationid))
								{
									if(GetFuelStationData(stationid, FS_FUELS) < 15)
										return SendClientMessage(playerid, 0xCECECEFF, "Ќа этой ј«— нет бензина");
									
									AddFuelStationData(stationid, FS_FUELS, -, 15);
									AddFuelStationData(stationid, FS_BALANCE, +, price);
									
									format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
								}
								else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
								
								mysql_query(mysql, query, false);
								if(!mysql_errno())
								{
									new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay_j");
									SetPVarInt(playerid, "buy_fuel_pay_j", buy_fuel_pay + price);
									
									GivePlayerMoneyEx(playerid, -price, "ѕокупка канистры на ј«—", false, true);
									
									SetPVarInt(playerid, "have_jerrican", 1);
									SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1650, A_OBJECT_BONE_LEFT_HAND, 0.15, 0.0, 0.0, 0.0, -90.0, 180.0, 1.0, 1.0, 1.0, 0);
								
									SendClientMessage(playerid, 0x66CC00FF, "¬ы купили канистру с 15 литрами бензина");
									SendClientMessage(playerid, 0x3399FFFF, "„тобы заправить транспорт, подойдите к нему и нажмите ѕ ћ");
									SendClientMessage(playerid, 0xCECECEFF, "ѕримечание: ¬ы не должны двигатьс€ во врем€ заправки. ѕ ћ - права€ кнопка мышки");
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 19)");
							}
							else SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег дл€ покупки канистры");					
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ы уже купили канистру");
					}						
				}
			}
			case DIALOG_FUEL_STATION_BUY_FUEL_M:
			{
				new stationid = GetPVarInt(playerid, "nearest_fuel_st");
				
				if(response)
				{
					new buy_fuel_count = strval(inputtext);
					new vehicleid = GetPlayerVehicleID(playerid);
					
					if(GetPlayerJob(playerid) == JOB_MECHANIC && IsPlayerInJob(playerid) && IsPlayerInVehicle(playerid, GetPlayerJobCar(playerid)))
					{
						if(IsPlayerInRangeOfPoint(playerid, 10.0, GetFuelStationData(stationid, FS_POS_X), GetFuelStationData(stationid, FS_POS_Y), GetFuelStationData(stationid, FS_POS_Z)))
						{
							new fmt_str[150];
							
							if((1 <= buy_fuel_count <= 10_000) && IsNumeric(inputtext))
							{
								if(GetFuelStationData(stationid, FS_FUELS) >= buy_fuel_count)
								{
									if(!(buy_fuel_count % 10))
									{
										if((GetPlayerJobLoadItems(playerid) + buy_fuel_count) <= 50)
										{
											new price = buy_fuel_count * GetFuelStationData(stationid, FS_FUEL_PRICE);
											if(GetPlayerMoneyEx(playerid) >= price)
											{
												if(IsFuelStationOwned(stationid))
												{
													AddFuelStationData(stationid, FS_FUELS, -, buy_fuel_count);
													AddFuelStationData(stationid, FS_BALANCE, +, price);
													
													format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
												}
												else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
												mysql_query(mysql, fmt_str, false);
												
												if(!mysql_errno())
												{
													GivePlayerMoneyEx(playerid, -price, "ѕокупка топлива на ј«— (/getfuel)", false, true);
													SetPlayerJobLoadItems(playerid, GetPlayerJobLoadItems(playerid) + buy_fuel_count);

													new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay_j");
													SetPVarInt(playerid, "buy_fuel_pay_j", buy_fuel_pay + price);
													
													format(fmt_str, sizeof fmt_str, "¬ы купили %d л топлива за %d рублей", buy_fuel_count, price);
													SendClientMessage(playerid, 0x66CC00FF, fmt_str);
													
													format(fmt_str, sizeof fmt_str, "%s{FFFFFF}јвтомеханик\n{999999}“опливо: %d л", GetPlayerData(playerid, P_JOB_SERVICE_NAME), GetPlayerJobLoadItems(playerid));
													UpdateVehicleLabel(vehicleid, 0xCC9900FF, fmt_str);
													
													return DeletePVar(playerid, "nearest_fuel_st");
												}
												else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 20)");
											}
											else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас недостаточно денег дл€ закупки такого кол-во топлива");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "ћожно загрузить не более 50 л топлива");
									}
									else SendClientMessage(playerid, 0xCECECEFF, " ол-во топлива должно быть кратно 10");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "Ќа ј«— нет такого кол-ва топлива");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ќеверное значение");
							
							format
							(
								fmt_str, sizeof fmt_str, 
								"{FFFFFF}“опливо на ј«—:\t\t%d/10000 л\n"\
								"—тоимость 1 литра:\t%d руб\n\n"\
								"¬ведите кол-во бензина, которое хотите закупить\n"\
								"(число должно быть кратным 10)",
								GetFuelStationData(stationid, FS_FUELS),
								GetFuelStationData(stationid, FS_FUEL_PRICE)
							);
							Dialog(playerid, DIALOG_FUEL_STATION_BUY_FUEL_M, DIALOG_STYLE_INPUT, "{FFCD00}«акупка топлива", fmt_str, " упить", "ќтмена");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ около заправочной станции");
					}
					else SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ в рабочем транспорте");
				}
				else DeletePVar(playerid, "nearest_fuel_st");
			}
			// -----------------------------------------------------------------
			case DIALOG_JERRICAN_FILL_CAR:
			{
				new vehicleid = GetPVarInt(playerid, "jerrican_fill_car");
				DeletePVar(playerid, "jerrican_fill_car");
				
				if(response && vehicleid)
				{
					new Float: x, Float: y, Float: z;
					GetVehiclePos(vehicleid, x, y, z);
					
					if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z)) 
					{
						if((GetVehicleData(vehicleid, V_FUEL) + 15.0) <= 150.0)
						{
							SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + 15.0);
							ApplyAnimation(playerid, "CRIB", "CRIB_Use_Switch", 4.0, 0, 0, 0, 0, 0, 0);							
						
							DeletePVar(playerid, "have_jerrican");
							
							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
							SendClientMessage(playerid, 0x66CC00FF, "“ранспорт заправлен");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ бензобак этого транспорта столько не поместитс€");						
					}
					else SendClientMessage(playerid, 0x999999FF, "¬ы находитесь слишком далеко от транспорта");
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_BIZ_BUY:
			{
				if(response)
				{
					new businessid = GetPVarInt(playerid, "buy_biz_id");
					
					if(IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z)))
					{
						if(!IsBusinessOwned(businessid))
						{
							if(GetPlayerMoneyEx(playerid) >= GetBusinessData(businessid, B_PRICE))
							{
								SendClientMessage(playerid, 0xFFFFFFFF, "ѕоздравл€ем! ¬ы купили бизнес");			
								BuyPlayerBusiness(playerid, businessid);
								
								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Ќовый бизнес", "{FFFFFF}¬ам нужно заплатить за аренду бизнеса в ближайшем отделением банка {FFCD00}(/gps)", "ќк", "");
							}	
							else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас недостаточно денег дл€ покупки этого бизнеса");
						}
						else
						{
							new fmt_str[64];
							
							format(fmt_str, sizeof fmt_str, "Ётот бизнес уже куплен. ¬ладелец: %s", GetBusinessData(businessid, B_OWNER_NAME));
							SendClientMessage(playerid, 0xCECECEFF, fmt_str);
						}	
					}
				}
				DeletePVar(playerid, "buy_biz_id");
			}
			case DIALOG_BIZ_INFO:
			{
				if(response)
				{
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_PARAMS:
			{
				if(response)
				{
					ShowPlayerBusinessDialog(playerid, listitem + 1);
				}
				else cmd::business(playerid, "");
			}
			case DIALOG_BIZ_ENTER_PRICE:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(strlen(inputtext))
						{
							if((0 <= price <= 5000) && IsNumeric(inputtext))
							{
								new query[64 + 1];
								SetBusinessData(businessid, B_ENTER_PRICE, price);
								
								format(query, sizeof query, "UPDATE business SET enter_price=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_ENTER_PRICE), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);

								UpdateBusinessLabel(businessid);
								SendClientMessage(playerid, 0x66CC00FF, "÷ена за вход в бизнес изменена");
								
								return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "ѕредел цены от 0 до 5000 рублей");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ведите цену за вход в ¬аш бизнес");
						
						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_ENTER_PRICE);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_PROD_PRICE:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new price = strval(inputtext);
						if(strlen(inputtext) && IsNumeric(inputtext))
						{
							if(25 <= price <= 200)
							{
								new query[64 + 1];
								SetBusinessData(businessid, B_PROD_PRICE, price);
								
								format(query, sizeof query, "UPDATE business SET prod_price=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, query, false);
								
								SendClientMessage(playerid, 0x66CC00FF, "—тоимость продукта изменена");
								return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
							}
							else SendClientMessage(playerid, 0xCECECEFF, "”кажите стоимость от 25 до 200 рублей");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ведите стоимость продукта");
						
						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ORDER_PRODS:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(GetBusinessData(businessid, B_ORDER_ID) != -1)
						{
							SendClientMessage(playerid, 0x999999FF, "«аказ дл€ ¬ашего предпри€тии уже оформлен");
							return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
						}
						
						if(GetBusinessData(businessid, B_PROD_PRICE) > 0)
						{
							new order_prods = strval(inputtext);
							new prod_price = GetBusinessData(businessid, B_PROD_PRICE);
							new price = order_prods * prod_price;
							
							if(order_prods > 0 && IsNumeric(inputtext))
							{
								new fmt_str[256];
								if(order_prods <= GetBusinessMaxProd(businessid))
								{
									if(GetBusinessData(businessid, B_BALANCE) >= price)
									{
										new order_id = CreateOrder(ORDER_TYPE_BUSINESS, businessid, order_prods, prod_price);
										if(order_id != -1)
										{
											AddBusinessData(businessid, B_BALANCE, -, price);
							
											format(fmt_str, sizeof fmt_str, "~w~business bank~n~~r~-%d rub", price);
											GameTextForPlayer(playerid, fmt_str, 4000, 1);
											
											format(fmt_str, sizeof fmt_str, "UPDATE business SET balance=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_SQL_ID));
											mysql_query(mysql, fmt_str, false);
											
											new year, month, day;
											timestamp_to_date(GetOrderData(order_id, O_TIME), year, month, day);
											
											format
											(
												fmt_str, sizeof fmt_str,
												"{FFFFFF}ѕараметры заказа:\n\n"\
												" оличество продуктов:\t\t%d шт.\n"\
												"—тоимость 1 продутка:\t\t%d руб\n"\
												"ќбща€ стоимость заказа:\t\t%d руб\n"\
												"ƒата оформлени€ заказа:\t\t%02d-%02d-%d\n\n"\
												"ƒанные были переданы службе развозчиков продуктов\n"\
												"ќжидайте выполнени€ ¬ашего заказа", 
												order_prods,
												prod_price,
												price,
												day, month, year
											);
											Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{99CC00}«аказ оформлен", fmt_str, "«акрыть", "");
										}
										else SendClientMessage(playerid, 0x999999FF, "¬ данный момент ¬ы не можете оформить заказ");
										
										return 1;
									}
									else 
									{
										format(fmt_str, sizeof fmt_str, "„тобы оплатить заказ необходимо иметь %d руб на счету бизнеса", price);
										SendClientMessage(playerid, 0xFF6600FF, fmt_str);
									}
								}
								else 
								{
									format(fmt_str, sizeof fmt_str, "¬ы не можете заказать более %d продуктов", GetBusinessMaxProd(businessid));
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}
							}
						}
						else 
						{
							SendClientMessage(playerid, 0xFF6600FF, "ѕеред тем как оформить заказ, установите стоимость продукта");
							return ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_PRICE);
						}
						ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PROD_ORDER);
					}
					else ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_ORDER_CANCEL:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						new order_id = GetBusinessData(businessid, B_ORDER_ID);
						if(order_id != -1 && GetOrderData(order_id, O_SQL_ID) > 0)
						{
							if(!GetOrderData(order_id, O_USED))
							{
								new fmt_str[128];
								new return_money = GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE);
								
								DeleteOrder(order_id);
								AddBusinessData(businessid, B_BALANCE, +, return_money);
								
								format(fmt_str, sizeof fmt_str, "UPDATE business SET balance=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, fmt_str, false);
								
								format
								(
									fmt_str, sizeof fmt_str,
									"{FFFFFF}¬ы отменили заказ продуктов\n"\
									"Ќа счет бизнеса было возвращено {00CC00}%d руб",
									return_money
								);
								Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF9900}ќтмена заказа", fmt_str, "«акрыть", "");
								
								format(fmt_str, sizeof fmt_str, "~w~business bank~n~~g~+%d rub", return_money);
								GameTextForPlayer(playerid, fmt_str, 4000, 1);
							
								return 1;
							}
							else SendClientMessage(playerid, 0xFF6600FF, "¬аш заказ выполн€етс€, его нельз€ отменить");
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_IMPROVEMENT:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_business_improvements - 1)
						{
							new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);
							new i_price = g_business_improvements[listitem][I_PRICE];
							
							if(i_level < listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Ётот уровень улучшений пока недоступен");
							}
							else if(i_level > listitem) 
							{
								SendClientMessage(playerid, 0xCECECEFF, "¬ы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];
								
								format(fmt_str, sizeof fmt_str, "ƒл€ покупки %d уровн€ улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else 
							{
								new fmt_str[128];
								
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, business b SET a.money=%d, b.improvements=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
								mysql_query(mysql, fmt_str, false);
								
								if(!mysql_errno())
								{
									new cur_max_prods = GetBusinessMaxProd(businessid);
									GivePlayerMoneyEx(playerid, -i_price, "ѕокупка улучшений дл€ Ѕизнеса", false, true);
								
									format(fmt_str, sizeof fmt_str, "¬ы улучшили свой бизнес до {FFCD00}%s {3399FF}уровн€", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);
									
									AddBusinessData(businessid, B_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1:
										{
											format(fmt_str, sizeof fmt_str, " оличество слотов дл€ продуктов увеличено с %d до %d", cur_max_prods, GetBusinessMaxProd(businessid));
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);
											
											SendClientMessage(playerid, 0x999999FF, "“еперь можно намного реже пополн€ть их запас");
										}
										case 2:
										{
											SendClientMessage(playerid, 0x66CC00FF, "“еперь ваши клиенты смогут пользоватьс€ услугами медпункта на территории бизнеса");
											SendClientMessage(playerid, 0x999999FF, "ƒоходы от этого будут перечисл€тьс€ на баланс предпри€ти€");	
										
											BusinessHealthPickupInit(businessid);
										}
										case 3:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Ѕлагодар€ пониженному налогу, вы будете платить за аренду помещени€ в 2 раза меньше");
											SendClientMessage(playerid, 0x999999FF, "Ѕлагодар€ этому, вы сможете получать большую прибыль");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "“еперь ваши клиенты будут слышать звук при входе в бизнес");
											SendClientMessage(playerid, 0x999999FF, "¬ы также можете помен€ть или выключить его командой {FF9900}/bizmusic");
										}
										case 5:
										{
											SendClientMessage(playerid, 0x66CC00FF, "¬ ¬ашем бизнесе был оборудован дополнительный склад продуктов повышенной вместимости");
										
											format(fmt_str, sizeof fmt_str, " оличество слотов дл€ продуктов увеличено с %d до %d", cur_max_prods, GetBusinessMaxProd(businessid));
											SendClientMessage(playerid, 0x999999FF, fmt_str);
										}
										case 6:
										{
											format(fmt_str, sizeof fmt_str, "INSERT INTO business_gps (bid,time) VALUES (%d,%d)", businessid, gettime());
											mysql_query(mysql, fmt_str, false);
										
											g_business_gps_init = false;
											
											SendClientMessage(playerid, 0x66CC00FF, "“еперь ¬аш бизнес можно будет найти в списке бизнесов {FF9900}(/gps > Ѕизнес)");
											SendClientMessage(playerid, 0x999999FF, "Ёто позволит привлечь дополнительных клиентов, тем самым повысить доходы предпри€ти€");	
										}
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 23)");
							}
						}
					}
					ShowPlayerBusinessDialog(playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case DIALOG_BIZ_SELL:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(GetBusinessData(businessid, B_ORDER_ID) != -1)
						{
							Dialog
							(
								playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
								"{FF6600}ѕродажа бизнеса",
								"{FFFFFF}ѕеред тем как продать бизнес государству\n"\
								"заказ продуктов нужно {FF3333}отменить",
								"«акрыть", ""
							);
						}
						else SellBusiness(playerid);
					}
				}
			}
			case DIALOG_BIZ_ENTER_MUSIC:
			{
				new businessid = GetPlayerBusiness(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_business_sound)
						{
							new query[64];
							format(query, sizeof query, "UPDATE business SET enter_music=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_ENTER_MUSIC), GetBusinessData(businessid, B_SQL_ID));
							mysql_query(mysql, query, false);
							
							if(listitem > 0)
								PlayerPlaySound(playerid, g_business_sound[listitem - 1], 0.0, 0.0, 0.0);
								
							SetBusinessData(businessid, B_ENTER_MUSIC, listitem);
							SendClientMessage(playerid, 0x66CC00FF, "«вук при входе в бизнес изменен");						
						}
					}
				}
			}
			case DIALOG_BIZ_ENTER:
			{
				new businessid = GetPVarInt(playerid, "biz_enter") - 1;
				DeletePVar(playerid, "biz_enter");
				
				if(response && GetPlayerInBiz(playerid) == -1)
				{
					if(businessid != -1 && GetBusinessData(businessid, B_ENTER_PRICE) > 0)
					{
						if(IsBusinessOwned(businessid))
						{
							if(IsPlayerInRangeOfPoint(playerid, 5.0, GetBusinessData(businessid, B_POS_X), GetBusinessData(businessid, B_POS_Y), GetBusinessData(businessid, B_POS_Z))) 
							{
								new price = GetBusinessData(businessid, B_ENTER_PRICE);
								new take_prods = GetBusinessEnterProdCount(businessid);
								
								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[150];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
								
									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
										}
										
										SetPlayerUseListitem(playerid, businessid);
										GivePlayerMoneyEx(playerid, -price, "ќплата за вход в бизнес", false, true);
									
										EnterPlayerToBiz(playerid, businessid);
									
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 22)");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас недостаточно денег дл€ входа");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CAR_MARKET:
			{
				if(!response) return 1;
				
				if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
					return GameTextForPlayer(playerid, "~n~~n~~n~~g~~h~BCE CЗOTС ГЗХ TPAHCМOPTA ИAHХTС~n~~y~~h~YBEЗЕНЕTТ: /mn > ГOМOЗHЕTEЗТHO", 4000, 5);
				
				new biz_id = GetPlayerInBiz(playerid);
				new car_market_id = biz_id - 33;
				
				if(biz_id == -1 || GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET || GetPlayerData(playerid, P_BUY_CAR) != INVALID_VEHICLE_ID) return 1;
				
				buy_car_select_car[playerid] =
				buy_car_select_color_type[playerid] = 0;
				
				buy_car_select_color[playerid][0] =
				buy_car_select_color[playerid][1] = 1;
				
				SetPlayerVirtualWorld(playerid, playerid + 1);
				SetPlayerPos(playerid, 149.4721, -83.7604, 1005.8106);
				TogglePlayerControllable(playerid, false);

				SetPlayerData(playerid, P_BUY_CAR, CreateVehicle(car_market_data[car_market_id][0][0], 147.7250, -82.9883, 1001.8265, 180.0, 1, 1, 5));

				SetVehicleVirtualWorld(GetPlayerData(playerid, P_BUY_CAR), playerid + 1);
				LinkVehicleToInterior(GetPlayerData(playerid, P_BUY_CAR), 5);
				
				SetPlayerCameraPos(playerid, 150.024200, -86.989334, 1003.224487);
				SetPlayerCameraLookAt(playerid, 147.971115, -82.769119, 1001.499755);
				
				ShowPlayerSelectPanel(playerid, SELECT_PANEL_TYPE_CAR_MARKET);
				BuyCarTDsShowForPlayer(playerid);
				CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
				SelectTextDraw(playerid, 0x00FF00FF);
			
				return 1;
			}

			case DIALOG_BIZ_CAR_MARKET_BUY_CAR:
			{
				if(!response || GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;
				
				new biz_id = GetPlayerInBiz(playerid);
				new car_market_id = biz_id - 33;
				if(GetBusinessData(biz_id, B_TYPE) != BUSINESS_TYPE_CAR_MARKET) return 1;
				
				BuyOwnableCar(playerid, car_market_id, buy_car_select_car[playerid], buy_car_select_color[playerid][0], buy_car_select_color[playerid][1]);
				
				return 1;
			}
			
			case DIALOG_BIZ_CAR_MARKET_CAR_INFO:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new car_market_id = GetVehicleCarMarketID(vehicleid);
				
				if(response && 0 <= car_market_id <= 3) 
				{
					BuyOwnableCar(playerid, car_market_id, GetVehicleModel(vehicleid) + 1000, -1, -1);
				}
			
				TogglePlayerControllable(playerid, true);
				RemovePlayerFromVehicle(playerid);
				return 1;
			}
			case DIALOG_BIZ_SHOP_24_7:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(response)
					{
						if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
						{
							new price;
							new take_prods;
							
							switch(listitem + 1)
							{
								case 1:
								{
									price = 170;
									take_prods = 2;
									
									if(!GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];
											
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)-price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);
											
											if(!mysql_errno())
											{	
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}
												
												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);
											
												GivePlayerMoneyEx(playerid, -price, "ѕокупка телефона", false, true);
												SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);
												
												SendClientMessage(playerid, 0x66CC00FF, "»спользуйте {0099FF}/c(/call) или /call [номер телефона] {66CC00}чтобы сделать звонок.");
												SendClientMessage(playerid, 0x66CC00FF, "ƒл€ отправки SMS сообщени€ используйте {0099FF}/sms{66CC00}. ƒругие команды: {0099FF}/menu > —писок команд > ќбщение");
												
												format
												(
													query, sizeof query, 
													"{FFFFFF}ѕоздравл€ем!\n"\
													"¬ы купили мобильный телефон. ¬аш номер: {0099FF}%d",
													GetPlayerPhone(playerid)
												);
												Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}ѕокупка мобильного телефона", query, "«акрыть", "");												
											}
											else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 25)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "ћобильный телефон стоит 170 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "” ¬ас уже есть мобильный телефон");
								}
								case 2:
								{
									price = 450;
									if(GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
												"{66CC00}»зменение номера",
												"{FFFFFF}¬ведите новый номер в поле ниже\n\n"\
												"{FF6633}ѕримечани€:\n"\
												"{FFCD00}- Ќомер должен быть шестизначным,\n"\
												"например: 284411\n"\
												"- Ќомер не должен начинатьс€ с 0\n\n"\
												"{FFFFFF}¬ы также можете вернуть свой\n"\
												"стандартный номер. ƒл€ этого\n"\
												"введите в поле {3399FF}цифру 0",
												"—менить", "ќтмена"
											);																					
										}
										else SendClientMessage(playerid, 0xCECECEFF, "ƒл€ изменение номера телефона необходимо 450 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "—начала нужно приобрести мобильный телефон");
								}
								case 3:
								{
									price = 200;
									if(GetPlayerPhone(playerid))
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											Dialog
											(
												playerid, DIALOG_BIZ_CHANGE_PHONE_COLOR, DIALOG_STYLE_LIST,
												"{66CC00}»зменение цвета телефона",
												"1.  арамельный\n"\
												"2. —иний\n"\
												"3. ќранжевый\n"\
												"4. —еребристый\n"\
												"5. –озовый\n"\
												"6.  расный\n"\
												"7. «еленый\n"\
												"8. “емно-синий\n"\
												"9. ∆елтый\n"\
												"10. Ѕелый",
												"ѕомен€ть", "ќтмена"
											);
										}
										else SendClientMessage(playerid, 0xCECECEFF, "ƒл€ изменение цвета телефона необходимо 200 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "—начала нужно приобрести мобильный телефон");
								}
								case 4:
								{
									price = 300;
									take_prods = 2;
									
									if(GetPlayerData(playerid, P_MED_CHEST) < 2)
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];
											
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);
											
											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}
												
												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);
											
												GivePlayerMoneyEx(playerid, -price, "ѕокупка аптечки", false, true);
											
												AddPlayerData(playerid, P_MED_CHEST, +, 2);
												SendClientMessage(playerid, 0x66CC00FF, "¬ы купили набор аптечек. »спользуйте {3399FF}/healme {66CC00}дл€ их использовани€");
												
												format(query, sizeof query, "“екущее количество аптечек: %d", GetPlayerData(playerid, P_MED_CHEST));
												SendClientMessage(playerid, 0xDD90FFFF, query);												
											}
											else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 28)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "Ќабор аптечек стоит 300 рублей");
									}
									else SendClientMessage(playerid, 0x999999FF, "¬ы не можете купить больше аптечек");
								}
								case 5:
								{
									price = 200;
									take_prods = 2;

									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);
										
										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}
											
											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);
											
											GivePlayerMoneyEx(playerid, -price, "ѕокупка фотоаппарата", false, true);
											
											GivePlayerWeapon(playerid, 43, 15);
											SendClientMessage(playerid, 0x66CC00FF, "¬ы купили фотоаппарат на 15 снимков");												
										}
										else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 29)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ќабор фотографа стоит 200 рублей");
								}
								case 6:
								{
									price = 150;
									take_prods = 1;
									
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);
										
										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}
											
											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);
											
											GivePlayerMoneyEx(playerid, -price, "ѕокупка букета цветов", false, true);
											GivePlayerWeapon(playerid, WEAPON_FLOWER, 1);
											
											SendClientMessage(playerid, 0x66CC00FF, "¬ы купили букет цветов");
											SendClientMessage(playerid, 0x66CC00FF, "»спользуйте {FFCD00}/present {66CC00}чтобы подарить их кому нибудь");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 30)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ѕукет стоит 150 рублей");
								}
								case 7:
								{
									price = 600;
									take_prods = 2;
									
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);
										
										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}
											
											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);
											
											GivePlayerMoneyEx(playerid, -price, "ѕокупка трости", false, true);
											GivePlayerWeapon(playerid, WEAPON_CANE, 1);
											
											SendClientMessage(playerid, 0x66CC00FF, "¬ы купили трость");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 31)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "“рость стоит 600 рублей");
								}
								case 8:
								{
									price = 800;
									take_prods = 5;
									
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);
										
										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}
											
											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);
											
											GivePlayerMoneyEx(playerid, -price, "ѕокупка парашюта", false, true);
											GivePlayerWeapon(playerid, WEAPON_PARACHUTE, 1);
											
											SendClientMessage(playerid, 0x66CC00FF, "¬ы купили парашют");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 31)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "ѕарашют стоит 800 рублей");
								}
								case 9:
								{
									price = 400;
									take_prods = 2;
									
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										new query[175];
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);
										
										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}
											
											mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, query, false);
											
											GivePlayerMoneyEx(playerid, -price, "ѕокупка лотерейного билета", false, true);
											SetPlayerData(playerid, P_LOTTERY, random(900) + 100);
											
											CallLocalFunction("ShowPlayerLotteryDialog", "i", playerid);
											SendClientMessage(playerid, 0x66CC00FF, "¬ы купили лотерейный билет");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 32)");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "Ћотерейный билет стоит 400 рублей");
								}
								case 10:
								{
									price = 110;
									take_prods = 1;
									
									if(!GetPlayerData(playerid, P_MASK)) 
									{
										if(GetPlayerMoneyEx(playerid) >= price)
										{
											new query[175];
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
											}
											else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
											mysql_query(mysql, query, false);
											
											if(!mysql_errno())
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													AddBusinessData(businessid, B_PRODS, -, take_prods);
													AddBusinessData(businessid, B_BALANCE, +, price);
												}
												
												mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
												mysql_query(mysql, query, false);
												
												GivePlayerMoneyEx(playerid, -price, "ѕокупка маски", false, true);
												SetPlayerData(playerid, P_MASK, 1);
												
												SendClientMessage(playerid, 0x66CC00FF, "¬ы купили маску");
												SendClientMessage(playerid, 0x66CC00FF, "»спользуйте {FFCD00}/mask {66CC00}дл€ скрыти€ ¬ашего расположени€ на карте (на 10 минут)");
											}
											else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 33)");
										}
										else SendClientMessage(playerid, 0xCECECEFF, "ћаска стоит 110 рублей");					
									}
									else SendClientMessage(playerid, 0x999999FF, "¬ы уже приобрели маску");
								}
								default:
									return 1;
							}
						}
					}				
				}
			}
			case DIALOG_BIZ_CHANGE_PHONE_NUMBER:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
					{
						if(response)
						{
							new buffer = strlen(inputtext);
							if((1 <= buffer <= 10) && IsNumeric(inputtext))
							{
								new fmt_str[175];
								new number = strval(inputtext);
								
								new price = 450;
								new take_prods = 3;
								
								if(number > 0)
								{
									if(inputtext[0] != '0' && buffer == 6)
									{
										new Cache: result;
										buffer = 0;
										
										format(fmt_str, sizeof fmt_str, "SELECT id FROM accounts WHERE phone=%d LIMIT 1", number);
										result = mysql_query(mysql, fmt_str, true);
										
										buffer = cache_num_rows();
										cache_delete(result);

										if(!buffer)
										{
											if(GetPlayerMoneyEx(playerid) >= price)
											{
												if(GetBusinessData(businessid, B_PRODS) >= take_prods)
												{
													format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, number, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
												}
												else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, number, GetPlayerAccountID(playerid));
												mysql_query(mysql, fmt_str, false);
												
												if(!mysql_errno())
												{
													if(GetBusinessData(businessid, B_PRODS) >= take_prods)
													{
														AddBusinessData(businessid, B_PRODS, -, take_prods);
														AddBusinessData(businessid, B_BALANCE, +, price);
													}
													
													mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
													mysql_query(mysql, fmt_str, false);
													
													GivePlayerMoneyEx(playerid, -price, "—мена номера телефона[1]", false, true);
													SetPlayerData(playerid, P_PHONE, number);
													
													format
													(
														fmt_str, sizeof fmt_str, 
														"{FFFFFF}Ќомер телефона изменен\n"\
														"“еперь с ¬ами  можно св€затьс€ по номеру {0099FF}%d", 
														GetPlayerPhone(playerid)
													);
													return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Ќомер изменен", fmt_str, "«акрыть", "");
												}
												else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 26)");	
											}
											else 
											{
												return SendClientMessage(playerid, 0xCECECEFF, "Ќедостаточно денег");
											}
										}
										else SendClientMessage(playerid, 0xFF6600FF, "¬веденный ¬ами номер уже зан€т");
									}
									else SendClientMessage(playerid, 0xFF6600FF, "Ќомер введен некорректно. ѕовторите попытку");
								}
								else 
								{
									if(GetPlayerMoneyEx(playerid) >= price)
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											format(fmt_str, sizeof fmt_str, "UPDATE accounts a,business b SET a.money=%d,a.phone=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
										}
										else format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,phone=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid) + 1000000, GetPlayerAccountID(playerid));
										mysql_query(mysql, fmt_str, false);
									
										if(!mysql_errno())
										{
											if(GetBusinessData(businessid, B_PRODS) >= take_prods)
											{
												AddBusinessData(businessid, B_PRODS, -, take_prods);
												AddBusinessData(businessid, B_BALANCE, +, price);
											}
										
											mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
											mysql_query(mysql, fmt_str, false);
											
											GivePlayerMoneyEx(playerid, -price, "—мена номера телефона[2]", false, true);
											SetPlayerData(playerid, P_PHONE, GetPlayerAccountID(playerid) + 1000000);
											
											format(fmt_str, sizeof fmt_str, "{FFFFFF}”становлен ¬аш стандартный номер: {0099FF}%d", GetPlayerPhone(playerid));
											return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{66CC00}Ќомер изменен", fmt_str, "«акрыть", "");
										}
										else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 26)");						
									}
									else 
									{
										return SendClientMessage(playerid, 0xCECECEFF, "Ќедостаточно денег");
									}
								}
							}
						
							Dialog
							(
								playerid, DIALOG_BIZ_CHANGE_PHONE_NUMBER, DIALOG_STYLE_INPUT,
								"{66CC00}»зменение номера",
								"{FFFFFF}¬ведите новый номер в поле ниже\n\n"\
								"{FF6633}ѕримечани€:\n"\
								"{FFCD00}- Ќомер должен быть шестизначным,\n"\
								"например: 284411\n"\
								"- Ќомер не должен начинатьс€ с 0\n\n"\
								"{FFFFFF}¬ы также можете вернуть свой\n"\
								"стандартный номер. ƒл€ этого\n"\
								"введите в поле {3399FF}цифру 0",
								"—менить", "ќтмена"
							);
						}
						else cmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_CHANGE_PHONE_COLOR:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
					{
						if(response)
						{
							if(0 <= listitem <= 9)
							{
								new price = 200;
								new take_prods = 1;
								
								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[185];
									
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,a.phone_color=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, listitem, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d,phone_color=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-price, listitem, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
									
									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
										}
										
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									
										GivePlayerMoneyEx(playerid, -price, "—мена цвета телефона", false, true);
										
										SetPlayerData(playerid, P_PHONE_COLOR, listitem);
										SendClientMessage(playerid, 0x3399FFFF, "¬ы изменили цвет своего мобильного телефона");
									}
									else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 27)");						
								}
								else SendClientMessage(playerid, 0xCECECEFF, "ƒл€ изменение цвета телефона необходимо 200 рублей");
							}
						}
						else cmd::buy(playerid, "");
					}
				}
			}
			case DIALOG_BIZ_LOTTERY:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
					{
						if(response)
						{
							if(strlen(inputtext))
							{
								new number = strval(inputtext);
								if(100 <= number <= 999 && IsNumeric(inputtext))
								{
									new fmt_str[64];
									SetPlayerData(playerid, P_LOTTERY, number);
									
									format(fmt_str, sizeof fmt_str, "—частливое число изменено на {00CCCC}%d", number);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);
								}
								else SendClientMessage(playerid, 0xFF6600FF, "—частливое число не было изменено, т.к. было введено неверно");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_CLUB:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CLUB, 15.0))
					{
						if(response)
						{
							if(0 <= listitem <= 9)
							{
								new const
									item_price[10] = {60, 100, 200, 270, 300, 450, 630, 750, 50, 80};
								
								if(GetPlayerMoneyEx(playerid) >= item_price[listitem])
								{
									new query[150];
									new take_prods = 1;
									
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-item_price[listitem], GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+item_price[listitem], GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)-item_price[listitem], GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
								
									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, item_price[listitem]);
										}
										GivePlayerMoneyEx(playerid, -item_price[listitem], "ѕокупка в клубе", false, true);
										GivePlayerDrinkItem(playerid, listitem);
									
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), item_price[listitem], IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
										
										switch(listitem+1)
										{
											case 1: Action(playerid, "купил(а) банку лимонада", 	15.0, false);
											case 2: Action(playerid, "купил(а) бутылку пива", 		15.0, false);
											case 3: Action(playerid, "купил(а) бутылку вина", 		15.0, false);
											case 4: Action(playerid, "купил(а) бутылку шампанского",15.0, false);
											case 5: Action(playerid, "купил(а) бутылку водки", 		15.0, false);
											case 6: Action(playerid, "купил(а) бутылку конь€ка",	15.0, false);		
											case 7: Action(playerid, "купил(а) бутылку виски", 		15.0, false);
											case 8: Action(playerid, "купил(а) бутылку абсента", 	15.0, false);	
											case 9: Action(playerid, "купил(а) закуску", 			15.0, false);
											case 10:Action(playerid, "купил(а) сигару", 			15.0, false);
										}
									}
									else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 22)");
								}
								else SendClientMessage(playerid, 0x999999FF, "” ¬ас не хватает денег");
							}	
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_BIZ_LIST:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_BIZ, 15.0))
					{
						if(response)
						{
							if(0 <= listitem <= MAX_BUSINESS-1)
							{
								new price = 70; //
								
								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new fmt_str[300];
									GivePlayerMoneyEx(playerid, -price, "ѕросмотр инфо о бизнесе (управление статистики)", true, true);
									
									businessid = g_business_realtor_list_idx[listitem];
									SetPlayerUseListitem(playerid, businessid);

									format
									(
										fmt_str, sizeof fmt_str, 
										"{FFFFFF}Ќазвание:\t\t\t%s\n"\
										"Ќомер бизнеса:\t\t%d\n"\
										"√ород / область:\t\t%s\n"\
										"–айон:\t\t\t\t%s\n"\
										"—тоимость:\t\t\t%d\n\n"\
										"{FFFFFF}¬ы также можете посмотреть фотографию бизнеса.\n"\
										"ƒл€ этого нажмите кнопку \"‘ото\". {FFCD00}”слуга стоит 290 руб",
										GetBusinessData(businessid, B_NAME),
										businessid, 
										GetCityName(GetBusinessData(businessid, B_CITY)),
										GetZoneName(GetBusinessData(businessid, B_ZONE)),
										GetBusinessData(businessid, B_PRICE)
									);
									Dialog(playerid, DIALOG_BIZ_REALTOR_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{CC9900}»нформаци€ о выбранном бизнесе", fmt_str, "‘ото", "«акрыть");
								}
								else SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег");
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_BIZ_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_BIZ, 15.0))
					{
						if(response)
						{
							new price = 290; //
							
							businessid = GetPlayerUseListitem(playerid);
							if(GetPlayerMoneyEx(playerid) >= price)
							{
								GivePlayerMoneyEx(playerid, -price, "ѕросмотр фото бизнеса (управление статистики)", true, true);
								
								TogglePlayerSpectating(playerid, true);
								ShowPlayerWaitPanel(playerid);
							
								SetPlayerVirtualWorld(playerid, playerid + 50);
								SendClientMessage(playerid, 0xFFFFFFFF, "»спользуйте {99CC00}~k~~PED_SPRINT~ {FFFFFF}дл€ выхода");
								
								SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_BIZ);
								SetTimerEx("SetRealtorMakePhoto", 1000, false, "iii", playerid, REALTOR_TYPE_BIZ, businessid);
							}
							else SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег");						
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_HOME_GET:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_HOME, 15.0))
					{
						if(response)
						{
							new price = 50;
							new houseid = strval(inputtext);
							
							if(strlen(inputtext) && IsNumeric(inputtext) && (0 <= houseid <= g_house_loaded-1))
							{
								if(GetPlayerMoneyEx(playerid) >= price)
								{
									GivePlayerMoneyEx(playerid, -price, "ѕросмотр инфо о доме (риелторское агенство)", true, true);
								
									new fmt_str[512];
									new type = GetHouseData(houseid, H_TYPE);
									new entranceid = GetHouseData(houseid, H_ENTRACE);
									
									SetPlayerUseListitem(playerid, houseid);
									if(entranceid != -1)
									{
										format
										(
											fmt_str, sizeof fmt_str, 
											"{FFFFFF}“ип / название:\t\t%s\n"\
											"Ќомер квартиры:\t\t%d\n"\
											"Ќомер подъезда:\t\t%d\n"\
											"√ород / область:\t\t%s\n"\
											"–айон:\t\t\t\t%s\n"\
											"—тоимость:\t\t\t%d\n"\
											" оличество комнат:\t\t%d\n"\
											"—татус:\t\t\t\t%s\n\n"\
											"{FFFFFF}¬ы можете посмотреть как выгл€дит подъезд этой квартиры\n"\
											"ƒл€ этого нажмите кнопку \"‘ото\". {FFCD00}”слуга стоит 250 рублей",
											GetHouseData(houseid, H_NAME),
											GetHouseData(houseid, H_FLAT_ID) + 1, 
											entranceid + 1,
											GetCityName(GetEntranceData(entranceid, E_CITY)),
											GetZoneName(GetEntranceData(entranceid, E_ZONE)),
											GetHouseData(houseid, H_PRICE),
											GetHouseTypeInfo(type, HT_ROOMS),
											IsHouseOwned(houseid) ? ("{FF6600} вартира зан€та") : ("{00CC33} вартира свободна")
										);
									}
									else 
									{
										format
										(
											fmt_str, sizeof fmt_str, 
											"{FFFFFF}“ип / название:\t\t%s\n"\
											"Ќомер дома:\t\t\t%d\n"\
											"√ород / область:\t\t%s\n"\
											"–айон:\t\t\t\t%s\n"\
											"—тоимость:\t\t\t%d\n"\
											" оличество комнат:\t\t%d\n"\
											"—татус:\t\t\t\t%s\n\n"\
											"{FFFFFF}¬ы также можете посмотреть как выгл€дит этот дом снаружи.\n"\
											"ƒл€ этого нажмите кнопку \"‘ото\". {FFCD00}”слуга стоит 250 рублей",
											GetHouseData(houseid, H_NAME),
											houseid, 
											GetCityName(GetHouseData(houseid, H_CITY)),
											GetZoneName(GetHouseData(houseid, H_ZONE)),
											GetHouseData(houseid, H_PRICE),
											GetHouseTypeInfo(type, HT_ROOMS),
											IsHouseOwned(houseid) ? ("{FF6600}ƒом зан€т") : ("{00CC33}ƒом свободен")
										);
									}
									Dialog(playerid, DIALOG_BIZ_REALTOR_HOME_INFO, DIALOG_STYLE_MSGBOX, "{FF9933}»нформаци€ о выбранном доме", fmt_str, "‘ото", "Ќазад");
								}
								else SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег");
							}
							else 
							{
								if(!(0 <= houseid <= g_house_loaded-1))
									SendClientMessage(playerid, 0xCECECEFF, "Ётот дом еще не построили");
								
								ShowPlayerRealtorHomeDialog(playerid);
							}
						}
					}
				}
			}
			case DIALOG_BIZ_REALTOR_HOME_INFO:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_REALTOR_HOME, 15.0))
					{
						if(response)
						{
							new price = 250; //

							if(GetPlayerMoneyEx(playerid) >= price)
							{
								GivePlayerMoneyEx(playerid, -price, "ѕросмотр фото дома (риелторское агенство)", true, true);
								
								TogglePlayerSpectating(playerid, true);
								ShowPlayerWaitPanel(playerid);
							
								SetPlayerVirtualWorld(playerid, playerid + 3000);
								SendClientMessage(playerid, 0xFFFFFFFF, "»спользуйте {00CC99}~k~~PED_SPRINT~ {FFFFFF}дл€ выхода");
								
								SetPlayerData(playerid, P_REALTOR_TYPE, REALTOR_TYPE_HOUSE);
								SetTimerEx("SetRealtorMakePhoto", 1000, false, "iii", playerid, REALTOR_TYPE_HOUSE, GetPlayerUseListitem(playerid));
							}
							else SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег");		
						}
						else ShowPlayerRealtorHomeDialog(playerid);
					}
				}
			}
			case DIALOG_BIZ_CLOTHING_BUY:
			{
				new businessid = GetPlayerInBiz(playerid);
				if(businessid != -1)
				{
					if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_CLOTHING_SHOP, 50.0))
					{
						if(response)
						{
							new select_skin = GetPlayerSelectSkin(playerid);
							if(select_skin != -1)
							{
								new price = g_business_clothing_skins[GetPlayerSex(playerid)][select_skin][1];
								new skinid = g_business_clothing_skins[GetPlayerSex(playerid)][select_skin][0];
								
								new take_prods = random(8) + 6;
								new biz_price = price * 20 / 100;
								
								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[180];
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,business b SET a.skin=%d,a.money=%d,b.products=%d,b.balance=%d WHERE a.id=%d AND b.id=%d", skinid, GetPlayerMoneyEx(playerid)-price, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+biz_price, GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts SET skin=%d,money=%d WHERE id=%d LIMIT 1", skinid, GetPlayerMoneyEx(playerid)-price, GetPlayerAccountID(playerid));
									mysql_query(mysql, query, false);
								
									if(!mysql_errno())
									{
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, biz_price);
										}
										GivePlayerMoneyEx(playerid, -price, "ѕокупка скина (магазин одежды)", false, true);
										SetPlayerData(playerid, P_SKIN, skinid);
								
										ExitPlayerClothingShopPanel(playerid);
										SendClientMessage(playerid, 0x66CC00FF, "ѕоздравл€ем с покупкой новой одежды!");
	
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 36)");
								}
								else SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег");
							}
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_HOUSE_BUY:
			{
				new houseid = GetPlayerUseListitem(playerid);

				if(houseid >= 0 && response)
				{
					if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
					{
						if(GetPlayerHouse(playerid) == -1) 
						{
							if(IsPlayerInRangeOfHouse(playerid, houseid, 5.0))
							{
								if(!IsHouseOwned(houseid))
								{
									if(GetPlayerMoneyEx(playerid) >= GetHouseData(houseid, H_PRICE))
									{
										SendClientMessage(playerid, 0xFFFFFFFF, "ѕоздравл€ем! ¬ы приобрели дом");
										BuyPlayerHouse(playerid, houseid);
										
										EnterPlayerToHouse(playerid, houseid);
										PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
										
										GameTextForPlayer(playerid, "~b~welcome ~g~to~n~~y~new ~w~home!", 4000, 1);
										Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}Ќовый дом", "{FFFFFF}¬ам нужно заплатить за дом в ближайшем отделением банка {FFCD00}(/gps)", "ќк", "");
									}
									else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас недостаточно денег дл€ покупки этого дома");
								}
								else
								{
									new fmt_str[64];
									
									format(fmt_str, sizeof fmt_str, "Ётот дом уже куплен. ¬ладелец: %s", GetHouseData(houseid, H_OWNER_NAME));
									SendClientMessage(playerid, 0xCECECEFF, fmt_str);
								}	
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас уже есть дом. „тобы купить новый - необходимо продать старый");				
					}
					else SendClientMessage(playerid, 0xCECECEFF, "¬ы снимаете номер в гостинице. Ќужно выселитьс€ перед покупкой дома");
				}
			}
			case DIALOG_HOUSE_SELL:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						SellHouse(playerid);
					}
				}
			}
			case DIALOG_HOUSE_INFO:
			{
				if(response)
				{
					new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
					if(houseid != -1)
					{
						ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
					}
				}
			}
			case DIALOG_HOUSE_PARAMS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						ShowPlayerHouseDialog(playerid, listitem + 1);
					}
					else cmd::home(playerid, "");
				}
			}
			case DIALOG_HOUSE_IMPROVEMENTS:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(0 <= listitem <= sizeof g_house_improvements - 1)
						{
							new i_level = GetHouseData(houseid, H_IMPROVEMENTS);
							new i_price = g_house_improvements[listitem][I_PRICE];
							
							if(i_level >= sizeof g_house_improvements)
							{
								SendClientMessage(playerid, 0x999999FF, "¬ы уже приобрели все доступные улучшени€ дл€ дома");
							}
							else if(i_level < listitem)
							{
								SendClientMessage(playerid, 0xCECECEFF, "Ётот уровень улучшений пока недоступен");
							}
							else if(i_level > listitem) 
							{
								SendClientMessage(playerid, 0xCECECEFF, "¬ы уже купили этот уровень улучшений");
							}
							else if(GetPlayerMoneyEx(playerid) < i_price)
							{
								new fmt_str[64];
								
								format(fmt_str, sizeof fmt_str, "ƒл€ покупки %d уровн€ улучшений необходимо %d рублей", listitem + 1, i_price);
								SendClientMessage(playerid, 0xCECECEFF, fmt_str);
							}
							else 
							{
								new fmt_str[128];
								
								format(fmt_str, sizeof fmt_str, "UPDATE accounts a, houses h SET a.money=%d, h.improvements=%d WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-i_price, i_level + 1, GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
								mysql_query(mysql, fmt_str, false);
								
								if(!mysql_errno())
								{
									GivePlayerMoneyEx(playerid, -i_price, "ѕокупка улучшений дл€ дома", false, true);
								
									format(fmt_str, sizeof fmt_str, "¬ы улучшили свой дом до {FFCD00}%s {3399FF}уровн€", GetNumericName(listitem + 1));
									SendClientMessage(playerid, 0x3399FFFF, fmt_str);
									
									AddHouseData(houseid, H_IMPROVEMENTS, +, 1);
									switch(listitem + 1)
									{
										case 1:
										{
											SendClientMessage(playerid, 0x66CC00FF, "“еперь чтобы выйти из дома достаточно нажать {FF9900}~k~~SNEAK_ABOUT~{66CC00}, сто€ у двери");
											SendClientMessage(playerid, 0x999999FF, "јвтоматические двери облегчат жизнь в ¬ашем доме");
										}
										case 2:
										{
											SendClientMessage(playerid, 0x66CC00FF, "“еперь в доме всегда будет доступна аптечка");
											SendClientMessage(playerid, 0x999999FF, "¬ы и ваши гости в любой момент можете использовать ее");
										
											HouseHealthInit(houseid);
										}
										case 3:
										{
											SendClientMessage(playerid, 0x66CC00FF, "¬ы можете разрешить люд€м проживать в ¬ашем доме с помощью команды {FF9900}/live");
											SendClientMessage(playerid, 0x999999FF, "¬ доме могут разместитьс€ столько гостей, сколько в нем комнат");
										}
										case 4:
										{
											SendClientMessage(playerid, 0x66CC00FF, "Ќа ¬аше им€ была оформлена субсиди€, котора€ дает право платить пониженную квартплату");
											SendClientMessage(playerid, 0x999999FF, "Ѕлагодар€ этому, ежедневна€ квартплата уменьшена в 2 раза");
										}
										case 5:
										{
											SendClientMessage(playerid, 0x66CC00FF, "»спользуйте {3399FF}/makestore {66CC00}дл€ размещени€ шкафа. ¬ нем можно будет хранить различные вещи");
											SendClientMessage(playerid, 0x999999FF, "¬ любой момент можно перенести шкаф на другое место. ƒл€ открыти€ шкафа напишите {3399FF}/use");
										
											HouseStoreInit(houseid);
										}
										/*
										case 6:
										{
											// сейф
										}
										case 7:
										{
											// сигнализаци€
										}
										*/
									}
								}
								else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 35)");
							}
						}
					}
					ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTERS:
			{	
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{	
						if(0 <= listitem <= MAX_HOUSE_ROOMS-1)
						{
							new room = GetPlayerListitemValue(playerid, listitem);
							ShowHouseRenterInfo(playerid, houseid, room);
						}
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTER_INFO:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{	
						new room = GetPlayerUseListitem(playerid);
						if(IsHouseRoomOwned(houseid, room))
						{
							switch(listitem + 1)
							{
								case 4:
								{
									new fmt_str[95];
									format
									(
										fmt_str, sizeof fmt_str, 
										"{FFFFFF}¬ы действительно хотите выселить {FFCD00}%s {FFFFFF}из своего дома?", 
										GetHouseRenterInfo(houseid, room, HR_OWNER_NAME)
									);
									return Dialog(playerid, DIALOG_HOUSE_RENTER_EVICT, DIALOG_STYLE_MSGBOX, "{33AACC}¬ыселение арендатора", fmt_str, "ƒа", "Ќет");
								}
							}
							ShowHouseRenterInfo(playerid, houseid, room);
						}
						else SendClientMessage(playerid, 0x999999FF, "¬ этой комнате уже никто не проживает");
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_RENTER_EVICT:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new room = GetPlayerUseListitem(playerid);
						if(IsHouseRoomOwned(houseid, room))
						{
							new fmt_str[64];
							
							format(fmt_str, sizeof fmt_str, "¬ы выселили %s из своего дома", GetHouseRenterInfo(houseid, room, HR_OWNER_NAME));
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);
							
							EvictHouseRenter(houseid, room, playerid);
						}
						else SendClientMessage(playerid, 0x999999FF, "¬ этой комнате уже никто не проживает");
					}
					else ShowPlayerHouseDialog(playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case DIALOG_HOUSE_EVICT:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						new roomid = GetPlayerData(playerid, P_HOUSE_ROOM);
						new owner_id = GetPlayerID(GetHouseData(houseid, H_OWNER_NAME));
						
						EvictHouseRenter(houseid, roomid, playerid);
						
						if(owner_id != INVALID_PLAYER_ID)
						{
							new fmt_str[45 + 1];
							
							format(fmt_str, sizeof fmt_str, "%s выселилс€ из ¬ашего дома", GetPlayerNameEx(playerid));
							SendClientMessage(owner_id, 0x66CC00FF, fmt_str);
						}
						SendClientMessage(playerid, 0x66CC00FF, "¬ы выселились из дома");
					}
				}
			}
			case DIALOG_HOUSE_MOVE_STORE:
			{
				new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
				if(houseid != -1)
				{
					if(response)
					{
						if(GetPlayerInHouse(playerid) == houseid)
						{
							if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
							{
								new type = GetHouseData(houseid, H_TYPE);
								if(IsPlayerInRangeOfPoint(playerid, 50.0, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
								{
									if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
									{
										new query[128];
										
										new Float: pos_x, Float: pos_y, Float: pos_z;
										GetPlayerPos(playerid, pos_x, pos_y, pos_z);
										
										SetHouseData(houseid, H_STORE_X, pos_x);
										SetHouseData(houseid, H_STORE_Y, pos_y);
										SetHouseData(houseid, H_STORE_Z, pos_z);
										
										DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
										SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);
										
										HouseStoreInit(houseid);
										
										format(query, sizeof query, "UPDATE houses SET store_x=%f,store_y=%f,store_z=%f WHERE id=%d LIMIT 1", pos_x, pos_y, pos_z, GetHouseData(houseid, H_SQL_ID));
										mysql_tquery(mysql, query, "", "");
									}
								}
							}
						}
					}
				}
			}
			
			case DIALOG_HOUSE_ENTER:
			{
				new houseid = GetPlayerUseListitem(playerid);
	
				if(houseid >= 0 && response)
				{
					if(GetPlayerInHouse(playerid) == -1)
					{
						if(!GetHouseData(houseid, H_LOCK_STATUS) || GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid)
						{
							EnterPlayerToHouse(playerid, houseid);
						}
						else GameTextForPlayer(playerid, "~r~Closed", 3000, 1);
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_ENTRANCE_LIFT:
			{
				if(response)
				{
					new entranceid = GetPlayerInEntrance(playerid);
					if(entranceid != -1)
					{
						new floor = GetPlayerInEntranceFloor(playerid);
						if(floor != -1)
						{
							if(0 <= listitem <= MAX_ENTRANCE_FLOORS-1)
							{
								new to_floor = GetPlayerListitemValue(playerid, listitem);
								if(!to_floor)
								{
									SetPlayerPosEx(playerid, 25.8020, 1403.7086, 1508.4100, 90.0, 1, entranceid + 2500);
								}
								else SetPlayerPosEx(playerid, 11.0535, 1373.1038, 1508.4100, 180.0, to_floor + 1, (entranceid * 100) + to_floor);
								
								SetPlayerInEntranceFloor(playerid, to_floor);
							}
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_HOTEL:
			{
				if(response)
				{
					new hotel_id = GetPlayerInHotelID(playerid);
					if(hotel_id != -1)
					{
						switch(listitem + 1)
						{
							case 1:
							{
								ShowPlayerHotelFloorsInfo(playerid, hotel_id);
							}
							case 2:
							{
								if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
								{
									new free_room = GetHotelFreeRoom(hotel_id);
									if(free_room != -1)
									{
										SetPlayerUseListitem(playerid, free_room);
										
										new fmt_str[128];
										format
										(
											fmt_str, sizeof fmt_str, 
											"{FFFFFF}ћы предлагаем ¬ам поселитьс€ в номере %d на %d этаже\n"\
											"–егистраци€ стоит 1000 рублей. ¬ы уверены?", 
											(free_room % 12) + 1,
											(free_room / 12) + 1
										);
										Dialog(playerid, DIALOG_HOTEL_REG_ROOM, DIALOG_STYLE_MSGBOX, "{66CC99}ѕодтверждение регистрации", fmt_str, "¬ыбрать", "Ќазад");
									}
									else
									{
										Dialog
										(
											playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX,
											"{66CC99}—вободные номера",
											"{FFFFFF}¬ этой гостинице нет свободных номеров", 
											"Ќазад", "«акрыть"
										);
									}
								}
								else 
								{
									Dialog
									(
										playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX,
										"{66CC99}–егистраци€",
										"{FFFFFF}¬ы уже снимаете номер в гостинице", 
										"Ќазад", "«акрыть"
									);
								}
							}
							case 3:
							{
								ShowPlayerHotelClientMenu(playerid, hotel_id);
							}
						}
					}
				}
			}
			case DIALOG_HOTEL_FLOOR_SELECT:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id != -1)
				{
					if(response)
					{
						ShowPlayerHotelFloorInfo(playerid, hotel_id, listitem);
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_FLOOR_INFO:
			{
				if(response)
				{
					ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_FLOOR_LIFT:
			{
				if(response)
				{
					new hotel_id = GetPlayerInHotelID(playerid);
					if(hotel_id != -1)
					{
						new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
						if(0 <= listitem <= max_floors-1)
						{
							new to_floor = GetPlayerListitemValue(playerid, listitem);
							
							if(!to_floor)
							{
								new businessid = GetPlayerInBiz(playerid);
								new type = GetBusinessData(businessid, B_INTERIOR);
				
								SetPlayerPosEx(playerid, 730.1479, 599.7930, 1002.9598, 89.9507, GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR), businessid + 255);
							}
							else SetPlayerPosEx(playerid, 1276.0446, -773.2361, 1202.7220, 360.0, to_floor, ((hotel_id + 1) * 200) + (to_floor + 1000));
							
							SetPlayerData(playerid, P_IN_HOTEL_FLOOR, to_floor);
						}
					}
				}	
			}
			case DIALOG_HOTEL_REG_ROOM:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id != -1)
				{
					if(response)
					{
						new room_id = GetPlayerUseListitem(playerid);
						new businessid = GetPlayerInBiz(playerid);
						
						if(GetPlayerHouse(playerid) == -1) 
						{
							if(!IsHotelRoomOwned(hotel_id, room_id))
							{
								new price = 1000;
								new take_prods = 2;
								
								if(GetPlayerMoneyEx(playerid) >= price)
								{
									new query[300];
									new time = gettime();
									new rent_time = (time - (time % 86400)) + 86400;
									
									if(GetBusinessData(businessid, B_PRODS) >= take_prods)
									{
										format(query, sizeof query, "UPDATE accounts a,hotels h,business b SET a.money=%d,a.house_type=%d,a.house_room=%d,a.house=%d,h.owner_id=%d,h.rent_time=%d,h.status=0,b.products=%d,b.balance=%d WHERE a.id=%d AND h.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOTEL, room_id, hotel_id, GetPlayerAccountID(playerid), rent_time, GetBusinessData(businessid, B_PRODS)-take_prods, GetBusinessData(businessid, B_BALANCE)+price, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID),GetBusinessData(businessid, B_SQL_ID));
									}
									else format(query, sizeof query, "UPDATE accounts a, hotels h SET a.money=%d,a.house_type=%d,a.house_room=%d,a.house=%d,h.owner_id=%d,h.rent_time=%d,h.status=0 WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOTEL, room_id, hotel_id, GetPlayerAccountID(playerid), rent_time, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
									mysql_query(mysql, query, false);
								
									if(!mysql_errno())
									{						
										if(GetBusinessData(businessid, B_PRODS) >= take_prods)
										{
											AddBusinessData(businessid, B_PRODS, -, take_prods);
											AddBusinessData(businessid, B_BALANCE, +, price);
										}
										SetPlayerData(playerid, P_HOUSE, hotel_id);
										SetPlayerData(playerid, P_HOUSE_ROOM, room_id);
										SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_HOTEL);
										
										SetHotelData(hotel_id, room_id, H_OWNER_ID, 	GetPlayerAccountID(playerid));
										SetHotelData(hotel_id, room_id, H_RENT_DATE, 	rent_time);
										SetHotelData(hotel_id, room_id, H_STATUS, 		false);
										
										format(g_hotel[hotel_id][room_id][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
										
										GivePlayerMoneyEx(playerid, -price, "ѕокупка номера в отеле", false, true);
										EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
										
										SendClientMessage(playerid, 0x3399FFFF, "¬ы сн€ли номер в гостинице");
										SendClientMessage(playerid, 0x66CC00FF, "ѕодсказка: оплатить проживание можно на первом этаже у регистрационной стойки");
										SendClientMessage(playerid, 0xFFFFFFFF, "Ќажмите {66CC99}~k~~SNEAK_ABOUT~ {FFFFFF}дл€ выхода из номера");
									
										mysql_format(mysql, query, sizeof query, "INSERT INTO business_profit (bid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetBusinessData(businessid, B_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), price, IsBusinessOwned(businessid));
										mysql_query(mysql, query, false);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 37)");
								}
								else SendClientMessage(playerid, 0x999999FF, "” ¬ас недостаточно денег чтобы сн€ть этот номер");
							}
							else SendClientMessage(playerid, 0xFF6600FF, "»звините, но этот номер уже зан€т");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас есть жилье. Ќужно продать его перед покупкой номера");
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_CLIENT_MENU:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						switch(listitem + 1)
						{
							case 1: // ќплатить проживание
							{
								ShowPlayerHotelRoomPayForRent(playerid);
							}
							case 2: // »нформаци€ о транспорте
							{
								new vehicleid = GetPlayerOwnableCar(playerid);
								if(vehicleid != INVALID_VEHICLE_ID)
								{
									new model_id = GetVehicleData(vehicleid, V_MODELID);
									if(model_id)
									{
										new fmt_str[64];
										new index = GetVehicleData(vehicleid, V_ACTION_ID);
										
										format(fmt_str, sizeof fmt_str, "ћодель: %s (номер модели %d)", GetVehicleName(vehicleid), model_id);
										SendClientMessage(playerid, 0x99FF66FF, fmt_str);

										if(!(GetOwnableCarData(index, OC_COLOR_1) == -1 || GetOwnableCarData(index, OC_COLOR_2) == -1))
										{
											format(fmt_str, sizeof fmt_str, "÷вет 1: ID %d   ÷вет 2: ID %d", GetOwnableCarData(index, OC_COLOR_1), GetOwnableCarData(index, OC_COLOR_2));
											SendClientMessage(playerid, 0x99FF66FF, fmt_str);
										}
										else SendClientMessage(playerid, 0x99FF66FF, "÷вета транспорта: случайные");

										format(fmt_str, sizeof fmt_str, "√ос. стоимость: %d руб", GetVehicleInfo(model_id - 400, VI_PRICE));
										SendClientMessage(playerid, 0x99FF66FF, fmt_str);								
									}
								}
								else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет личного транспорта");
							}
							case 3: // ќтметить транспорт на GPS
							{
								cmd::getmycar(playerid, "");
							}
							case 4: // ѕодогнать транспорт к отелю (1000 руб)
							{
								new vehicleid = GetPlayerOwnableCar(playerid);
								if(vehicleid != INVALID_VEHICLE_ID)
								{
									if(!SetVehicleToHotelRespawn(hotel_id, vehicleid))
									{
										SendClientMessage(playerid, 0xCECECEFF, "¬ данный момент ¬ы не можете использовать эту функцию");
									}
								}
								else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет личного транспорта");
							}
							case 5: // ѕродать транспорт
							{
								cmd::sellcar(playerid, "");
							}
							case 6: // ¬ыселитьс€ из отел€
							{
								Dialog
								(
									playerid, DIALOG_HOTEL_OUT, DIALOG_STYLE_MSGBOX, 
									"{66CC99}¬ыселение", 
									"{FFFFFF}¬ы уверены что хотите выселитьс€ из отел€?", 
									"ƒа", "Ќет"
								);
							}
							default:
								return 1;
						}
					}
					else ShowPlayerHotelDialog(playerid);
				}
			}
			case DIALOG_HOTEL_PAY_FOR_ROOM:
			{
				new hotel_id = GetPlayerInHotelID(playerid);
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
				
				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						new days = strval(inputtext);
						if(days > 0 && IsNumeric(inputtext))
						{
							new fmt_str[128 + 1];
						
							new time = gettime();
							new rent_time = GetHotelData(hotel_id, room_id, H_RENT_DATE);
						
							new rent_days = GetElapsedTime(rent_time, time, CONVERT_TIME_TO_DAYS);
							new total_price = days * 1000;

							if((rent_days + days) <= 30)
							{
								if(GetPlayerBankMoney(playerid) >= total_price)
								{
									rent_time = (rent_time - (rent_time % 86400)) + (days * 86400);
								
									format(fmt_str, sizeof fmt_str, "UPDATE accounts a, hotels h SET a.bank=%d,h.rent_time=%d WHERE a.id=%d AND h.id=%d", GetPlayerBankMoney(playerid)-total_price, rent_time, GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									
									if(!mysql_errno())
									{
										AddPlayerData(playerid, P_BANK, -, total_price);
										SetHotelData(hotel_id, room_id, H_RENT_DATE, rent_time);
									
										format(fmt_str, sizeof fmt_str, "— банковского счета сн€то {3399FF}%d руб", total_price);
										SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
										
										format(fmt_str, sizeof fmt_str, "¬ы успешно проживание в отеле еще на {3399FF}%d дней", days);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);
									}
								}
								else 
								{
									SendClientMessage(playerid, 0xB5B500FF, "Ќа основном банковском счету не хватает денег дл€ оплаты");
									
									format(fmt_str, sizeof fmt_str, "ƒл€ продлени€ аренды на %d дней необходимо %d руб", days, total_price);
									SendClientMessage(playerid, 0x999999FF, fmt_str);
								}
							}
							else SendClientMessage(playerid, 0xB5B500FF, "¬ы не можете оплатить за аренду больше чем на 30 дней");
						}
						ShowPlayerHotelRoomPayForRent(playerid);
					}
					else ShowPlayerHotelClientMenu(playerid, hotel_id);
				}
			}
			case DIALOG_HOTEL_OUT:
			{	
				new hotel_id = GetPlayerInHotelID(playerid);
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
				
				if(hotel_id == GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL))
				{
					if(response)
					{
						new query[155];
						
						format(query, sizeof query, "UPDATE accounts a,hotels h SET a.house_type=-1,a.house_room=-1,a.house=-1,h.owner_id=0,h.rent_time=0 WHERE a.id=%d AND h.id=%d", GetPlayerAccountID(playerid), GetHotelData(hotel_id, room_id, H_SQL_ID));
						mysql_query(mysql, query, false);
						
						if(!mysql_errno())
						{
							SetPlayerData(playerid, P_HOUSE, 		-1);
							SetPlayerData(playerid, P_HOUSE_ROOM, 	-1);
							SetPlayerData(playerid, P_HOUSE_TYPE, 	-1);
							
							SetHotelData(hotel_id, room_id, H_OWNER_ID, 	0);
							SetHotelData(hotel_id, room_id, H_RENT_DATE, 	0);
							SetHotelData(hotel_id, room_id, H_STATUS, 		false);
						
							SendClientMessage(playerid, 0x3399FFFF, "¬ы выселились из отел€");
						}
					}
					else ShowPlayerHotelClientMenu(playerid, hotel_id);
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_OWNABLE_CAR:
			{
				if(response)
				{
					new vehicleid = GetPlayerOwnableCar(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						switch(listitem + 1)
						{
							case 1: // ќткрыть / закрыть
							{
								cmd::lock(playerid, "1");
							}
							case 2: // ¬ставить / вытащить ключи
							{
								cmd::key(playerid, "");
							}
							case 3: // ќтметить транспорт на GPS 
							{
								cmd::getmycar(playerid, "");
							}
							case 4: // —одержимое багажника
							{
								ShowTrunkDialog(playerid, vehicleid, true);
							}
							case 5: // ƒокументы на транспорт
							{
								ShowOwnableCarPass(playerid, vehicleid);
							}
							case 6: // ѕрипарковать транспорт
							{
								cmd::park(playerid, "");
							}
							case 7: // ¬ыгрузить транспорт
							{
								if(UnloadPlayerOwnableCar(playerid))
									SendClientMessage(playerid, 0x66CC33FF, "¬аш транспорт успешно выгружен!");
								else
									SendClientMessage(playerid, 0x999999FF, "— момента загрузки данного транспорта еще не прошло 5 минут");
							}
							default: 
								return 1;
						}
						//cmd::car(playerid, "");
					}
				}
			}
			case DIALOG_OWNABLE_CAR_LOAD:
			{
				if(response)
				{
					new idx = GetPVarInt(playerid, "ownablecar_id"),
						Float: x,
						Float: y,
						Float: z,
						Cache: result,
						query[60];

					mysql_format(mysql, query, sizeof query, "SELECT pos_x, pos_y, pos_z FROM ownable_cars WHERE id='%d'", idx);
					result = mysql_query(mysql, query, true);

					x = cache_get_row_float(0, 0);
					y = cache_get_row_float(0, 1);
					z = cache_get_row_float(0, 2);

					cache_delete(result);

					switch(listitem + 1)
					{
						case 1:
						{
							if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
							{
								if(GetPlayerMoneyEx(playerid) >= 300)
								{
									GivePlayerMoneyEx(playerid, -300, "ћетка “— на GPS", true, true);
									
									EnablePlayerGPS(playerid, 55, x, y, z, "ћестоположение ¬ашего транспорта отмечено на GPS");
									return 1;
								}
								else SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "Ќа ¬ашем GPS уже отмечено место");
						}
						case 2:
						{
							if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
							{
								SendClientMessage(playerid, 0x999999FF, "—истемна€ ошибка. “ранспорт уже загружен.");
								return 1;
							}

							if(!IsPlayerInRangeOfPoint(playerid, 15.0, x, y, z))
							{
								SendClientMessage(playerid, 0x999999FF, "¬ы слишком далеко от места, где припаркован ¬аш транспорт");
							}
							else
							{
								LoadOwnableCar(idx);
								PlayerOwnableCarInit(playerid);
								SendClientMessage(playerid, 0x66CC33FF, "¬аш транспорт успешно загружен!");
							}
						}
					}
				}
				else
				{
					if(GetPVarInt(playerid, "show_menu"))
					{
						DeletePVar(playerid, "show_menu");
						cmd::car(playerid, "");
					}
				}
			}
			case DIALOG_OWNABLE_CAR_LIST:
			{
				if(response)
				{
					new idx = GetPlayerListitemValue(playerid, listitem);

					ShowOwnableCarLoadDialog(playerid, idx, true);
				}
			}
			case DIALOG_OWNABLE_CAR_SELL:
			{
				if(response)
				{
					new vehicleid = GetPlayerOwnableCar(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						new model_id = GetVehicleData(vehicleid, V_MODELID);

						if(DestroyOwnableCar(vehicleid))
						{
							new fmt_str[128];

							new car_price = GetVehicleInfo(model_id-400, VI_PRICE);
							new percent = car_price * 20 / 100;
							new price = car_price - percent;
							
							SetPlayerData(playerid, P_OWNABLE_CAR, INVALID_VEHICLE_ID);
							AddPlayerData(playerid, P_BANK, +, price);
							
							format(fmt_str, sizeof fmt_str, "UPDATE accounts SET bank=%d WHERE id=%d LIMIT 1", GetPlayerBankMoney(playerid), GetPlayerAccountID(playerid));
							mysql_query(mysql, fmt_str, false);
							
							SendClientMessage(playerid, 0x3399FFFF, "¬ы продали личный транспорт");
							
							format(fmt_str, sizeof fmt_str, "Ќалоговый сбор составл€ет 20 процентов от его стоимости {FF9900}(%d руб)", percent);
							SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
							
							format(fmt_str, sizeof fmt_str, "Ќа основной банковский счет переведено {FFFF00}%d руб", price);
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);
							
							format(fmt_str, sizeof fmt_str, "~g~+%d rub", price);
							GameTextForPlayer(playerid, fmt_str, 4000, 1);
						}
					}
				}
			}
			// -----------------------------------------------------------------
			case DIALOG_VEHICLE_TRUNK:
			{
				new vehicleid = GetPlayerUseTrunk(playerid);
				
				if(response && vehicleid != INVALID_VEHICLE_ID)
				{
					if(GetPlayerListitemValue(playerid, listitem) == -1) // ѕоложить
					{
						Dialog
						(
							playerid, DIALOG_VEHICLE_TRUNK_PUT, DIALOG_STYLE_LIST,
							"{3399FF}—одержимое багажника",
							"\
							1. ѕоложить деньги\n\
							2. ѕоложить канистру\n\
							3. ѕоложить аптечку\n\
							4. ѕоложить металл\n\
							5. ѕоложить патроны\n\
							6. ѕоложить наркотики\
							",
							"ѕоложить", "Ќазад"
						);
					}
					else
					{
						if(0 <= listitem <= MAX_VEHICLE_TRUNK_SLOTS)
						{
							new desc[64] = "{66CC33}",
								type = GetTrunkData(vehicleid, listitem, VT_ITEM_TYPE);

							if(type == ITEM_TYPE_JERRICAN)
							{
								if(TakeTrunkItem(vehicleid, type, 15))
								{
									if(!GetPVarInt(playerid, "have_jerrican"))
									{
										SetPVarInt(playerid, "have_jerrican", 1);
										SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 1650, A_OBJECT_BONE_LEFT_HAND, 0.15, 0.0, 0.0, 0.0, -90.0, 180.0, 1.0, 1.0, 1.0, 0);

										SendClientMessage(playerid, 0x3399FFFF, "¬ы достали из багажника \" анистра\" в количестве: 15 л");
									}
									else
									{
										SendClientMessage(playerid, 0xCECECEFF, "” ¬ас уже есть канистра");
										AddTrunkItem(vehicleid, type, 15);
									}
								}
								else
								{
									SendClientMessage(playerid, 0x999999FF, "¬ багажнике нет канистры");
								}
							}
							else
							{
								if(type == ITEM_TYPE_NONE) type++;

								strcat(desc, GetItemInfo(type, I_NAME));

								SetPVarInt(playerid, "trunk_slot", type);

								Dialog
								(
									playerid, DIALOG_VEHICLE_TRUNK_TAKE, DIALOG_STYLE_INPUT,
									desc,
									"{ffffff}¬ведите количество, которое ¬ы хотите {ffcd00}достать:",
									"ƒостать", "Ќазад"
								);
							}
						}
					}
				}
			}
			case DIALOG_VEHICLE_TRUNK_PUT:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					slot = listitem + 1;
				
				if(response && vehicleid != INVALID_VEHICLE_ID)
				{
					if(slot == ITEM_TYPE_JERRICAN)
					{
						if(!GetPVarInt(playerid, "have_jerrican"))
						{
							SendClientMessage(playerid, 0x999999FF, "” ¬ас с собой нет канистры");
						}
						else
						{
							DeletePVar(playerid, "have_jerrican");
							RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);

							if(AddTrunkItem(vehicleid, ITEM_TYPE_JERRICAN, 15) != -1)
							{
								SendClientMessage(playerid, 0x3399FFFF, "¬ы положили в багажник \" анистра\" в количестве: 15 л");
							}
							else
							{
								SendClientMessage(playerid, 0xCECECEFF, "¬ багажнике недостаточно места");
							}
						}
					}
					else
					{
						new desc[32] = "{ff6600}";

						strcat(desc, GetItemInfo(slot, I_NAME));

						Dialog
						(
							playerid, DIALOG_VEHICLE_TRUNK_PUT_ITEM, DIALOG_STYLE_INPUT,
							desc,
							"{ffffff}¬ведите количество, которое ¬ы хотите {ffcd00}положить:",
							"ѕоложить", "Ќазад"
						);

						SetPVarInt(playerid, "trunk_slot", slot);
					}
				}
				else ShowTrunkDialog(playerid, vehicleid, false);
			}
			case DIALOG_VEHICLE_TRUNK_PUT_ITEM:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					amount = strval(inputtext),
					slot = GetPVarInt(playerid, "trunk_slot");

				if(vehicleid == INVALID_VEHICLE_ID)
					return 1;

				if(response)
				{
					if(amount > 0)
					{
						if(AddTrunkItem(vehicleid, slot, amount))
						{
							switch(slot)
							{
								case ITEM_TYPE_MONEY:
								{
									if(GetPlayerMoneyEx(playerid) >= amount)
									{
										GivePlayerMoneyEx(playerid, -amount, "положил в багажник", true);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "” ¬ас нет такого количества денег");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_MED:
								{
									if(GetPlayerData(playerid, P_MED_CHEST) >= amount)
									{
										AddPlayerData(playerid, P_MED_CHEST, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "” ¬ас нет такого количества аптечек");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_METALL:
								{
									if(GetPlayerData(playerid, P_METALL) >= amount)
									{
										AddPlayerData(playerid, P_METALL, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "” ¬ас нет такого количества металла");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_AMMO:
								{
									if(GetPlayerData(playerid, P_AMMO) >= amount)
									{
										AddPlayerData(playerid, P_AMMO, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "” ¬ас нет такого количества патронов");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_DRUGS:
								{
									if(GetPlayerData(playerid, P_DRUGS) >= amount)
									{
										AddPlayerData(playerid, P_DRUGS, -, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "” ¬ас нет такого количества наркотиков");
										TakeTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, 0xCECECEFF, "¬ багажнике недостаточно места");
							return 1;
						}

						new fmt_text[128];

						format(fmt_text, sizeof fmt_text, "¬ы положили в багажник \"%s\" в количестве: %d %s", GetItemInfo(slot, I_NAME), amount, GetItemInfo(slot, I_NAME_COUNT));
						SendClientMessage(playerid, 0x3399FFFF, fmt_text);
					}
					else SendClientMessage(playerid, 0x999999FF, "Ќеверное количество");
				}
				else
				{
					ShowTrunkDialog(playerid, vehicleid, false);
				}
			}
			case DIALOG_VEHICLE_TRUNK_TAKE:
			{
				new vehicleid = GetPlayerUseTrunk(playerid),
					amount = strval(inputtext),
					slot = GetPVarInt(playerid, "trunk_slot");

				if(vehicleid == INVALID_VEHICLE_ID)
					return 1;

				if(response)
				{
					if(amount > 0)
					{
						if(TakeTrunkItem(vehicleid, slot, amount) != -1)
						{
							switch(slot)
							{
								case ITEM_TYPE_MONEY:
								{
									GivePlayerMoneyEx(playerid, amount, "достал из багажника", true);
								}
								case ITEM_TYPE_MED:
								{
									if((GetPlayerData(playerid, P_MED_CHEST) + amount) < 3)
									{
										AddPlayerData(playerid, P_MED_CHEST, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "¬ы не можете носить с собой больше 3-х аптечек");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_METALL:
								{
									if((GetPlayerData(playerid, P_METALL) + amount) < GetPlayerMaxStorage(playerid, STORAGE_METALL))
									{
										AddPlayerData(playerid, P_METALL, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "¬ы не можете унести с собой больше металла");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_AMMO:
								{
									if((GetPlayerData(playerid, P_AMMO) + amount) < GetPlayerMaxStorage(playerid, STORAGE_AMMO))
									{
										AddPlayerData(playerid, P_AMMO, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "¬ы не можете унести с собой больше патронов");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
								case ITEM_TYPE_DRUGS:
								{
									if((GetPlayerData(playerid, P_DRUGS) + amount) < GetPlayerMaxStorage(playerid, STORAGE_DRUGS))
									{
										AddPlayerData(playerid, P_DRUGS, +, amount);
									}
									else
									{
										SendClientMessage(playerid, 0x999999FF, "” ¬ас нет такого количества наркотиков");
										AddTrunkItem(vehicleid, slot, amount);

										return 1;
									}
								}
							}

							new fmt_text[128];

							format(fmt_text, sizeof fmt_text, "¬ы достали из багажника \"%s\" в количестве: %d %s", GetItemInfo(slot, I_NAME), amount, GetItemInfo(slot, I_NAME_COUNT));
							SendClientMessage(playerid, 0x3399FFFF, fmt_text);
						}
						else
						{
							SendClientMessage(playerid, 0x999999FF, "¬ багажнике нет такого количества предмета");
							ShowTrunkDialog(playerid, vehicleid, false);
						}
					}
				}
				else ShowTrunkDialog(playerid, vehicleid, false);
			}
			// -----------------------------------------------------------------
			case DIALOG_SET_SPAWN:
			{
			    switch(listitem)
			    {
			        case 1: if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1) return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет дома");
			        case 2: if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1) return SendClientMessage(playerid, 0x999999FF, "¬ы не проживаете в гостиничном номере");
			        case 3: if(!GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "¬ы не состоите в организации");
			        case 4: if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1) return SendClientMessage(playerid, 0x999999FF, "¬ы не проживаете ни у кого в гост€х");
			    }
			    
			    SetPlayerData(playerid, P_SPAWN, listitem);
				UpdatePlayerDatabaseInt(playerid, "setting_spawn", listitem);
			    
			    SendClientMessage(playerid, 0x3399FFFF, "ћесто по€влени€ в игре изменено");
			}
			// -----------------------------------------------------------------
			case DIALOG_DONATE_INFO:
			{
				if(!response) return cmd::menu(playerid, "");

				ShowPlayerDonateMenu(playerid);
			}
			case DIALOG_DONATE_ENROLLMENT:
			{
				if(!response) return true;

				new donate_money = GetPVarInt(playerid, "donate_money"),
					donate_money_with_action = GetPVarInt(playerid, "donate_money_with_action"),
					fmt_text[248];

				GivePlayerDonate(playerid, donate_money_with_action, "ѕополнение счЄта");

				format
				(
					fmt_text, sizeof fmt_text,
					"{ffffff}\
					—умма была зачислена на ¬аш аккаунт\n\
					¬ы успешно пополнили счЄт на {66cc99}%d.00 руб\n\
					{ffffff}— учЄтом акции было зачислено {33cc66}%d.00 руб\n\n\
					{ffffff}»спользуйте: {ffcc00}/menu > ƒополнительно\
					",
					donate_money, donate_money_with_action
				);

				Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{00cc33}—чЄт пополнен", fmt_text, "«акрыть", "");

			}
			case DIALOG_DONATE_MENU:
			{
				if(!response) return true;

				switch(listitem)
				{
					case 0: ShowPlayerDonations(playerid, GetPlayerNameEx(playerid));
					case 1: 
					{
						new fmt_text[200];
						format
						(
							fmt_text,
							sizeof fmt_text,
							"{ffffff}\
							—тавка:\t\t1 руб = %d игр.руб\n\
							 ол-во рублей:\t0.00\n\
							Ѕудет зачислено:\t0 игр.руб\n\n\
							¬ведите количество рублей, которые ¬ы\n\
							хотите конвертировать в игровые деньги:\
							",
							donate_exchange_price
						);
						Dialog
						(
							playerid, DIALOG_DONATE_CONVERT, DIALOG_STYLE_INPUT,
							"{ffcc00}ќбмен валют (конвертер)",
							fmt_text,
							"ƒалее", "Ќазад"
						);
					}
					case 2..7: SendClientMessage(playerid, 0x999999FF, "¬ременно недоступно. ƒл€ получени€ информации обратитесь к администрации");
				}
			}
			
			case DIALOG_DONATE_CONVERT:
			{
				if(!response) return ShowPlayerDonateMenu(playerid);
				
				new fmt_text[256];
				
				if(!strlen(inputtext) || !IsNumeric(inputtext))
				{
					SendClientMessage(playerid, 0xFF6600FF, "¬ы не указали сумму");
					format
					(
						fmt_text,
						sizeof fmt_text,
						"{ffffff}\
						—тавка:\t\t1 руб = %d игр.руб\n\
						 ол-во рублей:\t0.00\n\
						Ѕудет зачислено:\t0 игр.руб\n\n\
						{ff6600}¬ведите количество рублей, которые ¬ы\n\
						хотите конвертировать в игровые деньги:\
						",
						donate_exchange_price
					);
					Dialog
					(
						playerid, DIALOG_DONATE_CONVERT, DIALOG_STYLE_INPUT,
						"{ffcc00}ќбмен валют (конвертер)",
						fmt_text,
						"ƒалее", "Ќазад"
					);
					return 1;
				}
				
				new money_count;
				
				money_count = strval(inputtext);
				
				if(money_count > GetPlayerCurrentDonate(playerid))
				{
					format(fmt_text, sizeof fmt_text, "Ќедостаточно средств. —ейчас на ¬ашем счету %d.00 руб.", GetPlayerCurrentDonate(playerid));
					SendClientMessage(playerid, 0xFF6600FF, fmt_text);
					
					format
					(
						fmt_text,
						sizeof fmt_text,
						"{ffffff}\
						—тавка:\t\t1 руб = %d игр.руб\n\
						 ол-во рублей:\t0.00\n\
						Ѕудет зачислено:\t0 игр.руб\n\n\
						{00cc99}¬ведите количество рублей, которые ¬ы\n\
						хотите конвертировать в игровые деньги:\
						",
						donate_exchange_price
					);
					Dialog
					(
						playerid, DIALOG_DONATE_CONVERT, DIALOG_STYLE_INPUT,
						"{ffcc00}ќбмен валют (конвертер)",
						fmt_text,
						"ƒалее", "Ќазад"
					);
					return 1;
				}
				
				SetPVarInt(playerid, "donate_convert_count", money_count);
				
				format
				(
					fmt_text,
					sizeof fmt_text,
					"{ffffff}\
					—тавка:\t\t1 руб = %d игр.руб\n\
					 ол-во рублей:\t%d.00\n\
					Ѕудет зачислено:\t%d игр.руб\n\n\
					ƒл€ изменени€ суммы укажите новое\n\
					значение и нажмите \"ќбновить\".\n\n\
					{6699cc}„тобы зачислить выбранную сумму, оставьте\n\
					поле пустым и нажмите \"ќбновить\".\
					",
					donate_exchange_price,
					money_count,
					money_count * donate_exchange_price
				);
				Dialog
				(
					playerid, DIALOG_DONATE_GET_MONEY, DIALOG_STYLE_INPUT,
					"{ffcc00}ќбмен валют (конвертер)",
					fmt_text,
					"ƒалее", "Ќазад"
				);
				
				return 1;
			}
			
			case DIALOG_DONATE_GET_MONEY:
			{
				if(!response)
				{
					DeletePVar(playerid, "donate_convert_count");
					return ShowPlayerDonateMenu(playerid);
				}
				
				new money_count;
				money_count = GetPVarInt(playerid, "donate_convert_count");
				
				new fmt_text[128];
				
				format(fmt_text, sizeof fmt_text, "¬ы сконвертировали {66cc00}%d.00 руб. {ffff00}в {66cc00}%d игр.руб.", money_count, money_count * donate_exchange_price);
				SendClientMessage(playerid, 0xFFFF00FF, fmt_text);
				
				format(fmt_text, sizeof fmt_text, "~g~+%d rub~n~~y~-%d rub", money_count * donate_exchange_price, money_count);
				GameTextForPlayer(playerid, fmt_text, 4000, 1);
				
				format(fmt_text, sizeof fmt_text, " онвертаци€ %d руб. в игровую валюту", money_count);
				GivePlayerDonate(playerid, -money_count, fmt_text, true, false);

				GivePlayerMoneyEx(playerid, money_count * donate_exchange_price, fmt_text, false, true);
				
				DeletePVar(playerid, "donate_convert_count");
			
				return 1;
			}
			// -----------------------------------------------------------------
			case DIALOG_TEAM_CHANGE_SKIN:
			{
				if(!response || !(0 <= listitem <= 9)) return 1;
				
				new to_player = GetPVarInt(playerid, "change_team_skin_playerid");
				new team_id = GetPlayerTeamEx(playerid);
				
				if(!(1 <= team_id <= 10) || !(9 <= GetPlayerJob(playerid) <= 10)) return 1;
				if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || team_id != GetPlayerTeamEx(to_player)) return 1;
				if(GetPlayerSex(to_player)) return 1;
				
				new index = GetPlayerListitemValue(playerid, listitem);

				SetPlayerData(to_player, P_OSKIN, GetTeamData(team_id, O_SKINS)[index]);
				
				new query[85];
				format(query, sizeof query, "UPDATE accounts SET org_skin=%d WHERE id=%d", GetPlayerData(to_player, P_OSKIN), GetPlayerAccountID(to_player));
				mysql_query(mysql, query, false);
			
				ResetSkin(to_player);

				format(query, sizeof query, "¬аша внешность была изменена %s организации %s[%d]", GetPlayerJob(playerid) >= 10 ? ("лидером") : ("заместителем"), GetPlayerNameEx(playerid), playerid);
				SendClientMessage(to_player, 0x3399FFFF, query);
				
				format(query, sizeof query, "¬ы изменили внешность %s[%d]", GetPlayerNameEx(to_player), to_player);
				SendClientMessage(playerid, 0x3399FFFF, query);
				
				return 1;
			}
			// -----------------------------------------------------------------
			case DIALOG_DEBTORLIST:
			{
				if(!response) return 1;
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;
		
				if(0 <= listitem <= 2)
				{
					ShowDebtorListDialog(playerid, listitem);
				}
				
				return 1;
			}
			
			case DIALOG_DEBTORLIST_HOUSE..DIALOG_DEBTORLIST_FUEL_ST:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;
				if(!response) return cmd::debtorlist(playerid, "");
				if(!(0 <= listitem <= 19)) return 1;
				
				new type = dialogid - DIALOG_DEBTORLIST_HOUSE;
				new buffer = GetPlayerListitemValue(playerid, listitem);
				
				switch(type)
				{
					case 0:
					{
						if(!GetHouseData(buffer, H_TYPE))
						{
							EnablePlayerGPS(playerid, 56, GetHouseData(buffer, H_POS_X), GetHouseData(buffer, H_POS_Y), GetHouseData(buffer, H_POS_Z), "ƒом должника отмечен у ¬ас на GPS");
						}
						else 
						{
							new ent_id = GetHouseData(buffer, H_ENTRACE);

							EnablePlayerGPS(playerid, 56, GetEntranceData(ent_id, E_POS_X), GetEntranceData(ent_id, E_POS_Y), GetEntranceData(ent_id, E_POS_Z), "ѕодьезд квартиры должника отмечена у ¬ас на GPS");
						}
					}
					case 1: EnablePlayerGPS(playerid, 56, GetBusinessData(buffer, B_POS_X), GetBusinessData(buffer, B_POS_Y), GetBusinessData(buffer, B_POS_Z), "ѕредпри€тие должника отмечено у ¬ас на GPS");
					case 2: EnablePlayerGPS(playerid, 56, GetFuelStationData(buffer, FS_POS_X), GetFuelStationData(buffer, FS_POS_Y), GetFuelStationData(buffer, FS_POS_Z), "ј«— должника отмечена у ¬ас на GPS");
					default: return -1;
				}
				
				return 1;
			}

			case DIALOG_DEBTOR_SELL_LIST:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 7) return 1;
				//if(!response) return cmd::debtorsell(playerid, "");
				if(!response) return 1;
				
				switch(listitem)
				{
					case 0:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_HOUSE, DIALOG_STYLE_INPUT,
							"{99CC00}јкт выселени€ из жилого помещени€",
							"«аполните акт выселени€ из жилого помещени€\n\n\
							{FFFFFF}”кажите через пробел:\n\n\
							{FFCC00}1. Ќомер дома/квартиры\n\
							2. ID первого пон€того\n\
							3. ID второго пон€того\n\n\
							{FFFFFF} огда закончите составление документа, подпишите его\n\
							—разу после подписани€ акта должник будет выселен",
							"ѕодписать", "Ќазад"
						);
						
						// 0x3399FFFF > ƒолжник был выселен из дома/квартиры. Ќа оформление документов потребуетс€ врем€
						// 0x3399FFFF > ¬ы получаете премию 1000 руб.
						
					}
					case 1:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_BIZ, DIALOG_STYLE_INPUT,
							"{99CC00}јкт изъ€ти€ предпр€ти€",
							"«аполните акт изъ€ти€ предпри€ти€ у должника\n\n\
							{FFFFFF}”кажите через пробел:\n\n\
							{FFCC00}1. Ќомер предпри€ти€\n\
							2. ID первого пон€того\n\
							3. ID второго пон€того\n\n\
							{FFFFFF} огда закончите составление документа, подпишите его\n\
							—разу после подписани€ акта предпри€тие станет собственностью государства",
							"ѕодписать", "Ќазад"
						);
						
						// 0x3399FFFF > ѕредпри€тие должника было изъ€то в пользу государства. Ќа оформление документов потребуетс€ врем€
						// 0x3399FFFF > ¬ы получаете премию 1000 руб.
					}
					case 2:
					{
						Dialog
						(
							playerid, DIALOG_DEBTOR_SELL_FUEL_ST, DIALOG_STYLE_INPUT,
							"{99CC00}јкт изъ€ти€ ј«—",
							"«аполните акт изъ€ти€ ј«— у должника\n\n\
							{FFFFFF}”кажите через пробел:\n\n\
							{FFCC00}1. Ќомер ј«—\n\
							2. ID первого пон€того\n\
							3. ID второго пон€того\n\n\
							{FFFFFF} огда закончите составление документа, подпишите его\n\
							—разу после подписани€ акта ј«— станет собственностью государства",
							"ѕодписать", "Ќазад"
						);
					}
					default: return -1;
				}
				
				return 1;
			}

			case DIALOG_DEBTOR_SELL_HOUSE:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;
				
				if(!response) return cmd::debtorsell(playerid, "");
				
				new sell_houseid = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_houseid, worker_id[0], worker_id[1]);
				
				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_houseid <= g_house_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "”кажите номер дома/квартиры");
					
					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "¬ы находитесь далеко от дома/квартиры должника");
					
					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "”кажите ID первого пон€того");
					
					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "”кажите ID второго пон€того");
					
					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "ќдин из пон€тых не €вл€етс€ сотрудником правительства 3 ранга");
					
					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetHouseData(sell_houseid, H_POS_X), GetHouseData(sell_houseid, H_POS_Y), GetHouseData(sell_houseid, H_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "ќдин из пон€тых находитс€ далеко от дома/квартиры должника");
					
					else if((((GetHouseData(sell_houseid, H_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "” владельца этого дома/квартиры нет задолжности за неуплату услуг");
					
					else if(GetHouseData(sell_houseid, H_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "јкт выселени€ из этого жилого помещени€ уже подписан");
						
					else 
					{
						SendClientMessage(playerid, 0x3399FFFF, "ƒолжник был выселен из дома/квартиры. Ќа оформление документов потребуетс€ врем€");
						SendClientMessage(playerid, 0x3399FFFF, "¬ы получаете премию 1000 руб.");
						
						SetPlayerChatBubble(playerid, "+1000 руб", 0x3399FFFF, 5.0, 3000);
						GameTextForPlayer(playerid, "~b~~h~+1000 rub", 4000, 1);
						AddPlayerData(playerid, P_WAGE, +, 1000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));
						
						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "¬ы получили премию 500 руб.");
							SetPlayerChatBubble(worker_id[i], "+500 руб", 0x3399FFFF, 5.0, 3000);
							GameTextForPlayer(worker_id[i], "~b~~h~+500 rub", 4000, 1);
							AddPlayerData(worker_id[i], P_WAGE, +, 500);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}
						
						new query[65];
						
						format(query, sizeof query, "UPDATE accounts SET house = -1 WHERE id=%d", GetHouseData(sell_houseid, H_OWNER_ID));
						mysql_query(mysql, query, false);
						
						new owner_player = GetPlayerIDBySqlID(GetHouseData(sell_houseid, H_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							if(GetPlayerHouse(owner_player, HOUSE_TYPE_HOME) == sell_houseid)
							{
								SetPlayerData(owner_player, P_HOUSE, -1);
								SendClientMessage(owner_player, 0xFF6600FF, "¬ы были выселены из дома/квартиры за неуплату услуг");
							}
						}
						
						SetHouseData(sell_houseid, H_RENT_DATE, gettime() + (random(169200) + 3600));
						SetHouseData(sell_houseid, H_EVICTION, 1);
						
						format(query, sizeof query, "UPDATE houses SET rent_time=%d,eviction=1 WHERE id=%d LIMIT 1", GetHouseData(sell_houseid, H_RENT_DATE), sell_houseid);
						mysql_query(mysql, query, false);
						
						return 1;
					}
				}
				
				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_HOUSE, DIALOG_STYLE_INPUT,
					"{99CC00}јкт выселени€ из жилого помещени€",
					"«аполните акт выселени€ из жилого помещени€\n\n\
					{FFFFFF}”кажите через пробел:\n\n\
					{FFCC00}1. Ќомер дома/квартиры\n\
					2. ID первого пон€того\n\
					3. ID второго пон€того\n\n\
					{FFFFFF} огда закончите составление документа, подпишите его.\n\
					—разу после подписани€ акта должник будет выселен.",
					"ѕодписать", "Ќазад"
				);
				return 1;
			}

			case DIALOG_DEBTOR_SELL_BIZ:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;
				
				if(!response) return cmd::debtorsell(playerid, "");
				
				new sell_biz_id = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_biz_id, worker_id[0], worker_id[1]);
				
				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_biz_id <= g_business_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "”кажите номер предпри€ти€");
					
					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "¬ы находитесь далеко от предпри€ти€ должника");
					
					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "”кажите ID первого пон€того");
					
					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "”кажите ID второго пон€того");
					
					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "ќдин из пон€тых не €вл€етс€ сотрудником правительства 3 ранга");
					
					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetBusinessData(sell_biz_id, B_POS_X), GetBusinessData(sell_biz_id, B_POS_Y), GetBusinessData(sell_biz_id, B_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "ќдин из пон€тых находитс€ далеко от предпри€ти€ должника");
					
					else if((((GetBusinessData(sell_biz_id, B_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "” владельца этого предпри€ти€ нет задолжности за неуплату услуг");
					
					else if(GetBusinessData(sell_biz_id, B_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "јкт изъ€ти€ этого предпри€ти€ уже подписан");
						
					else 
					{
						// 0x3399FFFF > ѕредпри€тие должника было изъ€то в пользу государства. Ќа оформление документов потребуетс€ врем€
						// 0x3399FFFF > ¬ы получаете премию 1000 руб.
					
						SendClientMessage(playerid, 0x3399FFFF, "ѕредпри€тие должника было изъ€то в пользу государства. Ќа оформление документов потребуетс€ врем€");
						SendClientMessage(playerid, 0x3399FFFF, "¬ы получаете премию 1000 руб.");
						
						SetPlayerChatBubble(playerid, "+1000 руб", 0x3399FFFF, 5.0, 3000);
						GameTextForPlayer(playerid, "~b~~h~+1000 rub", 4000, 1);
						AddPlayerData(playerid, P_WAGE, +, 1000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));
						
						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "¬ы получили премию 500 руб.");
							SetPlayerChatBubble(worker_id[i], "+500 руб", 0x3399FFFF, 5.0, 3000);
							GameTextForPlayer(worker_id[i], "~b~~h~+500 rub", 4000, 1);
							AddPlayerData(worker_id[i], P_WAGE, +, 500);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}
						
						new query[65];
						
						format(query, sizeof query, "UPDATE accounts SET business = -1 WHERE id=%d", GetBusinessData(sell_biz_id, B_OWNER_ID));
						mysql_query(mysql, query, false);
						
						new owner_player = GetPlayerIDBySqlID(GetBusinessData(sell_biz_id, B_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							if(GetPlayerBusiness(owner_player) == sell_biz_id)
							{
								SetPlayerData(owner_player, P_BUSINESS, -1);
								SendClientMessage(owner_player, 0xFF6600FF, "¬аше предпри€тие было изъ€то государством за неуплату налогов");
							}
						}
						
						SetBusinessData(sell_biz_id, B_RENT_DATE, gettime() + (random(169200) + 3600));
						SetBusinessData(sell_biz_id, B_EVICTION, 1);
						
						format(query, sizeof query, "UPDATE business SET rent_time=%d,eviction=1 WHERE id=%d LIMIT 1", GetBusinessData(sell_biz_id, B_RENT_DATE), sell_biz_id);
						mysql_query(mysql, query, false);
						
						return 1;
					}
				}
				
				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_BIZ, DIALOG_STYLE_INPUT,
					"{99CC00}јкт изъ€ти€ предпри€ти€",
					"«аполните акт изъ€ти€ предпри€ти€ у должника\n\n\
					{FFFFFF}”кажите через пробел:\n\n\
					{FFCC00}1. Ќомер предпри€ти€\n\
					2. ID первого пон€того\n\
					3. ID второго пон€того\n\n\
					{FFFFFF} огда закончите составление документа, подпишите его\n\
					—разу после подписани€ акта предпри€тие станет собственностью государства",
					"ѕодписать", "Ќазад"
				);
				return 1;
			}

			case DIALOG_DEBTOR_SELL_FUEL_ST:
			{
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) < 4) return 1;
				
				if(!response) return cmd::debtorsell(playerid, "");
				
				new sell_fs_id = -1, worker_id[2] = {-1, -1};
				sscanf(inputtext, "ddd", sell_fs_id, worker_id[0], worker_id[1]);
				
				if(strlen(inputtext) > 0)
				{
					if(!(0 <= sell_fs_id <= g_fuel_station_loaded-1))
						SendClientMessage(playerid, 0xBBBB00FF, "”кажите номер предпри€ти€");
					
					else if(!IsPlayerInRangeOfPoint(playerid, 7.0, GetFuelStationData(sell_fs_id, FS_POS_X), GetFuelStationData(sell_fs_id, FS_POS_Y), GetFuelStationData(sell_fs_id, FS_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "¬ы находитесь далеко от предпри€ти€ должника");
					
					else if(!IsPlayerConnected(worker_id[0]) || !IsPlayerLogged(worker_id[0]) || worker_id[0] == playerid)
						SendClientMessage(playerid, 0xBBBB00FF, "”кажите ID первого пон€того");
					
					else if(!IsPlayerConnected(worker_id[1]) || !IsPlayerLogged(worker_id[1]) || worker_id[1] == playerid || worker_id[0] == worker_id[1])
						SendClientMessage(playerid, 0xBBBB00FF, "”кажите ID второго пон€того");
					
					else if(GetPlayerTeamEx(worker_id[0]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[0]) < 3 || GetPlayerTeamEx(worker_id[1]) != TEAM_GOVERNMENT && GetPlayerJob(worker_id[1]) < 3)
						SendClientMessage(playerid, 0xBBBB00FF, "ќдин из пон€тых не €вл€етс€ сотрудником правительства 3 ранга");
					
					else if(!IsPlayerInRangeOfPoint(worker_id[0], 7.0, GetFuelStationData(sell_fs_id, FS_POS_X), GetFuelStationData(sell_fs_id, FS_POS_Y), GetFuelStationData(sell_fs_id, FS_POS_Z)) || !IsPlayerInRangeOfPoint(worker_id[1], 7.0, GetFuelStationData(sell_fs_id, FS_POS_X), GetFuelStationData(sell_fs_id, FS_POS_Y), GetFuelStationData(sell_fs_id, FS_POS_Z)))
						SendClientMessage(playerid, 0xBBBB00FF, "ќдин из пон€тых находитс€ далеко от предпри€ти€ должника");
					
					else if((((GetFuelStationData(sell_fs_id, FS_RENT_DATE) - gettime()) / 86400) + 1) > 0)
						SendClientMessage(playerid, 0xBBBB00FF, "” владельца этого предпри€ти€ нет задолжности за неуплату услуг");
					
					else if(GetFuelStationData(sell_fs_id, FS_EVICTION))
						SendClientMessage(playerid, 0xBBBB00FF, "јкт изъ€ти€ этого предпри€ти€ уже подписан");
						
					else 
					{
						// 0x3399FFFF > ј«— должника была изъ€та в пользу государства. Ќа оформление документов потребуетс€ врем€
						// 0x3399FFFF > ¬ы получаете премию 1000 руб.
					
						SendClientMessage(playerid, 0x3399FFFF, "ј«— должника была изъ€та в пользу государства. Ќа оформление документов потребуетс€ врем€");
						SendClientMessage(playerid, 0x3399FFFF, "¬ы получаете премию 1000 руб.");
						
						SetPlayerChatBubble(playerid, "+1000 руб", 0x3399FFFF, 5.0, 3000);
						GameTextForPlayer(playerid, "~b~~h~+1000 rub", 4000, 1);
						AddPlayerData(playerid, P_WAGE, +, 1000);
						UpdatePlayerDatabaseInt(playerid, "wage", GetPlayerData(playerid, P_WAGE));
						
						for(new i; i < 2; i ++)
						{
							SendClientMessage(worker_id[i], 0x3399FFFF, "¬ы получили премию 500 руб.");
							SetPlayerChatBubble(worker_id[i], "+500 руб", 0x3399FFFF, 5.0, 3000);
							GameTextForPlayer(worker_id[i], "~b~~h~+500 rub", 4000, 1);
							AddPlayerData(worker_id[i], P_WAGE, +, 500);
							UpdatePlayerDatabaseInt(worker_id[i], "wage", GetPlayerData(worker_id[i], P_WAGE));
						}
						
						new query[65];
						
						format(query, sizeof query, "UPDATE accounts SET fuel_st = -1 WHERE id=%d", GetFuelStationData(sell_fs_id, FS_OWNER_ID));
						mysql_query(mysql, query, false);
						
						new owner_player = GetPlayerIDBySqlID(GetFuelStationData(sell_fs_id, FS_OWNER_ID));
						if(IsPlayerConnected(owner_player) && IsPlayerLogged(owner_player))
						{
							if(GetPlayerFuelStation(owner_player) == sell_fs_id)
							{
								SetPlayerData(owner_player, P_FUEL_ST, -1);
								SendClientMessage(owner_player, 0xFF6600FF, "¬аше предпри€тие было изъ€то государством за неуплату налогов");
							}
						}
						
						SetFuelStationData(sell_fs_id, FS_RENT_DATE, gettime() + (random(169200) + 3600));
						SetFuelStationData(sell_fs_id, FS_EVICTION, 1);
						
						format(query, sizeof query, "UPDATE fuel_stations SET rent_time=%d,eviction=1 WHERE id=%d LIMIT 1", GetFuelStationData(sell_fs_id, FS_RENT_DATE), sell_fs_id);
						mysql_query(mysql, query, false);

						UpdateFuelStationLabel(sell_fs_id);
						
						return 1;
					}
				}
				
				Dialog
				(
					playerid, DIALOG_DEBTOR_SELL_FUEL_ST, DIALOG_STYLE_INPUT,
					"{99CC00}јкт изъ€ти€ ј«—",
					"«аполните акт изъ€ти€ ј«— у должника\n\n\
					{FFFFFF}”кажите через пробел:\n\n\
					{FFCC00}1. Ќомер ј«—\n\
					2. ID первого пон€того\n\
					3. ID второго пон€того\n\n\
					{FFFFFF} огда закончите составление документа, подпишите его\n\
					—разу после подписани€ акта ј«— станет собственностью государства",
					"ѕодписать", "Ќазад"
				);
				return 1;
			}

			case DIALOG_ADVISOR_MENU:
			{
				if(!response) return 1;

				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || !(5 <= GetPlayerJob(playerid) <= 6)) return 1;
		
				switch(listitem)
				{
					case 0:
					{
						if(!IsValidDynamic3DTextLabel(g_player[playerid][P_ADVISOR_LABEL]))
						{
							g_player[playerid][P_ADVISOR_LABEL] = CreateDynamic3DTextLabel("—оветник", 0xFFCC33FF, 0.0, 0.0, 0.5, 10.0, playerid);
							
							SendClientMessage(playerid, 0x3399FFFF, "¬ы надели бейджик");
						}
						else 
						{
							DestroyDynamic3DTextLabel(g_player[playerid][P_ADVISOR_LABEL]);
							g_player[playerid][P_ADVISOR_LABEL] = Text3D: -1;
							
							SendClientMessage(playerid, 0x3399FFFF, "¬ы сн€ли бейджик");
						}
					}
					case 1:
					{
						if(GetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT))
						{
							SetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT, false);
							SendClientMessage(playerid, 0x66CC00FF, "¬ы включили отображение рации организации");
						}
						else 
						{
							SetPlayerData(playerid, P_ADVISOR_BLOCK_CHAT, true);
							SendClientMessage(playerid, 0xFF6600FF, "¬ы отключили отображение рации организации");
						}
					}
					case 2:
					{
						if(GetPlayerJob(playerid) != 5)
						{
							SendClientMessage(playerid, 0x999999FF, "‘ункци€ доступна советникам по гос. организаци€м");
						}
						else 
						{
							Dialog
							(
								playerid, DIALOG_ADVISOR_TEAM_STRUCTURE, DIALOG_STYLE_LIST, 
								"{33CC66}¬ыберите организацию",
								"1. ѕравительство области\n\
								2. ¬оинска€ часть\n\
								3. √ородска€ больница\n\
								4. √“–  Ђ–итмї\n\
								5. ќтдел полиции є1 (ƒѕ—)\n\
								6. ќтдел полиции є2 (ѕѕ—)\n\
								7. ‘едеральна€ —лужба Ѕезопасности",
								"¬ыбрать", "ќтмена"
							);
							return 1;
						}
					}
					default: return -1;
				}
				
				cmd::smenu(playerid, "");
				return 1;
			}
			
			case DIALOG_ADVISOR_TEAM_STRUCTURE:
			{
				if(!response) return 1;
				if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || GetPlayerJob(playerid) != 5) return 1;
				
				if(0 <= listitem <= 6)
				{
					ShowTeamStructureDialog(playerid, (listitem + 1));
				}
				
				return 1;
			}

			// -----------------------------------------------------------------

			case DIALOG_ADMIN_PANEL:
			{
				if(!response) return 1;

				new fmt_text[128],
					text[1440],
					Cache: result,
					rows;

				switch(listitem)
				{
					case 0: // —писок администрации
					{
						result = mysql_query(mysql, "SELECT * FROM accounts WHERE admin != 0 ORDER BY admin DESC", true);
						rows = cache_num_rows();
						
						format(text, sizeof text, "{3399FF}є акк.\t»м€\t\t\tјдм.ранг\t¬ игре сегодн€{ffffff}");

						for(new i = 0; i < rows; i++)
						{
							new name[21],
								user_id = cache_get_field_content_int(i, "id"),
								lvl = cache_get_field_content_int(i, "admin"),
								game_for_day = cache_get_field_content_int(i, "game_for_day"),
								game_for_day_text[32];

							cache_get_field_content(i, "name", name);
							format(game_for_day_text, sizeof game_for_day_text, "%d ч %d мин", ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS), ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES));

							format(fmt_text, sizeof fmt_text, "\n%d.\t%s%s%d\t\t%s", user_id, name, strlen(name) > 14 ? "\t" : "\t\t", lvl, game_for_day_text);
							strcat(text, fmt_text);
							SetPlayerListitemValue(playerid, i+1, user_id);
						}

						cache_delete(result);

						Dialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_LIST, "{FFCC00}—писок администрации", text, "¬ыбрать", "ќтмена");
					}

					case 1: // —писок лидеров
					{
						result = mysql_query(mysql, "SELECT * FROM accounts WHERE job=10 ORDER BY team ASC", true);
						rows = cache_num_rows();
						
						format(text, sizeof text, "{3399FF}є акк.\t»м€\t\t\t‘ракци€\t¬ игре сегодн€{ffffff}");

						for(new i = 0; i < rows; i++)
						{
							new name[21],
								user_id = cache_get_field_content_int(i, "id"),
								team = cache_get_field_content_int(i, "team"),
								game_for_day = cache_get_field_content_int(i, "game_for_day"),
								game_for_day_text[32];

							cache_get_field_content(i, "name", name);
							format(game_for_day_text, sizeof game_for_day_text, "%d ч %d мин", ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS), ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES));

							format(fmt_text, sizeof fmt_text, "\n%d.\t%s%s%d\t\t%s", user_id, name, strlen(name) > 14 ? "\t" : "\t\t", team, game_for_day_text);
							strcat(text, fmt_text);
							SetPlayerListitemValue(playerid, i+1, user_id);
						}

						cache_delete(result);

						Dialog(playerid, DIALOG_LEADERS, DIALOG_STYLE_LIST, "{FFCC00}—писок лидеров", text, "¬ыбрать", "ќтмена");
					}
				}

				return 1;
			}

			case DIALOG_ADMINS:
			{
				if(!response) return cmd::apanel(playerid, " ");

				new user_id = GetPlayerListitemValue(playerid, listitem);
				SetPVarInt(playerid, "admin_panel_user_id", user_id);

				Dialog
				(
					playerid, DIALOG_EDIT_ADMIN, DIALOG_STYLE_LIST,
					"{FFCC00}–едактировать администратора",
					"\
					1. ѕонизить/повысить адм.ранг\n\
					2. –азжаловать администратора\n\
					{ff3300}3. «аблокировать аккаунт\
					",
					"¬ыбрать", "ќтмена"
				);
				
				return 1;
			}

			case DIALOG_EDIT_ADMIN:
			{
				if(!response) return cmd::apanel(playerid, " ");

				new fmt_text[128],
					user_id = GetPVarInt(playerid, "admin_panel_user_id");

				switch(listitem)
				{
					case 0:
					{
						format
						(
							fmt_text, sizeof fmt_text,
							"{ffffff}\
							»зменение администраторского ранга\n\n\
							ID аккаунта: %d\n\
							»м€: \t%s\
							",
							user_id, GetPlayerNameBySqlID(user_id)
						);

						Dialog(playerid, DIALOG_EDIT_ADMIN_RANG, DIALOG_STYLE_MSGBOX, "{FFCC00}»зменение адм.ранга", fmt_text, "ѕовысить", "ѕонизить");
					}
					case 1:
					{
						format
						(
							fmt_text, sizeof fmt_text,
							"{ffffff}\
							–азжалование администратора\n\n\
							ID аккаунта: %d\n\
							»м€: \t%s\n\n\
							¬ы действительно хотите разжаловать администратора?\
							",
							user_id, GetPlayerNameBySqlID(user_id)
						);

						Dialog(playerid, DIALOG_EDIT_ADMIN_RANG, DIALOG_STYLE_MSGBOX, "{FFCC00}–азжалование администратора", fmt_text, "ƒа", "Ќет");
					}
				}

				return 1;
			}

			case DIALOG_EDIT_ADMIN_RANG:
			{
				new user_id = GetPVarInt(playerid, "admin_panel_user_id"),
					player_id = GetPlayerIDBySqlID(user_id);

				if(player_id != -1)
				{
					if(response) AddPlayerData(player_id, P_ADMIN, +, 1);
					else AddPlayerData(player_id, P_ADMIN, -, 1);
					UpdatePlayerDatabaseInt(player_id, "admin", GetPlayerData(player_id, P_ADMIN));
					if(response) SendClientMessage(playerid, 0x66CC33FF, "¬аш администраторский ранг был повышен");
					else SendClientMessage(playerid, 0xFF3300FF, "¬аш администраторский ранг был понижен");
				}
				else
				{
					new query[55],
						Cache: result,
						admin_rank;

					mysql_format(mysql, query, sizeof query, "SELECT admin FROM accounts WHERE id=%d", user_id);
					result = mysql_query(mysql, query, true);

					if(!cache_num_rows()) return 0;

					admin_rank = cache_get_row_int(0, 0);

					cache_delete(result);

					if(response) admin_rank++;
					else admin_rank--;

					mysql_format(mysql, query, sizeof query, "UPDATE accounts SET admin=%d WHERE id=%d", user_id, admin_rank);
					result = mysql_query(mysql, query, false);
				}


				return 1;
			}

			case DIALOG_LEADERS:
			{
				if(!response) return cmd::apanel(playerid, " ");

				new user_id = GetPlayerListitemValue(playerid, listitem);
				SetPVarInt(playerid, "admin_panel_user_id", user_id);

				Dialog
				(
					playerid, DIALOG_EDIT_LEADER, DIALOG_STYLE_LIST,
					"{FFCC00}–едактировать лидера",
					"\
					1. »зменить управл€емую фракцию\n\
					2. –азжаловать лидера\n\
					{ff3300}3. «аблокировать аккаунт\
					",
					"¬ыбрать", "ќтмена"
				);
				
				return 1;
			}
		}
	}
	return 1;
}

stock DestroyOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[45];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		
		format(query, sizeof query, "DELETE FROM ownable_cars WHERE id=%d", GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);

		format(query, sizeof query, "DELETE FROM trunks WHERE oc_id=%d", GetOwnableCarData(index, OC_SQL_ID));
		mysql_query(mysql, query, false);
		
		if(!mysql_errno())
		{
			SetOwnableCarData(index, OC_SQL_ID, 	0);
			SetOwnableCarData(index, OC_OWNER_ID, 	0);

			DestroyVehicleLabel(vehicleid);
			UnloadOwnableCarTrunk(vehicleid);
			
			DestroyVehicle(vehicleid);
			return 1;
		}
		else printf("[Error]: [OwnableCars]: ќшибка удалени€ личного “—: %d", GetOwnableCarData(index, OC_SQL_ID));
	}
	return 0;
}

stock UpdateOwnableCarNumber(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		return 1;
	}
	return 0;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsPlayerLogged(playerid))
	{
		if(GetPlayerPhone(playerid))
		{
			new fmt_str[5];
			
			valstr(fmt_str, clickedplayerid);
			cmd::add(playerid, fmt_str);
		}
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	/*
    new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "%f, %f, %f", fX, fY, fZ);
	SendClientMessage(playerid, -1, fmt_str);
	*/
    return 1;
}

/*
	¬ызываетс€ перед обработкой команды. ¬ ней можно указать услови€ выполнени€ команды.
	ѕри этом с помощью return 1/0 можно разрешить/запретить выполнение команды.
*/
public OnPlayerCommandReceived(playerid, cmdtext[])
{
	CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);
	
	if(!IsPlayerLogged(playerid)) return 0;
	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
	{
		SendClientMessage(playerid, 0x6B6B6BFF, "Ќе флудите");

		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
			SendClientMessage(playerid, 0x6B6B6BFF, "ѕожалуйста, подождите несколько секунд...");

		return 0;
	}
	
	/*
    if(PlayerInfo[playerid][pMute] == 1) // если у игрока затычка (/mute)
    {
        SendClientMessage(playerid, -1, "ƒождитесь окончани€ действи€ заглушки!");
        return 0; // передать плагину, чтобы он не выполн€л команду
    }
	*/
    return 1; // разрешить выполнение команды
}  

/*
	¬ызываетс€ после выполнени€ команды.
	ѕри этом если success = 1 - команда выполнилась успешно, success = 0 - с ошибкой, success = -1 - команда не найдена.
	“аким образом можно самосто€тельно сделать поддержку стандартных команд:
*/
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(success == -1)
	{
		CheckPlayerFlood(playerid, true, MAX_FLOOD_RATE, FLOOD_RATE_INC);
	
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE)
		{
			SendClientMessage(playerid, 0x6B6B6BFF, "Ќе флудите");

			if(GetPlayerAntiFloodData(playerid, AF_RATE) >= MAX_FLOOD_RATE + 500)
				SendClientMessage(playerid, 0x6B6B6BFF, "ѕожалуйста, подождите несколько секунд...");

			return 0;
		}	
	}
	
	/*
    if(success == -1) // если команда не найдена
    {
        return OnPlayerCommandText(playerid, cmdtext);
    }
	*/
    return 1; // разрешить выполнение команды
}  

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		if(GetPlayerPinCodeState(playerid) != PIN_CODE_STATE_NONE)
		{
			HidePlayerPinCodePTD(playerid);
			if(!IsPlayerLogged(playerid))
			{
				Kick:(playerid);
			}
		}
		switch(GetPlayerData(playerid, P_USE_SELECT_PANEL))
		{
			case SELECT_PANEL_TYPE_CLOTHING:
			{
				ExitPlayerClothingShopPanel(playerid);
			}
			case SELECT_PANEL_TYPE_REG_SKIN:
			{
				if(!IsPlayerLogged(playerid))
				{
					if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
					{
						SelectTextDraw(playerid, 0x009900FF);
					}
				}
			}
			case SELECT_PANEL_TYPE_CAR_MARKET:
			{
				SelectTextDraw(playerid, 0x00FF00FF);
			}
		}
	}
	if(select_TD[0] <= clickedid <= select_TD[3])
	{
		new use_type = GetPlayerData(playerid, P_USE_SELECT_PANEL);
		if(use_type != SELECT_PANEL_TYPE_NONE)
		{
			new buffer = 0;
			new index = _:(clickedid - select_TD[0]);
			
			switch(index)
			{
				case 0: // выбрать
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							buffer = GetPlayerSelectSkin(playerid);
							if(buffer != -1)
							{
								Dialog
								(
									playerid, DIALOG_BIZ_CLOTHING_BUY, DIALOG_STYLE_MSGBOX,
									"{FFCD00}ћагазин одежды", 
									"{FFFFFF}¬ы действительно хотите приобрести этот набор одежды?",
									"ƒа", "Ќет"
								);
							}
						}
						case SELECT_PANEL_TYPE_REG_SKIN:
						{
							if(!IsPlayerLogged(playerid))
							{
								if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
								{
									new sex = GetPlayerSex(playerid);
									buffer = GetPlayerSelectSkin(playerid);
									
									if(buffer != -1)
									{
										SetPlayerData(playerid, P_SKIN, reg_skin_data[sex][buffer]);
									
										new query[90];
										format(query, sizeof query, "UPDATE accounts SET skin=%d,last_login=%d WHERE id=%d LIMIT 1", GetPlayerSkinEx(playerid), gettime(), GetPlayerAccountID(playerid));
										mysql_query(mysql, query, false);
										
										if(!mysql_errno())
										{
											SetPlayerData(playerid, P_MONEY, 500);
											SetPlayerData(playerid, P_SELECT_SKIN, -1);
											
											HidePlayerSelectPanel(playerid);
											HidePlayerSelectPanelPrice(playerid);
											
											SetPlayerSpawnInit(playerid);
											SpawnPlayer(playerid);
									
											RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
											SetPlayerInit(playerid);
										
											SendClientMessage(playerid, 0xFFFF00FF, "–екомендуем прочитать раздел {FF3300}ѕомощь по игре.{FFFF00} ќн находитс€ справа от ¬ас");
											SendClientMessage(playerid, 0xFFFF00FF, "¬ нем ¬ы найдете всю интересующую ¬ас информацию. ”дачи и при€тной игры!");
											
											return 1;
										}
										else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 01)");
									}
								}
							}
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;

							Dialog
							(
								playerid, DIALOG_BIZ_CAR_MARKET_BUY_CAR, DIALOG_STYLE_MSGBOX,
								"{FFCC00}јвтосалон", 
								"{FFFFFF}¬ы действительно хотите приобрести этот транспорт?",
								"ƒа", "Ќет"
							);
						}
					}
				}
				case 1: // вправо
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							buffer = GetPlayerSelectSkin(playerid);
							if(!(0 <= ++buffer <= sizeof g_business_clothing_skins[] - 1))
							{
								buffer = 0;
							}
							SetPlayerSelectClothingSkin(playerid, buffer);
						}
						case SELECT_PANEL_TYPE_REG_SKIN:
						{
							if(!IsPlayerLogged(playerid))
							{
								if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
								{
									new sex = GetPlayerSex(playerid);
									buffer = GetPlayerSelectSkin(playerid);
									
									if(!(0 <= ++buffer <= sizeof(reg_skin_data[])-1))
									{
										buffer = 0;
									}
									else if(!reg_skin_data[sex][buffer])
									{
										buffer = 0;
									}
									SetPlayerSelectSkin(playerid, buffer, reg_skin_data[sex][buffer]);
								}
							}
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;
							CarMarketShowNextCar(playerid, '+');
						}
					}
				}
				case 2: // влево
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							buffer = GetPlayerSelectSkin(playerid);
							if(!(0 <= --buffer <= sizeof g_business_clothing_skins[] - 1))
							{
								buffer = sizeof g_business_clothing_skins[] - 1;
							}
							SetPlayerSelectClothingSkin(playerid, buffer);
						}
						case SELECT_PANEL_TYPE_REG_SKIN:
						{
							if(!IsPlayerLogged(playerid))
							{
								if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_REG_SKIN)
								{
									new sex = GetPlayerSex(playerid);
									buffer = GetPlayerSelectSkin(playerid);
									
									if(!(0 <= --buffer <= sizeof(reg_skin_data[])-1))
									{
										buffer = sizeof(reg_skin_data[])-1;
										if(!sex)
											buffer -= 2;
									}
									SetPlayerSelectSkin(playerid, buffer, reg_skin_data[sex][buffer]);
								}
							}
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							if(GetPlayerData(playerid, P_BUY_CAR) == INVALID_VEHICLE_ID) return 1;
							CarMarketShowNextCar(playerid, '-');
						}
					}
				}
				case 3: // закрыть
				{
					switch(use_type)
					{
						case SELECT_PANEL_TYPE_CLOTHING:
						{
							ExitPlayerClothingShopPanel(playerid);
						}
						case SELECT_PANEL_TYPE_CAR_MARKET:
						{
							ExitPlayerBuyCarMarket(playerid);
						}
					}
				}
			}
		}
	}
	
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(pin_code_PTD[playerid][0] <= playertextid <= pin_code_PTD[playerid][9])
	{
		new pc_state = GetPlayerPinCodeState(playerid);
		new index = _:(playertextid - pin_code_PTD[playerid][0]);
		
		if(pc_state != PIN_CODE_STATE_NONE && 0 <= index <= 9)
		{
			new ch[2];
			valstr(ch, GetPlayerPinCodeValue(playerid, index));
			strcat(pin_code_input[playerid], ch);
			
			if(strlen(pin_code_input[playerid]) >= 4)
			{
				if(pc_state == PIN_CODE_STATE_CHECK)
				{
					HidePlayerPinCodePTD(playerid, false);
				}
				else HidePlayerPinCodePTD(playerid);
				
				switch(pc_state)
				{
					case PIN_CODE_STATE_SET,PIN_CODE_STATE_CHANGE:
					{
						new query[75];
						
						mysql_format(mysql, query, sizeof query, "UPDATE accounts SET setting_pin_code='%e' WHERE id=%d LIMIT 1", pin_code_input[playerid], GetPlayerAccountID(playerid));
						mysql_query(mysql, query, false);
						
						if(!mysql_errno())
						{
							format(g_player[playerid][P_SETTING_PIN], 5, "%s", pin_code_input[playerid]);
							
							format(query, sizeof query, "PIN-код %s: {FFFF00}%s", pc_state == PIN_CODE_STATE_SET ? ("успешно установлен") : ("изменен на"), GetPlayerData(playerid, P_SETTING_PIN));
							
							SendClientMessage(playerid, 0x66CC00FF, query);
							SendClientMessage(playerid, 0x66CC00FF, "«апомните или запишите это число");
							
							ShowPlayerSecuritySettings(playerid);
						}
						else 
						{
							SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 04)");
							ShowPlayerPinCodePTD(playerid, pc_state);
						}
					}
					case PIN_CODE_STATE_CHECK:
					{
						if(strcmp(pin_code_input[playerid], GetPlayerData(playerid, P_SETTING_PIN)) != 0)
						{
							SendClientMessage(playerid, 0xFF6600FF, "PIN-код введен неверно");
							ShowPlayerSecuritySettings(playerid);
						}
						else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_CHANGE);
					}
					case PIN_CODE_STATE_LOGIN_CHECK:
					{
						if(!IsPlayerLogged(playerid))
						{
							if(GetPlayerData(playerid, P_ACCOUNT_STATE) == ACCOUNT_STATE_LOGIN)
							{
								new step = GetPlayerData(playerid, P_ACCOUNT_STEP_STATE);
								new bool: wrong_pass = false;
								
								if
								(
									!strlen(GetPlayerData(playerid, P_SETTING_PIN))
									|| strcmp(GetPlayerData(playerid, P_SETTING_PIN), pin_code_input[playerid]) != 0
								)
								{
									wrong_pass = true;
									step --;
								}					
								ShowPlayerLoginDialog(playerid, step + 1, wrong_pass);
							}
						}
					}
				}
				pin_code_input[playerid][0] = 0;
			}
		}
	}
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_CAR_MARKET)
	{
		if(playertextid == buy_car_PTD[playerid][2]) // кнопка переключени€ типа цвета 1/2
		{
			new type = buy_car_select_color_type[playerid];
			buy_car_select_color_type[playerid] = type ? 0 : 1;
			
			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][3]) // цвет влево
		{
			new type = buy_car_select_color_type[playerid];

			if(-- buy_car_select_color[playerid][type] < 0)
				buy_car_select_color[playerid][type] = sizeof rgb_array - 1;
				
			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
		else if(playertextid == buy_car_PTD[playerid][5]) // цвет вправо
		{
			new type = buy_car_select_color_type[playerid];
		
			if(++ buy_car_select_color[playerid][type] > sizeof rgb_array - 1)
				buy_car_select_color[playerid][type] = 0;
		
			CallLocalFunction("BuyCarPTDUpdate", "i", playerid);
		}
	}
    return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	//if(help_info_CP[0] <= checkpointid <= help_info_CP[sizeof help_info_CP - 1])
	if(checkpointid == help_info_CP)
	{
		cmd::help(playerid, "");
	}
	else if(checkpointid == driving_exam_CP)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM_INFO, DIALOG_STYLE_MSGBOX,
			"{FFCD00}Ёкзамен по вождению",
			"{FFFFFF}«дравствуйте!\n"\
			"¬ы готовы приступить к экзамену? “огда начнем.\n"\
			"Ёкзамен будет состо€ть из теоретической и практической части\n"\
			"¬ теории вам нужно будет ответить на вопросы из вашего экзаменационного билета,\n"\
			"а в практике применить полученные знани€ за рулем учебного автомобил€.\n\n"\
			"{CC9900}—дача на права стоит 600 рублей и в случае провала деньги не будут возвращены!\n"\
			"ѕоэтому перед сдачей внимательно прочитайте обучающий раздел",
			"Ќачать", "ќтмена"
		);
	}
	else if(factory_desk[0][FD_CHEK_ID] <= checkpointid <= factory_desk[sizeof(factory_desk)-1][FD_CHEK_ID])
	{
		new index = checkpointid - factory_desk[0][FD_CHEK_ID];
		SetPlayerFactoryDeskUse(playerid, index, true);
	}
	else if(checkpointid == join_to_job_CP)
	{
		if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE) 
			return SendClientMessage(playerid, 0xCECECEFF, "¬ данный момент ¬ы не можете устроитьс€ на работу");
	
		Dialog
		(
			playerid, DIALOG_VIEV_JOBS_LIST, DIALOG_STYLE_MSGBOX,
			"{FFCD00}ѕрием на работу",
			"{FFFFFF}¬ы хотите просмотреть список доступных работ?", 
			"ƒа", "Ќет"
		);
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_CLUB, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_CLUB)
			{
				if(IsPlayerInJob(playerid) || GetPlayerTempJob(playerid) != TEMP_JOB_NONE) 
					return SendClientMessage(playerid, 0xCECECEFF, "ѕеред посещением бара необходимо завершить рабочий день");
					
				Dialog
				(
					playerid, DIALOG_BIZ_CLUB, DIALOG_STYLE_LIST,
					GetBusinessData(businessid, B_NAME),
					"1. Ћимонад\t\t{00CC00}60 руб\n"\
					"2. ѕиво\t\t\t{00CC00}100 руб\n"\
					"3. ¬ино\t\t\t{00CC00}200 руб\n"\
					"4. Ўампанское\t\t{00CC00}270 руб\n"\
					"5. ¬одка\t\t{00CC00}300 руб\n"\
					"6.  онь€к\t\t{00CC00}450 руб\n"\
					"7. ¬иски\t\t{00CC00}630 руб\n"\
					"8. јбсент\t\t{00CC00}750 руб\n"\
					"{CC9900}9. «акуска\t\t{00CC00}50 руб\n"\
					"{CC9900}10. —игара\t\t{00CC00}80 руб",
					" упить", "ќтмена"
				);	
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_BIZ, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_BIZ)
			{
				Dialog
				(
					playerid, DIALOG_BIZ_REALTOR_BIZ_LIST, DIALOG_STYLE_LIST,
					"{66FF99}Ќомера свободных бизнесов",
					g_business_realtor_list, 
					"»нфо 70р", "«акрыть"
				);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_REALTOR_HOME, BT_BUY_CHECK_ID))
	{
		new businessid = GetPlayerInBiz(playerid);
		if(businessid != -1)
		{
			new type = GetBusinessData(businessid, B_TYPE);
			if(type == BUSINESS_TYPE_REALTOR_HOME)
			{
				ShowPlayerRealtorHomeDialog(playerid);
			}
		}
	}
	else if(checkpointid == GetBusinessInteriorInfo(BUSINESS_INTERIOR_HOTEL, BT_BUY_CHECK_ID))
	{
		ShowPlayerHotelDialog(playerid);
	}
	else if(g_hotel_lift_CP[0] <= checkpointid <= g_hotel_lift_CP[1])
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			new floor_id = GetPlayerData(playerid, P_IN_HOTEL_FLOOR);
			ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id);
		}
	}
	else if(checkpointid == army_ammo_CP) SetPVarInt(playerid, "player_in_ammo_cp", 1);
	return 1;
}

public: CreateFactoryProd(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATED)
		{
			RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);
			
			new skill = GetPVarInt(playerid, "factory_skill");
			if(!(random(5) + skill == 1))
			{
				if(random(6) == 1) 
				{
					new fmt_str[80];
				
					SetPVarInt(playerid, "factory_skill", skill + 1);
					
					format(fmt_str, sizeof fmt_str, "–абочий навык увеличен. “еперь шанс создать бракованый продукт 1 из %d", skill + 5);
					SendClientMessage(playerid, 0x66CC00FF, fmt_str);
				}

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0, USE_ANIM_TYPE_NONE - 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				
				SetPlayerChatBubble(playerid, "+ 1 продукт", 0x66CC00FF, 10.0, 1500);
				
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM, 1279, A_OBJECT_BONE_LEFT_FOREARM, 0.4, -0.09, -0.2, 85.0, 0.0, 90.0, 1.0, 1.0, 1.0, 0);
				GameTextForPlayer(playerid, "~g~~h~SUCCESS", 4000, 1);
				
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_PUT_PROD);
				SetPlayerTempJobCheckAnim(playerid, true);
			}
			else FactoryPlayerDrop(playerid);
			
			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);
		}
	}
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	if(checkpointid == army_ammo_CP) DeletePVar(playerid, "player_in_ammo_cp");
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(GetFuelStationData(0, FS_AREA) <= areaid <= GetFuelStationData(g_fuel_station_loaded - 1, FS_AREA))
	{
		SetPVarInt(playerid, "buy_fuel_count", 	0);
		SetPVarInt(playerid, "buy_fuel_pay_j",	0);
		SetPVarInt(playerid, "buy_fuel_pay", 	0);
	}
	else if(areaid == factory_put_zone)
	{
		if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
		{
			if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_PUT_PROD)
			{
				new objectid;
				new items = GetPlayerJobLoadItems(playerid);
				new Float: x, Float: y, Float: z, Float: angle;
				
				SetPlayerTempJobCheckAnim(playerid, false);
				
				ApplyAnimationEx(playerid, "CARRY", "PUTDWN", 4.0, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				
				TogglePlayerFactoryCP(playerid, true);
				SetPlayerJobLoadItems(playerid, items + 1);
				
				AddPlayerData(playerid, P_JOB_WAGE, +, random(20)+40);
				SendClientMessage(playerid, 0xFFFF00FF, "ѕродукт доставлен на склад");
				
				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);
				
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, angle);
				
				objectid = CreateDynamicObject(1279, x, -200.81883, 1006.51978, 0.9, 0.0, angle);
				MoveDynamicObject(objectid, 263.8, -200.81880, 1006.51978, 2.0, 0.9, 0.0, angle);
				
				Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, OBJECT_TYPE_FACTORY);
			}
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(!GetPlayerData(playerid, P_BLOCK_LEAVE_AREA))
	{
		if(areaid == loader_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_LOADER, true);
		}
		else if(areaid == miner_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_MINER, true);
		}
		else if(areaid == factory_job_area)
		{
			EndPlayerTempJob(playerid, TEMP_JOB_FACTORY, true);
		}
		else if(GetFuelStationData(0, FS_AREA) <= areaid <= GetFuelStationData(g_fuel_station_loaded - 1, FS_AREA))
		{
			new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay") + GetPVarInt(playerid, "buy_fuel_pay_j");
			
			DeletePVar(playerid, "buy_fuel_count");
			DeletePVar(playerid, "buy_fuel_pay_j");
			DeletePVar(playerid, "buy_fuel_pay");
			
			new stationid = areaid - GetFuelStationData(0, FS_AREA);
			if(buy_fuel_pay > 0)
			{
				new query[155];
				
				mysql_format(mysql, query, sizeof query, "INSERT INTO fuel_stations_profit (fid,uid,uip,time,money,view) VALUES (%d,%d,'%e',%d,%d,%d)", GetFuelStationData(stationid, FS_SQL_ID), GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), buy_fuel_pay, IsFuelStationOwned(stationid) ? 1 : 0);
				mysql_query(mysql, query, false);
			}
		}
	}
	else SetPlayerData(playerid, P_BLOCK_LEAVE_AREA, false);
	
	return 1;
}

public OnDynamicObjectMoved(objectid)
{
	new type = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID);
	switch(type)
	{
		case OBJECT_TYPE_FACTORY:
		{
			DestroyDynamicObject(objectid);
			type = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT);
	
			SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT, type + 1);
			UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD);
		}
	}
	
	return 1;
}

public Streamer_OnPluginError(error[])
{
	print("- Streamer_OnPluginError -");
	print(error);
	print("- Streamer_OnPluginError -\n");
	
	return 1;
}

public OnPlayerPressButton(playerid, buttonid)
{	
	if(IsGateButtonID(buttonid))
	{
		new index = buttonid - g_gate_button[0][0];
		new gateid = g_gate_button[index][1];
		
		new bool: gate_status = GetGateData(gateid, G_STATUS);
		if(gate_status == GATE_STATUS_CLOSE)
		{
			SetPlayerChatBubble(playerid, "ќткрывает шлагбаум", 0x00CC00FF, 15.0, 2000);
		}
		else SetPlayerChatBubble(playerid, "«акрывает шлагбаум", 0xFF3333FF, 15.0, 2000);
		
		SetGateStatus(gateid, gate_status ^ GATE_STATUS_OPEN, -1);
	}
	return 0;
}

// ------------------------------------------
public: LoadEntrances()
{
	new idx, j, k;
	new query[85], buffer[2];
	new Cache: result, rows;
	
	result = mysql_query(mysql, "SELECT * FROM entrances", true);
	rows = cache_num_rows();
	
	if(rows > MAX_ENTRANCES)
	{
		rows = MAX_ENTRANCES;
		print("[Entrances]: DB rows > MAX_ENTRANCES");
	}
	
	for(idx = 0; idx < rows; idx ++)
	{
		SetEntranceData(idx, E_SQL_ID, 	cache_get_field_content_int(idx, "id"));
		
		SetEntranceData(idx, E_CITY, 	cache_get_field_content_int(idx, "city"));
		SetEntranceData(idx, E_ZONE, 	cache_get_field_content_int(idx, "zone"));	
		SetEntranceData(idx, E_FLOORS,	cache_get_field_content_int(idx, "floors"));
		
		SetEntranceData(idx, E_POS_X, 	cache_get_field_content_float(idx, "pos_x"));
		SetEntranceData(idx, E_POS_Y, 	cache_get_field_content_float(idx, "pos_y"));
		SetEntranceData(idx, E_POS_Z, 	cache_get_field_content_float(idx, "pos_z"));
		
		SetEntranceData(idx, E_EXIT_POS_X, 	cache_get_field_content_float(idx, "exit_x"));
		SetEntranceData(idx, E_EXIT_POS_Y, 	cache_get_field_content_float(idx, "exit_y"));
		SetEntranceData(idx, E_EXIT_POS_Z, 	cache_get_field_content_float(idx, "exit_z"));
		SetEntranceData(idx, E_EXIT_ANGLE, 	cache_get_field_content_float(idx, "exit_angle"));
		
		// ----------------------------------------------------------------------------------
		SetEntranceData(idx, E_STATUS, -1);
		
		if(GetEntranceData(idx, E_CITY) == -1 || GetEntranceData(idx, E_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y));
			buffer[1] = Get2DZone(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y));
			
			SetEntranceData(idx, E_CITY, buffer[0]);
			SetEntranceData(idx, E_ZONE, buffer[1]);
			
			format(query, sizeof query, "UPDATE entrances SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetEntranceData(idx, E_SQL_ID));
			mysql_query(mysql, query, false);
		}
		//SetEntranceData(idx, E_PICKUP_ID, CreatePickup(1273, 23, GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), GetEntranceData(idx, E_POS_Z), 0, PICKUP_ACTION_TYPE_ENTRANCE_ENT, idx));
		//SetEntranceData(idx, E_MAP_ICON, CreateDynamicMapIcon(GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), GetEntranceData(idx, E_POS_Z), 31, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));
		
		format(query, sizeof query, "- ѕодъезд -\n{FFFFFF}Ќомер подъезда: %d", idx + 1);
		SetEntranceData(idx, E_LABEL, CreateDynamic3DTextLabel(query, 0x3399FFFF, GetEntranceData(idx, E_POS_X), GetEntranceData(idx, E_POS_Y), GetEntranceData(idx, E_POS_Z) + 1.0, 15.0));
	
		for(j = 0; j < MAX_ENTRANCE_FLOORS; j ++)
		{
			for(k = 0; k < 4; k ++)
			{
				g_entrance_flat[idx][j][k] = -1;
			}
		}
	}
	g_entrance_loaded = rows;
	cache_delete(result);
	
	// инициализаци€ инта подъезда
	CreatePickup(1318, 23, 20.4902, 1410.7935, 1508.4100, -1, PICKUP_ACTION_TYPE_ENTRANCE_EXI); // выход из подъезда
	
	CreatePickup(19134, 2, 30.5405, 1403.6593, 1508.4163, -1, PICKUP_ACTION_TYPE_ENTRANCE_LIF); // лифт на 0 этаже
	CreatePickup(19134, 2, 11.1776, 1377.5216, 1508.4163, -1, PICKUP_ACTION_TYPE_ENTRANCE_LIF); // лифт на этаже выше 0
	
	CreateDynamic3DTextLabel("- ѕодъезд -\n{FFFFFF}»спользуйте: {FF9900}/lift", 0x3399FFFF, 30.5405, 1403.6593, 1508.4163 + 1.0, 8.0); // лифт
	CreateDynamic3DTextLabel("- ѕодъезд -\n{FFFFFF}»спользуйте: {FF9900}/lift", 0x3399FFFF, 11.1776, 1377.5216, 1508.4163 + 1.0, 8.0); // лифт
	
	for(idx = 0, k = 0; idx < MAX_ENTRANCE_FLOORS; idx ++)
	{
		format(query, sizeof query, "Ётаж: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0xFFCD00FFF, 9.6966, 1376.0, 1508.4100 + 0.7, 8.0, _, _, _, _, idx + 2);
		
		for(j = 0; j < 4; j ++)
		{
			format(query, sizeof query, " вартира\n{FFFFFF}Ќомер: %d", k + 1);
			CreateDynamic3DTextLabel(query, 0x3399FFFF, g_entrance_flat_pos[j][0], g_entrance_flat_pos[j][1], g_entrance_flat_pos[j][2] + 1.6, 6.0, _, _, _, _, idx + 2);
			
			k ++;
		}
	}
	for(idx = 0; idx < 4; idx ++)
	{
		CreatePickup(19198, 23, g_entrance_flat_pos[idx][0], g_entrance_flat_pos[idx][1], g_entrance_flat_pos[idx][2], -1, PICKUP_ACTION_TYPE_ENTRANCE_FLA, idx);
	}
	printf("[Entrances]: ѕодъездов загружено: %d", g_entrance_loaded);
}

public: EntranceStatusInit(entranceid)
{
	new e_houses = 0;
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(GetHouseData(idx, H_ENTRACE) != entranceid) continue;
		if(!IsHouseOwned(idx)) continue;
		
		e_houses ++;
	}
	UpdateEntrance(entranceid, e_houses);
}

public: LoadOwnableCars()
{
	new rows, vehicleid;
	new Cache: result;
	
	result = mysql_query(mysql, "SELECT oc.*, IFNULL(a.name, 'None') AS owner_name FROM ownable_cars oc LEFT JOIN accounts a ON a.id = oc.owner_id", true);
	rows = cache_num_rows();
	
	if(rows > MAX_OWNABLE_CARS)
	{
		rows = MAX_OWNABLE_CARS;
		print("[OwnableCars]: DB rows > MAX_OWNABLE_CARS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
		
		SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(idx, "model_id"));
		SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(idx, "color_1"));
		SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(idx, "color_2"));
		
		SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(idx, "pos_x"));
		SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(idx, "pos_y"));
		SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(idx, "pos_z"));
		SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(idx, "angle"));
		
		cache_get_field_content(idx, "number", g_ownable_car[idx][OC_NUMBER], mysql, 8);

		SetOwnableCarData(idx, OC_ALARM, 		bool: cache_get_field_content_int(idx, "alarm"));
		SetOwnableCarData(idx, OC_KEY_IN, 		bool: cache_get_field_content_int(idx, "key_in"));
	
		SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(idx, "create_time"));
		
		cache_get_field_content(idx, "owner_name", g_ownable_car[idx][OC_OWNER_NAME], mysql, 21);
		// ----------------------------------------------------------------------------------------
		
		if(strlen(GetOwnableCarData(idx, OC_NUMBER)) != 6)
			strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);
			
		vehicleid = CreateVehicle
		(
			GetOwnableCarData(idx, OC_MODEL_ID), 
			GetOwnableCarData(idx, OC_POS_X), 
			GetOwnableCarData(idx, OC_POS_Y), 
			GetOwnableCarData(idx, OC_POS_Z), 
			GetOwnableCarData(idx, OC_ANGLE), 
			GetOwnableCarData(idx, OC_COLOR_1), 
			GetOwnableCarData(idx, OC_COLOR_2),
			-1, 
			0, 
			VEHICLE_ACTION_TYPE_OWNABLE_CAR,
			idx
		);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
			SetVehicleParam(vehicleid, V_LOCK, bool: cache_get_field_content_int(idx, "status"));
			
			SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(idx, "mileage"));
		}
	}
	g_ownable_car_loaded = rows;
	cache_delete(result);
	
	printf("[OwnableCars]: Ћичных авто загружено: %d", g_ownable_car_loaded);
}

public: LoadOwnableCar(oc_id)
{
	if(g_ownable_car_loaded + 1 > MAX_OWNABLE_CARS)
	{
		print("[OwnableCars]: ќшибка в загрузке. ѕревышен лимит личного транспорта (MAX_OWNABLE_CARS)");
		return -1;
	}

	new query[55],
		Cache: result,
		vehicleid;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE id='%d' LIMIT 1", oc_id);
	result = mysql_query(mysql, query, true);

	new idx = GetFreeOwnableCarID();

	SetOwnableCarData(idx, OC_SQL_ID, 		cache_get_field_content_int(0, "id"));
	SetOwnableCarData(idx, OC_OWNER_ID, 	cache_get_field_content_int(0, "owner_id"));
	
	SetOwnableCarData(idx, OC_MODEL_ID, 	cache_get_field_content_int(0, "model_id"));
	SetOwnableCarData(idx, OC_COLOR_1, 		cache_get_field_content_int(0, "color_1"));
	SetOwnableCarData(idx, OC_COLOR_2, 		cache_get_field_content_int(0, "color_2"));
	
	SetOwnableCarData(idx, OC_POS_X, 		cache_get_field_content_float(0, "pos_x"));
	SetOwnableCarData(idx, OC_POS_Y, 		cache_get_field_content_float(0, "pos_y"));
	SetOwnableCarData(idx, OC_POS_Z, 		cache_get_field_content_float(0, "pos_z"));
	SetOwnableCarData(idx, OC_ANGLE, 		cache_get_field_content_float(0, "angle"));
	
	cache_get_field_content(0, "number", g_ownable_car[idx][OC_NUMBER], mysql, 8);

	SetOwnableCarData(idx, OC_ALARM, 		bool: cache_get_field_content_int(0, "alarm"));
	SetOwnableCarData(idx, OC_KEY_IN, 		bool: cache_get_field_content_int(0, "key_in"));

	SetOwnableCarData(idx, OC_CREATE, 		cache_get_field_content_int(0, "create_time"));
	
	cache_get_field_content(0, "owner_name", g_ownable_car[idx][OC_OWNER_NAME], mysql, 21);

	// ----------------------------------------------------------------------------------------
	
	if(strlen(GetOwnableCarData(idx, OC_NUMBER)) != 6)
		strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);
		
	vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID), 
		GetOwnableCarData(idx, OC_POS_X), 
		GetOwnableCarData(idx, OC_POS_Y), 
		GetOwnableCarData(idx, OC_POS_Z), 
		GetOwnableCarData(idx, OC_ANGLE), 
		GetOwnableCarData(idx, OC_COLOR_1), 
		GetOwnableCarData(idx, OC_COLOR_2),
		-1, 
		0, 
		VEHICLE_ACTION_TYPE_OWNABLE_CAR,
		idx
	);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
		SetVehicleParam(vehicleid, V_LOCK, bool: cache_get_field_content_int(0, "status"));
		
		SetVehicleData(vehicleid, V_MILEAGE, cache_get_field_content_float(0, "mileage"));

		SetVehicleData(vehicleid, V_LAST_LOAD_TIME, gettime());
		SetVehicleData(vehicleid, V_HEALTH, cache_get_field_content_float(0, "health"));

		SetVehicleHealth(vehicleid, GetVehicleData(vehicleid, V_HEALTH));
	}

	cache_delete(result);

	LoadOwnableCarTrunk(vehicleid);

	return 1;
}

stock GetFreeOwnableCarID()
{
	for(new idx; idx < sizeof g_ownable_car; idx ++)
	{
		if(GetOwnableCarData(idx, OC_CREATE)) continue;

		return idx;
	}

	return -1;
}

stock UnloadPlayerOwnableCar(playerid, bool: ignore_time = false)
{
	new vehicleid = GetPlayerOwnableCar(playerid);

	if(vehicleid == INVALID_VEHICLE_ID)
	{
		return -1;
	}

	if((GetVehicleData(vehicleid, V_LAST_LOAD_TIME) > gettime() - 300) && !ignore_time)
	{
		return 0;
	}

	new index = GetVehicleData(vehicleid, V_ACTION_ID);

	SetOwnableCarData(index, OC_CREATE, 0);

	DestroyVehicleLabel(vehicleid);

	DestroyVehicle(vehicleid);
	UnloadOwnableCarTrunk(vehicleid);

	SetVehicleData(vehicleid, V_LAST_LOAD_TIME, 0);

	SetPlayerData(playerid, P_OWNABLE_CAR, INVALID_VEHICLE_ID);

	return 1;
}

public: LoadTrunks()
{
	new Cache: result, rows;
	new vehicleid, slot, buffer;
	
	result = mysql_query(mysql, "SELECT * FROM trunks ORDER BY owner_id ASC, id ASC", true);
	rows = cache_num_rows();
	
	for(new idx; idx < rows; idx ++)
	{
		vehicleid = GetOwnableCarBySqlID(cache_get_field_content_int(idx, "owner_id"));
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			for(slot = 0; slot < MAX_VEHICLE_TRUNK_SLOTS; slot ++)
			{
				if(GetTrunkData(vehicleid, slot, VT_SQL_ID)) continue;
				
				SetTrunkData(vehicleid, slot, VT_SQL_ID,		cache_get_field_content_int(idx, "id"));
				SetTrunkData(vehicleid, slot, VT_ITEM_TYPE, 	cache_get_field_content_int(idx, "item_id"));
				SetTrunkData(vehicleid, slot, VT_ITEM_AMOUNT, 	cache_get_field_content_int(idx, "amount"));
				SetTrunkData(vehicleid, slot, VT_ITEM_VALUE,	cache_get_field_content_int(idx, "value"));
			}
			buffer ++;
		}
	}
	
	cache_delete(result);
	printf("[Trunks]: ѕредметов загружено: %d", buffer);
}

public: LoadOwnableCarTrunk(vehicleid)
{
	new query[60],
		slot,
		index,
		rows,
		Cache: result;

	index = GetVehicleData(vehicleid, V_ACTION_ID);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM trunks WHERE oc_id='%d' ORDER BY id ASC", index);
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	if(rows > MAX_VEHICLE_TRUNK_SLOTS)
		rows = MAX_VEHICLE_TRUNK_SLOTS;

	for(slot = 0; slot < rows; slot ++)
	{
		if(GetTrunkData(vehicleid, slot, VT_SQL_ID)) continue;
		
		SetTrunkData(vehicleid, slot, VT_SQL_ID,		cache_get_field_content_int(slot, "id"));
		SetTrunkData(vehicleid, slot, VT_ITEM_TYPE, 	cache_get_field_content_int(slot, "item_id"));
		SetTrunkData(vehicleid, slot, VT_ITEM_AMOUNT, 	cache_get_field_content_int(slot, "amount"));
		SetTrunkData(vehicleid, slot, VT_ITEM_VALUE,	cache_get_field_content_int(slot, "value"));
	}

	cache_delete(result);
}

stock UnloadOwnableCarTrunk(vehicleid)
{
	for(new slot = 0; slot < MAX_VEHICLE_TRUNK_SLOTS; slot ++)
	{
		RemoveTrunkItem(vehicleid, slot);
	}
}

public: LoadHotels()
{
	new query[64], idx;
	new Cache: result, rows;
	new hotel_id, room_id;
	
	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') AS owner_name FROM hotels h LEFT JOIN accounts a ON a.id = h.owner_id ORDER BY h.hotel_id ASC, h.id ASC", true);
	rows = cache_num_rows();
	
	if(rows > MAX_HOTELS * MAX_HOTEL_ROOMS)
	{
		rows = MAX_HOTELS * MAX_HOTEL_ROOMS;
		print("[Hotels]: DB rows > MAX_HOTELS * MAX_HOTEL_ROOMS");
	}
	
	for(idx = 0; idx < rows; idx ++)
	{
		hotel_id = cache_get_field_content_int(idx, "hotel_id");
		if(0 <= hotel_id <= MAX_HOTELS-1)
		{
			room_id = g_hotel_rooms_loaded[hotel_id];
			if(0 <= room_id <= MAX_HOTEL_ROOMS-1)
			{
				SetHotelData(hotel_id, room_id, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
				SetHotelData(hotel_id, room_id, H_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
				SetHotelData(hotel_id, room_id, H_RENT_DATE, 	cache_get_field_content_int(idx, "rent_time"));
				SetHotelData(hotel_id, room_id, H_STATUS, 		bool: cache_get_field_content_int(idx, "status"));
				
				cache_get_field_content(idx, "owner_name", g_hotel[hotel_id][room_id][H_OWNER_NAME], mysql, 21);
				
				// ----------------------------------------------------------------------------------------------
				if(IsHotelRoomOwned(hotel_id, room_id) && !strcmp(GetHotelData(hotel_id, room_id, H_OWNER_NAME), "None", true))
				{
					SetHotelData(hotel_id, room_id, H_OWNER_ID, 0);
					
					format(query, sizeof query, "UPDATE hotels SET owner_id=0 WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_SQL_ID));
					mysql_query(mysql, query, false);
				}
				
				if(!IsHotelRoomOwned(hotel_id, room_id))
				{
					SetHotelData(hotel_id, room_id, H_STATUS, false);
				}
				g_hotel_rooms_loaded[hotel_id] ++;
			}
		}
	}
	cache_delete(result);
	
	// ----------------------------------
	CreatePickup(1318, 23, 733.0804, 599.6274, 1002.9598, -1);
	CreatePickup(1318, 23, 1276.0054, -776.3987, 1202.7220, -1);
	
	g_hotel_lift_CP[0] = CreateDynamicCP(733.0804, 599.6274, 1002.9598, 1.0, _, _, _, 5.0);
	g_hotel_lift_CP[1] = CreateDynamicCP(1276.0054, -776.3987, 1202.722, 1.0, _, _, _, 5.0);
	
	// ----------------------------------
	new 
		Float: p_pos_x = 1273.2, 
		Float: p_pos_y = -778.3146,
		Float: p_pos_z = 1202.7220;
	
	for(idx = 0; idx < 12; idx ++)
	{
		if(!(idx & 1))
		{
			p_pos_y += 4.0,
			p_pos_x += 5.7;
		}
		else p_pos_x -= 5.7;
	
		CreatePickup(19197, 23, p_pos_x, p_pos_y, p_pos_z, -1, PICKUP_ACTION_TYPE_HOTEL_ROOM, idx);
		
		format(query, sizeof query, " омната\n{FFFFFF}Ќомер: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0x3399FFFF, p_pos_x, p_pos_y, p_pos_z + 1.4, 6.0);
	}
	
	for(idx = 0; idx < MAX_HOTEL_FLOORS; idx ++)
	{
		format(query, sizeof query, "Ётаж: %d", idx + 1);
		CreateDynamic3DTextLabel(query, 0xFFCD00FF, 1276.0054, -776.3987, 1202.722 + 1.7, 8.0, _, _, _, _, idx + 1);
	}
	
	// ----------------------------------
	for(idx = 0; idx < MAX_HOTELS; idx ++)
	{
		if(g_hotel_rooms_loaded[idx])
		{
			g_hotel_loaded ++;
		}
	}
	printf("[Hotels]: ќтелей загружено: %d / Ќомеров: %d", g_hotel_loaded, rows);
}

public: LoadHouses()
{
	new idx;
	new query[85], buffer[2];
	new Cache: result, rows;

	// result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses h LEFT JOIN accounts a ON a.id = h.owner_id ORDER BY h.id ASC, h.entrance ASC", true);
	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses h LEFT JOIN accounts a ON a.id=h.owner_id", true);
	rows = cache_num_rows();
	
	if(rows > MAX_HOUSES)
	{
		rows = MAX_HOUSES;
		print("[Houses]: DB rows > MAX_HOUSES");
	}
	
	for(idx = 0; idx < rows; idx ++)
	{
		SetHouseData(idx, H_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetHouseData(idx, H_OWNER_ID, 		cache_get_field_content_int(idx, "owner_id"));
		
		cache_get_field_content(idx, "name", g_house[idx][H_NAME], mysql, 20);
		
		SetHouseData(idx, H_CITY,			cache_get_field_content_int(idx, "city"));
		SetHouseData(idx, H_ZONE,			cache_get_field_content_int(idx, "zone"));
		SetHouseData(idx, H_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		
		SetHouseData(idx, H_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetHouseData(idx, H_PRICE,			cache_get_field_content_int(idx, "price"));
		SetHouseData(idx, H_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));
		SetHouseData(idx, H_TYPE,			cache_get_field_content_int(idx, "type"));
		SetHouseData(idx, H_ENTRACE,		cache_get_field_content_int(idx, "entrance"));
		SetHouseData(idx, H_LOCK_STATUS,	bool: cache_get_field_content_int(idx, "lock"));
		
		SetHouseData(idx, H_POS_X,			cache_get_field_content_float(idx, "x"));
		SetHouseData(idx, H_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetHouseData(idx, H_POS_Z,			cache_get_field_content_float(idx, "z"));
		
		SetHouseData(idx, H_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetHouseData(idx, H_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetHouseData(idx, H_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetHouseData(idx, H_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));
		
		SetHouseData(idx, H_CAR_POS_X,		cache_get_field_content_float(idx, "car_x"));
		SetHouseData(idx, H_CAR_POS_Y,		cache_get_field_content_float(idx, "car_y"));
		SetHouseData(idx, H_CAR_POS_Z,		cache_get_field_content_float(idx, "car_z"));
		SetHouseData(idx, H_CAR_ANGLE,		cache_get_field_content_float(idx, "car_angle"));
		
		SetHouseData(idx, H_STORE_X,		cache_get_field_content_float(idx, "store_x"));
		SetHouseData(idx, H_STORE_Y,		cache_get_field_content_float(idx, "store_y"));
		SetHouseData(idx, H_STORE_Z,		cache_get_field_content_float(idx, "store_z"));

		SetHouseData(idx, H_EVICTION,		cache_get_field_content_int(idx, "eviction"));
		
		cache_get_field_content(idx, "owner_name", g_house[idx][H_OWNER_NAME], mysql, 21);
		
		// -------------------------
		SetHouseData(idx, H_STORE_LABEL, Text3D:-1);
	
		buffer[0] = GetHouseData(idx, H_TYPE);
		if(!strlen(GetHouseData(idx, H_NAME)))
			format(g_house[idx][H_NAME], 20, GetHouseTypeInfo(buffer[0], HT_NAME), 0);
		
		if(GetHouseData(idx, H_ENTRACE) == -1)
		{
			if(GetHouseData(idx, H_CITY) == -1 || GetHouseData(idx, H_ZONE) == -1)
			{
				buffer[0] = Get2DCity(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));
				buffer[1] = Get2DZone(GetHouseData(idx, H_POS_X), GetHouseData(idx, H_POS_Y));
				
				SetHouseData(idx, H_CITY, buffer[0]);
				SetHouseData(idx, H_ZONE, buffer[1]);
				
				format(query, sizeof query, "UPDATE houses SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetHouseData(idx, H_SQL_ID));
				mysql_query(mysql, query, false);
			}
		}
		if(IsHouseOwned(idx) && !strcmp(GetHouseData(idx, H_OWNER_NAME), "None", true))
		{
			SetHouseData(idx, H_OWNER_ID, 0);
			
			format(query, sizeof query, "UPDATE houses SET owner_id=0,improvements=0 WHERE id=%d", GetHouseData(idx, H_SQL_ID));
			mysql_query(mysql, query, false);
		}
		
		if(!IsHouseOwned(idx))
		{
			SetHouseData(idx, H_IMPROVEMENTS, 	0);
			SetHouseData(idx, H_LOCK_STATUS, 	false);
		}
		UpdateHouse(idx);
		
		HouseHealthInit(idx);
		HouseStoreInit(idx);
		
		buffer[0] = GetHouseData(idx, H_ENTRACE);
		if(buffer[0] != -1)
		{	
			buffer[1] = g_entrance_flats_loaded[buffer[0]];
			
			g_entrance_flats_loaded[buffer[0]] ++;
			g_entrance_flat[buffer[0]][buffer[1] / 4][buffer[1] % 4] = idx;
			
			SetHouseData(idx, H_FLAT_ID, buffer[1]);
		}
	}
	g_house_loaded = rows;
	cache_delete(result);
	
	printf("[Houses]: ƒомов загружено: %d", g_house_loaded);
}

public: LoadHousesRenters()
{
	new sql_id;
	new owner_id;
	new house_id;
	new room_id;
	new rent_time;
	new time;
	new owner_name[21];
	
	new Cache: result, rows;
	
	result = mysql_query(mysql, "SELECT h.*, IFNULL(a.name, 'None') owner_name FROM houses_renters h LEFT JOIN accounts a ON a.id=h.owner_id", true);
	rows = cache_num_rows();
	
	for(new idx; idx < rows; idx ++)
	{
		sql_id = 	cache_get_field_content_int(idx, "id");
		
		owner_id = 	cache_get_field_content_int(idx, "owner_id");
		house_id = 	cache_get_field_content_int(idx, "house_id");
		room_id =	cache_get_field_content_int(idx, "room_id");
		rent_time =	cache_get_field_content_int(idx, "rent_time");
		time = 		cache_get_field_content_int(idx, "time");
		
		cache_get_field_content(idx, "owner_name", owner_name, mysql, 21);
		if(!strlen(owner_name))
			owner_name[0] = '\1';
		
		CallLocalFunction("HouseRenterInit", "iiiiiis", sql_id, owner_id, house_id, room_id, rent_time, time, owner_name);
	}
	cache_delete(result);
	
	printf("[Houses]: јрендаторов загружено: %d", rows);
}

public: HouseRenterInit(id, owner_id, house_id, room_id, rent_time, time, owner_name[])
{
	new houseid = GetHouseIndexBySQLID(house_id);
	if(houseid != -1)
	{
		if(0 <= room_id <= MAX_HOUSE_ROOMS-1)
		{
			SetHouseRenterInfo(houseid, room_id, HR_SQL_ID, id);
			SetHouseRenterInfo(houseid, room_id, HR_OWNER_ID, owner_id);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_DATE, rent_time);
			SetHouseRenterInfo(houseid, room_id, HR_RENT_TIME, time);
			
			format(g_house_renters[houseid][room_id][HR_OWNER_NAME], 21, owner_name, 0);
			
			AddHouseRentersCount(houseid, +, 1);
		}
	}
}

public: ShowPlayerHouseInfo(playerid, houseid)
{
	if(0 <= houseid <= g_house_loaded-1)
	{
		if(GetPlayerInHouse(playerid) == -1)
		{
			SetPlayerUseListitem(playerid, houseid);
		
			new fmt_str[40];
			new string[256];
			new type = GetHouseData(houseid, H_TYPE);
			
			if(IsHouseOwned(houseid))
			{
				if(!GetHouseData(houseid, H_EVICTION))
				{
					format(fmt_str, sizeof fmt_str, "{FFFFFF}¬ладелец:\t\t\t{33CCFF}%s\n\n", GetHouseData(houseid, H_OWNER_NAME));
					strcat(string, fmt_str);
				}
				else
				{
					strcat(string, "{FFFFFF}¬ладелец:\t\t\t{33CCFF}¬ыселен\n\n");
				}
			}
			
			format(fmt_str, sizeof fmt_str, "{FFFFFF}“ип:\t\t\t\t%s\n", GetHouseData(houseid, H_NAME));
			strcat(string, fmt_str);
			
			if(GetHouseData(houseid, H_ENTRACE) != -1)
			{
				//format(fmt_str, sizeof fmt_str, "Ётаж:\t\t\t\t%d\n", GetHouseData(houseid, H_FLAT_ID) / 4 + 1);
				//strcat(string, fmt_str);
				
				format(fmt_str, sizeof fmt_str, "Ќомер квартиры:\t\t%d\n", GetHouseData(houseid, H_FLAT_ID) + 1);
				strcat(string, fmt_str);
				
				if(!IsHouseOwned(houseid)) strcat(string, "\n");
				
				format(fmt_str, sizeof fmt_str, "Ќомер подъезда:\t\t%d\n", GetHouseData(houseid, H_ENTRACE) + 1);
				strcat(string, fmt_str);
			}
			else 
			{
				format(fmt_str, sizeof fmt_str, "Ќомер дома:\t\t\t%d\n", houseid);
				strcat(string, fmt_str);
				
				if(!IsHouseOwned(houseid)) strcat(string, "\n");
			}
			
			format(fmt_str, sizeof fmt_str, " оличество комнат:\t\t%d\n", GetHouseTypeInfo(type, HT_ROOMS));
			strcat(string, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "—тоимость:\t\t\t%d руб\n", GetHouseData(houseid, H_PRICE));
			strcat(string, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "≈жедневна€ квартплата:\t%d руб", GetHouseData(houseid, H_RENT_PRICE));
			strcat(string, fmt_str);
			
			if(IsHouseOwned(houseid))
			{
				if(GetHouseData(houseid, H_IMPROVEMENTS) >= 4)
				{
					format(fmt_str, sizeof fmt_str, " {33CC99}(%d руб)", GetHouseData(houseid, H_RENT_PRICE) / 2);
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_HOUSE_ENTER, DIALOG_STYLE_MSGBOX, "{FF9900}ƒом зан€т", string, "¬ойти", "ќтмена");
			}
			else Dialog(playerid, DIALOG_HOUSE_BUY, DIALOG_STYLE_MSGBOX, "{33CC00}ƒом свободен", string, " упить", "ќтмена");
		}
	}
	return 1;
}

public: ShowPlayerHouseDialog(playerid, operationid)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		if(GetHouseData(houseid, H_ENTRACE) != -1)
		{
			if(operationid >= HOUSE_OPERATION_CAR_DELIVERY)
			{
				operationid ++;
			}
		}
		switch(operationid)
		{
			case HOUSE_OPERATION_PARAMS:
			{
				if(GetHouseData(houseid, H_ENTRACE) != -1)
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}»зменение параметров дома",
						"1. {669966}ќткрыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
						"2. ”лучшить дом\n"\
						"3. ќтметить транспорт на GPS\n"\
						"4. —писок арендаторов",
						"¬ыбрать", "Ќазад"
					);
				}
				else 
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_PARAMS, DIALOG_STYLE_LIST,
						"{33AACC}»зменение параметров дома",
						"1. {669966}ќткрыть {FFFFFF}или {CC3333}закрыть {FFFFFF}дом\n"\
						"2. ”лучшить дом\n"\
						"3. ƒоставить транспорт к дому {FF6600}(550 руб)\n"\
						"4. ќтметить транспорт на GPS\n"\
						"5. —писок арендаторов",
						"¬ыбрать", "Ќазад"
					);
				}
			}
			case HOUSE_OPERATION_LOCK:
			{
				if(GetHouseData(houseid, H_LOCK_STATUS))
				{
					SetHouseData(houseid, H_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "ƒом открыт");					
				}
				else 
				{
					SetHouseData(houseid, H_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "ƒом закрыт");				
				}

				new query[75];
				format(query, sizeof query, "UPDATE `houses` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);
				
				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				new string[512];
				
				new str_numeric[14 + 1];
				new i_level = GetHouseData(houseid, H_IMPROVEMENTS);
				
				for(new idx; idx < sizeof(g_house_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t\t", idx + 1, g_house_improvements[idx][I_NAME]);
	
					switch(idx)
					{
						case 1,4,5:
							strcat(fmt_str, "\t");
						
						case 6:
							strcat(fmt_str, "\t\t");
					}
	
					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, " уплено");
					}
					else
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);
						
						valfmt(str_numeric, g_house_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", str_numeric);
						
						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_HOUSE_IMPROVEMENTS, DIALOG_STYLE_LIST, "{33AADD}”лучшени€ дл€ дома", string, " упить", "Ќазад");
			}
			case HOUSE_OPERATION_CAR_DELIVERY:
			{
				if(GetHouseData(houseid, H_ENTRACE) == -1)
				{
					new vehicleid = GetPlayerOwnableCar(playerid);
					if(vehicleid != INVALID_VEHICLE_ID)
					{
						new price = 550;
						if(GetPlayerMoneyEx(playerid) >= price)
						{
							GivePlayerMoneyEx(playerid, -price, "ƒоставка “— к дому (/home)", true, true);
							
							SetVehiclePos
							(
								vehicleid, 
								GetHouseData(houseid, H_CAR_POS_X),
								GetHouseData(houseid, H_CAR_POS_Y),
								GetHouseData(houseid, H_CAR_POS_Z)
							);
							SetVehicleZAngle(vehicleid, GetHouseData(houseid, H_CAR_ANGLE));
							SetVehicleParam(vehicleid, V_ENGINE, IsABike(vehicleid) ? VEHICLE_PARAM_ON : VEHICLE_PARAM_OFF);

							return SendClientMessage(playerid, 0x3399FFFF, "“ранспорт был доставлен к ¬ашему дому");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "Ќедостаточно денег");
					}
					else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет личного транспорта");
				}
				else SendClientMessage(playerid, 0xCECECEFF, "‘ункци€ доступна владельцам домов");
				
				CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
			}
			case HOUSE_OPERATION_CAR_GPS:
			{
				if(!cmd::getmycar(playerid, ""))
				{
					CallLocalFunction("ShowPlayerHouseDialog", "ii", playerid, HOUSE_OPERATION_PARAMS);
				}
			}
			case HOUSE_OPERATION_RENTERS:
			{
				if(GetHouseRentersCount(houseid) > 0)
				{
					new type = GetHouseData(houseid, H_TYPE);
					new rooms = GetHouseTypeInfo(type, HT_ROOMS);
				
					new fmt_str[21 + 1];
					new string[MAX_HOUSE_ROOMS * (sizeof fmt_str) + 1];
					
					for(new idx, count; idx < rooms; idx ++)
					{
						if(!IsHouseRoomOwned(houseid, idx)) continue;
						
						format(fmt_str, sizeof fmt_str, "%s\n", GetHouseRenterInfo(houseid, idx, HR_OWNER_NAME));
						strcat(string, fmt_str);
						
						SetPlayerListitemValue(playerid, count ++, idx);
					}
					Dialog(playerid, DIALOG_HOUSE_RENTERS, DIALOG_STYLE_LIST, "{33AACC}—писок арендаторов", string, "¬ыбрать", "Ќазад");
				}
				else 
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX, 
						"{33AACC}—писок арендаторов",
						"{FFFFFF}¬ ¬ашем доме, кроме ¬ас, сейчас никто не проживает", 
						"Ќазад", ""
					);
				}
			}
		}
	}
	return 1;
}

public: UpdateRealtorHomeInfo()
{
	new count = -1;
	new fmt_str[128];
	new free_houses = GetFreeHousesCount();
	
	new new_line = floatround((float(free_houses) / 10) + 2, floatround_ceil);
	if(new_line > 28)
	{
		new_line = 28;
	}
	
	g_house_realtor_list = "{FFFFFF}";
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;
		if(++count > new_line)
		{
			count = -1;
		}
		
		format(fmt_str, sizeof fmt_str, "%d%s", idx, count != -1 ? ("\t") : ("\n"));
		strcat(g_house_realtor_list, fmt_str);
	}
	
	format
	(
		fmt_str, sizeof fmt_str, 
		"—осто€ние недвижимости\n"\
		"(обновл€етс€ каждый час)\n\n"\
		"{FF6633} уплено домов: %d\n"\
		"{99FF33}—вободно домов: %d",
		g_house_loaded - free_houses,
		free_houses
	);
	UpdateDynamic3DTextLabelText(g_house_realtor_label, 0xCCFF66FF, fmt_str);
}

public: UpdateHouseStore(houseid)
{
	if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
	{
		new fmt_str[256];
		
		format
		(
			fmt_str, sizeof fmt_str,
			"Ўкаф\n"\
			"{FFFFFF}ћеталл: {6699FF}%d из 700 кг\n"\
			"{FFFFFF}Ќаркотики: {6699FF}%d из 2000 г\n"\
			"{FFFFFF}ќружие: {6699FF}%s\n"\
			"{FFFFFF}ѕатроны: {6699FF}%d из 3000 шт\n"\
			"{FFFFFF}ќдежда: {FF6600}%s",	
			0,
			0,
			("нет"),
			0,
			("нет")
		);
		UpdateDynamic3DTextLabelText(GetHouseData(houseid, H_STORE_LABEL), 0xFFFF00FF, fmt_str);
	}
}

public: EvictHouseRentersAll(houseid)
{
	new query[128];
	
	format(query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE house=%d AND house_type=%d", houseid, HOUSE_TYPE_ROOM);
	mysql_tquery(mysql, query, "", "");
	
	format(query, sizeof query, "DELETE FROM houses_renters WHERE house_id=%d", GetHouseData(houseid, H_SQL_ID));
	mysql_tquery(mysql, query, "", "");
	
	for(new idx; idx < MAX_HOUSE_ROOMS; idx ++)
	{
		if(!IsHouseRoomOwned(houseid, idx)) continue;
		
		SetHouseRenterInfo(houseid, idx, HR_SQL_ID, 	0);
		SetHouseRenterInfo(houseid, idx, HR_OWNER_ID, 	0);
	}
	
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) != houseid) continue;
		
		SetPlayerData(playerid, P_HOUSE, -1);
		SetPlayerData(playerid, P_HOUSE_ROOM, -1);
		SetPlayerData(playerid, P_HOUSE_TYPE, -1);
		
		SendClientMessage(playerid, 0x3399FFFF, "¬ы были выселены из дома");
	}
}

public: LoadBusinesses()
{
	new query[85], buffer[2];
	new Cache: result, rows;

	result = mysql_query(mysql, "SELECT b.*, IFNULL(a.name, 'None') AS owner_name FROM business b LEFT JOIN accounts a ON a.id=b.owner_id", true);
	rows = cache_num_rows();
	
	if(rows > MAX_BUSINESS)
	{
		rows = MAX_BUSINESS;
		print("[Business]: DB rows > MAX_BUSINESS");
	}
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessData(idx, B_SQL_ID, 		cache_get_field_content_int(idx, "id"));
		SetBusinessData(idx, B_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
		
		cache_get_field_content(idx, "name", g_business[idx][B_NAME], mysql, 24);
		
		SetBusinessData(idx, B_CITY,			cache_get_field_content_int(idx, "city"));
		SetBusinessData(idx, B_ZONE,			cache_get_field_content_int(idx, "zone"));
		SetBusinessData(idx, B_IMPROVEMENTS,	cache_get_field_content_int(idx, "improvements"));
		SetBusinessData(idx, B_PRODS,			cache_get_field_content_int(idx, "products"));
		SetBusinessData(idx, B_PROD_PRICE,		cache_get_field_content_int(idx, "prod_price"));
		SetBusinessData(idx, B_BALANCE,			cache_get_field_content_int(idx, "balance"));
		SetBusinessData(idx, B_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		SetBusinessData(idx, B_PRICE,			cache_get_field_content_int(idx, "price"));
		SetBusinessData(idx, B_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));
		
		SetBusinessData(idx, B_TYPE,			cache_get_field_content_int(idx, "type"));
		SetBusinessData(idx, B_INTERIOR,		cache_get_field_content_int(idx, "interior"));
		
		SetBusinessData(idx, B_ENTER_PRICE,		cache_get_field_content_int(idx, "enter_price"));
		SetBusinessData(idx, B_ENTER_MUSIC,		cache_get_field_content_int(idx, "enter_music"));
		
		SetBusinessData(idx, B_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));
		
		SetBusinessData(idx, B_POS_X,			cache_get_field_content_float(idx, "x"));
		SetBusinessData(idx, B_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetBusinessData(idx, B_POS_Z,			cache_get_field_content_float(idx, "z"));
		
		SetBusinessData(idx, B_EXIT_POS_X,		cache_get_field_content_float(idx, "exit_x"));
		SetBusinessData(idx, B_EXIT_POS_Y,		cache_get_field_content_float(idx, "exit_y"));
		SetBusinessData(idx, B_EXIT_POS_Z,		cache_get_field_content_float(idx, "exit_z"));
		SetBusinessData(idx, B_EXIT_ANGLE,		cache_get_field_content_float(idx, "exit_angle"));

		SetBusinessData(idx, B_EVICTION,		cache_get_field_content_int(idx, "eviction"));
	
		cache_get_field_content(idx, "owner_name", g_business[idx][B_OWNER_NAME], mysql, 21);
		// -------------------------
		
		SetBusinessData(idx, B_ORDER_ID, -1);
		SetBusinessData(idx, B_LABEL, CreateDynamic3DTextLabel(GetBusinessData(idx, B_NAME), 0xFFFF00FF, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z) + 1.0, 6.50));
	
		if(GetBusinessData(idx, B_CITY) == -1 || GetBusinessData(idx, B_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));
			buffer[1] = Get2DZone(GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y));
			
			SetBusinessData(idx, B_CITY, buffer[0]);
			SetBusinessData(idx, B_ZONE, buffer[1]);
			
			format(query, sizeof query, "UPDATE business SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}
	
		if(IsBusinessOwned(idx) && !strcmp(GetBusinessData(idx, B_OWNER_NAME), "None", true))
		{
			SetBusinessData(idx, B_OWNER_ID, 0);
			
			format(query, sizeof query, "UPDATE business SET owner_id=0,improvements=0 WHERE id=%d", GetBusinessData(idx, B_SQL_ID));
			mysql_query(mysql, query, false);
		}
		
		if(!IsBusinessOwned(idx))
		{
			SetBusinessData(idx, B_PRODS,		0);
			SetBusinessData(idx, B_PROD_PRICE, 	0);
			SetBusinessData(idx, B_LOCK_STATUS, false);
			
			SetBusinessData(idx, B_ENTER_MUSIC, 0);
			SetBusinessData(idx, B_ENTER_PRICE, 0);
			
			if(GetBusinessData(idx, B_IMPROVEMENTS) >= 6)
			{			
				format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", idx);
				mysql_query(mysql, query, false);
			}
		}
		CallLocalFunction("UpdateBusinessLabel", "i", idx);
	
		CreatePickup(19132, 23, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z), 0, PICKUP_ACTION_TYPE_BIZ_ENTER, idx);
		//CreateDynamicMapIcon(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 47, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
	
		BusinessHealthPickupInit(idx);
	}
	g_business_loaded = rows;
	cache_delete(result);
	
	for(new idx; idx < sizeof g_business_interiors; idx ++)
	{
		CreatePickup(19132, 23, GetBusinessInteriorInfo(idx, BT_EXIT_POS_X), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Y), GetBusinessInteriorInfo(idx, BT_EXIT_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_EXIT, idx);
		buffer[0] = -1;
	
		switch(idx)
		{
			case BUSINESS_INTERIOR_SHOP_24_7:
			{
				CreateDynamic3DTextLabel
				(
					"—писок\n"\
					"товаров\n"\
					"{FFCD00}¬ведите /buy",
					0x00CC00EE, 
					GetBusinessInteriorInfo(idx, BT_BUY_POS_X),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Y),
					GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 
					8.0
				);
				CreatePickup(10270, 2, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_SHOP_247, idx);
			}
			case BUSINESS_INTERIOR_CLUB:
			{
				CreateDynamic3DTextLabel
				(
					"ћеню бара:\n\n"\
					"{6699FF}1. Ћимонад\n"\
					"2. ѕиво\n"\
					"3. ¬ино\n"\
					"4. Ўампанское\n"\
					"5. ¬одка\n"\
					"6.  онь€к\n"\
					"7. ¬иски\n"\
					"8. јбсент\n"\
					"{00CC66}9. «акуска\n"\
					"10. —игара", 
					0xFFFFFFCC, 
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z), 
					9.0
				);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.0, _, _, _, 8.0);
			}
			case BUSINESS_INTERIOR_REALTOR_BIZ:
			{
				g_business_realtor_label = CreateDynamic3DTextLabel
				(
					"—осто€ние бизнеса", 
					0xCCFF66FF, 
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z), 
					10.0
				);
				//CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) - 1.0, 1.2, _, _, _, 10.0);
				
				CallLocalFunction("UpdateRealtorBizInfo", "");
			}
			case BUSINESS_INTERIOR_REALTOR_HOME:
			{
				g_house_realtor_label = CreateDynamic3DTextLabel
				(
					"—осто€ние недвижимости",
					0xCCFF66FF, 
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_X),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Y),
					GetBusinessInteriorInfo(idx, BT_LABEL_POS_Z), 
					10.0
				);
				CreatePickup(1273, 2, 158.4875, 745.8184, 25.8272, -1, PICKUP_ACTION_TYPE_REALTOR_HOME, idx);
				CreatePickup(1272, 2, 156.3270, 746.5958, 25.8272, -1, PICKUP_ACTION_TYPE_REALTOR_HOME, idx);
				
				CreatePickup(1239, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 0.7, _, _, _, 5.0);
			
				CallLocalFunction("UpdateRealtorHomeInfo", "");
			}
			case BUSINESS_INTERIOR_CLOTHING_SHOP:
			{
				CreatePickup(1275, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CLOTHING, idx);
			}
			case BUSINESS_INTERIOR_HOTEL:
			{
				CreatePickup(1277, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1);
				
				CreateDynamic3DTextLabel("”слуги\n{FFFFFF}гост. комплекса", 0x3399FFFF, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 5.0);
				buffer[0] = CreateDynamicCP(GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), 1.2, _, _, _, 20.0);
			}
			case BUSINESS_INTERIOR_CAR_MARKET:
			{
				CreatePickup(19134, 23, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z), -1, PICKUP_ACTION_TYPE_BIZ_CAR_MARK, idx);
				CreateDynamic3DTextLabel("ѕокупка\nтранспорта", 0xCC6600EE, GetBusinessInteriorInfo(idx, BT_BUY_POS_X), GetBusinessInteriorInfo(idx, BT_BUY_POS_Y), GetBusinessInteriorInfo(idx, BT_BUY_POS_Z) + 0.8, 5.0);
			}
		}
		SetBusinessInteriorInfo(idx, BT_BUY_CHECK_ID, buffer[0]);
	}
	BusinesGPSListInit();
	
	printf("[Business]: Ѕизнесов загружено: %d", g_business_loaded);
}

public: UpdateBusinessLabel(businessid)
{
	new fmt_str[129 + 1];

	if(!IsBusinessOwned(businessid))
	{
		format
		(
			fmt_str, sizeof fmt_str, 
			"%s\n"\
			"{66CC00}Ѕизнес продаетс€\n"\
			"»спользуйте /buybiz\n"\
			"÷ена: %d руб", 
			GetBusinessData(businessid, B_NAME), 
			GetBusinessData(businessid, B_PRICE)
		);
	}
	else 
	{
		format
		(
			fmt_str, sizeof fmt_str, 
			"%s\n"\
			"{FFFFFF}¬ладелец: {0099FF}%s\n",
			GetBusinessData(businessid, B_NAME), 
			GetBusinessData(businessid, B_OWNER_NAME) 
		);
		
		if(!GetBusinessData(businessid, B_LOCK_STATUS))
		{
			if(GetBusinessData(businessid, B_ENTER_PRICE) > 0)
			{
				format(fmt_str, sizeof fmt_str, "%s{66CC00}¬ход: {FF9900}%d руб", fmt_str, GetBusinessData(businessid, B_ENTER_PRICE));
			}
			else strcat(fmt_str, "{66CC00}¬ход свободный");
		}
		else strcat(fmt_str, "{FF6600}«акрыто");
	}
	UpdateDynamic3DTextLabelText(GetBusinessData(businessid, B_LABEL), 0xFFFF00FF, fmt_str);
}

public: UpdateRealtorBizInfo()
{
	new count = 0;
	new fmt_str[128];
	
	g_business_realtor_list = "";
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;
		g_business_realtor_list_idx[count ++] = idx;
		
		format(fmt_str, sizeof fmt_str, "%d\n", idx);
		strcat(g_business_realtor_list, fmt_str);
	}
	
	count = GetFreeBusinessCount();
	format
	(
		fmt_str, sizeof fmt_str,
		"—осто€ние бизнеса\n"\
		"(обновл€етс€ каждый час)\n\n"\
		"{FF6633} уплено бизнесов: %d\n"\
		"{99FF33}—вободно бизнесов: %d", 
		g_business_loaded - count, 
		count
	);
	UpdateDynamic3DTextLabelText(g_business_realtor_label, 0xCCFF66FF, fmt_str);
}

public: SetRealtorMakePhoto(playerid, type, index)
{
	if(GetPlayerData(playerid, P_REALTOR_TYPE) == type) 
	{
		new Float: angle;
		new Float: pos_x, Float: pos_y, Float: pos_z;
		new Float: exit_x, Float: exit_y, Float:cam_x, Float:cam_y;
		
		switch(type)
		{
			case REALTOR_TYPE_HOUSE:
			{
				new entranceid = GetHouseData(index, H_ENTRACE);
				if(entranceid != -1)
				{
					pos_x = GetEntranceData(entranceid, E_POS_X);
					pos_y = GetEntranceData(entranceid, E_POS_Y);
					pos_z = GetEntranceData(entranceid, E_POS_Z);
					
					exit_x = GetEntranceData(entranceid, E_EXIT_POS_X);
					exit_y = GetEntranceData(entranceid, E_EXIT_POS_Y);
				
					new fmt_str[32];
					format(fmt_str, sizeof fmt_str, "Ќомер подъезда: %d", entranceid + 1);
					SendClientMessage(playerid, 0x999999FF, fmt_str);
				}
				else
				{
					pos_x = GetHouseData(index, H_POS_X);
					pos_y = GetHouseData(index, H_POS_Y);
					pos_z = GetHouseData(index, H_POS_Z);
					
					exit_x = GetHouseData(index, H_EXIT_POS_X);
					exit_y = GetHouseData(index, H_EXIT_POS_Y);
				}
			}
			case REALTOR_TYPE_BIZ:
			{
				pos_x = GetBusinessData(index, B_POS_X);
				pos_y = GetBusinessData(index, B_POS_Y);
				pos_z = GetBusinessData(index, B_POS_Z);
				
				exit_x = GetBusinessData(index, B_EXIT_POS_X);
				exit_y = GetBusinessData(index, B_EXIT_POS_Y);
			}
		}
		angle = GetAngleToPoint(exit_x, exit_y, pos_x, pos_y);
		SetPlayerPos(playerid, pos_x, pos_y, pos_z);
		
		cam_x = pos_x + 15.0 * -floatsin(angle, degrees); 
		cam_y = pos_y + 15.0 * floatcos(angle, degrees);
		
		SetPlayerCameraPos(playerid, cam_x, cam_y, pos_z + 10.0);
		SetPlayerCameraLookAt(playerid, pos_x, pos_y, pos_z);
		
		HidePlayerWaitPanel(playerid);
		SetPlayerData(playerid, P_REALTOR_TYPE, type);
	}
}

public:	LoadFuelStations()
{
	new query[85], buffer[2];
	new Cache: result, rows;
	
	result = mysql_query(mysql, "SELECT fs.*, IFNULL(a.name, 'None') AS owner_name FROM fuel_stations fs LEFT JOIN accounts a ON a.id=fs.owner_id", true);
	rows = cache_num_rows();
	
	if(rows > MAX_FUEL_STATIONS)
	{
		rows = MAX_FUEL_STATIONS;
		print("[FuelST]: DB rows > MAX_FUEL_STATIONS");
	}
	
	for(new idx; idx < rows; idx ++)
	{
		SetFuelStationData(idx, FS_SQL_ID,		cache_get_field_content_int(idx, "id"));
		SetFuelStationData(idx, FS_OWNER_ID, 	cache_get_field_content_int(idx, "owner_id"));
		
		cache_get_field_content(idx, "name", g_fuel_station[idx][FS_NAME], mysql, 20);
	
		SetFuelStationData(idx, FS_CITY, 			cache_get_field_content_int(idx, "city"));
		SetFuelStationData(idx, FS_ZONE, 			cache_get_field_content_int(idx, "zone"));
		SetFuelStationData(idx, FS_IMPROVEMENTS, 	cache_get_field_content_int(idx, "improvements"));
		SetFuelStationData(idx, FS_FUELS, 			cache_get_field_content_int(idx, "fuels"));
		SetFuelStationData(idx, FS_FUEL_PRICE,		cache_get_field_content_int(idx, "fuel_price"));
		SetFuelStationData(idx, FS_BUY_FUEL_PRICE,	cache_get_field_content_int(idx, "buy_fuel_price"));
		SetFuelStationData(idx, FS_BALANCE,			cache_get_field_content_int(idx, "balance"));
		SetFuelStationData(idx, FS_RENT_DATE,		cache_get_field_content_int(idx, "rent_time"));
		
		SetFuelStationData(idx, FS_PRICE,			cache_get_field_content_int(idx, "price"));
		SetFuelStationData(idx, FS_RENT_PRICE,		cache_get_field_content_int(idx, "rent_price"));
		
		SetFuelStationData(idx, FS_LOCK_STATUS,		bool: cache_get_field_content_int(idx, "lock"));
		
		SetFuelStationData(idx, FS_POS_X,			cache_get_field_content_float(idx, "x"));
		SetFuelStationData(idx, FS_POS_Y,			cache_get_field_content_float(idx, "y"));
		SetFuelStationData(idx, FS_POS_Z,			cache_get_field_content_float(idx, "z"));

		SetFuelStationData(idx, FS_EVICTION,		cache_get_field_content_int(idx, "eviction"));
	
		cache_get_field_content(idx, "owner_name", g_fuel_station[idx][FS_OWNER_NAME], mysql, 21);
		// -------------------------
		
		SetFuelStationData(idx, FS_LABEL, CreateDynamic3DTextLabel(GetFuelStationData(idx, FS_NAME), 0x3399FFFF, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z) + 0.5, 15.0));
		SetFuelStationData(idx, FS_AREA, CreateDynamicSphere(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 15.0));
		
		SetFuelStationData(idx, FS_ORDER_ID, -1);
		
		if(GetFuelStationData(idx, FS_CITY) == -1 || GetFuelStationData(idx, FS_ZONE) == -1)
		{
			buffer[0] = Get2DCity(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y));
			buffer[1] = Get2DZone(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y));
			
			SetFuelStationData(idx, FS_CITY, buffer[0]);
			SetFuelStationData(idx, FS_ZONE, buffer[1]);
			
			format(query, sizeof query, "UPDATE fuel_stations SET city=%d,zone=%d WHERE id=%d", buffer[0], buffer[1], GetFuelStationData(idx, FS_SQL_ID));
			mysql_query(mysql, query, false);
		}
	
		if(IsFuelStationOwned(idx) && !strcmp(GetFuelStationData(idx, FS_OWNER_NAME), "None", true))
		{
			SetFuelStationData(idx, FS_OWNER_ID, 0);
			
			format(query, sizeof query, "UPDATE fuel_stations SET owner_id=0 WHERE id=%d", GetFuelStationData(idx, FS_SQL_ID));
			mysql_query(mysql, query, false);
		}
		
		if(!IsFuelStationOwned(idx))
		{
			SetFuelStationData(idx, FS_FUELS, 1000);
			SetFuelStationData(idx, FS_FUEL_PRICE, 3);
			
			SetFuelStationData(idx, FS_LOCK_STATUS, false);
		}
		CallLocalFunction("UpdateFuelStationLabel", "i", idx);
	
		#if defined FUEL_ST_CREATED_PICKUP
			CreatePickup(1650, 2, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 0, PICKUP_ACTION_TYPE_FUEL_STATION, idx);
		#endif
		
		CreateDynamicMapIcon(GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z), 47, 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL);
	}
	g_fuel_station_loaded = rows;
	cache_delete(result);
	
	printf("[FuelST]: «аправок загружено: %d", g_fuel_station_loaded);
}

public: UpdateFuelStationLabel(stationid)
{
	new fmt_str[128 + 1];

	if(!IsFuelStationOwned(stationid))
	{
		format
		(
			fmt_str, sizeof fmt_str, 
			"%s\n"\
			"{FFFFFF}÷ена за 10 литров: {FFCD00}%d руб\n\n"\
			"{CC9900}«аправка продаетс€\n"\
			"»спользуйте /buyfuelst\n"\
			"÷ена: %d руб", 
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 10,
			GetFuelStationData(stationid, FS_PRICE)
		);
		
	}
	else 
	{
		format
		(
			fmt_str, sizeof fmt_str, 
			"%s\n"\
			"{FFFFFF}¬ладелец: {66CC00}%s\n", 
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_OWNER_NAME),
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 10
		);
		
		if(GetFuelStationData(stationid, FS_LOCK_STATUS))
		{
			strcat(fmt_str, "{FF6600}—танци€ закрыта");
		}
		else format(fmt_str, sizeof fmt_str, "%s{FFFFFF}÷ена за 10 литров: {FFCD00}%d руб", fmt_str, GetFuelStationData(stationid, FS_FUEL_PRICE) * 10);
	}
	UpdateDynamic3DTextLabelText(GetFuelStationData(stationid, FS_LABEL), 0x3399FFFF, fmt_str);
}

public: OnGiveReferBonus(refer_id)
{
	new fmt_str[155];
	new playerid = GetPlayerIDBySqlID(refer_id);
	
	if(playerid != INVALID_PLAYER_ID)
	{
		GivePlayerMoneyEx(playerid, REFER_BONUS_MONEY, "–еферальна€ программа 'ѕригласи друга'", true, false);
		
		format(fmt_str, sizeof fmt_str, "ѕоздравл€ем! ѕриглашенный ¬ами игрок достиг 5 уровн€, ¬ы получаете %d рублей", REFER_BONUS_MONEY);
		SendClientMessage(playerid, 0x66CC00FF, fmt_str);
	}
	else
	{
		format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", refer_id, "system", gettime(), REFER_BONUS_MONEY, "–еферальна€ программа 'ѕригласи друга'");
		mysql_query(mysql, fmt_str, false);
	
		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=money+%d WHERE id=%d LIMIT 1", REFER_BONUS_MONEY, refer_id);
		mysql_query(mysql, fmt_str, false);
		
		if(mysql_errno() != 0)
			printf("[Referal System]: ѕроизошла ошибка при выдаче бонуса реферу є%d", refer_id);
	}
}

public: OnSecondTimer()
{
	new minute;
	gettime(_, minute);

	new time = gettime();
	if(!minute)
	{
		if(GetElapsedTime(time, g_last_m_timer_time, CONVERT_TIME_TO_MINUTES) >= 1)
		{
			OnMinuteTimer(bool: GetElapsedTime(time, g_last_m_timer_time, CONVERT_TIME_TO_DAYS));
		}
	}

	foreach(new playerid : Player)
	{
		CallLocalFunction("OnPlayerTimer", "i", playerid);
	}
}

public: OnMinuteTimer(bool: new_day)
{
	new time;
	new hour, minute, second;

	time = gettime();
	gettime(hour, minute, second);
	
	switch(minute)
	{
		case 0:
		{
			if(GetElapsedTime(time, g_last_pay_day_time) >= 1)
			{
				OnPayDay();
			}			
		}
		case 2:
		{
			if(GetElapsedTime(time, g_last_lottery_time) >= 1)
			{
				OnLottery();
			}	
		}
	}
	
	if(new_day)
	{
		SetTimer("ClearBanList", 15_000, false);
	}

	SetWorldTime(hour);
	OnPlayersWorldTimeInit(hour, minute);
	
	g_last_m_timer_time = time;
}

public: OnPlayersWorldTimeInit(hour, minute)
{
	foreach(new playerid : Player)
	{
		SetPlayerTime(playerid, hour, minute);
	}
}

public: OnLottery()
{
	new fmt_str[85];
	new buffer[4];
	
	new lottery_str[4];
	new lottery_number;
	new buy_tickets_count;
	new hour, count;
	
	gettime(hour);
	lottery_number = random(900) + 100;
	
	valstr(lottery_str, lottery_number);
	buy_tickets_count = LotteryBuyTicketCount();
	
	static const
		lottery_pay[3] = {2000, 15_000, 50_000};
		
	foreach(new playerid : Player)
	{
		if(IsPlayerLogged(playerid))
		{
			if(GetPlayerData(playerid, P_LOTTERY))
			{
				format(fmt_str, sizeof fmt_str, "—ейчас %d:02! Ќачинаем лотерейный розыгрыш. ¬аше счастливое число: %d", hour, GetPlayerData(playerid, P_LOTTERY));
				SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
				
				format(fmt_str, sizeof fmt_str, "«а этот час было куплено %d билетов. —частливое число этого часа: {FF9900}%d", buy_tickets_count, lottery_number);
				SendClientMessage(playerid, 0x66CC00FF, fmt_str);
				
				valfmt(buffer, GetPlayerData(playerid, P_LOTTERY));
				
				for(count = 0; count < 3; count ++)
					if(lottery_str[count] != buffer[count]) break;
			
				switch(count)
				{
					case 0:
					{
						SendClientMessage(playerid, 0xFFFFFFFF, "  сожалению в вашем билете не совпала перва€ цифра");
						SendClientMessage(playerid, 0xFFFFFFFF, "Ќе расстраивайтесь. ¬ следующий раз ¬ам об€зательно повезЄт");			
					}
					case 1..3:
					{
						GivePlayerMoneyEx(playerid, lottery_pay[count-1], "¬ыигрыш в лотереи", true, true);
					
						format(fmt_str, sizeof fmt_str, "¬ вашем билете совпали %d цифры! ¬ыигрыш: %d рублей", count, lottery_pay[count-1]);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);
					}
				}
				SetPlayerData(playerid, P_LOTTERY, 0);
			}
		}
	}
	g_last_lottery_time = gettime();
}

public: OnPayDay()
{
	new fmt_str[144];
	new level, cur_time;
	new hour, minute, second;

	cur_time = gettime();
	gettime(hour, minute, second);
	
	SetWorldTime(hour);
	
	format(fmt_str, sizeof fmt_str, "“екущее врем€: {3399FF}%02d:00", hour);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);	
	
	foreach(new playerid : Player)
	{
		if(IsPlayerLogged(playerid))
		{
			SendClientMessage(playerid, 0xFFFFFFFF, "   ЅјЌ ќ¬— »… „≈ ");
			SendClientMessage(playerid, 0xFFFFFFFF, "______________________");
			SendClientMessage(playerid, 0xFFFFFFFF, " ");
			
			level = GetPlayerLevel(playerid);
			if(!IsPlayerAFK(playerid))
			{
				if(ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES) >= 20)
				{
					AddPlayerData(playerid, P_BANK, +, GetPlayerData(playerid, P_WAGE));
				
					format(fmt_str, sizeof fmt_str, "«арплата: {66CC00}%d руб", GetPlayerData(playerid, P_WAGE));
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
					
					format(fmt_str, sizeof fmt_str, "“екущий баланс счета: {%s}%d руб", GetPlayerBankMoney(playerid) > 0 ? ("00CC00") : ("FF3300"), GetPlayerBankMoney(playerid));
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
					
					SetPlayerData(playerid, P_WAGE, 0);
					AddPlayerData(playerid, P_EXP, +, 1);
					
					//if(!IsPlayerAfk(i))
					//{
					if(GetPlayerExp(playerid) > GetExpToNextLevel(playerid))
					{
						SetPlayerData(playerid, P_EXP, 0);
						AddPlayerData(playerid, P_LEVEL, +, 1);
						
						SetPlayerLevelInit(playerid);
					}
					//}
				}
				else SendClientMessage(playerid, 0xFFBB00FF, "ƒл€ получени€ зарплаты необходимо находитьс€ в игре минимум 20 минут");
			}
			else SendClientMessage(playerid, 0xFFBB00FF, "¬ы не должны находитьс€ на паузе дл€ получени€ зарплаты");
		
			SendClientMessage(playerid, 0xFFFFFFFF, "______________________");
			if(GetPlayerLevel(playerid) > level)
			{
				SendClientMessage(playerid, 0x3399FFFF, "ѕоздравл€ем! ¬аш уровень повышен");
				switch(GetPlayerLevel(playerid))
				{
					case 2:
					{
						SendClientMessage(playerid, 0x66CC00FF, "¬ы начали второй год своей жизни в нашей стране");
						SendClientMessage(playerid, 0x66CC00FF, "ƒоступна нова€ работа водител€ автобуса");
					}
					case 5:
					{
						CallLocalFunction("OnGiveReferBonus", "i", GetPlayerData(playerid, P_REFER));
					}
					/*
					case 3: 
						SendClientMessage(playerid, 0x66CC00FF, "ƒоступна нова€ работа таксиста");
						
					case 4: 
						SendClientMessage(playerid, 0x66CC00FF, "ƒоступна нова€ работа дальнобойщика");
						
					case 5: 
						SendClientMessage(playerid, 0x66CC00FF, "ƒоступна нова€ работа автомехнаника");
						
					case 6: 
						SendClientMessage(playerid, 0x66CC00FF, "ƒоступна нова€ работа уличного торговца");
						
					case 7: 
						SendClientMessage(playerid, 0x66CC00FF, "ƒоступна нова€ работа сотрудника ћ„—");
					*/
				}
			}
			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET level=%d,exp=%d,bank=%d,wage=0,last_login=%d,game_for_hour=0 WHERE id=%d LIMIT 1", GetPlayerLevel(playerid), GetPlayerExp(playerid), GetPlayerBankMoney(playerid), cur_time, GetPlayerAccountID(playerid));
			mysql_query(mysql, fmt_str, false);
			
			if(mysql_errno() != 0)
				SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€ аккаунта {FF0000}(equ-code 100)");
		}
		SetPlayerData(playerid, P_GAME_FOR_HOUR, 0);
	}
	
	/*
	SellDebtorsProperty();

	*/
	#if defined RAND_WEATHER
	SetTimer("SetRandomWeather", (random(60) + 60) * 1000, false);
	#endif
	
	CallLocalFunction("UpdateRealtorHomeInfo", "");
	CallLocalFunction("UpdateRealtorBizInfo", "");
	
	g_last_pay_day_time = cur_time;
	return 1;
}

public: OnPlayerTimer(playerid)
{
	if(IsPlayerLogged(playerid))
	{
		new fmt_str[128];
		new speed = GetPlayerSpeed(playerid);
	
		AddPlayerData(playerid, P_AFK_TIME, +, 1);
		if(IsPlayerAFK(playerid))
		{
			new afk_minutes = ConvertUnixTime(GetPlayerAFKTime(playerid), CONVERT_TIME_TO_MINUTES);
			new afk_seconds = ConvertUnixTime(GetPlayerAFKTime(playerid));
			
			if(afk_minutes > 0)
			{
				format(fmt_str, sizeof fmt_str, "Ќа паузе %d:%02d", afk_minutes, afk_seconds);
			}
			else format(fmt_str, sizeof fmt_str, "Ќа паузе %d сек.", afk_seconds);
			
			SetPlayerChatBubble(playerid, fmt_str, 0xFF0000FF, 7.0, 1500);
		
			if(afk_minutes >= MAX_AFK_TIME)
				Kick:(playerid, "ѕревышено максимально допустимое врем€ паузы");
		}
		else 
		{
			AddPlayerData(playerid, P_GAME_FOR_HOUR, +, 1);
			AddPlayerData(playerid, P_GAME_FOR_DAY, +, 1);
		}

		if(GetPlayerData(playerid, P_MUTE) > 0)
		{
			AddPlayerData(playerid, P_MUTE, -, 1);
			if(GetPlayerData(playerid, P_MUTE) <= 0)
				SendClientMessage(playerid, 0x66CC00FF, "—рок действи€ бана чата закончилс€");
		}
		
		if(GetPlayerData(playerid, P_MASK) >= 2)
		{
			AddPlayerData(playerid, P_MASK, -, 1);
			if(GetPlayerData(playerid, P_MASK) <= 2)
			{
				GameTextForPlayer(playerid, "~y~invisible off", 2500, 4);
				
				SetPlayerColorInit(playerid);
				SetPlayerData(playerid, P_MASK, 0);
			}
		}
		
		if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPlayerGPSInfo(playerid, G_POS_X), GetPlayerGPSInfo(playerid, G_POS_Y), GetPlayerGPSInfo(playerid, G_POS_Z)))
			{
				DisablePlayerGPS(playerid);
			}
		}
		
		new Float: player_health;

		GetPlayerHealth(playerid, player_health);

		if(player_health > GetPlayerHealthEx(playerid))
		{
			//SetPlayerHealthEx(playerid, GetPlayerHealthEx(playerid));

			//SetPVarInt(playerid, "anti_health_cheat", GetPVarInt(playerid, "anti_health_cheat")+1);

			if(GetPVarInt(playerid, "anti_health_cheat") >= 10)
			{
				SendClientMessage(playerid, 0xFF6600FF, "¬ы кикнуты по подозрению в читерстве {FF0000}(gac-code 01)");
				Kick:(playerid);
			}
		}
		else
		{
			SetPlayerData(playerid, P_HEALTH, player_health);
		}

		if(GetPlayerData(playerid, P_OCCUPIED_BED) != -1)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1131.1603, -8.5709, 1011.1254)) 
			{
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			}	
			else if(GetPlayerHealthEx(playerid) >= 95.0)
			{
				SetPlayerData(playerid, P_HOSPITAL, false);
			
				SendClientMessage(playerid, 0x66CC00FF, " урс лечени€ пройден");
				SendClientMessage(playerid, -1, "¬ы были выписаны из больницы");
				
				ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
			
				SetPlayerChatBubble(playerid, "¬ыписан", 0x66CC00FF, 10.0, 2000);   
			}
		}

		if(IsPlayerDriver(playerid))
		{
			//new Float: health;
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!IsABike(vehicleid))
			{
				new	Float: fuels = GetVehicleData(vehicleid, V_FUEL);
				
				//GetVehicleHealth(vehicleid, health);
				SetVehicleParamsInit(vehicleid);
				SetVehicleData(vehicleid, V_MILEAGE, GetVehicleData(vehicleid, V_MILEAGE) + (float(speed) / 3600.0));
				
				if(GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
				{
					if(fuels <= 0.0)
					{
						SetVehicleParam(vehicleid, V_ENGINE, false);
						GameTextForPlayer(playerid, "~r~no fuel", 4000, 1);
					}
					else SetVehicleData(vehicleid, V_FUEL, fuels - 0.05);
				}
				
				format(fmt_str, sizeof fmt_str, "%d_~b~~h~~h~~h~:km/h", speed);
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][0], fmt_str);
				
				format(fmt_str, sizeof fmt_str, "%07i", floatround(GetVehicleData(vehicleid, V_MILEAGE)));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][1], fmt_str);
				
				format(fmt_str, sizeof fmt_str, "Fuel:_~y~%d~n~~w~limit:_%s", floatround(fuels), GetVehicleData(vehicleid, V_LIMIT) == VEHICLE_PARAM_ON ? ("~g~ON") : ("~r~off"));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][2], fmt_str);
				
				format
				(
					fmt_str, sizeof fmt_str, 
					"%sM__%sL__%sB",
					GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON ? ("~g~") : ("~w~"),
					GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_ON ? ("~g~") : ("~w~"),
					(GetVehicleParamEx(vehicleid, V_BONNET) == VEHICLE_PARAM_ON 
					|| GetVehicleParamEx(vehicleid, V_BOOT) == VEHICLE_PARAM_ON) ? ("~r~~h~") : ("~w~")
				);
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][3], fmt_str);
				
				format(fmt_str, sizeof fmt_str, "%s", GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_ON ? ("~r~~h~close") : ("~g~~h~open"));
				PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][4], fmt_str);
				
				/*
				format
				(
					fmt_str, sizeof fmt_str, 
					"%d_km/h__~h~Fuel_%d__~b~%d~n~"\
					"%s___%smax___%sE_%sS__%sM_%sL_%sB",
					GetPlayerSpeed(playerid),
					floatround(fuels),
					floatround(health),
					GetVehicleParamEx(vehicleid, V_LOCK) == VEHICLE_PARAM_ON ? ("~r~~h~Close") : ("~g~~h~Open"),
					GetVehicleData(vehicleid, V_LIMIT) == VEHICLE_PARAM_ON ? ("~r~~h~") : ("~w~"),
					floatround(fuels) < 15 ? ("~r~") : ("~w~"),
					GetVehicleData(vehicleid, V_ALARM) == VEHICLE_PARAM_ON ? ("~p~") : ("~w~"),
					GetVehicleParamEx(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON ? ("~g~") : ("~w~"),
					GetVehicleParamEx(vehicleid, V_LIGHTS) == VEHICLE_PARAM_ON ? ("~g~") : ("~w~"),
					(GetVehicleParamEx(vehicleid, V_BOOT) == VEHICLE_PARAM_ON
					|| GetVehicleParamEx(vehicleid, V_BOOT) == VEHICLE_PARAM_ON) ? ("~r~") : ("~w~")
				);
				TextDrawSetString(speedometr_TD[playerid], fmt_str);
				*/
			}
		}
		else if(IsPlayerPassenger(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new driver = GetVehicleData(vehicleid, V_DRIVER_ID);
			
			if(driver != INVALID_PLAYER_ID && IsPlayerInJob(driver) && IsPlayerDriver(driver))
			{
				if(GetPlayerJobCar(driver) == vehicleid && IsPlayerInVehicle(driver, vehicleid))
				{
					g_taxi_mileage[playerid] += (float(speed) / 3600.0);
					if(g_taxi_mileage[playerid] > 0.1)
					{
						g_taxi_mileage[playerid] = 0.0;
					
						new tariff = GetPlayerData(driver, P_JOB_TARIFF);
						if(GetPlayerMoneyEx(playerid) >= tariff)
						{
							//GivePlayerMoneyEx(playerid, tariff, "+ ќплата тарифа такси", false, true);
							AddPlayerData(playerid, P_JOB_WAGE, +, tariff);
							
							format(fmt_str, sizeof fmt_str, "~r~-%d rub~n~~b~+100 m", tariff);
							GameTextForPlayer(playerid, fmt_str, 4000, 1);
							
							format(fmt_str, sizeof fmt_str, "~g~+%d rub~n~~b~+100 m", tariff);
							GameTextForPlayer(driver, fmt_str, 4000, 1);
						}
						else 
						{
							RemovePlayerFromVehicle(playerid);
							SendClientMessage(playerid, 0xFF6600FF, "Ќедостаточно денег дл€ дальнейшей оплаты тарифа");
						}
					}
				}
			}
		}
		
		if(GetPlayerTempJob(playerid) != TEMP_JOB_NONE)
		{
			CheckPlayerTempJobState(playerid);
		}

		if(GetPVarInt(playerid, "player_in_ammo_cp"))
		{
			new army_ammo = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT),
				rand_ammo = random(4)+1;

			if(GetPlayerTeamEx(playerid) != TEAM_ARMY)
			{
				new soldiers_count;

				foreach(new i : Player)
				{
					if(!IsPlayerConnected(i)) continue;
					else if(!IsPlayerLogged(i)) continue;
					else if(GetPlayerTeamEx(i) != TEAM_ARMY) continue;

					soldiers_count++;
				}

				if(soldiers_count < 3) SendClientMessage(playerid, 0x999999FF, "„тобы воровать патроны со склада, должно быть хот€ бы 3 военнослужащих в сети");
			}
			else
			{
				if(army_ammo == 0)
					SendClientMessage(playerid, 0x3399FFFF, "—клад патронов пуст");
				else
				{
					if((army_ammo - rand_ammo) < 0)
						rand_ammo = 200000 - army_ammo;

					if((GetPlayerData(playerid, P_AMMO) + rand_ammo) > 350)
						SendClientMessage(playerid, 0x66CC33FF, "¬з€ть больше патронов не получаетс€");
					else
					{
						AddPlayerData(playerid, P_AMMO, +, rand_ammo);
						UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

						SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_AMOUNT, army_ammo - rand_ammo);

						new fmt_text[128];

						format(fmt_text, sizeof fmt_text, "~g~+%d patr.~n~~b~total %d patr.", rand_ammo, GetPlayerData(playerid, P_AMMO));
						GameTextForPlayer(playerid, fmt_text, 1100, 6);

						format(fmt_text, sizeof fmt_text, "+%d шт.", rand_ammo);
						SetPlayerChatBubble(playerid, fmt_text, 0xFFCC00FF, 10.0, 1100);

						UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);
					}
				}
			}
		}
	}
	else 
	{
		if(GetPlayerData(playerid, P_AUTH_TIME) >= 0)
		{
			if(GetPlayerData(playerid, P_AUTH_TIME) >= MAX_AUTHORIZATION_TIME)
			{
				HidePlayerDialog(playerid);
				
				SendClientMessage(playerid, 0xFF6600FF, "¬рем€ на авторизацию ограничено");
				Kick:(playerid);
			}
			else AddPlayerData(playerid, P_AUTH_TIME, +, 1);
		}
	}
}

public: CheckPlayerAccount(playerid, race)
{
	if(race == mysql_race[playerid])
	{
		new query[64];
		new Cache: result, is_account_exist;
		
		SendClientMessage(playerid, 0x3399FFFF, "ƒобро пожаловать на "SERVER_NAME" RolePlay!");
		
		//SetPlayerPos(playerid, 1690.419189, -1950.881835, 13.5666);
		//TogglePlayerControllable(playerid, false);
		
		SetPlayerCameraPos(playerid, AUTH_CAMERA_POS);
		SetPlayerCameraLookAt(playerid, AUTH_CAMERA_LOOK);
		
		mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", GetPlayerNameEx(playerid));
		result = mysql_query(mysql, query);
		
		if(!mysql_errno())
		{
			is_account_exist = bool: cache_num_rows();
			SetPlayerData(playerid, P_ACCOUNT_STATE, is_account_exist + 1);
			
			if(is_account_exist)
			{
				SetPlayerData(playerid, P_ACCOUNT_ID, cache_get_field_content_int(0, "id"));
				
				cache_get_field_content(0, "password", g_player[playerid][P_PASSWORD], mysql, 16);
				cache_get_field_content(0, "last_ip", g_player[playerid][P_LAST_IP], mysql, 16);

				cache_get_field_content(0, "setting_phone", g_player[playerid][P_SETTING_PHONE], mysql, 13);
				cache_get_field_content(0, "setting_pin_code", g_player[playerid][P_SETTING_PIN], mysql, 5);
				
				SetPlayerData(playerid, P_REQUEST_PHONE, cache_get_field_content_int(0, "request_phone"));
				SetPlayerData(playerid, P_REQUEST_PIN, cache_get_field_content_int(0, "request_pin"));
				
				SetPlayerData(playerid, P_AUTH_TIME, 0);
				ShowPlayerLoginDialog(playerid, LOGIN_STATE_CHECK_BAN, false);
			}
			else ShowPlayerRegDialog(playerid, REGISTER_STATE_PASSWORD);
		}
		else 
		{
			Dialog
			(
				playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
				"{FF9900} ритическа€ ошибка",
				"{FFFFFF}Ќевозможно подключитьс€ к серверу из-за сбо€ системных настроек\n"\
				"≈сли проблема не решитьс€ в течении нескольких минут обратитесь к администрации",
				"¬ыход", ""
			);
			Kick:(playerid, "ќшибка соединени€. ¬ведите /q (/quit) чтобы выйти", 3000);
		}
		cache_delete(result);

		#if defined _MAP_INCLUDED
		RemoveBuildings(playerid);
		#endif
	}
}

public: FixedKick(playerid)
{
	Kick(playerid);
}

public: LoadPlayerData(playerid)
{
	new query[128];
	new Cache: result;
	
	format(query, sizeof query, "SELECT * FROM accounts WHERE id=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query);
	
	if(cache_num_rows())
	{
		new 
			buffer = 0, 
			time = gettime();
		
		cache_get_field_content(0, "email", g_player[playerid][P_EMAIL], mysql, 61);
		SetPlayerData(playerid, P_CONFIRM_EMAIL, bool: cache_get_field_content_int(0, "confirm_email"));
		
		SetPlayerData(playerid, P_LEVEL, 	cache_get_field_content_int(0, "level"));
		SetPlayerData(playerid, P_EXP, 		cache_get_field_content_int(0, "exp"));
		
		SetPlayerData(playerid, P_REFER, 	cache_get_field_content_int(0, "refer"));
		SetPlayerData(playerid, P_SEX, 		bool: cache_get_field_content_int(0, "sex"));
		SetPlayerData(playerid, P_SKIN, 	cache_get_field_content_int(0, "skin"));
		SetPlayerData(playerid, P_MONEY, 	cache_get_field_content_int(0, "money"));
		SetPlayerData(playerid, P_BANK, 	cache_get_field_content_int(0, "bank"));
		SetPlayerData(playerid, P_ADMIN, 	cache_get_field_content_int(0, "admin"));
		
		SetPlayerData(playerid, P_DRIVING_LIC, 	cache_get_field_content_int(0, "driving_lic"));
		SetPlayerData(playerid, P_WEAPON_LIC, 	cache_get_field_content_int(0, "weapon_lic"));
		
		SetPlayerData(playerid, P_SUSPECT, 		cache_get_field_content_int(0, "suspect"));
		SetPlayerData(playerid, P_PHONE, 		cache_get_field_content_int(0, "phone"));
		SetPlayerData(playerid, P_PHONE_BALANCE,cache_get_field_content_int(0, "phone_balance"));
		SetPlayerData(playerid, P_PHONE_COLOR,	cache_get_field_content_int(0, "phone_color"));
		
		SetPlayerData(playerid, P_LAW_ABIDING,	cache_get_field_content_int(0, "law_abiding"));
		SetPlayerData(playerid, P_IMPROVEMENTS, cache_get_field_content_int(0, "improvements"));
		SetPlayerData(playerid, P_POWER, 		cache_get_field_content_int(0, "power"));
		
		SetPlayerData(playerid, P_DRUGS, 		cache_get_field_content_int(0, "drugs"));
		SetPlayerData(playerid, P_AMMO, 		cache_get_field_content_int(0, "ammo"));
		SetPlayerData(playerid, P_METALL, 		cache_get_field_content_int(0, "metall"));
		SetPlayerData(playerid, P_WIFE, 		cache_get_field_content_int(0, "wife"));
		SetPlayerData(playerid, P_TEAM, 		cache_get_field_content_int(0, "team"));
		SetPlayerData(playerid, P_SUBDIVISON,	cache_get_field_content_int(0, "subdivison"));
		SetPlayerData(playerid, P_WAGE,			cache_get_field_content_int(0, "wage"));
		SetPlayerData(playerid, P_JOB, 			cache_get_field_content_int(0, "job"));
		
		SetPlayerData(playerid, P_HOUSE_TYPE,	cache_get_field_content_int(0, "house_type"));
		SetPlayerData(playerid, P_HOUSE_ROOM,	cache_get_field_content_int(0, "house_room"));
		SetPlayerData(playerid, P_HOUSE, 		cache_get_field_content_int(0, "house"));
		SetPlayerData(playerid, P_BUSINESS,		cache_get_field_content_int(0, "business"));
		SetPlayerData(playerid, P_FUEL_ST,		cache_get_field_content_int(0, "fuel_st"));
		
		SetPlayerData(playerid, P_REG_TIME, 	cache_get_field_content_int(0, "reg_time"));
		cache_get_field_content(0, "reg_ip", g_player[playerid][P_REG_IP], mysql, 16);
	
		buffer = SetPlayerData(playerid, P_LAST_LOGIN_TIME,	cache_get_field_content_int(0, "last_login"));
		if(GetElapsedTime(time, buffer) < 1)
		{
			if(GetElapsedTime(time, g_last_pay_day_time) < 1)
				SetPlayerData(playerid, P_GAME_FOR_HOUR,	cache_get_field_content_int(0, "game_for_hour"));
		}
		SetPlayerData(playerid, P_GAME_FOR_DAY,			cache_get_field_content_int(0, "game_for_day"));
		SetPlayerData(playerid, P_GAME_FOR_DAY_PREV,	cache_get_field_content_int(0, "game_for_day_prev"));
		
		buffer = GetElapsedTime(time, buffer, CONVERT_TIME_TO_DAYS);
		if(buffer == 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, GetPlayerData(playerid, P_GAME_FOR_DAY));
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
		}
		else if(buffer > 1)
		{
			SetPlayerData(playerid, P_GAME_FOR_DAY, 0);
			SetPlayerData(playerid, P_GAME_FOR_DAY_PREV, 0);
		}
		
		SetPlayerSettingData(playerid, S_CHAT_TYPE, 	cache_get_field_content_int(0, "setting1"));
		SetPlayerSettingData(playerid, S_TEAM_CHAT, 	cache_get_field_content_int(0, "setting2"));
		SetPlayerSettingData(playerid, S_NICK_IN_CHAT, 	cache_get_field_content_int(0, "setting4"));
		SetPlayerSettingData(playerid, S_ID_IN_CHAT, 	cache_get_field_content_int(0, "setting5"));
		SetPlayerSettingData(playerid, S_VEH_CONTROL, 	cache_get_field_content_int(0, "setting6"));
		
		SetPlayerData(playerid, P_WARN, 				cache_get_field_content_int(0, "warn"));
		SetPlayerData(playerid, P_WARN_TIME,			cache_get_field_content_int(0, "warn_time"));
		SetPlayerData(playerid, P_MUTE, 				cache_get_field_content_int(0, "mute"));
		
		SetPlayerData(playerid, P_SKILL_COLT, 			cache_get_field_content_int(0, "skill_colt"));
		SetPlayerData(playerid, P_SKILL_SDPISTOL,		cache_get_field_content_int(0, "skill_sdpistol"));
		SetPlayerData(playerid, P_SKILL_DEAGLE, 		cache_get_field_content_int(0, "skill_deagle"));
		SetPlayerData(playerid, P_SKILL_SHOTGUN, 		cache_get_field_content_int(0, "skill_shotgun"));
		SetPlayerData(playerid, P_SKILL_MP5, 			cache_get_field_content_int(0, "skill_mp5"));
		SetPlayerData(playerid, P_SKILL_AK47, 			cache_get_field_content_int(0, "skill_ak47"));
		SetPlayerData(playerid, P_SKILL_M4, 			cache_get_field_content_int(0, "skill_m4"));
		SetPlayerData(playerid, P_SKILL_SNIPER_RIFLE, 	cache_get_field_content_int(0, "skill_sniper_rifle"));
		SetPlayerData(playerid, P_SKILL_SAWNOFF, 		cache_get_field_content_int(0, "skill_sawnoff"));
		SetPlayerData(playerid, P_SKILL_COMBAT_SG, 		cache_get_field_content_int(0, "skill_combat_sg"));
		SetPlayerData(playerid, P_SKILL_MICRO_UZI, 		cache_get_field_content_int(0, "skill_micro_uzi"));

		SetPlayerData(playerid, P_DONATE_CURRENT, 		cache_get_field_content_int(0, "donate_current"));
		SetPlayerData(playerid, P_DONATE_TOTAL, 		cache_get_field_content_int(0, "donate_total"));

		SetPlayerData(playerid, P_OSKIN,		 		cache_get_field_content_int(0, "org_skin"));

		SetPlayerData(playerid, P_SPAWN,		 		cache_get_field_content_int(0, "setting_spawn"));

		SetPlayerData(playerid, P_HOSPITAL,				bool: cache_get_field_content_int(0, "hospital"));

		SetPlayerData(playerid, P_HEALTH,				cache_get_field_content_float(0, "health"));

		SetPlayerData(playerid, P_CAR_SLOTS,			cache_get_field_content_int(0, "car_slots"));
		
		// -------------------------------------------------------------------------
		
		SetPlayerSpawnInit(playerid);
		SpawnPlayer(playerid);
		
		if(GetPlayerData(playerid, P_SKIN))
		{
			mysql_format(mysql, query, sizeof query, "UPDATE accounts SET last_ip='%e',last_login=%d WHERE id=%d LIMIT 1", GetPlayerIpEx(playerid), time, GetPlayerAccountID(playerid));
			mysql_tquery(mysql, query, "", "");
		
			format(query, sizeof query, "~y~Welcome ~n~~b~%s", GetPlayerNameEx(playerid));
			GameTextForPlayer(playerid, query, 3000, 1);

			if(IsPlayerHasDonations(playerid))
				SendClientMessage(playerid, 0x3399FFFF, "” ¬ас есть новые пополнени€ счЄта. ¬ведите {ff9900}/donat{3399ff}, чтобы зачислить их");

			if(GetPlayerAdminEx(playerid))
			{
				format(query, sizeof query, "¬ы вошли как");

				switch(GetPlayerAdminEx(playerid))
				{
					case 1: strcat(query, " администратор первого уровн€");
					case 2: strcat(query, " администратор второго уровн€");
					case 3: strcat(query, " администратор третьего уровн€");
					case 4: strcat(query, " администратор четвЄртого уровн€");
					case 5: strcat(query, " администратор п€того уровн€");
					case 6: strcat(query, " √лавный администратор");
				}
				
				SendClientMessage(playerid, 0xFFFF00FF, query);
			}

			if(GetPlayerData(playerid, P_WARN) > 0)
			{
				if(time > GetPlayerData(playerid, P_WARN_TIME))
				{
					SetPlayerData(playerid, P_WARN, 0);
					SetPlayerData(playerid, P_WARN_TIME, 0);
				}
				else
				{
					format(query, sizeof query, " оличество предупреждений: %d из 3", GetPlayerData(playerid, P_WARN));
					SendClientMessage(playerid, 0xFF6600FF, query);
					SendClientMessage(playerid, 0xFF6600FF, "ѕосле 3 предупреждени€ аккаунт будет заблокирован");
				}
			}

			if(!GetPlayerData(playerid, P_CONFIRM_EMAIL))
			{
				SendClientMessage(playerid, 0xFFA040FF, "ѕри регистрации ¬ы указали Email, но не подтвердили его");
				SendClientMessage(playerid, 0xFFA040FF, "¬ы можете сделать это пр€мо сейчас, через /menu > Ќастройки безопасности");
				SendClientMessage(playerid, 0xFFA040FF, "Ѕез подтверждени€ Email восстановить доступ к аккаунту будет невозможно");
			}
			
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME)) != -1)
			{
				if(GetElapsedTime(GetHouseData(buffer, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "—рок оплаты ¬ашего дома скоро заканчиваетс€");
				}	
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL)) != -1)
			{
				new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
				if(GetElapsedTime(GetHotelData(buffer, room_id, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "” ¬ас осталось мало оплаченных дней в гостинице");
				}	
			}
			if((buffer = GetPlayerBusiness(playerid)) != -1)
			{
				if(GetElapsedTime(GetBusinessData(buffer, B_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "—рок аренды ¬ашего бизнеса скоро заканчиваетс€");
				}	
			}
			if((buffer = GetPlayerFuelStation(playerid)) != -1)
			{
				if(GetElapsedTime(GetFuelStationData(buffer, FS_RENT_DATE), time, CONVERT_TIME_TO_DAYS) < 5)
				{
					SendClientMessage(playerid, 0xFFB500FF, "—рок аренды ¬ашей ј«— скоро заканчиваетс€");
				}
			}
			SetPlayerInit(playerid);
			//SetTimerEx("PlayerOwnableCarInit", 250, false, "i", playerid);
		
			//CallLocalFunction("PlayerOwnableCarInit", "i", playerid);
		}
		else 
		{
			SetPlayerData(playerid, P_ACCOUNT_STATE, ACCOUNT_STATE_REG_SKIN);
			SendClientMessage(playerid, 0x66CC00FF, "¬ыберите внешность ¬ашего персонажа");
		}
	}
	cache_delete(result);
}

public: ShowPlayerLoginDialog(playerid, step, wrong_pass)
{
	if(GetPlayerData(playerid, P_ACCOUNT_STATE) != ACCOUNT_STATE_LOGIN) return 0;
	
	/*
	new request_type = REQUEST_TYPE_OFF;
	if(strcmp(GetPlayerIpEx(playerid), GetPlayerData(playerid, P_LAST_IP)) != 0)
	{
		request_type = REQUEST_TYPE_IP;
	}
	else
	{
		new subnet_last_ip[16], subnet_cur_ip[16];
		
		GetSubnet(subnet_cur_ip, GetPlayerIpEx(playerid));
		GetSubnet(subnet_last_ip, GetPlayerData(playerid, P_LAST_IP));
		
		if(strcmp(subnet_cur_ip, subnet_last_ip) != 0)
		{
			request_type = REQUEST_TYPE_SUBNET;
		}
	}
	*/
	
	new fmt_str[256];
	switch(step)
	{
		case LOGIN_STATE_CHECK_BAN:
		{
			new Cache: result;
		
			format(fmt_str, sizeof fmt_str, "SELECT * FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
			result = mysql_query(mysql, fmt_str, true);
			
			if(cache_num_rows())
			{
				new unban_time = cache_get_field_content_int(0, "ban_time");
				new ban_days = GetElapsedTime(unban_time, gettime(), CONVERT_TIME_TO_DAYS);
				
				if(ban_days)
				{
					new reason[32];
					new admin_name[21];

					new year, month, day;
					new hour, minute, second;
					new ban_time = cache_get_field_content_int(0, "time");
				
					cache_get_field_content(0, "description", reason);
					cache_get_field_content(0, "admin", admin_name);
					
					timestamp_to_date(ban_time, year, month, day, hour, minute, second);
					format
					(
						fmt_str, sizeof fmt_str, 
						"{FFFFFF}Ётот аккаунт заблокирован на {FF3333}%d дней\n\n"\
						"{FFFFFF}Ќик администратора: %s\n"\
						"ѕричина блокировки: %s\n"\
						"ƒата и врем€: %d-%02d-%02d %02d:%02d:%02d\n\n"\
						"¬ведите {FFCD00}/q (/quit) {FFFFFF}чтобы выйти",
						ban_days,
						admin_name,
						reason,
						year, month, day, hour, minute, second
					);
					Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{3399FF}"SERVER_NAME" RolePlay", fmt_str, "«акрыть", "");
				
					Kick:(playerid, " ", 3000);
				}
				else 
				{
					format(fmt_str, sizeof fmt_str, "DELETE FROM ban_list WHERE user_id=%d LIMIT 1", GetPlayerAccountID(playerid));
					mysql_tquery(mysql, fmt_str, "", "");
				
					CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
				}
			}
			else CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
		
			return cache_delete(result);
		}
		case LOGIN_STATE_PASSWORD:
		{
			format
			(
				fmt_str, sizeof fmt_str, 
				"{FFFFFF}ƒобро пожаловать на сервер "SERVER_NAME" RolePlay\n"\
				"јккаунт с ¬ашим ником зарегистрирован\n\n"\
				"Ћогин: {66CC66}%s\n",
				GetPlayerNameEx(playerid)
			);
			if(wrong_pass)
			{
				new ch[3];
				new attemps = GetPlayerData(playerid, P_PASS_ATTEMPS);
				
				valstr(ch, attemps);

				strcat(fmt_str, "{FF3300}Ќеверный пароль! ќсталось попыток: ");
				strcat(fmt_str, ch);
				
				AddPlayerData(playerid, P_PASS_ATTEMPS, -, 1);
				switch(attemps)
				{
					case 0:
					{
						Dialog
						(
							playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
							"{FF9933}Ћимит попыток авторизации",
							"{FFFFFF}¬ы ввели неправильный пароль 3 раза подр€д. ¬аш IP адрес забанен на сутки",
							"«акрыть", ""
						);
						Kick:(playerid, " ");
						
						BanEx(playerid, "Ћимит попыток авторизации");
						return AddBan(0, gettime(), 1, GetPlayerIpEx(playerid), "Ћимит попыток авторизации", "—истема безопасности");
					}
					case 1:
					{
						SendClientMessage(playerid, 0xFF6600FF, "ѕри неправильном вводе парол€ ¬ы будете забанены");
					}
				}
				PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
			}
			else strcat(fmt_str, "{FFFFFF}¬ведите пароль от аккаунта:");
			
			Dialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "{66CCFF}јвторизаци€", fmt_str, "¬ойти", "ќтмена");
		}
		case LOGIN_STATE_PHONE: // ввод 5 послед. цифр телефона
		{
			if(GetPlayerData(playerid, P_REQUEST_PHONE))
			{
				if(!wrong_pass)
				{
					new phone[13];
					
					strmid(phone, GetPlayerData(playerid, P_SETTING_PHONE), 0, strlen(GetPlayerData(playerid, P_SETTING_PHONE)) - 5);
					strcat(phone, "*****");
					
					format
					(
						fmt_str, sizeof fmt_str, 
						"{FFFFFF}—истема безопасности запрашивает ввод\n"\
						"¬ашего мобильного телефона\n\n{FFCD00}%s\n\n"\
						"{FFFFFF}¬ведите последние 5 цифр номера:",
						phone
					);
					Dialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "{66CCFF}ћобильный телефон", fmt_str, "¬вести", "¬ыход");
				}
				else 
				{
					SendClientMessage(playerid, 0xFF0000FF, "Ќомер мобильного телефона введен неверно. ƒоступ запрещен");
					Kick:(playerid);
				}
			}
			else 
			{
				return CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
			}
		}
		case LOGIN_STATE_PIN_CODE: // ввод пин кода
		{
			if(GetPlayerData(playerid, P_REQUEST_PIN))
			{
				if(wrong_pass)
				{
					SendClientMessage(playerid, 0xFF0000FF, "PIN-код введен неверно. ƒоступ запрещен");
					Kick:(playerid);
				}
				else ShowPlayerPinCodePTD(playerid, PIN_CODE_STATE_LOGIN_CHECK);
			}
			else 
			{
				return CallLocalFunction("ShowPlayerLoginDialog", "iii", playerid, step + 1, false);
			}
		}
		case LOGIN_STATE_LOAD_ACC:
		{
			SetPlayerData(playerid, P_AUTH_TIME, -1);
			LoadPlayerData(playerid);
		}
	}
	SetPlayerData(playerid, P_ACCOUNT_STEP_STATE, step);
	
	return 1;
}

public: ClearPlayerAnim(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 0);
}


public: ClearPlayerChatAnim(playerid)
{
	if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_CHAT)
	{
		ClearPlayerAnim(playerid);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
	}
}

public: SetPlayerLoaderJobLoad(playerid) // брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_LOADER_LOAD)
		{
			new rand = random(sizeof loader_job_attach_obj);
		
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 0);			
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM, loader_job_attach_obj[rand][L_OBJECT], A_OBJECT_BONE_LEFT_FOREARM, loader_job_attach_obj[rand][L_POS_X], loader_job_attach_obj[rand][L_POS_Y], loader_job_attach_obj[rand][L_POS_Z], loader_job_attach_obj[rand][L_ROT_X], 0.0, loader_job_attach_obj[rand][L_ROT_Z], 1.0, 1.0, 1.0, 0);
			
			SetPlayerLoaderJobUnLoadCP(playerid);
			
			if(!random(6))
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_DROP_LOAD);
		}
	}
}

public: SetPlayerMinerJobTakeOre(playerid, step)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		new time = 1000;
		
		switch(step)
		{
			case 1:
			{
				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
				
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "CARRY", "liftup", 8.0, 0, 0, 0, 0, 0, 0);
			
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 3931, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.05, -0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 2936, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.05, 0.1, 0.0, 90.0, 0.0, 0.2, 0.2, 0.2, 0);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 1, 1, 1, 2250, 0);
				
				time = 2500;
			}
			case 3:
			{
				RemovePlayerAttachedObjectEx(playerid, A_OBJECT_SLOT_HAND, A_OBJECT_SLOT_HAND + 1);
				
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE, 1458, A_OBJECT_BONE_SPINE, -0.9, 0.7, 0.02, 0.0, 90.0, 0.0, 0.58, 0.6, 0.4, 0);
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_SPINE + 1, 816, A_OBJECT_BONE_SPINE, -0.63, 1.3, 0.0, 270.0, 75.0, 0.0, 0.5, 0.4, 0.8, 0);
				
				SetPlayerMinerJobUnLoadCP(playerid);
				return ;
			}
			default:
				return ;
		}
		SetTimerEx("SetPlayerMinerJobTakeOre", time, false, "ii", playerid, step + 1);
	}
}

public: MinerCarriageMove(carriageid)
{
	new bool: status = miner_carriage[carriageid][MC_STATUS];
	if(status)
	{
		MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_START_POS_X], miner_carriage[carriageid][MC_START_POS_Y], miner_carriage[carriageid][MC_START_POS_Z], 10.0, 0.0, 0.0, 0.0);
	}
	else MoveDynamicObject(miner_carriage[carriageid][MC_OBJECT_ID], miner_carriage[carriageid][MC_END_POS_X], miner_carriage[carriageid][MC_END_POS_Y], miner_carriage[carriageid][MC_END_POS_Z], 10.0, 0.0, 0.0, 0.0);
	
	miner_carriage[carriageid][MC_STATUS] = (status ^ true);
}

public: NextBusRouteCP(playerid)
{
	if(GetPlayerJob(playerid) == JOB_BUS_DRIVER)
	{
		if(IsPlayerInJob(playerid))
		{
			new route_id = GetPlayerData(playerid, P_BUS_ROUTE);	
			new route_step = GetPlayerData(playerid, P_BUS_ROUTE_STEP);	
			new next_cp = route_step + 1;
	
			if(g_bus_route[route_id][next_cp][BRS_POS_X] == 0.0)
			{
				next_cp = 0;
			}

			SetPlayerRaceCheckpoint
			(
				playerid,
				g_bus_route[route_id][route_step][BRS_STOP],
				g_bus_route[route_id][route_step][BRS_POS_X],
				g_bus_route[route_id][route_step][BRS_POS_Y],
				g_bus_route[route_id][route_step][BRS_POS_Z],
				g_bus_route[route_id][next_cp][BRS_POS_X],
				g_bus_route[route_id][next_cp][BRS_POS_Y],
				g_bus_route[route_id][next_cp][BRS_POS_Z],
				4.0,
				RCP_ACTION_TYPE_BUS_ROUTE
			);
			AddPlayerData(playerid, P_BUS_ROUTE_STEP, +, 1);
		}
	}
}

public: StartPlayerJob(playerid, jobid)
{
	if(GetPlayerJob(playerid) == jobid)
	{
		if(!IsPlayerInJob(playerid))
		{
			new job_car = GetPlayerJobCar(playerid);
			if(IsPlayerInVehicle(playerid, job_car)) 
			{
				new action_type = GetVehicleData(job_car, V_ACTION_TYPE);
				new car_type = (action_type - VEHICLE_ACTION_TYPE_BUS_DRIVER) + 1; 
				
				if(jobid == car_type)
				{
					SetPlayerJobLoadItems(playerid, 0);
					
					SetPlayerData(playerid, P_JOB_WAGE, 0);
					SetPlayerData(playerid, P_IN_JOB, true);
					SetVehicleData(job_car, V_ACTION_ID, true);
				
					new fmt_str[128];
					
					switch(jobid)
					{
						case JOB_BUS_DRIVER:
						{
							new route_id = GetPlayerData(playerid, P_BUS_ROUTE);

							format(fmt_str, sizeof fmt_str, "%s\n{FFFFFF}—тоимость проезда: {FF9900}%d руб", g_bus_routes[route_id][BR_NAME], GetPlayerData(playerid, P_JOB_TARIFF));
							CreateVehicleLabel(job_car, fmt_str, g_bus_routes[route_id][BR_COLOR], 0.0, 0.0, 2.6, 45.0);
						
							format(fmt_str, sizeof fmt_str, "начал работу водител€ автобуса на маршруте %s", g_bus_routes[route_id][BR_NAME]);
							Action(playerid, fmt_str, _, false);

							NextBusRouteCP(playerid);
							
							SetPVarFloat(playerid, "car_damage", 1000.0);
						}
						case JOB_TAXI_DRIVER:
						{
							format(fmt_str, sizeof fmt_str, "%s{FFFF00}“ариф: %d руб", GetPlayerData(playerid, P_JOB_SERVICE_NAME), GetPlayerData(playerid, P_JOB_TARIFF));
							CreateVehicleLabel(job_car, fmt_str, 0x3399FFFF, 0.0, 0.0, 1.4, 25.0);
							
							Action(playerid, "начал работу таксиста", _, false);
						}
						case JOB_MECHANIC:
						{
							SetPlayerData(playerid, P_MECHANIC_FILL_PAY, 0);
							SetPlayerData(playerid, P_MECHANIC_REPAIR_PAY, 0);
						
							format(fmt_str, sizeof fmt_str, "%s{FFFFFF}јвтомеханик\n{999999}Ќет топлива", GetPlayerData(playerid, P_JOB_SERVICE_NAME));
							CreateVehicleLabel(job_car, fmt_str, 0xCC9900FF, 0.0, 0.0, 2.0, 25.0);

							Action(playerid, "начал работу автомеханика", _, false);							
						}
						/*
						case JOB_TRUCKER:
						{
							DeletePVar(playerid, "trucker_salary");
						
							if(job_car[TRUCKER_CAR][0] <= vehicleid <= (job_car[TRUCKER_CAR][0] + 5))
							{
								fmt_str = "—лужба\n{FFFFFF}ƒоставки продуктов";
								
								SendClientMessage(playerid, 0x66CC00FF, "»спользуйте {3399FF}/bizlist {66CC00}чтобы посмотреть заказы от владельцев бизнесов");
								CallLocalFunction("Action", "isi", playerid, "начал работу развозчика продуктов", false);
							}
							else if((job_car[TRUCKER_CAR][0] + 6) <= vehicleid <= job_car[TRUCKER_CAR][1])
							{
								fmt_str = "—лужба\n{FFFFFF}ƒоставки топлива";
								
								SendClientMessage(playerid, 0x66CC00FF, "»спользуйте {3399FF}/fuellist {66CC00}дл€ просмотра заказов от владельцев ј«—");
								CallLocalFunction("Action", "isi", playerid, "начал работу развозчика топлива", false);
							}
							
							if(!IsValidDynamic3DTextLabel(vehicle[vehicleid][veh_label])) 
								vehicle[vehicleid][veh_label] = CreateDynamic3DTextLabel(fmt_str, 0x3399FFFF, 0.0, 2.1, 2.1, 20.0, _, vehicleid);	
							
						}
						*/
					}
				}
			}
		}
	}
	return 1;
}

public: EndPlayerJob(playerid)
{
	if(IsPlayerInJob(playerid))
	{
		new vehicleid = GetPlayerJobCar(playerid);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
			SetVehicleToRespawn(vehicleid);
			SetPlayerData(playerid, P_JOB_CAR, INVALID_VEHICLE_ID);
		}
	}
	KillEndJobTimer(playerid);
	
	new fmt_str[128];
	new wage = GetPlayerJobWage(playerid);
	new items = GetPlayerJobLoadItems(playerid);
	
	SetPlayerData(playerid, P_JOB_WAGE, 0);
	SendClientMessage(playerid, 0xFFFF00FF, "–абочий день завершен!");
	
	SetPlayerData(playerid, P_IN_JOB, false);
	switch(GetPlayerData(playerid, P_JOB))
	{
		case JOB_BUS_DRIVER:
		{
			new Float: health = GetPVarFloat(playerid, "car_damage");
			new repair_sum;

			if(health < 1000.0)
				repair_sum = (floatround((1000.0 - health) + float(random(100)+10))) / 3;
			
			DisablePlayerRaceCheckpoint(playerid);
		
			format(fmt_str, sizeof fmt_str, "«аработано: {00FF00}%d руб", wage + (items * GetPlayerData(playerid, P_JOB_TARIFF)));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		
			format(fmt_str, sizeof fmt_str, " оличество пассажиров: {00FF00}%d{FFFFFF}.  уплено билетов на {00FF00}%d руб", items, items * GetPlayerData(playerid, P_JOB_TARIFF));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "«а ремонт автобуса: {FF6600}-%d руб", repair_sum); 
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		
			if(repair_sum < wage)
				wage -= repair_sum;
			
			//GiveMoney(playerid, salary, "«арплата ¬одител€ ћаршрутки", true, true);
		}
		case JOB_TAXI_DRIVER:
		{
			DisablePlayerRaceCheckpoint(playerid);
			wage = items * GetPlayerData(playerid, P_JOB_TARIFF);
			
			format(fmt_str, sizeof fmt_str, "«аработано: {00FF00}%d руб", wage);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
			
			format(fmt_str, sizeof fmt_str, " оличество пассажиров: {00FF00}%d", items);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		}
		case JOB_MECHANIC:
		{
			DisablePlayerRaceCheckpoint(playerid);
			wage = GetPlayerData(playerid, P_MECHANIC_FILL_PAY) + GetPlayerData(playerid, P_MECHANIC_REPAIR_PAY);
	
			format(fmt_str, sizeof fmt_str, "ѕолучено за ремонт: {00FF00}%d руб", GetPlayerData(playerid, P_MECHANIC_REPAIR_PAY));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "ѕолучено за заправку: {00FF00}%d руб", GetPlayerData(playerid, P_MECHANIC_FILL_PAY));
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "¬сего заработано: {FFCD00}%d руб", wage);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
		}
		
		/*
		case JOB_TRUCKER:
		{
			DisablePlayerRaceCheckpoint(playerid);
			
			salary = GetPVarInt(playerid, "trucker_salary");
			
			format(fmt_str, sizeof fmt_str, "¬аша обща€ чиста€ прибыль составл€ет {00CC00}%d руб", salary);
			SendClientMessage(playerid, -1, fmt_str);
			
			if(trucker_take_order[playerid] != -1)
				biz_orders[trucker_take_order[playerid]][bo_order_used] = false;
				
			return 1;
		}

		case JOB_PITCHMAN:
		{
			new marketid = player_use_market[playerid];
			player_use_market[playerid] = -1;
			
			if(marketid != -1)
			{
				market_status[marketid] = false;
				UpdateMarket(marketid);
			}
		
			salary = player_job_load_items[playerid];
		
			format(fmt_str, sizeof fmt_str, "ќбщее количество покупателей: {00FF00}%d", market_buyers_count[playerid]);
			SendClientMessage(playerid, -1, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "¬сего продано товаров на {00FF00}%d руб", salary);
			SendClientMessage(playerid, -1, fmt_str);
		}
		
		case JOB_FIREFIGHTER:
		{	
			check_extinguish_the_fire{playerid} = false;

			DisablePlayerRaceCheckpoint(playerid);
			TextDrawHideForPlayer(playerid, time_to_fire_TD);
		
			salary = player_job_load_items[playerid];
		
			format(fmt_str, sizeof fmt_str, "ѕотушено очагов возгорани€: {FF3333}%d", extinguished_fires_count[playerid]);
			SendClientMessage(playerid, -1, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "«аработано {0099CC}%d руб", salary);
			SendClientMessage(playerid, -1, fmt_str);
		}
		*/
		default: 
		{
			switch(GetPlayerTempJob(playerid))
			{
				case TEMP_JOB_FACTORY_TRUCKER:
				{
					RemovePlayerAttachedObjects(playerid);
					SetPlayerSkinInit(playerid);
					
					format(fmt_str, sizeof fmt_str, "¬аша обща€ чиста€ прибыль составл€ет {00CC00}%d руб", wage);
					SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
					
					SetPlayerJobLoadItems(playerid, 0);
					SetPlayerTempJob(playerid, TEMP_JOB_NONE);
				}
			}
			return 1;
		}
	}
	SendClientMessage(playerid, 0x66CC00FF, "ƒеньги будут перечислены на ¬аш счет во врем€ зарплаты");
	
	AddPlayerData(playerid, P_WAGE, +, wage);
	
	format(fmt_str, sizeof fmt_str, "UPDATE accounts SET wage=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_WAGE), GetPlayerAccountID(playerid));
	mysql_query(mysql, fmt_str, false);
	
	return 1;
}

public: ShowChangeNameHistory(playerid, name[])
{
	new fmt_str[64];
	new rows = cache_num_rows();
	
	if(!rows)
	{
		format(fmt_str, sizeof fmt_str, "{FFCD00}ѕрошлые имена %s", name);
		return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, "{FFFFFF}»стори€ изменени€ имен персонажа пуста", "«акрыть", "");
	}
	
	new text[1024] = "{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		strcat(fmt_str, "\n");
		
		strcat(text, fmt_str);
	}
	format(fmt_str, sizeof fmt_str, "{FFCD00}ѕрошлые имена %s", name);
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "«акрыть", "");
}

public: ShowPlayerPhoneBook(playerid)
{
	if(IsPlayerPhoneBookInit(playerid))
	{
		if(GetPlayerPhoneBookContacts(playerid) > 0)
		{
			new fmt_str[37];
			new string[((sizeof fmt_str) * MAX_PHONE_BOOK_CONTACTS) + 1];	
	
			for(new idx, count; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
			{
				if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;
				SetPlayerListitemValue(playerid, count ++, idx);
				
				format(fmt_str, sizeof fmt_str, "%s - tel.%s\n", GetPlayerPhoneBook(playerid, idx, PB_NAME), GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
				strcat(string, fmt_str);
			}
			Dialog(playerid, DIALOG_PHONE_BOOK, DIALOG_STYLE_LIST, "{FFCD00}“елефонна€ книга", string, "¬арианты", "ќтмены");
		}
		else 
		{
			SendClientMessage(playerid, 0xCECECEFF, "¬ телефонной книге нет номеров");
			SendClientMessage(playerid, 0xCECECEFF, "„тобы добавить новый контакт введите {FFFF00}/add [id игрока]");
		}
	}
	else
	{
		InitPlayerPhoneBook(playerid);
		CallLocalFunction("ShowPlayerPhoneBook", "i", playerid);
	}
	return 1;
}

public: BusinesGPSListInit()
{
	new rows;
	new query[64 + 1];
	new Cache: result;
	
	format(query, sizeof query, "SELECT * FROM business_gps ORDER BY pos DESC, time ASC LIMIT %d", MAX_BUSINESS_GPS);
	result = mysql_query(mysql, query, true);
	
	rows = cache_num_rows();
	for(new idx; idx < rows; idx ++)
	{
		SetBusinessGPSInfo(idx, BG_SQL_ID, 	cache_get_row_int(idx, 0));
		SetBusinessGPSInfo(idx, BG_BIZ_ID, 	cache_get_row_int(idx, 1));
		SetBusinessGPSInfo(idx, BG_POS, 	cache_get_row_int(idx, 2));
		SetBusinessGPSInfo(idx, BG_TIME, 	cache_get_row_int(idx, 3));
	}
	g_business_gps_count = rows;
	g_business_gps_init = true;
	
	cache_delete(result);
}

public: ShowPlayerGPSBusinessList(playerid)
{
	if(g_business_gps_init)
	{
		new businessid;
		
		new fmt_str[44];
		new string[(sizeof fmt_str) * MAX_BUSINESS_GPS];
		
		if(!g_business_gps_count)
			string = "¬ данный момент в списке нет бизнесов";
			
		for(new idx, count; idx < g_business_gps_count; idx ++)
		{
			businessid = GetBusinessGPSInfo(idx, BG_BIZ_ID);
			
			format(fmt_str, sizeof fmt_str, "%d. %s (%s)\n", idx + 1, GetBusinessData(businessid, B_NAME), GetCityName(GetBusinessData(businessid, B_CITY)));
			strcat(string, fmt_str);
			
			SetPlayerListitemValue(playerid, count ++, idx);
		}
		Dialog(playerid, DIALOG_GPS_BUSINESS, DIALOG_STYLE_LIST, "{FFCD00}–еклама бизнеса", string, "ќтметить", "Ќазад");		
	}
	else 
	{
		BusinesGPSListInit();
		CallLocalFunction("ShowPlayerGPSBusinessList", "i", playerid);
	}
}

public: ShowPlayerBusinessDialog(playerid, operationid)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		switch(operationid)
		{
			case BIZ_OPERATION_PARAMS: // управление заправкой
			{
				Dialog
				(
					playerid, DIALOG_BIZ_PARAMS, DIALOG_STYLE_LIST,
					"{33AACC}»зменение параметров бизнеса",
					"1. {669966}ќткрыть {FFFFFF}или {CC3333}закрыть {FFFFFF}бизнес\n"\
					"2. ”становить цену на вход\n"\
					"3. »зменить стоимость продукта\n"\
					"4. «аказать продукты\n"\
					"5. ќтменить заказ\n"\
					"6. ‘инансова€ статистика\n"\
					"7. ”лучшить бизнес",
					"¬ыбрать", "Ќазад"
				);
			}
			case BIZ_OPERATION_LOCK: // открыть / закрыть
			{
				if(GetBusinessData(businessid, B_LOCK_STATUS))
				{
					SetBusinessData(businessid, B_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "Ѕизнес открыт");					
				}
				else 
				{
					SetBusinessData(businessid, B_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "Ѕизнес закрыт");					
				}
				UpdateBusinessLabel(businessid);
				
				new query[75];
				format(query, sizeof query, "UPDATE business SET `lock`=%d WHERE `id`=%d LIMIT 1", GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);
				
				CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
			}
			case BIZ_OPERATION_ENTER_PRICE: // установить цену за вход
			{
				Dialog
				(
					playerid, DIALOG_BIZ_ENTER_PRICE, DIALOG_STYLE_INPUT,
					"{33AACC}÷ена за вход",
					"{FFFFFF}”кажите сколько должны платить клиенты\n"\
					"чтобы войти в ваш бизнес\n\n"\
					"{669966}ѕредел цен: от 0 до 5000 рублей\n"\
					"”становка цены за вход может увеличить ваши доходы,\n"\
					"однако сократит количество клиентов\n"\
					"{CC3333}¬ыбирайте цену разумно во избежание банкротства вашей фирмы", 
					"—менить", "Ќазад"
				);
			}
			case BIZ_OPERATION_PROD_PRICE: // установить стоимость продукта
			{
				Dialog
				(
					playerid, DIALOG_BIZ_PROD_PRICE, DIALOG_STYLE_INPUT,
					"{33AACC}—тоимость продукта",
					"{FFFFFF}“ут вы можете изменить стоимость продукта дл€ бизнеса\n"\
					"”кажите цену в пределах от 25 до 200 рублей\n\n"\
					"—тоимость продукта определ€ет привлекательность\n"\
					"вашего бизнеса дл€ развозчиков продуктов\n"\
					"„ем выше цена, тем охотнее они продадут вам свой товар\n"\
					"ќднако помните, что черезчур высока€ цена\n"\
					"может привести вас к банкротству", 
					"—менить", "Ќазад"
				);		
			}
			case BIZ_OPERATION_PROD_ORDER: // заказать продукты
			{
				Dialog
				(
					playerid, DIALOG_BIZ_ORDER_PRODS, DIALOG_STYLE_INPUT, 
					"{33AACC}«аказ продуктов", 
					"{FFFFFF}—колько продуктов ¬ы хотите заказать?", 
					"«аказать", "Ќазад"
				);
			}
			case BIZ_OPERATION_PROD_ORDER_CANCEL: // отменить заказ
			{
				new order_id = GetBusinessData(businessid, B_ORDER_ID);
				if(order_id != -1)
				{
					new fmt_str[128];
					format
					(
						fmt_str, sizeof fmt_str, 
						"{FFFFFF}¬ы действительно хотите отменить заказ?\n"\
						"Ќа счет бизнеса будет возвращено {FFCD00}%d руб",
						GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE)
					);
					Dialog(playerid, DIALOG_BIZ_ORDER_CANCEL, DIALOG_STYLE_MSGBOX, "{33AADD}ќтмена заказа", fmt_str, "ƒа", "Ќет");
				}
				else 
				{
					SendClientMessage(playerid, 0xFF6600FF, "¬ы не оформл€ли заказ продуктов дл€ своего бизнеса");
					CallLocalFunction("ShowPlayerBusinessDialog", "ii", playerid, BIZ_OPERATION_PARAMS);
				}
			}
			case BIZ_OPERATION_PROFIT_STATS: // финансова€ статистика
			{
				new query[256];
				
				new time = gettime();
				new cur_day = time - (time % 86400);
				new start_day = cur_day - (86400 * 20);
				
				format(query, sizeof query, "SELECT FROM_UNIXTIME(time, '%%Y-%%m-%%d') AS date, SUM(money) as total FROM business_profit WHERE bid=%d AND view=1 AND time >= %d AND time < %d GROUP BY time ORDER BY time DESC LIMIT 20", GetBusinessData(businessid, B_SQL_ID), start_day, cur_day);
				mysql_tquery(mysql, query, "ShowBusinessProfit", "ii", playerid, ++ mysql_race[playerid]);
			}
			case BIZ_OPERATION_IMPROVEMENTS: // ”лучшени€	
			{
				new fmt_str[80];
				new string[512];
				
				new buffer[14 + 1];
				new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_business_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_business_improvements[idx][I_NAME]);
					
					switch(idx)
					{
						case 0,1,4: 
							buffer = "\t"; 
						
						case 5:
							buffer = "\t\t";
						
						default:
							buffer[0] = 0;
					}
					if(buffer[0] != EOS)
						strcat(fmt_str, buffer);
				
					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, " уплено");
					}
					else 
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);
						
						valfmt(buffer, g_business_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", buffer);
						
						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_BIZ_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}ƒоступные улучшени€", string, " упить", "Ќазад");
			}
		}
	}
	
	return 1;
}

public: ShowBusinessProfit(playerid, race)
{
	if(race != mysql_race[playerid])
	{
		new string[600];
		new fmt_str[32];
		new rows = cache_num_rows();
		
		if(rows)
		{		
			string = "ƒата\t\t\tѕрибыль\n\n{FFFFFF}";
		}
		else string = "{FFFFFF}‘инансова€ статистика ¬ашего бизнеса еще не сформирована";
		
		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str, mysql, sizeof fmt_str);
			strcat(string, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "\t\t%d руб\n", cache_get_row_int(idx, 1));
			strcat(string, fmt_str);
		}
		Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{33AADD}ƒоход бизнеса за 20 дней", string, "<< Ќазад", "«акрыть");
	}
}

public: ShowPlayerFuelStationDialog(playerid, operationid)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		switch(operationid)
		{
			case FUEL_ST_OPERATION_PARAMS:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_PARAMS, DIALOG_STYLE_LIST,
					"{33AACC}ѕараметры заправочной станции",
					"1. {669966}ќткрыть {FFFFFF}или {CC3333}закрыть {FFFFFF}заправочную станцию\n"\
					"2. Ќовое название\n"\
					"3. »зменить цену на топливо\n"\
					"4. ”становить закупочную цену\n"\
					"5. «аказать топливо\n"\
					"6. ќтменить заказ\n"\
					"7. ‘инансова€ статистика\n"\
					"8. ”лучшить заправочную станцию",
					"¬ыбрать", "Ќазад"
				);
			}
			case FUEL_ST_OPERATION_LOCK:
			{
				if(GetFuelStationData(stationid, FS_LOCK_STATUS))
				{
					SetFuelStationData(stationid, FS_LOCK_STATUS, false);
					SendClientMessage(playerid, 0x66CC00FF, "«аправочна€ станци€ открыта");					
				}
				else 
				{
					SetFuelStationData(stationid, FS_LOCK_STATUS, true);
					SendClientMessage(playerid, 0xFF6600FF, "«аправочна€ станци€ закрыта");					
				}
				UpdateFuelStationLabel(stationid);
				
				new query[75];
				format(query, sizeof query, "UPDATE `fuel_stations` SET `lock`=%d WHERE `id`=%d LIMIT 1", GetFuelStationData(stationid, FS_LOCK_STATUS), GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);
				
				CallLocalFunction("ShowPlayerFuelStationDialog", "ii", playerid, FUEL_ST_OPERATION_PARAMS);
			}
			case FUEL_ST_OPERATION_NEW_NAME:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_NAME, DIALOG_STYLE_INPUT,
					"{33AACC}—мена названи€",
					"{FFFFFF}¬ведите новое название дл€ заправочной станции\n\n"\
					"“ребовани€:\n"\
					"- ƒлина от 3-х до 15-ти символов\n"\
					"- Ќазвание не должно противоречить правилам сервера\n"\
					"- Ќазвание должно ассоциироватьс€ с заправочными станци€ми\n\n"\
					"{CC3333}ѕ–»ћ≈„јЌ»≈: Ќовое название не сохранитс€ после рестарта сервера",
					"—менить", "Ќазад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_PRICE:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_PRICE_FUEL, DIALOG_STYLE_INPUT,
					"{33AACC}÷ена топлива",
					"{FFFFFF}”кажите отпускную цену за 1 литр\n"\
					"топлива в пределах от 2 до 15 рублей",
					"√отово", "Ќазад"
				);
			}
			case FUEL_ST_OPERATION_BUY_FUEL_PRIC:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_BUY_FUEL_PR, DIALOG_STYLE_INPUT,
					"{33AACC}«акупочна€ цена",
					"{FFFFFF}«акупочна€ цена определ€ет привлекательность ¬ашей\n"\
					"заправки дл€ развозчиков топлива. „ем выше эта цена,\n"\
					"тем охотнее развозчики будут выполн€ть ¬аши заказы\n\n"\
					"{669966}¬ведите значение от 2 до 10 рублей",
					"»зменить", "Ќазад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_ORDER:
			{
				Dialog
				(
					playerid, DIALOG_FUEL_STATION_ORDER_FUELS, DIALOG_STYLE_INPUT,
					"{33AACC}«аказ топлива",
					"{FFFFFF}—колько литров топлива ¬ы хотите заказать?",
					"«аказать", "Ќазад"
				);
			}
			case FUEL_ST_OPERATION_FUEL_ORDER_CA:
			{
				new order_id = GetFuelStationData(stationid, FS_ORDER_ID);
				
				if(order_id != -1)
				{
					new fmt_str[128];
					format
					(
						fmt_str, sizeof fmt_str, 
						"{FFFFFF}¬ы действительно хотите отменить заказ?\n"\
						"Ќа счет заправочной станции будет возвращено {FFCD00}%d руб",
						GetOrderData(order_id, O_AMOUNT) * GetOrderData(order_id, O_PRICE)
					);
					Dialog(playerid, DIALOG_FUEL_STATION_ORDER_CANCE, DIALOG_STYLE_MSGBOX, "{33AADD}ќтмена заказа", fmt_str, "ƒа", "Ќет");
				}
				else 
				{
					SendClientMessage(playerid, 0xFF6600FF, "¬ы не оформл€ли заказ топлива дл€ своей ј«—");
					CallLocalFunction("ShowPlayerFuelStationDialog", "ii", playerid, FUEL_ST_OPERATION_PARAMS);
				}
			}
			case FUEL_ST_OPERATION_PROFIT_STATS:
			{
				new query[256];
				
				new time = gettime();
				new cur_day = time - (time % 86400);
				new start_day = cur_day - (86400 * 20);
				
				format(query, sizeof query, "SELECT FROM_UNIXTIME(time, '%%Y-%%m-%%d') AS date, SUM(money) as total FROM fuel_stations_profit WHERE fid=%d AND view=1 AND time >= %d AND time < %d GROUP BY time ORDER BY time DESC LIMIT 20", GetFuelStationData(stationid, FS_SQL_ID), start_day, cur_day);
				mysql_tquery(mysql, query, "ShowFuelStationProfit", "ii", playerid, ++ mysql_race[playerid]);
			}
			case FUEL_ST_OPERATION_IMPROVEMENTS:
			{
				new fmt_str[75];
				new string[300];
				
				new str_numeric[14 + 1];
				new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

				for(new idx; idx < sizeof(g_fuel_station_improvements); idx ++)
				{
					format(fmt_str, sizeof fmt_str, "%d уровень:\t%s\t", idx + 1, g_fuel_station_improvements[idx][I_NAME]);
	
					if(idx != 2)
						strcat(fmt_str, "\t");
						
					if(i_level > idx)
					{
						strins(fmt_str, "{2277AA}", 0, sizeof fmt_str);
						strcat(fmt_str, " уплено");
					}
					else 
					{
						if(i_level < idx)
						{
							strins(fmt_str, "{CC3344}", 0, sizeof fmt_str);
						}
						strcat(string, fmt_str);
						
						valfmt(str_numeric, g_fuel_station_improvements[idx][I_PRICE]);
						format(fmt_str, sizeof fmt_str, "%s руб", str_numeric);
						
						if(i_level == idx)
							strins(fmt_str, "{66CC33}", 0, sizeof fmt_str);
					}
					strcat(fmt_str, "\n");
					strcat(string, fmt_str);
				}
				Dialog(playerid, DIALOG_FUEL_STATION_IMPROVEMENT, DIALOG_STYLE_LIST, "{33AADD}”лучшени€ дл€ заправочной станции", string, " упить", "Ќазад");
			}
		}
	}
	return 1;
}

public: ShowFuelStationProfit(playerid, race)
{
	if(race != mysql_race[playerid])
	{
		new string[600];
		new fmt_str[32];
		new rows = cache_num_rows();
		
		if(rows)
		{		
			string = "ƒата\t\t\tѕрибыль\n\n{FFFFFF}";
		}
		else string = "{FFFFFF}‘инансова€ статистика ¬ашей заправочной станции еще не сформирована";
		
		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str, mysql, sizeof fmt_str);
			strcat(string, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "\t\t%d руб\n", cache_get_row_int(idx, 1));
			strcat(string, fmt_str);
		}
		Dialog(playerid, DIALOG_FUEL_STATION_INFO, DIALOG_STYLE_MSGBOX, "{33AADD}ƒоход ј«— за 20 дней", string, "<< Ќазад", "«акрыть");
	}
}

public: PresentFlowersToPlayer(playerid, to_player)
{
	SetPlayerAmmo(playerid, WEAPON_FLOWER, 0);
	GivePlayerWeapon(to_player, WEAPON_FLOWER, 1);
}

public: ShowPlayerLotteryDialog(playerid)
{
	if(GetPlayerData(playerid, P_LOTTERY) >= 100)
	{
		new hour;
		new fmt_str[632];
	
		gettime(hour);
		format
		(
			fmt_str, sizeof fmt_str, 
			"¬аше счастливое число: {FFCD00}%d\n\n"\
			"{FFFFFF}¬ы зарегистрированы в лотерее, результат будет известен во\n"\
			"врем€ ближайшего розыгрыша, который пройдЄт в %d:02\n"\
			"Ќе выходите из игры чтобы прин€ть в нЄм участие.\n\n"\
			"¬ыигрыш будет зависеть от того, сколько чисел совпало в\n"\
			"вашем счастливом числе и в числе, которое выпадет во\n"\
			"врем€ розыгрыша (по пор€дку слева направо):\n\n"\
			"Ќет совпадений:\t{FF6633}0 руб\n"\
			"{FFFFFF}1 число:\t\t{66FF00}2000 руб\n"\
			"{FFFFFF}2 числа:\t\t{66FF00}15000 руб\n"\
			"{FFFFFF}¬се числа:\t\t{66FF00}50000 руб\n\n"\
			"{FFFFFF}≈сли ¬ы хотите изменить счастливое число, введите новые\n"\
			"3 цифры. ¬ противном случае просто нажмите \"ќк\"",
			GetPlayerData(playerid, P_LOTTERY),
			GetElapsedTime(gettime(), g_last_lottery_time) >= 1 ? hour : hour+1
		);
		Dialog(playerid, DIALOG_BIZ_LOTTERY, DIALOG_STYLE_INPUT, "{66CC00}Ћотере€", fmt_str, "ќк", "");
	}
}

public: SetGateStatus(gateid, bool: status, open_time)
{
	if(open_time != -1)
		SetTimerEx("SetGateStatus", open_time * 1000, false, "iii", gateid, status ^ GATE_STATUS_OPEN, -1);
		
	switch(GetGateData(gateid, G_TYPE))
	{
		case 
			GATE_TYPE_BARRIER, 
			GATE_TYPE_BARRIER_MSG,
			GATE_TYPE_BARRIER_BUTTON:
		{
			MoveDynamicObject(g_gate[gateid][G_OBJECT_ID][1], GetGateData(gateid, G_POS_X) + (status == GATE_STATUS_CLOSE ? 0.01 : -0.01), GetGateData(gateid, G_POS_Y), GetGateData(gateid, G_POS_Z) + 0.8, 0.005, 0.0, status == GATE_STATUS_CLOSE ? -90.0 : -10.0, GetGateData(gateid, G_ANGLE));
		}	
		case GATE_TYPE_NORMAL:
		{
		
		}
	}
	SetGateData(gateid, G_STATUS, status);
}

public: CheckNearestGate(playerid)
{
	new gateid = GetNearestGate(playerid, 10.0);
	if(gateid != -1)
	{
		new open_time = 8;
		new bool: access = false;
		
		switch(gateid)
		{
			case GATE_ID_DRIVING_SCHOOL:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new type = GetVehicleData(vehicleid, V_ACTION_TYPE);
				
				if(type == VEHICLE_ACTION_TYPE_DRIVING_SCH)
				{
					if(GetPlayerDrivingExamInfo(playerid, DE_POINTS) >= 9)
					{
						access = true;
					}
				}
			}
			default:
				access = true;
		}
		
		if(access)
		{
			OnGateOpened(playerid, gateid, open_time);
		}
		return 1;
	}
	return 0;
}

public: OnGateOpened(playerid, gateid, open_time)
{
	new type = GetGateData(gateid, G_TYPE);
	new bool: status = GetGateData(gateid, G_STATUS);
	
	switch(type)
	{
		case GATE_TYPE_BARRIER, GATE_TYPE_BARRIER_MSG:
		{
			if(status == GATE_STATUS_OPEN) return 0;
			
			if(type == GATE_TYPE_BARRIER_MSG)
			{
				new fmt_str[64];
				
				if(strlen(GetGateData(gateid, G_DESCRIPTION)))
				{
					format(fmt_str, sizeof fmt_str, "[%s] Ўлагбаум закроетс€ через %d секунд", GetGateData(gateid, G_DESCRIPTION), open_time - 3);
				}
				else format(fmt_str, sizeof fmt_str, "Ўлагбаум закроетс€ через %d секунд", open_time - 3);
				SendClientMessage(playerid, 0x66CC00FF, fmt_str);
			}
		}
		case GATE_TYPE_BARRIER_BUTTON:
		{
			open_time = -1;
		}
		case GATE_TYPE_NORMAL:
		{
			
		}
	}
	SetGateStatus(gateid, status ^ GATE_STATUS_OPEN, open_time);
	
	return 1;
}

public: UpdateFactoryDesk(deskid)
{
	new fmt_str[64];
	
	format(fmt_str, sizeof fmt_str, "–абочее место є%d\n%s", deskid + 1, factory_desk[deskid][FD_USED] ? ("{FF6600}«ан€то") : ("{33CC00}—вободно"));
	UpdateDynamic3DTextLabelText(factory_desk[deskid][FD_LABEl], 0xFFFFFFEE, fmt_str);
}

public: T_RemovePlayerAttachedObject(playerid, slot)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
		RemovePlayerAttachedObject(playerid, slot);
	}
}

#if defined RAND_WEATHER
public: SetRandomWeather()
{
	new fmt_str[64];
	new rand = random(sizeof g_weather);
	
	SendClientMessageToAll(0x3399FFFF, "[ѕрогноз погоды]");
	
	format(fmt_str, sizeof fmt_str, "¬ области ожидаетс€ %s {99CC00}(+%d ∞—)", g_weather[rand][W_NAME], g_weather[rand][W_DEGREES]);
	SendClientMessageToAll(0xFFFFFFFF, fmt_str);
	
	SetWeather(g_weather[rand][W_ID]);
}
#endif

public: ClearBanList()
{
	new query[64];
	new time = gettime();

	format(query, sizeof query, "SELECT ip FROM ban_list WHERE ban_time <= %d", time);
	mysql_tquery(mysql, query, "UnBanIPs", "i", time);
	
	return 1;
}

public: UnBanIPs(time)
{
	new ip[16];
	new query[64];
	new rows = cache_num_rows();
	
	if(rows)
	{
		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, ip);
			
			format(query, sizeof query, "unbanip %s", ip);
			SendRconCommand(query);
		}
		SendRconCommand("reloadbans");
		
		format(query, sizeof query, "DELETE FROM ban_list WHERE ban_time <= %d", time);
		mysql_query(mysql, query, false);
	}
	return 1;
}

public: PlayerOwnableCarInit(playerid)
{
	new index;
	new vehicleid = -1;
	
	while(vehicleid < MAX_VEHICLES-1)
	{
		vehicleid ++;
		index = GetVehicleData(vehicleid, V_ACTION_ID);
		
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_OWNABLE_CAR) continue;
		if(GetOwnableCarData(index, OC_OWNER_ID) != GetPlayerAccountID(playerid)) continue;

		SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);
		break;
	}
}

public: SaveOwnableCar(vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new query[256];
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		
		new Float: health;

		GetVehicleHealth(vehicleid, health);
		
		format
		(
			query, sizeof query, 
			"UPDATE ownable_cars SET "\
			"pos_x=%f,"\
			"pos_y=%f,"\
			"pos_z=%f,"\
			"angle=%f,"\
			"status=%d,"\
			"alarm=%d,"\
			"key_in=%d,"\
			"mileage=%f,"\
			"health=%f"\
			"WHERE id=%d LIMIT 1",
			GetOwnableCarData(index, OC_POS_X),
			GetOwnableCarData(index, OC_POS_Y),
			GetOwnableCarData(index, OC_POS_Z),
			GetOwnableCarData(index, OC_ANGLE),
			GetVehicleParam(vehicleid, V_LOCK),
			GetVehicleParam(vehicleid, V_ALARM),
			GetOwnableCarData(index, OC_KEY_IN),
			GetVehicleData(vehicleid, V_MILEAGE),
			GetVehicleData(vehicleid, V_HEALTH),
			GetOwnableCarData(index, OC_SQL_ID)
		);
		mysql_query(mysql, query, false);
		
		return mysql_errno();
	}
	return -1;
}

public: ShowTrunkDialog(playerid, vehicleid, view)
{	
	new count, type;
	
	new fmt_str[36];
	new string[(sizeof fmt_str) * MAX_VEHICLE_TRUNK_SLOTS + 1];
	
	ClearPlayerListitemValues(playerid);
	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(IsTrunkFreeSlot(vehicleid, idx)) continue;

		type = GetTrunkData(vehicleid, idx, VT_ITEM_TYPE);
		
		format(fmt_str, sizeof fmt_str, "%d. %s:\t{66CC00}%d %s\n", count + 1, GetItemInfo(type, I_NAME), GetTrunkData(vehicleid, idx, VT_ITEM_AMOUNT), GetItemInfo(type, I_NAME_COUNT));
		strcat(string, fmt_str);
		
		SetPlayerListitemValue(playerid, count ++, idx);
	}
	
	if(!view)
	{
		SetPlayerListitemValue(playerid, count, -1);
		SetPlayerUseTrunk(playerid, vehicleid);
		
		format(fmt_str, sizeof fmt_str, "{888888}%d. ѕоложить", count + 1);
		strcat(string, fmt_str);
		
		Dialog(playerid, DIALOG_VEHICLE_TRUNK, DIALOG_STYLE_LIST, "{0099FF}—одержимое багажника", string, "¬ыбрать", "«акрыть");
	}
	else 
	{
		if(!count)
			strcat(string, "{888888}ѕусто");
			
		SetPlayerUseTrunk(playerid, INVALID_VEHICLE_ID);
		Dialog(playerid, DIALOG_VEHICLE_TRUNK, DIALOG_STYLE_LIST, "{0099FF}—одержимое багажника", string, "«акрыть", "");
	}
	return 1;
}

// ------------------------------------------
stock GetTrunkFreeSlot(vehicleid, item_type)
{
	new free_slot = -1, comb_slot = -1;
	new bool: comb = GetItemInfo(item_type, I_COMBINATION);
	
	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(GetTrunkData(vehicleid, idx, VT_ITEM_TYPE) == item_type && comb)
		{
			comb_slot = idx;
		}
		else if(free_slot == -1 && IsTrunkFreeSlot(vehicleid, idx))
		{
			free_slot = idx;
		}
		else continue;
	}
	return comb_slot != -1 ? comb_slot : free_slot;
}

stock GetTrunkBusySlot(vehicleid, item_type)
{
	new busy_slot = -1;
	
	for(new idx; idx < MAX_VEHICLE_TRUNK_SLOTS; idx ++)
	{
		if(GetTrunkData(vehicleid, idx, VT_ITEM_TYPE) == item_type)
		{
			busy_slot = idx;
		}
		else continue;
	}
	return busy_slot;
}

stock AddTrunkItem(vehicleid, item_id, amount, value = 0)
{
	if(1 <= item_id <= sizeof(g_item_type)-1)
	{
		new free_slot = GetTrunkFreeSlot(vehicleid, item_id);
		if(free_slot != -1)
		{
			SetTrunkData(vehicleid, free_slot, VT_SQL_ID, 1);
			
			SetTrunkData(vehicleid, free_slot, VT_ITEM_TYPE, item_id);
			SetTrunkData(vehicleid, free_slot, VT_ITEM_VALUE, value);

			new query[100],
				index,
				oc_id;

			index = GetVehicleData(vehicleid, V_ACTION_ID);
			oc_id = GetOwnableCarData(index, OC_SQL_ID);

			if(!IsTrunkFreeSlot(vehicleid, free_slot))
			{
				AddTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT, +, amount);

				if((GetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT) - amount) == 0)
				{
					mysql_format(mysql, query, sizeof query, "INSERT INTO trunks (oc_id,item_id,amount,value) VALUES (%d,%d,%d,%d)", oc_id, item_id, amount, value);
					mysql_query(mysql, query, false);
				}
				else
				{
					mysql_format(mysql, query, sizeof query, "UPDATE trunks SET amount='%d' WHERE item_id='%d' AND oc_id='%d' LIMIT 1", GetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT), item_id, oc_id);
					mysql_query(mysql, query, false);
				}
			}
			
			else
			{
				SetTrunkData(vehicleid, free_slot, VT_ITEM_AMOUNT, amount);

				mysql_format(mysql, query, sizeof query, "INSERT INTO trunks (oc_id,item_id,amount,value) VALUES (%d,%d,%d,%d)", oc_id, item_id, amount, value);
				mysql_query(mysql, query, false);
			}

			return 1;
		}
		return -1;
	}
	return 0;
}

stock TakeTrunkItem(vehicleid, item_id, amount)
{
	if(1 <= item_id <= sizeof(g_item_type)-1)
	{
		new busy_slot = GetTrunkBusySlot(vehicleid, item_id);

		new query[100],
			index,
			oc_id;

		index = GetVehicleData(vehicleid, V_ACTION_ID);
		oc_id = GetOwnableCarData(index, OC_SQL_ID);

		if(!IsTrunkFreeSlot(vehicleid, busy_slot))
		{
			AddTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT, -, amount);

			if(GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT) >= 0)
			{
				if(!GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT))
				{
					mysql_format(mysql, query, sizeof query, "DELETE FROM trunks WHERE item_id='%d' AND oc_id='%d'", item_id, oc_id);
					mysql_query(mysql, query, false);

					RemoveTrunkItem(vehicleid, busy_slot);
				}
				else
				{
					mysql_format(mysql, query, sizeof query, "UPDATE trunks SET amount='%d' WHERE item_id='%d' AND oc_id='%d' LIMIT 1", GetTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT), item_id, oc_id);
					mysql_query(mysql, query, false);
				}
				return 1;
			}
			else
			{
				AddTrunkData(vehicleid, busy_slot, VT_ITEM_AMOUNT, +, amount);
				return -1;
			}
		}
		return -1;
	}
	return 0;
}

stock RemoveTrunkItem(vehicleid, item_slot)
{
	if(!IsTrunkFreeSlot(vehicleid, item_slot))
	{
		SetTrunkData(vehicleid, item_slot, VT_SQL_ID,	0);
		
		SetTrunkData(vehicleid, item_slot, VT_ITEM_TYPE, 	0);
		SetTrunkData(vehicleid, item_slot, VT_ITEM_AMOUNT, 	0);
		SetTrunkData(vehicleid, item_slot, VT_ITEM_VALUE, 	0);
		
		return 1;
	}
	return 0;
}

stock GetCoordVehicle(vehicleid, type, &Float:x, &Float:y, &Float:z, &Float:angle, &Float:distance) // by Essle (багажник / капот)
{		
    GetVehicleModelInfo(GetVehicleData(vehicleid, V_MODELID), 1, x, distance, z); // узнаем длину машины
    distance = distance / 2 + 0.1; // полученную длину делим на два
	
    GetVehiclePos(vehicleid, x, y, z); // узнаем координаты авто
    GetVehicleZAngle(vehicleid, angle); // узнаем угол поворота авто
	
	switch(type)
	{
		case VEHICLE_COORD_TYPE_BOOT: // багажник
		{
			x += (distance * floatsin(-angle+180, degrees)); // вычитаем координату x бaгажника
			y += (distance * floatcos(-angle+180, degrees)); // вычитаем координату y бaгажника
		}
		case VEHICLE_COORD_TYPE_BONNET: // капот
		{
			x -= (distance * floatsin(-angle+180, degrees)); // вычитаем координату x капота
			y -= (distance * floatcos(-angle+180, degrees)); // вычитаем координату y капота
		}
		default:
		{
			return 0;
		}
	}
	return 1;
}   

stock SetVehicleToHotelRespawn(hotelid, vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		new free_slot = GetHotelFreePark(hotelid);
		if(free_slot != -1)
		{
			g_hotel_car_park_pos[hotelid][free_slot][HC_VEHICLE_ID] = vehicleid;
			
			SetVehiclePos(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_POS_X], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Y], g_hotel_car_park_pos[hotelid][free_slot][HC_POS_Z]);
			SetVehicleZAngle(vehicleid, g_hotel_car_park_pos[hotelid][free_slot][HC_ANGLE]);
			
			return 1;
		}
	}
	return 0;
}

stock GetHotelFreePark(hotelid)
{
	new vehicleid, slot = -1;
	
	for(new idx; idx < sizeof(g_hotel_car_park_pos[]); idx ++)
	{
		vehicleid = g_hotel_car_park_pos[hotelid][idx][HC_VEHICLE_ID];
		if(GetVehicleDistanceFromPoint(vehicleid, g_hotel_car_park_pos[hotelid][idx][HC_POS_X], g_hotel_car_park_pos[hotelid][idx][HC_POS_Y], g_hotel_car_park_pos[hotelid][idx][HC_POS_Z]) >= 8.0) continue;
	
		slot = idx;
		break;
	}
	return slot;
}

stock ShowOwnableCarPass(playerid, vehicleid)
{
	new model_id = GetVehicleData(vehicleid, V_MODELID);

	if(model_id && IsAOwnableCar(vehicleid))
	{
		new fmt_str[256];
		new Float: health;
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		
		GetVehicleHealth(vehicleid, health);
		
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Ќазвание:\t\t{3399FF}%s\n\n"\
			"{FFFFFF}ћодель:\t\t{3399FF}%d\n"\
			"{FFFFFF}—осто€ние:\t\t{3399FF}%d\n"\
			"{FFFFFF}ѕробег:\t\t{3399FF}%07i\n"\
			"{FFFFFF}÷вет:\t\t\t{3399FF}ID %d, %d\n"\
			"{FFFFFF}√ос. стоимость:\t{3399FF}%d руб",
			GetVehicleInfo(model_id-400, VI_NAME),
			model_id,
			floatround(health),
			floatround(GetVehicleData(vehicleid, V_MILEAGE), floatround_ceil),
			GetOwnableCarData(index, OC_COLOR_1),
			GetOwnableCarData(index, OC_COLOR_2),
			GetVehicleInfo(model_id-400, VI_PRICE)
		);
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{0099FF}ƒокументы", fmt_str, "«акрыть", "");
		
		return 1;
	}
	return 0;
}

stock ShowOwnableCarLoadDialog(playerid, id, bool: show_menu = false)
{
	Dialog
	(
		playerid, DIALOG_OWNABLE_CAR_LOAD, DIALOG_STYLE_LIST, 
		"{FFCD00}—истема управлени€ транспортом",
		"1. ќтметить транспорт на GPS {FF6600}(300 руб)\n"\
		"{888888}2. «агрузить транспорт", 
		"¬ыбрать", "«акрыть"
	);

	SetPVarInt(playerid, "ownablecar_id", id);

	if(show_menu) SetPVarInt(playerid, "show_menu", 1);
}

stock SpeedometrKeyStatusInit(playerid, vehicleid)
{
	if(IsAOwnableCar(vehicleid))
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		if(GetOwnableCarData(index, OC_KEY_IN))
		{
			PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][5], "~y~.");
		}
		else PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][5], ".");
	}
	else PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][5], "~y~.");
}

stock IsAOwnableCar(vehicleid)
{
	if(IsValidVehicleID(vehicleid))
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_OWNABLE_CAR)
		{
			return 1;
		}
	}
	return 0;
}

stock IsVehicleSeatOccupied(vehicleid, seatid)
{
	new bool: is_vehicle_seat_used;

	foreach(new i : Player)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!IsPlayerInVehicle(i, vehicleid)) continue;
		else if(GetPlayerVehicleSeat(i) != seatid) continue;

		is_vehicle_seat_used = true;
	}

	return is_vehicle_seat_used;
}

stock ShowPlayerHotelRoomPayForRent(playerid)
{
	new hotel_id = GetPlayerInHotelID(playerid);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
	
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		new rent_days = GetElapsedTime(GetHotelData(hotel_id, room_id, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS);
		if(rent_days < 0)
		{
			rent_days = 0;
		}
		
		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str, 
			"{FFFFFF}ќплаченных дней:\t\t%d из 30\n"\
			"≈жедневна€ плата:\t\t1000 руб\n\n"\
			"Ќа сколько дней ¬ы хотите оплатить номер?",
			rent_days
		);
		Dialog(playerid, DIALOG_HOTEL_PAY_FOR_ROOM, DIALOG_STYLE_INPUT, "{66CC99}ќплата проживани€ в отеле", fmt_str, "ќплатить", "Ќазад");
	}
}

stock ShowPlayerHotelClientMenu(playerid, hotel_id)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == hotel_id)
	{
		Dialog
		(
			playerid, DIALOG_HOTEL_CLIENT_MENU, DIALOG_STYLE_LIST,
			"{66CC99}ћеню клиента",
			"1. ќплатить проживание\n"\
			"2. »нформаци€ о транспорте\n"\
			"3. ќтметить транспорт на GPS\n"\
			"4. ѕодогнать транспорт к отелю (1000 руб)\n"\
			"5. ѕродать транспорт\n"\
			"6. ¬ыселитьс€ из отел€", 
			"¬ыбрать", "Ќазад"
		);
	}
	else 
	{
		SendClientMessage(playerid, 0xCECECEFF, "¬ы не проживаете в этой гостинице");
		ShowPlayerHotelDialog(playerid);
	}
}

stock GetHotelFreeRoom(hotelid)
{
	new free_room = -1;
	if(0 <= hotelid <= MAX_HOTELS-1)
	{
		new max_rooms = g_hotel_rooms_loaded[hotelid] / 12;
		
		for(new idx; idx < max_rooms; idx ++)
		{
			if(IsHotelRoomOwned(hotelid, idx)) continue;
			
			free_room = idx;
			break;
		}
	}
	return free_room;
}

stock ExitPlayerFromHotelRoom(playerid)
{
	new room_id = GetPlayerData(playerid, P_IN_HOTEL_ROOM);
	if(room_id != -1)
	{
		new hotel_id = GetPlayerInHotelID(playerid);
		if(hotel_id != -1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 301.7391,-139.9879,989.0823))
			{
				new floor = (room_id / 12) + 1;
				new index = (room_id % 12) / 5;
				
				SetPlayerPosEx
				(
					playerid, 
					g_hotel_room_exit_pos[index][0],
					g_hotel_room_exit_pos[index][1],
					g_hotel_room_exit_pos[index][2],
					180.0, 
					floor,
					((hotel_id + 1) * 200) + (floor + 1000)
				);
				SetPlayerData(playerid, P_IN_HOTEL_ROOM, -1);
			}				
		}
	}
}

stock EnterPlayerToHotelRoom(playerid, hotel_id, room_id, setting_spawn = false)
{
	if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) == -1)
	{
		if(!setting_spawn)
		{
			if(!GetHotelData(hotel_id, room_id, H_STATUS) || GetPlayerAccountID(playerid) == GetHotelData(hotel_id, room_id, H_OWNER_ID))
			{
				SetPlayerPosEx(playerid, 301.7836, -138.7689, 989.0823, 0.0, 6, ((hotel_id + 1) * 400) + (room_id + 2000));
				SetPlayerData(playerid, P_IN_HOTEL_ROOM, room_id);
				
				SetPlayerData(playerid, P_IN_HOTEL_FLOOR, (room_id / 12) + 1);
			}
			else GameTextForPlayer(playerid, "~r~Closed", 2500, 1);
		}
		else
		{
			SetPlayerData(playerid, P_IN_HOTEL_ROOM, room_id);
				
			SetPlayerData(playerid, P_IN_HOTEL_FLOOR, (room_id / 12) + 1);

			SetPlayerData(playerid, P_IN_BUSINESS, hotel_id);
		}
	}
	return 1;
}

stock ShowPlayerHotelFloorsInfo(playerid, hotel_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];
	
	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx; idx < max_floors; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d этаж\n", idx + 1);
		strcat(string, fmt_str);
	}
	Dialog(playerid, DIALOG_HOTEL_FLOOR_SELECT, DIALOG_STYLE_LIST, "{FFCD00}¬ыберите этаж", string, "¬ыбрать", "ќтмена");
}

stock ShowPlayerHotelFloorsLift(playerid, hotel_id, floor_id)
{
	new fmt_str[8 + 1];
	new string[(sizeof fmt_str - 1) * MAX_HOTEL_FLOORS];
	
	new max_floors = g_hotel_rooms_loaded[hotel_id] / 12;
	for(new idx, count; idx <= max_floors; idx ++)
	{
		if(idx == floor_id) continue;
		if(idx)
		{
			format(fmt_str, sizeof fmt_str, "%d этаж\n", idx);
			strcat(string, fmt_str);
		}
		else strcat(string, "¬ыход\n");
		
		SetPlayerListitemValue(playerid, count ++, idx);
	}
	Dialog(playerid, DIALOG_HOTEL_FLOOR_LIFT, DIALOG_STYLE_LIST, "{FFCD00}¬ыберите этаж", string, "¬ыбрать", "ќтмена");
}

stock ShowPlayerHotelFloorInfo(playerid, hotel_id, floor_id)
{
	if(0 <= hotel_id <= MAX_HOTELS-1)
	{
		if(0 <= floor_id <= MAX_HOTEL_FLOORS-1)
		{
			new string[512];
			new fmt_str[45 + 1];
			
			new rent_time;
			new time = gettime();
			
			new s_idx = floor_id * 12;
			new e_idx = s_idx + 12;
			
			string = "Ќомер\t\t—татус\t\tќплаченные дни\tѕосто€лец\n\n{FFFFFF}";
			while(s_idx < e_idx)
			{
				if(IsHotelRoomOwned(hotel_id, s_idx))
				{
					rent_time = GetElapsedTime(GetHotelData(hotel_id, s_idx, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS);
					if(rent_time < 0)
						rent_time = 0;
					
					format(fmt_str, sizeof fmt_str, "%d\t\t%s\t\t%d\t\t%s\n", (s_idx % 12) + 1, rent_time > 0 ? ("«ан€т\t") : ("¬ыселение"), rent_time, GetHotelData(hotel_id, s_idx, H_OWNER_NAME));
				}
				else format(fmt_str, sizeof fmt_str, "%d\t\t—вободен\n", (s_idx % 12) + 1);
				strcat(string, fmt_str);
			
				s_idx ++;
			}
			
			format(fmt_str, sizeof fmt_str, "{66CC99}—писок номеров на %d этаже", floor_id + 1);
			Dialog(playerid, DIALOG_HOTEL_FLOOR_INFO, DIALOG_STYLE_MSGBOX, fmt_str, string, "Ќазад", "«акрыть");
		}
	}
}

stock ShowPlayerHotelDialog(playerid)
{
	if(GetPlayerInHotelID(playerid) != -1)
	{
		new businessid = GetPlayerInBiz(playerid);
		
		Dialog
		(
			playerid, DIALOG_HOTEL, DIALOG_STYLE_LIST,
			GetBusinessData(businessid, B_NAME),
			"1. —писок номеров\n"\
			"2. –егистраци€\n"\
			"3. ћеню клиента",
			"¬ыбрать", "«акрыть"
		);
	}
}

stock GetPlayerInHotelID(playerid)
{
	new hotel_id = -1;
	new businessid = GetPlayerInBiz(playerid);
	
	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_TYPE) == BUSINESS_TYPE_HOTEL)
		{
			switch(businessid)
			{
				case 30:
					hotel_id = 0;
					
				case 31:
					hotel_id = 1;
					
				case 32:
					hotel_id = 2;
					
				default:
					hotel_id = -1;
			}
		}
	}
	return hotel_id;
}

stock EntranceStatusInitAll()
{
	for(new idx; idx < g_entrance_loaded; idx ++)
	{
		CallLocalFunction("EntranceStatusInit", "i", idx);
	}
}

stock UpdateEntrance(entranceid, houses)
{
	new status = (houses >= GetEntranceData(entranceid, E_FLOORS) * 4);
	
	if(GetEntranceData(entranceid, E_STATUS) != status)
	{
		if(GetEntranceData(entranceid, E_PICKUP_ID))
			DestroyPickup(GetEntranceData(entranceid, E_PICKUP_ID));
			
		if(IsValidDynamicMapIcon(GetEntranceData(entranceid, E_MAP_ICON)))
			DestroyDynamicMapIcon(GetEntranceData(entranceid, E_MAP_ICON));

		SetEntranceData(entranceid, E_PICKUP_ID, CreatePickup((status ? 1272 : 1273), 2, GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), GetEntranceData(entranceid, E_POS_Z), 0, PICKUP_ACTION_TYPE_ENTRANCE_ENT, entranceid));
		SetEntranceData(entranceid, E_MAP_ICON, CreateDynamicMapIcon(GetEntranceData(entranceid, E_POS_X), GetEntranceData(entranceid, E_POS_Y), GetEntranceData(entranceid, E_POS_Z), (status ? 32 : 31), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));

		SetEntranceData(entranceid, E_STATUS, status);
	}
}

stock ShowPlayerEntranceFloorsLift(playerid, entranceid, floor)
{
	new fmt_str[10];
	new string[(sizeof fmt_str) * MAX_ENTRANCE_FLOORS];
	
	new max_floors = GetEntranceData(entranceid, E_FLOORS) + 1;
	
	for(new idx, count; idx < max_floors; idx ++)
	{
		if(idx == floor) continue;
		if(idx)
		{
			format(fmt_str, sizeof fmt_str, "%d этаж\n", idx);
			strcat(string, fmt_str);
		}
		else strcat(string, "ѕодъезд\n");
		
		SetPlayerListitemValue(playerid, count ++, idx);
	}
	Dialog(playerid, DIALOG_ENTRANCE_LIFT, DIALOG_STYLE_LIST, "{FFCD00}¬ыберите этаж", string, "¬ыбрать", "ќтмена");
}

stock EnterPlayerToEntrance(playerid, entranceid)
{
	if(GetPlayerInEntrance(playerid) == -1)
	{
		SetPlayerPosEx(playerid, 20.5351, 1407.1962, 1508.4100, 180.0, 1, entranceid + 2500);
		
		SetPlayerInEntranceFloor(playerid, 0);
		SetPlayerInEntrance(playerid, entranceid);
	}
}

stock SetPlayerFactoryDeskUse(playerid, deskid, bool: status)
{
	if(!(0 <= deskid <= sizeof factory_desk-1)) return ;
	
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(status)
		{
			if(!factory_desk[deskid][FD_USED] && GetPlayerData(playerid, P_FACTORY_USE_DESK) == -1)
			{
				if(GetPlayerTempJobState(playerid) == TEMP_JOB_STATE_FACTORY_CREATE_P)
				{
					factory_desk[deskid][FD_USED] = true;

					// static const 
					//	p_object_id[3] = {1954, 2926, 1718};
						
					// static const 
					//	Float: p_object_z[3] = {0.09, 0.0, 0.06};
			
					// new rand = random(sizeof(p_object_id));
					// new Float: x, Float: y, Float: z;
					// GetPlayerPos(playerid, x, y, z);
					
					new Float: angle; 
					
					new take_metall = GetPVarInt(playerid, "factory_take_metall");
					new factory_fuel = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);
					
					SetPlayerData(playerid, P_FACTORY_USE_DESK, deskid);
					TogglePlayerFactoryCP(playerid, false);
					
					if(!((deskid / 4) % 2))
					{
						angle = 180.0;
					}
					else angle = 0.0;
					SetPlayerFacingAngle(playerid, angle);	
					
					//factory_object[playerid] = CreateDynamicObject(p_object_id[rand], x, y, 1044.08 + p_object_z[rand], 0.0, 0.0, angle + 180.0);
					ApplyAnimationEx(playerid, "OTB", "betslp_loop", 4.1, 1, 0, 0, 1, 20_000, 0, USE_ANIM_TYPE_NONE - 1);
					
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18644, A_OBJECT_BONE_RIGHT_HAND, 0.06, 0.02, 0.0, 30.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0);
					SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND + 1, 18635, A_OBJECT_BONE_LEFT_HAND, 0.1, 0.06, -0.1, 180.0, 80.0, 0.0, 1.0, 1.0, 1.0, 0);
					
					SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_CREATED);
					SetTimerEx("CreateFactoryProd", 18_000, false, "i", playerid);
					
					SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuel - (take_metall * 6));
					UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);
				}
				else 
				{
					if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_PUT_PROD)
						SendClientMessage(playerid, 0x999999FF, "¬озьмите металл у раздаточного стола");
				}
			}
		}
		else 
		{
			if(factory_desk[deskid][FD_USED])
			{
				if(GetPlayerData(playerid, P_FACTORY_USE_DESK) == deskid)
				{
					TogglePlayerFactoryCP(playerid, true);
					SetPlayerData(playerid, P_FACTORY_USE_DESK, -1);
					
					/*
					if(IsValidDynamicObject(factory_object[playerid]))
					{
						DestroyDynamicObject(factory_object[playerid]);
						factory_object[playerid] = -1;
					}
					*/
					factory_desk[deskid][FD_USED] = false;
				}
			}
		}
		UpdateFactoryDesk(deskid);
	}
}

stock AddBan(user_id, time, days, ip[], description[], admin_name[])
{
	new query[200];
	new c_time = time-(time % 86400);

	mysql_format(mysql, query, sizeof query, "INSERT INTO ban_list (user_id,time,ban_time,ip,description,admin) VALUES (%d,%d,%d,'%e','%e','%e')", user_id, c_time, c_time + (days * 86400), ip, description, admin_name);
	mysql_query(mysql, query, false);
	
	return !mysql_errno();
}

stock GivePlayerDrinkItem(playerid, itemid)
{
	new action_id = -1;
	switch(itemid+1)
	{
		case 1: // Ћимонад
		{
			action_id = 23;
		}
		case 2, 6..7: // ѕиво,  онь€к, ¬иски
		{
			action_id = 20;
		}
		case 3..5, 8: // ¬ино, Ўампанское, ¬одка, јбсент
		{
			action_id = 22;
		}
		case 9: // «акуска
		{
			if(GetPlayerData(playerid, P_DRINK_STEP))
			{
				SetPlayerData(playerid, P_DRINK_STEP, 0);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}
		
			SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 10213, A_OBJECT_BONE_RIGHT_HAND, 0.08, 0.05, 0.06, 180.0, 270.0, -30.0, 1.0, 1.0, 1.0, 0, 0);
			SetPlayerData(playerid, P_SNACK, true);
		}
		case 10: // —игара
		{
			action_id = 21;
		}
	}
	if(action_id != -1)
	{
		if(GetPlayerData(playerid, P_SNACK))
		{
			SetPlayerData(playerid, P_SNACK, false);
			T_RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		}
		
		SetPlayerData(playerid, P_DRINK_STEP, 7);
		SetPlayerSpecialAction(playerid, action_id);
	}
	return 1;
}

stock FactoryPlayerDrop(playerid, bool: reject = true)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY)
	{
		if(reject)
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_CREATED) return ;
			
			SetPlayerChatBubble(playerid, "Ѕрак", 0xFF0000FF, 10.0, 1500);
			ApplyAnimationEx(playerid, "OTB", "WTCHRACE_LOSE", 4.1, 0, 0, 0, 0, 0, 0, USE_ANIM_TYPE_NONE);
		}
		else 
		{
			if(GetPlayerTempJobState(playerid) != TEMP_JOB_STATE_FACTORY_DROP_P) return ;
			SetPlayerTempJobCheckAnim(playerid, false);
			
			RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
			SetPlayerFactoryDeskUse(playerid, GetPlayerData(playerid, P_FACTORY_USE_DESK), false);
			
			ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			SendClientMessage(playerid, 0xFF6600FF, "¬ы уронили продукт");
		}
		
		new bad_prods = GetPVarInt(playerid, "factory_bad_prods") + 1;
		SetPVarInt(playerid, "factory_bad_prods", bad_prods);
		
		GameTextForPlayer(playerid, "~r~~h~fail", 4000, 1);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_FACTORY_TAKE_MET);
	}
}

stock ShowPlayerClothingShopPanel(playerid)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(GetPlayerTeamEx(playerid) <= 0)
		{
			new select_skin = GetPlayerSelectSkin(playerid);
			if(select_skin == -1)
			{
				new type = GetBusinessData(businessid, B_INTERIOR);
				new interior = GetBusinessInteriorInfo(type, BT_ENTER_INTERIOR);
				new 
					Float: cam_x, Float: cam_y, Float: cam_z,
					Float: v_cam_x, Float: v_cam_y, Float: v_cam_z;
				
				GetPlayerCameraPos(playerid, cam_x, cam_y, cam_z);
				GetPlayerCameraFrontVector(playerid, v_cam_x, v_cam_y, v_cam_z);
	
				TogglePlayerControllable(playerid, false);
				SetPlayerPosEx(playerid, 332.2033, -174.1066, 999.6743, 1.0, interior, playerid + 32);
				
				InterpolateCameraPos(playerid, cam_x, cam_y, cam_z, 335.067718, -170.856231, 1000.424804, 4000, CAMERA_MOVE);	
				InterpolateCameraLookAt(playerid, cam_x + floatmul(v_cam_x, 5.0), cam_y + floatmul(v_cam_y, 5.0), cam_z + floatmul(v_cam_z, 5.0), 332.006469, -174.727508, 999.623596, 5000, CAMERA_MOVE);
	
				ShowPlayerSelectPanel(playerid, SELECT_PANEL_TYPE_CLOTHING);
				SetPlayerSelectClothingSkin(playerid, 0);

				SendClientMessage(playerid, 0x9C9C9CFF, "»спользуйте {33CC00}курсор мышки {9C9C9C}дл€ навигации по меню");
			}
		}
		else SendClientMessage(playerid, 0xCECECEFF, "¬ы состоите в организации, купить новую внешность нельз€");
	}
}

stock ExitPlayerClothingShopPanel(playerid)
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_CLOTHING)
		{
			HidePlayerSelectPanel(playerid);
			
			SetPlayerSkinInit(playerid);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);
			
			SetPlayerVirtualWorld(playerid, businessid + 255);
			SetPlayerData(playerid, P_USE_SELECT_PANEL, SELECT_PANEL_TYPE_NONE);
			
			PlayerTextDrawSetString(playerid, price_select_TD[playerid][1], "exit...");
			SetTimerEx("HidePlayerSelectPanelPriceTimer", 1000, false, "i", playerid);
			
			SetPlayerData(playerid, P_SELECT_SKIN, -1);
		}
	}
}

stock ShowPlayerSelectPanelPrice(playerid, price = 0)
{
	if(price_select_TD[playerid][0] == PlayerText:-1)
	{
		price_select_TD[playerid][0] = CreatePlayerTextDraw(playerid, 276.000, 431.000, "Price");
		PlayerTextDrawLetterSize(playerid, price_select_TD[playerid][0], 0.500, 2.000);
		PlayerTextDrawTextSize(playerid, price_select_TD[playerid][0], 364.000, 42.000);
		PlayerTextDrawAlignment(playerid, price_select_TD[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, price_select_TD[playerid][0], 0x0000060);
		PlayerTextDrawColor(playerid, price_select_TD[playerid][0], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, price_select_TD[playerid][0], 5);
		PlayerTextDrawSetOutline(playerid, price_select_TD[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid, price_select_TD[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, price_select_TD[playerid][0], 1);
		PlayerTextDrawUseBox(playerid, price_select_TD[playerid][0], 1);

		price_select_TD[playerid][1] = CreatePlayerTextDraw(playerid, 320.000, 435.000, "_");
		PlayerTextDrawLetterSize(playerid, price_select_TD[playerid][1], 0.320, 0.800);
		PlayerTextDrawAlignment(playerid, price_select_TD[playerid][1], 2);
		PlayerTextDrawBackgroundColor(playerid, price_select_TD[playerid][1], 0x000000FF);
		PlayerTextDrawColor(playerid, price_select_TD[playerid][1], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, price_select_TD[playerid][1], 2);
		PlayerTextDrawSetOutline(playerid, price_select_TD[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid, price_select_TD[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, price_select_TD[playerid][1], 0);
		PlayerTextDrawUseBox(playerid, price_select_TD[playerid][1], 0);
	}
	
	if(price != -1)
	{
		new fmt_str[32];
		
		format(fmt_str, sizeof fmt_str, "%d rub", price);
		PlayerTextDrawSetString(playerid, price_select_TD[playerid][1], fmt_str);
	}
	PlayerTextDrawShow(playerid, price_select_TD[playerid][0]);
	PlayerTextDrawShow(playerid, price_select_TD[playerid][1]);
}

stock HidePlayerSelectPanelPrice(playerid)
{
	for(new idx; idx < sizeof price_select_TD[]; idx ++)
	{
		if(price_select_TD[playerid][idx] != PlayerText: -1)
		{
			PlayerTextDrawHide(playerid, price_select_TD[playerid][idx]);
			PlayerTextDrawDestroy(playerid, price_select_TD[playerid][idx]);
			
			price_select_TD[playerid][idx] = PlayerText: -1;
		}
	}
}

stock SetPlayerSelectClothingSkin(playerid, index = 0)
{
	new sex = GetPlayerSex(playerid);
	
	SetPlayerSelectSkin(playerid, index, g_business_clothing_skins[sex][index][0]);
	ShowPlayerSelectPanelPrice(playerid, g_business_clothing_skins[sex][index][1]);
}

stock CreateTeleportObjects(playerid)
{
	for(new idx; idx < 2; idx ++)
	{
		if(g_teleport_object[playerid][idx] == -1)
		{
			g_teleport_object[playerid][idx] = CreatePlayerObject(playerid, 3034, 0.0, 0.0, -2000.0, 0.0, 0.0, 0.0);
		}
	}
}

stock DestroyTeleportObjects(playerid)
{
	for(new idx; idx < 2; idx ++)
	{
		if(g_teleport_object[playerid][idx] != -1)
		{
			DestroyPlayerObject(playerid, g_teleport_object[playerid][idx]);
			g_teleport_object[playerid][idx] = -1;
		}
	}
}

stock PlayerTeleportInit(playerid, Float: x, Float: y, Float: z, Float: angle)
{
	new Float: dist = -0.862;
	angle += 90.0; //прибавление угла; можно и отнимать
	
	for(new idx = 2; idx --; )
	{
		SetPlayerObjectPos(playerid, g_teleport_object[playerid][idx], x + dist * -floatsin(angle, degrees), y + dist * floatcos(angle, degrees), z - 1.02);	
		SetPlayerObjectRot(playerid, g_teleport_object[playerid][idx], 90.0, 90.0, angle - 90.0);
		
		dist = floatabs(dist);
	}
}

stock GetOwnableCarBySqlID(sql_id, buffer[] = {0, 0, 0})
{
	buffer[2] = INVALID_VEHICLE_ID;
	for(buffer[0] = 1; buffer[0] < MAX_VEHICLES; buffer[0] ++)
	{
		if(!IsAOwnableCar(buffer[0])) continue;
		buffer[1] = GetVehicleData(buffer[0], V_ACTION_ID);
		
		if(GetOwnableCarData(buffer[1], OC_SQL_ID) != sql_id) continue;
		
		buffer[2] = buffer[0];
		break;
	}
	return buffer[2];
}

stock GetPlayerIDBySqlID(sql_id)
{
	new playerid = INVALID_PLAYER_ID;
	
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerAccountID(idx) != sql_id) continue;
		
		playerid = idx;
		break;
	}
	return playerid;
}

stock GetPlayerID(name[], playerid=INVALID_PLAYER_ID)
{
	sscanf(name, "u", playerid);
	
	return playerid;
}

stock GetPlayerSqlIDByName(name[])
{
	new sql_id,
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT id FROM `accounts` WHERE name = '%s' LIMIT 1", name);
	result = mysql_query(mysql, query, true);

	sql_id = cache_num_rows() ? cache_get_row_int(0, 0) : -1;

	cache_delete(result);

	return sql_id;
}

stock GetPlayerNameBySqlID(sql_id)
{
	new name[21],
		query[80],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT name FROM `accounts` WHERE id = '%e' LIMIT 1", sql_id);
	result = mysql_query(mysql, query, true);

	cache_get_row(0, 1, name);

	cache_delete(result);

	return name;
}

stock UpdateHouse(houseid)
{
	if(GetHouseData(houseid, H_ENTRACE) == -1)
	{
		if(GetHouseData(houseid, H_ENTER_PICKUP))
			DestroyPickup(GetHouseData(houseid, H_ENTER_PICKUP));
		
		if(IsValidDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON)))
			DestroyDynamicMapIcon(GetHouseData(houseid, H_MAP_ICON));
		
		SetHouseData(houseid, H_ENTER_PICKUP, CreatePickup((IsHouseOwned(houseid) ? 1272 : 1273), 2, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), 0, PICKUP_ACTION_TYPE_HOUSE, houseid));
		SetHouseData(houseid, H_MAP_ICON, CreateDynamicMapIcon(GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z), (IsHouseOwned(houseid) ? 32 : 31), 0, 0, 0, -1, STREAMER_MAP_ICON_SD, MAPICON_LOCAL));
	}
}

stock HouseHealthInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 2)
	{
		if(!GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			type = GetHouseData(houseid, H_TYPE);
			SetHouseData(houseid, H_HEALTH_PICKUP, CreatePickup(1240, 2, GetHouseTypeInfo(type, HT_HEALTH_POS_X), GetHouseTypeInfo(type, HT_HEALTH_POS_Y), GetHouseTypeInfo(type, HT_HEALTH_POS_Z), houseid + 2000, PICKUP_ACTION_TYPE_HOUSE_HEALTH, houseid));
		}
	}
	else 
	{
		if(GetHouseData(houseid, H_HEALTH_PICKUP))
		{
			DestroyPickup(GetHouseData(houseid, H_HEALTH_PICKUP));
			SetHouseData(houseid, H_HEALTH_PICKUP, 0);
		}
	}
}

stock HouseStoreInit(houseid, type = -1)
{
	if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
	{
		if(GetHouseData(houseid, H_STORE_LABEL) == Text3D:-1)
		{
			if(GetHouseData(houseid, H_STORE_X) == 0.0 && GetHouseData(houseid, H_STORE_Y) == 0.0 && GetHouseData(houseid, H_STORE_Z) == 0.0)
			{
				type = GetHouseData(houseid, H_TYPE);
				
				SetHouseData(houseid, H_STORE_X, GetHouseTypeInfo(type, HT_STORE_POS_X));
				SetHouseData(houseid, H_STORE_Y, GetHouseTypeInfo(type, HT_STORE_POS_Y));
				SetHouseData(houseid, H_STORE_Z, GetHouseTypeInfo(type, HT_STORE_POS_Z));
			}
			SetHouseData(houseid, H_STORE_LABEL, CreateDynamic3DTextLabel("Ўкаф", 0xFFFF00FF, GetHouseData(houseid, H_STORE_X), GetHouseData(houseid, H_STORE_Y), GetHouseData(houseid, H_STORE_Z) + 0.5, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, houseid + 2000, -1, -1, 50.0));
			
			CallLocalFunction("UpdateHouseStore", "i", houseid);
		}
	}
	else 
	{
		if(GetHouseData(houseid, H_STORE_LABEL) != Text3D:-1)
		{
			if(IsValidDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL)))
			{
				DestroyDynamic3DTextLabel(GetHouseData(houseid, H_STORE_LABEL));
				SetHouseData(houseid, H_STORE_LABEL, Text3D:-1);
			}
		}
	}
}

stock SellHouse(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new house_price = GetHouseData(houseid, H_PRICE);
		new house_percent = (house_price * 30) / 100;
		new house_improvemnts_price = HouseImprovementsPrice(houseid);
		
		if(house_improvemnts_price)
			house_improvemnts_price = (house_improvemnts_price * 60) / 100;
			
		new query[200];
		new return_money = (house_price - house_percent) + house_improvemnts_price;
		
		CallLocalFunction("EvictHouseRentersAll", "i", houseid);
		
		SetPlayerData(playerid, P_HOUSE, -1);
		SetPlayerData(playerid, P_HOUSE_TYPE, HOUSE_TYPE_NONE);
		
		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);
		
			SetHouseData(houseid, H_OWNER_ID,		0);
			SetHouseData(houseid, H_IMPROVEMENTS,	0);

			SetHouseData(houseid, H_RENT_DATE,		0);
			SetHouseData(houseid, H_LOCK_STATUS,	false);
			
			format(query, sizeof query, "UPDATE accounts a,houses h SET a.bank=%d,a.house_type=-1,a.house=-1,h.owner_id=0,h.lock=0 WHERE a.id=%d AND h.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);
			
			UpdateHouse(houseid);
			
			HouseHealthInit(houseid);
			HouseStoreInit(houseid);
			
			GivePlayerMoneyEx(playerid, 0, "ѕродажа дома государству", false, false);
			SendClientMessage(playerid, 0x66CC00FF, "¬ы продали свой дом!");
			
			format(query, sizeof query, "Ќалог за продажу дома составил 30 процентов от его стоимости {99CC00}(%d руб)", house_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);
			
			format(query, sizeof query, "¬ам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", house_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);
			
			format(query, sizeof query, "»того на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
			
			new entranceid = GetHouseData(houseid, H_ENTRACE);
			if(entranceid != -1)
			{
				CallLocalFunction("EntranceStatusInit", "i", entranceid);
			}
		}
		else 
		{
			if(BuyPlayerHouse(to_player, houseid, true, price) == 1)
			{
				new total_price = price + house_improvemnts_price;
				
				format(query, sizeof query, "¬ам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", house_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);
				
				format(query, sizeof query, "UPDATE accounts SET money=%d,house=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);
				
				GivePlayerMoneyEx(playerid, total_price, "ѕродажа дома игроку", false, false);
				
				house_price = price;
				house_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+%d rub~n~+%d rub", (house_price - house_percent), house_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1); 
	}
}

stock BuyPlayerHouse(playerid, houseid, bool: buy_from_owner = false, price = -1)
{
	if(!IsHouseOwned(houseid) && GetPlayerHouse(playerid) == -1)
	{
		if(price <= 0)
			price = GetHouseData(houseid, H_PRICE);
			
		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];
			
			format(query, sizeof query, "UPDATE accounts a, houses h SET a.money=%d,a.house_type=%d,a.house=%d,h.owner_id=%d WHERE a.id=%d AND h.id=%d", GetPlayerMoneyEx(playerid)-price, HOUSE_TYPE_HOME, houseid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
			mysql_query(mysql, query, false);
			
			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_HOUSE, 		houseid);
				SetPlayerData(playerid, P_HOUSE_TYPE, 	HOUSE_TYPE_HOME);
				
				SetHouseData(houseid, H_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetHouseData(houseid, H_IMPROVEMENTS, 	0);
				
				SetHouseData(houseid, H_STORE_X, 0.0);
				SetHouseData(houseid, H_STORE_Y, 0.0);
				SetHouseData(houseid, H_STORE_Z, 0.0);
				
				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;
				
				if(!buy_from_owner)
				{
					SetHouseData(houseid,	H_RENT_DATE,	rent_time);
					SetHouseData(houseid,	H_LOCK_STATUS,	false);
					
					new entranceid = GetHouseData(houseid, H_ENTRACE);
					if(entranceid != -1)
					{
						CallLocalFunction("EntranceStatusInit", "i", entranceid);
					}			
				}
				else 
				{
					if(GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetHouseData(houseid, H_RENT_DATE, rent_time);
					}
				}
				format(g_house[houseid][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				
				UpdateHouse(houseid);
				
				HouseHealthInit(houseid);
				HouseStoreInit(houseid);
				
				GivePlayerMoneyEx(playerid, -price, "ѕокупка дома", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Ќапишите {3399FF}/home {66CC00}чтобы узнать о возможност€х");

				format(query, sizeof query, "UPDATE houses SET improvements=0,rent_time=%d,`lock`=%d,store_x=0.0,store_y=0.0,store_z=0.0 WHERE id=%d LIMIT 1", GetHouseData(houseid, H_RENT_DATE), GetHouseData(houseid, H_LOCK_STATUS), GetHouseData(houseid, H_SQL_ID));
				mysql_query(mysql, query, false);

				return 1;
			}
			else SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 34)");
			
			return 0;
		}
		return 0;
	}
	return -1;
}

stock EnterPlayerToHouse(playerid, houseid, setting_spawn = false)
{
	if(!setting_spawn)
	{
		if(GetPlayerInHouse(playerid) == -1)
		{
			new type = GetHouseData(houseid, H_TYPE);

			SetPlayerPosEx
			(
				playerid,
				GetHouseTypeInfo(type, HT_ENTER_POS_X),
				GetHouseTypeInfo(type, HT_ENTER_POS_Y),
				GetHouseTypeInfo(type, HT_ENTER_POS_Z),
				GetHouseTypeInfo(type, HT_ENTER_POS_ANGLE),
				GetHouseTypeInfo(type, HT_INTERIOR),
				houseid + 2000
			);
			SetPlayerInHouse(playerid, houseid);
		}
	}
	else SetPlayerInHouse(playerid, houseid);
}

stock ExitPlayerFromHouse(playerid, Float: radius = 3.0)
{
	new houseid = GetPlayerInHouse(playerid);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
		{
			SetPlayerInHouse(playerid, -1);
		
			new entranceid = GetHouseData(houseid, H_ENTRACE);
			if(entranceid != -1)
			{
				new floor = GetHouseData(houseid, H_FLAT_ID) / 4 + 1;
				type = GetHouseData(houseid, H_FLAT_ID) % 4;
				
				SetPlayerInEntrance(playerid, entranceid);
				SetPlayerInEntranceFloor(playerid, floor);
				
				SetPlayerPosEx
				(
					playerid, 
					g_entrance_flat_pos[type][3],
					g_entrance_flat_pos[type][4],
					g_entrance_flat_pos[type][2],
					g_entrance_flat_pos[type][5],
					floor + 1,
					(entranceid * 100) + floor
				);
			}
			else
			{
				SetPlayerPosEx
				(
					playerid, 
					GetHouseData(houseid, H_EXIT_POS_X),
					GetHouseData(houseid, H_EXIT_POS_Y),
					GetHouseData(houseid, H_EXIT_POS_Z),
					GetHouseData(houseid, H_EXIT_ANGLE),
					0,
					0				
				);
			}
			return 1;
		}
	}
	return 0;
}

stock GetPlayerHouse(playerid, type = -1)
{
	new houseid = GetPlayerData(playerid, P_HOUSE);
	if(houseid != -1)
	{
		switch(type)
		{
			case HOUSE_TYPE_HOME:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_HOME)
				{
					if(GetHouseData(houseid, H_OWNER_ID) == GetPlayerAccountID(playerid))
					{
						return houseid;
					}
				}
			}
			case HOUSE_TYPE_ROOM:
			{	
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_ROOM)
				{
					new room = GetPlayerData(playerid, P_HOUSE_ROOM);
					if(room != -1)
					{
						if(GetHouseRenterInfo(houseid, room, HR_OWNER_ID) == GetPlayerAccountID(playerid))
						{
							return houseid;
						}		
					}
				}
			}
			case HOUSE_TYPE_HOTEL:
			{
				if(GetPlayerData(playerid, P_HOUSE_TYPE) == HOUSE_TYPE_HOTEL)
				{
					new room = GetPlayerData(playerid, P_HOUSE_ROOM);
					if(room != -1)
					{
						if(GetHotelData(houseid, room, H_OWNER_ID) == GetPlayerAccountID(playerid))
						{
							return houseid;
						}
					}
				}
			}
			default:
				return houseid;
		}
	}
	return -1;
}

stock HouseImprovementsPrice(houseid)
{
	new price;
	new level = GetHouseData(houseid, H_IMPROVEMENTS);
	
	if(1 <= level <= sizeof g_house_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_house_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock IsPlayerInRangeOfHouse(playerid, houseid, Float: radius = 10.0)
{
	new result;
	if(GetHouseData(houseid, H_ENTRACE) != -1)
	{
		new flatid = GetHouseData(houseid, H_FLAT_ID) % 4;
		result = IsPlayerInRangeOfPoint(playerid, radius, g_entrance_flat_pos[flatid][0], g_entrance_flat_pos[flatid][1], g_entrance_flat_pos[flatid][2]);
	}
	else result = IsPlayerInRangeOfPoint(playerid, radius, GetHouseData(houseid, H_POS_X), GetHouseData(houseid, H_POS_Y), GetHouseData(houseid, H_POS_Z));

	return result;
}

stock BuyOwnableCar(playerid, marketid, ownablecar, color_1, color_2)
{
	ExitPlayerBuyCarMarket(playerid);
	
	if((GetPlayerOwnableCars(playerid) + 1) > GetPlayerCarSlots(playerid))
	{
		GameTextForPlayer(playerid, "~n~~n~~n~~g~~h~BCE CЗOTС ГЗХ TPAHCМOPTA ИAHХTС~n~~y~~h~YBEЗЕНЕTТ: /mn > ГOМOЗHЕTEЗТHO", 4000, 5);
		return -1;
	}
	new modelid;
	
	if(ownablecar < 1000)		
		modelid = car_market_data[marketid][ownablecar][0];
	else 
		modelid = ownablecar - 1000;

	if(marketid > 0)
	{
		if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1 &&
		GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1 &&
		GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1)
		{
			SendClientMessage(playerid, 0x999999FF, "ƒл€ покупки транспорта этого класса нужно иметь недвижимость");
			return -1;
		}
	}

	if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
	{
		SendClientMessage(playerid, 0x999999FF, "ƒл€ покупки транспорта нужно выгрузить уже загруженный транспорт с сервера");
		return -1;
	}

	if(GivePlayerMoneyEx(playerid, -GetVehicleInfo(modelid - 400, VI_PRICE), "ѕокупка “— в автосалоне", true, true) == -1)
	{
		SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег дл€ покупки этого транспорта");
		return -1;
	}
	
	new biz_id = marketid + 33;

	if(GetBusinessData(biz_id, B_PRODS) > 0)
	{
		AddBusinessData(biz_id, B_PRODS, -, (random(5) + 6));
		
		AddBusinessData(biz_id, B_BALANCE, +, (GetVehicleInfo(modelid - 400, VI_PRICE) * 20 / 100));
	}
	
	new buy_cars_count = cars_after_purchase_count[marketid]++;
	
	new Float: pos_x = cars_pos_after_purchase[marketid][buy_cars_count][0];
	new Float: pos_y = cars_pos_after_purchase[marketid][buy_cars_count][1];
	new Float: pos_z = cars_pos_after_purchase[marketid][buy_cars_count][2];
	new Float: angle = cars_pos_after_purchase[marketid][buy_cars_count][3];

	if(buy_cars_count > 3)
		cars_after_purchase_count[marketid] = 0;
	
	new query[220],
		Cache: result,
		idx;

	idx = GetFreeOwnableCarID();

	SetOwnableCarData(idx, OC_OWNER_ID, 	GetPlayerAccountID(playerid));
	
	SetOwnableCarData(idx, OC_MODEL_ID, 	modelid);
	SetOwnableCarData(idx, OC_COLOR_1, 		color_1);
	SetOwnableCarData(idx, OC_COLOR_2, 		color_2);
	
	SetOwnableCarData(idx, OC_POS_X, 		pos_x);
	SetOwnableCarData(idx, OC_POS_Y, 		pos_y);
	SetOwnableCarData(idx, OC_POS_Z, 		pos_z);
	SetOwnableCarData(idx, OC_ANGLE, 		angle);
	
	strmid(g_ownable_car[idx][OC_NUMBER], "------", 0, 8, 8);

	SetOwnableCarData(idx, OC_ALARM, 		false);
	SetOwnableCarData(idx, OC_KEY_IN, 		false);

	SetOwnableCarData(idx, OC_CREATE, 		gettime());
	
	format(g_ownable_car[idx][OC_OWNER_NAME], 21, GetPlayerNameEx(playerid));
	// ----------------------------------------------------------------------------------------
		
	new vehicleid = CreateVehicle
	(
		GetOwnableCarData(idx, OC_MODEL_ID), 
		GetOwnableCarData(idx, OC_POS_X), 
		GetOwnableCarData(idx, OC_POS_Y), 
		GetOwnableCarData(idx, OC_POS_Z), 
		GetOwnableCarData(idx, OC_ANGLE), 
		GetOwnableCarData(idx, OC_COLOR_1), 
		GetOwnableCarData(idx, OC_COLOR_2),
		-1, 
		0, 
		VEHICLE_ACTION_TYPE_OWNABLE_CAR,
		idx
	);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		CreateVehicleLabel(vehicleid, GetOwnableCarData(idx, OC_NUMBER), 0xFFFF00EE, 0.0, 0.0, 1.3, 20.0);
		SetVehicleParam(vehicleid, V_LOCK, false);
		
		SetVehicleData(vehicleid, V_MILEAGE, 0.0);
	}

	SetPlayerData(playerid, P_OWNABLE_CAR, vehicleid);

	format
	(
		query, sizeof query, 
		"INSERT INTO ownable_cars \
		(owner_id,model_id,color_1,color_2,pos_x,pos_y,pos_z,angle,create_time) \
		VALUES \
		('%d','%d','%d','%d','%f','%f','%f','%f','%d')",
		GetPlayerAccountID(playerid),
		modelid,
		color_1,
		color_2,
		pos_x,
		pos_y,
		pos_z,
		angle,
		gettime()
	);
	result = mysql_query(mysql, query, true);

	SetOwnableCarData(idx, OC_SQL_ID, cache_insert_id());

	cache_delete(result);

	SendClientMessage(playerid, 0x66CC00FF, "ѕоздравл€ем с покупкой нового транспорта!");
	SendClientMessage(playerid, 0x66CC00FF, "Ќапишите {0099FF}/car {66CC00}чтобы узнать о возможност€х");	
	SendClientMessage(playerid, 0x3399FFFF, "ƒокументы на транспорт будут оформлены в течении нескольких минут");
	
	return 1;
}

stock GetFreeHousesCount()
{
	new count;	
	for(new idx; idx < g_house_loaded; idx ++)
	{
		if(IsHouseOwned(idx)) continue;
		
		count ++;
	}
	return count;
}

stock ShowHouseRenterInfo(playerid, houseid, roomid)
{
	if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == houseid)
	{
		if(0 <= roomid <= MAX_HOUSE_ROOMS-1)
		{
			if(IsHouseRoomOwned(houseid, roomid))
			{
				SetPlayerUseListitem(playerid, roomid);
			
				new string[144];
				new time = gettime();

				new s_year, s_month, s_day; // поселение 
				timestamp_to_date(GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), s_year, s_month, s_day);
				
				//new e_year, e_month, e_day;	// выселение
				//timestamp_to_date(GetHouseRoomInfo(houseid, roomid, HR_RENT_DATE), e_year, e_month, e_day);
				
				format
				(
					string, sizeof string, 
					"1. јрендатор\t\t\t{CCCC00}%s\n"\
					"2. ѕоселилс€\t\t\t%02d-%02d-%d\n"\
					"3. ѕроживает\t\t\t{66BB33}%d дней\n"\
					"{888888}4. ¬ыселить",
					GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME),
					s_day, s_month, s_year,
					GetElapsedTime(time, GetHouseRenterInfo(houseid, roomid, HR_RENT_TIME), CONVERT_TIME_TO_DAYS)
				);
				Dialog(playerid, DIALOG_HOUSE_RENTER_INFO, DIALOG_STYLE_LIST, "{33AACC}»нформаци€ о арендаторе", string, "ƒействие", "Ќазад");
			}
			else SendClientMessage(playerid, 0x999999FF, "¬ этой комнате уже никто не проживает");
		}
	}
}

stock AddHouseRenter(houseid, roomid, playerid)
{
	if(!IsHouseRoomOwned(houseid, roomid))
	{
		new query[128];
		new Cache: result;
		
		new time = gettime();
		
		format(query, sizeof query, "UPDATE accounts SET house_type=%d,house_room=%d,house=%d WHERE id=%d LIMIT 1", HOUSE_TYPE_ROOM, roomid, houseid, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);
		
		format(query, sizeof query, "INSERT INTO houses_renters (owner_id,house_id,room_id,rent_time,time) VALUES (%d,%d,%d,%d,%d)", GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID), roomid, 0, time);
		result = mysql_query(mysql, query, true);
		
		SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 		cache_insert_id());
		SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	GetPlayerAccountID(playerid));
		SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
		SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	time);
		
		AddHouseRentersCount(houseid, +, 1);
		
		cache_delete(result);
	}
}

stock EvictHouseRenter(houseid, roomid, renter_id = INVALID_PLAYER_ID, ownerid = INVALID_PLAYER_ID)
{
	if(IsHouseRoomOwned(houseid, roomid))
	{
		new query[90];
		
		format(query, sizeof query, "DELETE FROM houses_renters WHERE owner_id=%d AND house_id=%d", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID), GetHouseData(houseid, H_SQL_ID));
		mysql_query(mysql, query, false);
		
		format(query, sizeof query, "UPDATE accounts SET house_type=-1,house_room=-1,house=-1 WHERE id=%d LIMIT 1", GetHouseRenterInfo(houseid, roomid, HR_OWNER_ID));
		mysql_query(mysql, query, false);
		
		if(!mysql_errno())
		{
			if(renter_id == INVALID_PLAYER_ID)
				renter_id = GetPlayerID(GetHouseRenterInfo(houseid, roomid, HR_OWNER_NAME));
			
			if(renter_id != INVALID_PLAYER_ID)
			{
				if(GetPlayerHouse(renter_id, HOUSE_TYPE_ROOM) == houseid)
				{
					if(ownerid != INVALID_PLAYER_ID)
					{
						format(query, sizeof query, "%s выселил ¬ас из своего дома", GetPlayerNameEx(ownerid));
						SendClientMessage(renter_id, 0x3399FFFF, query);
					}
					
					SetPlayerData(renter_id, P_HOUSE, -1);
					SetPlayerData(renter_id, P_HOUSE_TYPE, -1);
					SetPlayerData(renter_id, P_HOUSE_ROOM, -1);
				}
			}
			
			SetHouseRenterInfo(houseid, roomid, HR_SQL_ID, 	0);
			SetHouseRenterInfo(houseid, roomid, HR_OWNER_ID,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_DATE,	0);
			SetHouseRenterInfo(houseid, roomid, HR_RENT_TIME,	0);
		
			AddHouseRentersCount(houseid, -, 1);
			return 1;
		}
		return -1;
	}
	return 0;
}

stock GetHouseIndexBySQLID(sql_id)
{
	new index = -1;
	
	for(new idx; idx < MAX_HOUSES; idx ++)
	{
		if(GetHouseData(idx, H_SQL_ID) != sql_id) continue;
		
		index = idx;
		break;
	}
	return index;
}

stock GetHouseFreeRoom(houseid)
{
	new roomid = -1;
	
	for(new idx; idx < MAX_HOUSE_ROOMS; idx ++)
	{
		if(IsHouseRoomOwned(houseid, idx)) continue;
		
		roomid = idx;
		break;
	}
	return roomid;
}

stock LotteryBuyTicketCount()
{
	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(!GetPlayerData(playerid, P_LOTTERY)) continue;
		
		count ++;
	}
	return count;
}

stock ShowPlayerWaitPanel(playerid)
{
	for(new idx; idx < sizeof wait_panel_TD; idx ++)
	{
		TextDrawShowForPlayer(playerid, wait_panel_TD[idx]);
	}
}

stock HidePlayerWaitPanel(playerid)
{
	for(new idx; idx < sizeof wait_panel_TD; idx ++)
	{
		TextDrawHideForPlayer(playerid, wait_panel_TD[idx]);
	}
}

stock ShowPlayerSelectPanel(playerid, type)
{
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) == SELECT_PANEL_TYPE_NONE)
	{
		for(new idx; idx < sizeof select_TD; idx ++)
		{
			TextDrawShowForPlayer(playerid, select_TD[idx]);
		}
		SetPlayerData(playerid, P_USE_SELECT_PANEL, type);
		
		SelectTextDraw(playerid, 0x009900FF);
	}
}

stock HidePlayerSelectPanel(playerid)
{
	if(GetPlayerData(playerid, P_USE_SELECT_PANEL) != SELECT_PANEL_TYPE_NONE)
	{
		CancelSelectTextDraw(playerid);
		
		for(new idx; idx < sizeof select_TD; idx ++)
		{
			TextDrawHideForPlayer(playerid, select_TD[idx]);
		}
		SetPlayerData(playerid, P_USE_SELECT_PANEL, SELECT_PANEL_TYPE_NONE);
	}
}

stock IsPlayerHaveWeapon(playerid, weaponid)
{
	new weapon, ammo;
	new bool: is_have = false;
	
	for(new idx; idx <= 12; idx ++)
	{
		GetPlayerWeaponData(playerid, idx, weapon, ammo);
		if(weapon != weaponid) continue;
		
		is_have = true;
		break;
	}
	return is_have;
}

stock IsAJobCar(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_ACTION_TYPE))
	{
		case
			VEHICLE_ACTION_TYPE_BUS_DRIVER,
			VEHICLE_ACTION_TYPE_TAXI_DRIVER,	
			VEHICLE_ACTION_TYPE_MECHANIC,		
			VEHICLE_ACTION_TYPE_TRUCKER:
		{
			return 1;
		}
	}
	return 0;
}

stock GetNearestVehicleID(playerid, Float: radius = 0.0)
{
	if(radius == 0.0)
		radius = FLOAT_INFINITY;
		
	new vehicleid = INVALID_VEHICLE_ID;

	new Float: dist;
	new Float: pos_x, Float: pos_y, Float: pos_z;
	
	GetPlayerPos(playerid, pos_x, pos_y, pos_z);
	for(new idx; idx < MAX_VEHICLES; idx ++)
	{
		if(!IsValidVehicle(idx)) continue;
		if(!IsVehicleStreamedIn(idx, playerid)) continue;
		
		dist = GetVehicleDistanceFromPoint(idx, pos_x, pos_y, pos_z);
		if(dist < radius)
		{
			radius = dist,
			vehicleid = idx;
		}
	}
	return vehicleid;
}

stock ShowPlayerBuyJerricanDialog(playerid, stationid)
{
	if(stationid != -1)
	{
		SetPVarInt(playerid, "buy_jerrican_in_fuelst", stationid);
		
		new fmt_str[70];
		format
		(	
			fmt_str, sizeof fmt_str, 
			"{FFFFFF} анистра на этой заправке стоит %d руб\n"\
			"¬ы хотите купить ее?", 
			GetFuelStationData(stationid, FS_FUEL_PRICE) * 15
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY_JERRICA, DIALOG_STYLE_MSGBOX, "{FFCD00}ѕокупка канистры", fmt_str, "ƒа", "Ќет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, " анистру с топливом можно купить на любой ј«—");
}

stock LoadOrders()
{
	new Cache: result, rows;
	
	result = mysql_query(mysql, "SELECT * FROM orders");
	rows = cache_num_rows();
	
	if(rows > sizeof g_order)
		rows = sizeof g_order;
	
	new buffer;
	for(new idx; idx < rows; idx ++)
	{
		SetOrderData(idx, O_SQL_ID,	cache_get_row_int(idx, 0));
		SetOrderData(idx, O_TYPE, 	cache_get_row_int(idx, 1));
		
		SetOrderData(idx, O_COMPANY_ID, cache_get_row_int(idx, 2));
		SetOrderData(idx, O_AMOUNT, 	cache_get_row_int(idx, 3));
		SetOrderData(idx, O_PRICE, 		cache_get_row_int(idx, 4));
		SetOrderData(idx, O_TIME, 		cache_get_row_int(idx, 5));
		SetOrderData(idx, O_USED, 		false);
		
		buffer = GetOrderData(idx, O_COMPANY_ID);
		switch(GetOrderData(idx, O_TYPE))
		{
			case ORDER_TYPE_FUEL_STATION:
			{
				SetFuelStationData(buffer, FS_ORDER_ID, idx);
			}
			case ORDER_TYPE_BUSINESS:
			{
				SetBusinessData(buffer, B_ORDER_ID, idx);
			}
		}
	}
	cache_delete(result);
	
	printf("[Orders]: «аказов загружено: %d", rows);
}

stock CreateOrder(type, company, amount, price, description[] = "")
{
	#pragma unused description // TODO;

	new order_id = GetOrderFreeSlot();
	if(order_id != -1)
	{
		new query[128];
		new Cache: result;
		new time = gettime();
	
		format(query, sizeof query, "INSERT INTO orders (type,company,amount,price,time) VALUES (%d,%d,%d,%d,%d)", type, company, amount, price, time);
		result = mysql_query(mysql, query, true);
	
		if(!mysql_errno())
		{
			new year, month, day;
			getdate(year, month, day);
			
			SetOrderData(order_id, O_TYPE, type);
			SetOrderData(order_id, O_COMPANY_ID, company);
			SetOrderData(order_id, O_AMOUNT, amount);
			SetOrderData(order_id, O_PRICE, price);
			SetOrderData(order_id, O_TIME, time);
			SetOrderData(order_id, O_USED, false);
			
			SetOrderData(order_id, O_SQL_ID, cache_insert_id());
			
			switch(type)
			{
				case ORDER_TYPE_FUEL_STATION:
				{
					SetFuelStationData(company, FS_ORDER_ID, order_id);
				}
				case ORDER_TYPE_BUSINESS:
				{
					SetBusinessData(company, B_ORDER_ID, order_id);
				}
			}
		}
		else order_id = -1;
		
		cache_delete(result);
	}
	return order_id;
}

stock DeleteOrder(orderid)
{
	if(GetOrderData(orderid, O_SQL_ID) > 0)
	{
		new query[64];
		new company = GetOrderData(orderid, O_COMPANY_ID);
		
		switch(GetOrderData(orderid, O_TYPE))
		{
			case ORDER_TYPE_FUEL_STATION:
			{
				SetFuelStationData(company, FS_ORDER_ID, -1);
			}
			case ORDER_TYPE_BUSINESS:
			{
				SetBusinessData(company, B_ORDER_ID, -1);
			}
		}
		
		format(query, sizeof query, "DELETE FROM orders WHERE type=%d AND company=%d", GetOrderData(orderid, O_TYPE), GetOrderData(orderid, O_COMPANY_ID));
		mysql_query(mysql, query, false);
		
		SetOrderData(orderid, O_SQL_ID, 0);
		SetOrderData(orderid, O_PRICE,  0);
		SetOrderData(orderid, O_AMOUNT, 0);
	}
}

stock GetOrderFreeSlot()
{
	new slot = -1;
	
	for(new idx; idx < sizeof g_order; idx ++)
	{
		if(GetOrderData(idx, O_SQL_ID) > 0) continue;
		
		slot = idx;
		break;
	}
	return slot;
}

stock SellFuelStation(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fuel_st_price = GetFuelStationData(stationid, FS_PRICE);
		new fuel_st_percent = (fuel_st_price * 30) / 100;
		new fuel_st_improvemnts_price = FuelStationImprovementsPrice(stationid);
		
		if(fuel_st_improvemnts_price)
			fuel_st_improvemnts_price = (fuel_st_improvemnts_price * 60) / 100;
			
		new query[170];
		new return_money = (fuel_st_price - fuel_st_percent) + fuel_st_improvemnts_price;
		
		SetPlayerData(playerid, P_FUEL_ST, -1);
		
		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);
		
			SetFuelStationData(stationid, FS_OWNER_ID, 0);
			SetFuelStationData(stationid, FS_IMPROVEMENTS, 	0);

			SetFuelStationData(stationid, FS_FUELS, 		1000);
			SetFuelStationData(stationid, FS_FUEL_PRICE,	3);
			SetFuelStationData(stationid, FS_BUY_FUEL_PRICE,0);
			
			SetFuelStationData(stationid, FS_BALANCE,		0);
			SetFuelStationData(stationid, FS_RENT_DATE,		0);
			SetFuelStationData(stationid, FS_LOCK_STATUS,	false);
			
			format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.bank=%d,a.fuel_st=-1,f.owner_id=0,f.fuels=1000,f.fuel_price=3,f.lock=0 WHERE a.id=%d AND f.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
			mysql_query(mysql, query, false);
			
			//format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(stationid, FS_SQL_ID));
			//mysql_query(mysql, query, false);
			
			GivePlayerMoneyEx(playerid, 0, "ѕродажа заправочной станции государству", false, false);
			CallLocalFunction("UpdateFuelStationLabel", "i", stationid);
			
			SendClientMessage(playerid, 0x66CC00FF, "¬ы продали свою заправочную станцию!");
			
			format(query, sizeof query, "Ќалог за продажу заправочной станции составил 30 процентов от ее стоимости {99CC00}(%d руб)", fuel_st_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);
			
			format(query, sizeof query, "¬ам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", fuel_st_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);
			
			format(query, sizeof query, "»того на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
			
		}
		else 
		{
			if(BuyPlayerFuelStation(to_player, stationid, true, price) == 1)
			{
				new total_price = price + fuel_st_improvemnts_price;
				
				format(query, sizeof query, "¬ам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", fuel_st_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);
				
				format(query, sizeof query, "UPDATE accounts SET money=%d,fuel_st=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);
				
				GivePlayerMoneyEx(playerid, total_price, "ѕродажа заправочной станции игроку", false, false);
				
				fuel_st_price = price;
				fuel_st_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+%d rub~n~+%d rub", (fuel_st_price - fuel_st_percent), fuel_st_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1); 
	}
}

stock BuyPlayerFuelStation(playerid, stationid, bool: buy_from_owner = false, price = -1)
{
	if(!IsFuelStationOwned(stationid) && GetPlayerFuelStation(playerid) == -1)
	{
		if(price <= 0)
			price = GetFuelStationData(stationid, FS_PRICE);
			
		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];
			
			format(query, sizeof query, "UPDATE accounts a, fuel_stations f SET a.money=%d,a.fuel_st=%d,f.owner_id=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, stationid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
			mysql_query(mysql, query, false);
			
			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_FUEL_ST, stationid);
			
				SetFuelStationData(stationid, FS_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetFuelStationData(stationid, FS_IMPROVEMENTS, 	0);
				
				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;
				
				if(!buy_from_owner)
				{
					SetFuelStationData(stationid, FS_FUELS, 		50);
					SetFuelStationData(stationid, FS_FUEL_PRICE,	3);
					SetFuelStationData(stationid, FS_BUY_FUEL_PRICE,0);
					
					SetFuelStationData(stationid, FS_BALANCE,		0);
					SetFuelStationData(stationid, FS_RENT_DATE,		rent_time);
					SetFuelStationData(stationid, FS_LOCK_STATUS,	false);
				}
				else 
				{
					if(GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetFuelStationData(stationid, FS_RENT_DATE, rent_time);
					}
				}
				format(g_fuel_station[stationid][FS_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateFuelStationLabel", "i", stationid);
				
				GivePlayerMoneyEx(playerid, -price, "ѕокупка заправочной станции", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Ќапишите {3399FF}/fuelst {66CC00}чтобы узнать о возможност€х");

				format(query, sizeof query, "UPDATE fuel_stations SET improvements=0,fuels=%d,fuel_price=%d,buy_fuel_price=%d,balance=%d,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_FUEL_PRICE), GetFuelStationData(stationid, FS_BUY_FUEL_PRICE), GetFuelStationData(stationid, FS_BALANCE), GetFuelStationData(stationid, FS_RENT_DATE), GetFuelStationData(stationid, FS_LOCK_STATUS), GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);
				
				format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(stationid, FS_SQL_ID));
				mysql_query(mysql, query, false);
				
				return 1;
			}
			
			SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 16)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock FuelStationFillCar(playerid, vehicleid, stationid)
{
	if(IsPlayerDriver(playerid) && IsPlayerInVehicle(playerid, vehicleid))
	{
		if(0 <= stationid <= g_fuel_station_loaded)
		{
			if(!GetFuelStationData(stationid, FS_LOCK_STATUS))
			{
				new fmt_str[150];
				
				new buy_fuel_pay = GetPVarInt(playerid, "buy_fuel_pay");
				new buy_fuel_count = GetPVarInt(playerid, "buy_fuel_count");
				
				new price = GetFuelStationData(stationid, FS_FUEL_PRICE) * 10;
				
				if(GetPlayerMoneyEx(playerid) >= price)
				{
					if((GetVehicleData(vehicleid, V_FUEL) + 10.0) <= 150.0)
					{
						if(GetFuelStationData(stationid, FS_FUELS) >= 10)
						{
							if(IsFuelStationOwned(stationid))
							{						
								AddFuelStationData(stationid, FS_FUELS, -, 10);
								AddFuelStationData(stationid, FS_BALANCE, +, price);
							}
							SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + 10);
							
							buy_fuel_count += 10;
							buy_fuel_pay += price;
							
							SetPVarInt(playerid, "buy_fuel_pay", buy_fuel_pay);
							SetPVarInt(playerid, "buy_fuel_count", buy_fuel_count);
							
							format(fmt_str, sizeof fmt_str, "UPDATE accounts a,fuel_stations f SET a.money=%d,f.fuels=%d,f.balance=%d WHERE a.id=%d AND f.id=%d", GetPlayerMoneyEx(playerid)-price, GetFuelStationData(stationid, FS_FUELS), GetFuelStationData(stationid, FS_BALANCE), GetPlayerAccountID(playerid), GetFuelStationData(stationid, FS_SQL_ID));
							mysql_query(mysql, fmt_str, false);
							
							fmt_str = "";
							GivePlayerMoneyEx(playerid, -price, "ѕокупка топлива на заправке", false, false);
						} 
						else strcat(fmt_str, "~n~~r~~h~no fuel");
					}
					else strcat(fmt_str, "~n~~r~~h~benzobak full");
					
					format(fmt_str, sizeof fmt_str, "~w~summa: ~g~~h~%d rub~n~~w~litres: ~b~%d%s", buy_fuel_pay, buy_fuel_count, fmt_str);
					GameTextForPlayer(playerid, fmt_str, 3000, 4);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "Ќедостаточно денег дл€ заправки");
			}
			else 
			{
				GameTextForPlayer(playerid, "~w~fuel station~n~~r~~h~is closed", 3000, 4);
				//SendClientMessage(playerid, 0xFF6600FF, "«аправочна€ станци€ закрыта");
			}
		}
	}
}

stock GetFuelStationMaxFuel(stationid)
{
	new max_fuels = 2500; 
	new i_level = GetFuelStationData(stationid, FS_IMPROVEMENTS);

	if(i_level > 3)
		i_level = 3;
	
	max_fuels += i_level * 2500;
	return max_fuels;
}

stock GetNearestFuelStation(playerid, Float: dist = 15.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
		
	new stationid = -1;
	new Float: my_dist;
	
	for(new idx; idx < g_fuel_station_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetFuelStationData(idx, FS_POS_X), GetFuelStationData(idx, FS_POS_Y), GetFuelStationData(idx, FS_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			stationid = idx;
		}
	}
	return stationid;
}

stock GetPlayerFuelStation(playerid)
{
	new stationid = GetPlayerData(playerid, P_FUEL_ST);
	
	if(stationid != -1)
	{
		if(GetFuelStationData(stationid, FS_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return stationid;
		}
	}
	return -1;
}

stock FuelStationImprovementsPrice(stationid)
{
	new price;
	new level = GetFuelStationData(stationid, FS_IMPROVEMENTS);
	
	if(1 <= level <= sizeof g_fuel_station_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_fuel_station_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock ShowPlayerFuelStationPayForRent(playerid)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fmt_str[256];
		
		format
		(
			fmt_str, sizeof fmt_str, 
			"{FFFFFF}«аправочна€ станци€:\t\tє%d (%s)\n"\
			"ќплаченных дней арендны:\t\t%d из 30\n"\
			"≈жедневна€ арендна€ плата:\t%d руб\n"\
			"“ип аренды:\t\t\t\t%s\n\n"\
			"Ќа сколько дней ¬ы хотите арендовать заправочную станцию?",
			stationid,
			GetFuelStationData(stationid, FS_NAME),
			GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2,
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? ("ѕолна€") : ("ѕониженна€")
		);	
		Dialog(playerid, DIALOG_PAY_FOR_RENT_FUEL_ST, DIALOG_STYLE_INPUT, "{66CC00}јренда заправочной станции", fmt_str, "ќплатить", "Ќазад");
	}
}

stock ShowPlayerBusinessPayForRent(playerid)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		new fmt_str[256];
		
		format
		(
			fmt_str, sizeof fmt_str, 
			"{FFFFFF}Ѕизнес:\t\t\t\tє%d (%s)\n"\
			"ќплаченных дней арендны:\t\t%d из 30\n"\
			"≈жедневна€ арендна€ плата:\t%d руб\n"\
			"“ип аренды:\t\t\t\t%s\n\n"\
			"Ќа сколько дней ¬ы хотите арендовать бизнес?",
			businessid,
			GetBusinessData(businessid, B_NAME),
			GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? GetBusinessData(businessid, B_RENT_PRICE) : GetBusinessData(businessid, B_RENT_PRICE) / 2,
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("ѕолна€") : ("ѕониженна€")
		);	
		Dialog(playerid, DIALOG_PAY_FOR_RENT_BIZ, DIALOG_STYLE_INPUT, "{66CC00}јренда бизнеса", fmt_str, "ќплатить", "Ќазад");
	}
}

stock ShowPlayerHousePayForRent(playerid)
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new fmt_str[256];
		
		format
		(
			fmt_str, sizeof fmt_str, 
			"{FFFFFF}ƒом:\t\t\t\t\tє%d (%s)\n"\
			"ќплаченных дней арендны:\t\t%d из 30\n"\
			"≈жедневна€ квартплата:\t\t%d руб\n"\
			"—убсиди€:\t\t\t\t%s\n\n"\
			"Ќа сколько дней ¬ы хотите оплатить дом?",
			houseid,
			GetHouseData(houseid, H_NAME),
			GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? GetHouseData(houseid, H_RENT_PRICE) : GetHouseData(houseid, H_RENT_PRICE) / 2,
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? ("Ќет") : ("≈сть")
		);	
		Dialog(playerid, DIALOG_PAY_FOR_RENT_HOUSE, DIALOG_STYLE_INPUT, "{66CC00}ќплата дома", fmt_str, "ќплатить", "Ќазад");
	}
}

stock SellBusiness(playerid, to_player = INVALID_PLAYER_ID, price = 0)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		new biz_price = GetBusinessData(businessid, B_PRICE);
		new biz_percent = (biz_price * 30) / 100;
		new biz_improvemnts_price = BusinessImprovementsPrice(businessid);
		
		if(biz_improvemnts_price)
			biz_improvemnts_price = (biz_improvemnts_price * 60) / 100;
		
		new query[200];
		new return_money = (biz_price - biz_percent) + biz_improvemnts_price;
		
		SetPlayerData(playerid, P_BUSINESS, -1);
		
		if(to_player == INVALID_PLAYER_ID)
		{
			AddPlayerData(playerid, P_BANK, +, return_money);
			
			SetBusinessData(businessid, B_OWNER_ID, 		0);
			SetBusinessData(businessid, B_IMPROVEMENTS, 	0);

			SetBusinessData(businessid, B_PRODS, 			0);
			SetBusinessData(businessid, B_PROD_PRICE,		0);
			
			SetBusinessData(businessid, B_BALANCE,			0);
			SetBusinessData(businessid, B_RENT_DATE,		0);
			SetBusinessData(businessid, B_ENTER_MUSIC,		0);
			SetBusinessData(businessid, B_LOCK_STATUS,	false);
			
			BusinessHealthPickupInit(businessid);
			
			format(query, sizeof query, "UPDATE accounts a,business b SET a.bank=%d,a.business=-1,b.owner_id=0,b.products=0,b.prod_price=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerData(playerid, P_BANK), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);
			
			format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
			mysql_query(mysql, query, false);
			
			g_business_gps_init = false;
			
			//format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
			//mysql_query(mysql, query, false);
			
			GivePlayerMoneyEx(playerid, 0, "ѕродажа бизнеса государству", false, false);
			CallLocalFunction("UpdateBusinessLabel", "i", businessid);
			
			SendClientMessage(playerid, 0x66CC00FF, "¬ы продали свой бизнес!");
			
			format(query, sizeof query, "Ќалог за продажу бизнеса составил 30 процентов от его стоимости {99CC00}(%d руб)", biz_percent);
			SendClientMessage(playerid, 0xCECECEFF, query);
			
			format(query, sizeof query, "¬ам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
			SendClientMessage(playerid, 0xCECECEFF, query);
			
			format(query, sizeof query, "»того на банковский счет перечислено: {3399FF}%d руб", return_money);
			SendClientMessage(playerid, 0xFFFFFFFF, query);
		}
		else 
		{
			if(BuyPlayerBusiness(to_player, businessid, true, price) == 1)
			{
				new total_price = price + biz_improvemnts_price;
				
				format(query, sizeof query, "¬ам было возвращено 60 процентов от стоимости купленных улучшений: {CCFF00}%d руб", biz_improvemnts_price);
				SendClientMessage(playerid, 0xCECECEFF, query);
				
				format(query, sizeof query, "UPDATE accounts SET money=%d,business=-1 WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid)+total_price, GetPlayerAccountID(playerid));
				mysql_query(mysql, query, false);
				
				format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", businessid);
				mysql_query(mysql, query, false);
				
				g_business_gps_init = false;
				GivePlayerMoneyEx(playerid, total_price, "ѕродажа бизнеса игроку", false, false);
				
				biz_price = price;
				biz_percent = 0;
			}
			else return ;
		}
		format(query, sizeof query, "~g~+%d rub~n~+%d rub", (biz_price - biz_percent), biz_improvemnts_price);
		GameTextForPlayer(playerid, query, 4000, 1); 
	}
}

stock BuyPlayerBusiness(playerid, businessid, bool: buy_from_owner = false, price = -1)
{
	if(!IsBusinessOwned(businessid) && GetPlayerBusiness(playerid) == -1)
	{
		if(price <= 0)
			price = GetBusinessData(businessid, B_PRICE);
			
		if(GetPlayerMoneyEx(playerid) >= price)
		{
			new query[256];
			
			format(query, sizeof query, "UPDATE accounts a, business b SET a.money=%d,a.business=%d,b.owner_id=%d WHERE a.id=%d AND b.id=%d", GetPlayerMoneyEx(playerid)-price, businessid, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetBusinessData(businessid, B_SQL_ID));
			mysql_query(mysql, query, false);
			
			if(!mysql_errno())
			{
				SetPlayerData(playerid, P_BUSINESS, businessid);
				
				SetBusinessData(businessid, B_OWNER_ID, 		GetPlayerAccountID(playerid));
				SetBusinessData(businessid, B_IMPROVEMENTS, 	0);
				
				new time = gettime();
				new rent_time = (time - (time % 86400)) + 86400;
				
				if(!buy_from_owner)
				{
					SetBusinessData(businessid,	B_PRODS, 		20);
					SetBusinessData(businessid,	B_PROD_PRICE, 	0);
					
					SetBusinessData(businessid,	B_ENTER_MUSIC, 	0);
					SetBusinessData(businessid,	B_ENTER_PRICE, 	0);
					
					SetBusinessData(businessid,	B_BALANCE, 		0);
					SetBusinessData(businessid,	B_RENT_DATE,	rent_time);
					SetBusinessData(businessid,	B_LOCK_STATUS,	false);
				}
				else 
				{
					if(GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), time, CONVERT_TIME_TO_DAYS) <= 0)
					{
						SetBusinessData(businessid, B_RENT_DATE, rent_time);
					}
				}
				format(g_business[businessid][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", businessid);
				
				GivePlayerMoneyEx(playerid, -price, "ѕокупка бизнеса", false, true);
				SendClientMessage(playerid, 0x66CC00FF, "Ќапишите {0099FF}/business {66CC00}чтобы узнать о возможност€х");

				format(query, sizeof query, "UPDATE business SET improvements=0,products=%d,prod_price=%d,balance=%d,rent_time=%d,`lock`=%d WHERE id=%d LIMIT 1", GetBusinessData(businessid, B_PRODS), GetBusinessData(businessid, B_PROD_PRICE), GetBusinessData(businessid, B_BALANCE), GetBusinessData(businessid, B_RENT_DATE), GetBusinessData(businessid, B_LOCK_STATUS), GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);
				
				format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(businessid, B_SQL_ID));
				mysql_query(mysql, query, false);
				
				return 1;
			}
			
			SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 21)");
			return 0;
		}
		return 0;
	}
	return -1;
}

stock BusinessHealthPickupInit(businessid)
{
	if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 2)
	{
		if(!GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			new interior = GetBusinessData(businessid, B_INTERIOR);
			SetBusinessData(businessid, B_HEALTH_PICKUP, CreatePickup(1240, 2, GetBusinessInteriorInfo(interior, BT_HEALTH_POS_X), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Y), GetBusinessInteriorInfo(interior, BT_HEALTH_POS_Z), businessid + 255, PICKUP_ACTION_TYPE_BIZ_HEALTH, businessid));
		}
	}
	else
	{
		if(GetBusinessData(businessid, B_HEALTH_PICKUP))
		{
			DestroyPickup(GetBusinessData(businessid, B_HEALTH_PICKUP));
			SetBusinessData(businessid, B_HEALTH_PICKUP, 0);
		}
	}
}

stock GetBusinessEnterProdCount(businessid)
{
	new take_prods = 0;
	new enter_price = GetBusinessData(businessid, B_ENTER_PRICE);
	
	if(enter_price > 0)
	{
		if(enter_price < 150)
		{
			take_prods = 1;
		}
		else if(enter_price < 500)
		{
			take_prods = 2;
		}
		else take_prods = 3;
	}
	return take_prods;
}

stock GetBusinessMaxProd(businessid)
{
	new max_prods = 500;
	new i_level = GetBusinessData(businessid, B_IMPROVEMENTS);
	
	if(i_level >= 5)
	{
		max_prods = 10_000;
	}
	else if(i_level >= 1)
	{
		max_prods = 3_000;
	}
	else max_prods = 500;

	return max_prods;
}

stock GetNearestBusiness(playerid, Float: dist = 10.0)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
		
	new businessid = -1;
	new Float: my_dist;
	
	for(new idx; idx < g_business_loaded; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetBusinessData(idx, B_POS_X), GetBusinessData(idx, B_POS_Y), GetBusinessData(idx, B_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			businessid = idx;
		}
	}
	return businessid;
}

stock BusinessImprovementsPrice(businessid)
{
	new price;
	new level = GetBusinessData(businessid, B_IMPROVEMENTS);
	
	if(1 <= level <= sizeof g_business_improvements)
	{
		for(new idx; idx < level; idx ++)
		{
			price += g_business_improvements[idx][I_PRICE];
		}
	}
	return price;
}

stock EnterPlayerToBiz(playerid, businessid)
{
	if(GetPlayerInBiz(playerid) == -1)
	{
		new buffer = GetBusinessData(businessid, B_INTERIOR);
		SetPlayerPosEx
		(
			playerid, 
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_X), 
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Y), 
			GetBusinessInteriorInfo(buffer, BT_ENTER_POS_Z),
			GetBusinessInteriorInfo(buffer, BT_ENTER_ANGLE),
			GetBusinessInteriorInfo(buffer, BT_ENTER_INTERIOR),
			businessid + 255
		);
		SetPlayerInBiz(playerid, businessid);
		
		buffer = GetBusinessData(businessid, B_ENTER_MUSIC);
		if(1 <= buffer <= sizeof g_business_sound)
		{
			PlayerPlaySound(playerid, g_business_sound[buffer - 1], 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

stock GetPlayerBusiness(playerid)
{
	new businessid = GetPlayerData(playerid, P_BUSINESS);
	
	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_OWNER_ID) == GetPlayerAccountID(playerid))
		{
			return businessid;
		}
	}
	return -1;
}

stock GetFreeBusinessCount()
{
	new count;	
	for(new idx; idx < g_business_loaded; idx ++)
	{
		if(IsBusinessOwned(idx)) continue;
		
		count ++;
	}
	return count;
}

stock IsPlayerInBuyPosBiz(playerid, businessid, type, Float: radius = 50.0)
{
	if(GetBusinessData(businessid, B_TYPE) == type)
	{
		new interior = GetBusinessData(businessid, B_INTERIOR);
		if(IsPlayerInRangeOfPoint(playerid, radius, GetBusinessInteriorInfo(interior, BT_BUY_POS_X), GetBusinessInteriorInfo(interior, BT_BUY_POS_Y), GetBusinessInteriorInfo(interior, BT_BUY_POS_Z)))	
		{
			return 1;
		}
	}
	return 0;
}

stock ShowPlayerRealtorHomeDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_BIZ_REALTOR_HOME_GET, DIALOG_STYLE_INPUT,
		"{99CC00}»нформаци€ о доме", 
		"{FFFFFF}¬ведите номер дома, информацию\n"\
		"о котором ¬ы хотите получить\n\n"\
		"{FFCD00}—тоимость услуги 50 рублей",
		"ƒалее", "ќтмена"
	);
}

stock IsABike(vehicleid)
{
	switch(GetVehicleData(vehicleid, V_MODELID))
	{
		case 481, 509, 510:
		{
			return 1;
		}
	}
	return 0;
}

stock IsModelHasBootAndBonnet(modelid)
{
	switch(modelid)
	{
		case 481,509,510,417,425,447,460,469,464,465,476,487,489,497,501,511,512,513,519,520,530,548,553,563,577,592,593: return 0;
	}
	return 1;
}

stock SetPlayerPhoneUseState(playerid, bool: use = true, bool: bubble = true)
{
	if(use)
	{
		SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, GetPlayerData(playerid, P_PHONE_COLOR) + 18865, A_OBJECT_BONE_RIGHT_HAND, 0.1, 0.001, 0.0, 280.0, 0.0, 200.0, 1.0, 1.0, 1.0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE - 1);
		
		if(bubble)
			Action(playerid, "достал телефон", _, false);
	}
	else 
	{
		RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND);
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
		
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
}

stock GetElapsedTime(time, to_time, type = CONVERT_TIME_TO_HOURS)
{
	new result;
	
	switch(type)
	{
		case CONVERT_TIME_TO_MINUTES:
		{
			result = ((time - (time % 60)) - (to_time - (to_time % 60))) / 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			result = ((time - (time % 3600)) - (to_time - (to_time % 3600))) / 3600;
		}
		case CONVERT_TIME_TO_DAYS:
		{
			result = ((time - (time % 86400)) - (to_time - (to_time % 86400))) / 86400;
		}
		default: 
			result = -1;
	}
	return result;
}

stock ConvertUnixTime(unix_time, type = CONVERT_TIME_TO_SECONDS)
{
	switch(type)
	{
		case CONVERT_TIME_TO_SECONDS:
		{
			unix_time %= 60;
		}
		case CONVERT_TIME_TO_MINUTES:
		{
			unix_time = (unix_time / 60) % 60;
		}
		case CONVERT_TIME_TO_HOURS:
		{
			unix_time = (unix_time / 3600) % 24;
		}
		default:
			unix_time %= 60;
	}
	return unix_time;
}

stock CheckPlayerFlood(playerid, bool:inc = true, max_rate = MAX_FLOOD_RATE, rate_inc = FLOOD_RATE_INC, kick_rate = FLOOD_RATE_KICK)
{
	new tick = GetTickCount();
	
	AddPlayerAntiFloodData(playerid, AF_RATE, +, inc ? rate_inc : 0);
	AddPlayerAntiFloodData(playerid, AF_RATE, -, (GetTickCount() - GetPlayerAntiFloodData(playerid, AF_LAST_TICK)));
	SetPlayerAntiFloodData(playerid, AF_LAST_TICK, tick);
	
	if(GetPlayerAntiFloodData(playerid, AF_RATE) < 0)
		SetPlayerAntiFloodData(playerid, AF_RATE, 0);
	
	if(GetPlayerAntiFloodData(playerid, AF_RATE) >= max_rate)
	{
		if(GetPlayerAntiFloodData(playerid, AF_RATE) >= kick_rate)
		{
			Kick(playerid);
		}
		return 1;
	}
	return 0;
}

stock ShowPhoneBookOperation(playerid, operationid, contactid=0)
{
	switch(operationid)
	{
		case PHONE_BOOK_OPERATION_OPTIONS:
		{
			SetPlayerPhoneBookSelectContact(playerid, GetPlayerListitemValue(playerid, contactid));
			
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_OPTION, DIALOG_STYLE_LIST,
				"{FFCD00}¬арианты", 
				"1. ѕозвонить\n"\
				"2. ќтправить SMS сообщение\n"\
				"3. »зменить им€ контакта\n"\
				"4. »зменить номер контакта\n"\
				"5. ”далить контакт",
				"¬ыбрать", "Ќазад"
			);
		}
		case PHONE_BOOK_OPERATION_CALL:
		{
			new number[11]; // TODO
			format(number, sizeof number, "%d", GetPlayerPhoneBook(playerid, contactid, PB_NUMBER));
			cmd::c(playerid, number);
		}
		case PHONE_BOOK_OPERATION_SEND_SMS:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_SEND_SMS, DIALOG_STYLE_INPUT,
				"{FFCD00}ќтправка SMS сообщени€", 
				"{FFFFFF}-\t\t\t¬ведите текст SMS сообщени€:\t\t-", 
				"ќтправить", "Ќазад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NAM:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NAME, DIALOG_STYLE_INPUT, 
				"{FFCD00}»зменение имени контакта", 
				"{FFFFFF}¬ведите новое им€ дл€ контакта:", 
				"»зменить", "Ќазад"
			);
		}
		case PHONE_BOOK_OPERATION_CHANGE_NUM:
		{
			Dialog
			(
				playerid, DIALOG_PHONE_BOOK_CHANGE_NUMBER, DIALOG_STYLE_INPUT, 
				"{FFCD00}»зменение номера контакта", 
				"{FFFFFF}¬ведите новый номер дл€ контакта:",
				"»зменить", "Ќазад"
			);
		}
		case PHONE_BOOK_OPERATION_DELETE_CON:
		{
			if(GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID))
			{
				new query[80];
			
				format(query, sizeof query, "DELETE FROM phone_books WHERE id=%d LIMIT 1", GetPlayerPhoneBook(playerid, contactid, PB_SQL_ID));
				mysql_query(mysql, query, false);
				
				SetPlayerPhoneBookInitStatus(playerid, false);
				SendClientMessage(playerid, 0xFF9030FF, " онтакт удален с пам€ти телефона");
			}
		}
	}
}

stock AddPhoneBookContact(playerid, name[], number[])
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		InitPlayerPhoneBook(playerid);
	}
	if(GetPlayerPhoneBookContacts(playerid) < MAX_PHONE_BOOK_CONTACTS)
	{
		if(!CheckPhoneBookUsedNumber(playerid, number))
		{
			new fmt_str[128];
			SetPlayerPhoneBookInitStatus(playerid, false);
			
			format(fmt_str, sizeof fmt_str, "¬ы добавили %s (тел. %s) в свой список контактов", name, number);
			SendClientMessage(playerid, 0x33FF66FF, fmt_str);
			
			mysql_format(mysql, fmt_str, sizeof fmt_str, "INSERT INTO phone_books (owner_id,name,number,time) VALUES (%d,'%e','%e',%d)", GetPlayerAccountID(playerid), name, number, gettime());
			mysql_query(mysql, fmt_str, false);
		}
	}
	return 1;
}

stock CheckPhoneBookUsedNumber(playerid, number[])
{
	for(new idx, len; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
	{
		if(!GetPlayerPhoneBook(playerid, idx, PB_SQL_ID)) continue;
		
		len = strlen(GetPlayerPhoneBook(playerid, idx, PB_NUMBER));
		if(len && !strcmp(GetPlayerPhoneBook(playerid, idx, PB_NUMBER), number, true))
		{
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "{FFFFFF}Ќомер %s уже записан дл€ контакта %s", number, GetPlayerPhoneBook(playerid, idx, PB_NAME));
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FF6633}ќшибка", fmt_str, "«акрыть", "");
			
			return 1;
		}
	}
	return 0;
}

stock InitPlayerPhoneBook(playerid)
{
	if(!IsPlayerPhoneBookInit(playerid))
	{
		new query[80];
		new Cache: result, rows;
		
		format(query, sizeof query, "SELECT * FROM phone_books WHERE owner_id=%d ORDER BY id DESC LIMIT %d", GetPlayerAccountID(playerid), MAX_PHONE_BOOK_CONTACTS);
		result = mysql_query(mysql, query);
		
		rows = cache_num_rows();
		for(new idx; idx < MAX_PHONE_BOOK_CONTACTS; idx ++)
		{
			if(idx < rows)
			{
				SetPlayerPhoneBook(playerid, idx, PB_SQL_ID, cache_get_row_int(idx, 0));
				
				cache_get_row(idx, 2, g_player_phone_book[playerid][idx][PB_NAME], mysql, 21);
				cache_get_row(idx, 3, g_player_phone_book[playerid][idx][PB_NUMBER], mysql, 9);
				
				SetPlayerPhoneBook(playerid, idx, PB_TIME, cache_get_row_int(idx, 4));
				continue;
			}
			ClearPlayerPhoneBookContact(playerid, idx);
		}
		cache_delete(result);
		
		SetPlayerPhoneBookContacts(playerid, rows);
		SetPlayerPhoneBookInitStatus(playerid, true);
	}
	return 1;
}

stock ClearPlayerPhoneBookContact(playerid, contactid)
{
	SetPlayerPhoneBook(playerid, contactid, PB_SQL_ID, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NAME, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_NUMBER, 	0);
	SetPlayerPhoneBook(playerid, contactid, PB_TIME, 	0);
}

stock GetPlayerIDByPhone(number)
{	
	new playerid = INVALID_PLAYER_ID;
	
	if(100000 <= number <= 9999999)
	{
		foreach(new i : Player)
		{
			if(!IsPlayerLogged(i)) continue;
			if(number != GetPlayerPhone(i)) continue;
			
			playerid = i;
			break;
		}
	}
	return playerid;
}

stock CheckPlayerTempJobState(playerid)
{
	new job = GetPlayerTempJob(playerid);
	new j_state = GetPlayerTempJobState(playerid);
	
	//new s_action = GetPlayerSpecialAction(playerid);
	
	switch(job)
	{
		case TEMP_JOB_LOADER:
		{
			if(j_state == TEMP_JOB_STATE_LOADER_DROP_LOAD)
			{
				SetPlayerTempJobCheckAnim(playerid, false);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_LOAD);
				
				RemovePlayerAttachedObject(playerid, A_OBJECT_SLOT_FOREARM);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0);
				
				SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
				
				DisablePlayerCheckpoint(playerid);
				SetTimerEx("SetPlayerLoaderJobLoadCP", 1000, false, "i", playerid);
				
				SendClientMessage(playerid, 0xFF6600FF, "¬ы уронили груз");
			}
		}
		case TEMP_JOB_MINER:
		{
			if(j_state == TEMP_JOB_STATE_MINER_DROP_LOAD) // || s_action != SPECIAL_ACTION_NONE
			{
				SetPlayerTempJobCheckAnim(playerid, false);
				SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
			
				RemovePlayerAttachedObjects(playerid);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0);
				
				SetPlayerAttachedObject(playerid, A_OBJECT_SLOT_HAND, 18634, A_OBJECT_BONE_RIGHT_HAND, 0.07, 0.03, 0.04, 0.0, 270.0, 270.0, 1.5, 2.1, 1.8, 0);
				
				SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
				SetPlayerMinerJobLoadCP(playerid);
				
				SendClientMessage(playerid, 0xFF6600FF, "¬ы сломали тележку");
			}
		}
		case TEMP_JOB_FACTORY:
		{
			if(j_state == TEMP_JOB_STATE_FACTORY_DROP_P)
			{
				FactoryPlayerDrop(playerid, false);
			}
		}
	}
}

stock ChangePlayerName(playerid, name[], bool: non_rp_nick = false)
{
	new query[128];
	new Cache: result, rows;
	
	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);
	
	rows = cache_num_rows();
	cache_delete(result);
	
	if(3 <= strlen(name) <= 20 && !rows)
	{
		mysql_format(mysql, query, sizeof query, "UPDATE accounts SET name='%e' WHERE id=%d LIMIT 1", name, GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);
		
		if(!mysql_errno())
		{
			mysql_format(mysql, query, sizeof query, "INSERT INTO change_names (owner_id,name,time,ip) VALUES (%d,'%e',%d,'%e')", GetPlayerAccountID(playerid), GetPlayerNameEx(playerid), gettime(), GetPlayerIpEx(playerid));
			mysql_query(mysql, query, false);	
			
			if(non_rp_nick)
				format(query, sizeof query, "%s сменил нон-рп им€ на %s", GetPlayerNameEx(playerid), name);
			
			format(g_player[playerid][P_NAME], 21, "%s", name);
			SetPlayerName(playerid, GetPlayerNameEx(playerid));
			
			SendClientMessageToAll(0xCCFF00FF, query);
			UpdateCharity();
		 
			new buffer;
			if((buffer = GetPlayerFuelStation(playerid)) != -1)
			{
				format(g_fuel_station[buffer][FS_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateFuelStationLabel", "i", buffer);
			}
			if((buffer = GetPlayerBusiness(playerid)) != -1)
			{
				format(g_business[buffer][B_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
				CallLocalFunction("UpdateBusinessLabel", "i", buffer);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOME)) != -1)
			{
				format(g_house[buffer][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_house_renters[buffer][room][HR_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			if((buffer = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL)) != -1)
			{
				new room = GetPlayerData(playerid, P_HOUSE_ROOM);
				format(g_hotel[buffer][room][H_OWNER_NAME], 21, GetPlayerNameEx(playerid), 0);
			}
			return 1;
		}
	}
	return 0;
}

stock SpeedometrLineInit(playerid)
{
	new tick = GetTickCount();
	if((tick - g_speed_line_update[playerid]) > 50)
	{
		if(IsPlayerDriver(playerid) && !IsABike(GetPlayerLastVehicle(playerid)))
		{
			new index = 0;
			new Float: speed = float(GetPlayerSpeed(playerid));
			
			if(speed > 100.0)
				speed = 100.0;
				
			speed /= 3.3;
			index = (sizeof(speedometr_line)-1) - floatround(speed, floatround_ceil);
			
			PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][6], speedometr_line[index]);
			
			PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], speedo_line_color[index]);
			PlayerTextDrawSetString(playerid, speedometr_PTD[playerid][6], speedometr_line[index]);
			PlayerTextDrawShow(playerid, speedometr_PTD[playerid][6]);
		}
		g_speed_line_update[playerid] = tick;
	}
}

stock EndPlayerTempJob(playerid, job, bool:annul = false)
{
	if(GetPlayerTempJob(playerid) == job)
	{
		SetPlayerTempJobCheckAnim(playerid, false);
		
		RemovePlayerAttachedObjects(playerid);
		SetPlayerSkinInit(playerid);
		
		new items = GetPlayerJobLoadItems(playerid);
		new pay_sum = items * GetTempJobInfo(job, TJ_PAY_FOR_LOAD);

		new fmt_str[128];
		switch(job)
		{
			case TEMP_JOB_LOADER:
			{
				DisablePlayerCheckpoint(playerid);
				DisablePlayerRaceCheckpoint(playerid);
				
				TogglePlayerDynamicCP(playerid, help_info_CP, true);
				
				if(!annul)
				{
					new ts_pay = false;
					if(pay_sum > 0)
						format(fmt_str, sizeof fmt_str, ". «аработано {FFFF00}%d руб", pay_sum);
					
					strins(fmt_str, "–абочий день завершен", 0, sizeof fmt_str);
					SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			
					if(ts_pay)
					{
						format(fmt_str, sizeof fmt_str, "%d руб {3399FF}за работу на погрузчике", pay_sum);
						SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
					}
					
					if(pay_sum > 0)
						GivePlayerMoneyEx(playerid, pay_sum, "«арплата на работе грузчика", true, false);
					
					format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
					GameTextForPlayer(playerid, fmt_str, 4000, 1);
				}
				else SendClientMessage(playerid, 0xFF6600FF, "¬ы покинули территорию склада. «аработок был аннулирован");
				
				items = GetPlayerVehicleID(playerid); // в items временно хранитс€ ид авто
				if(GetVehicleData(items, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_LOADER)
				{
					SetVehicleToRespawn(items);
				}
				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_MINER:
			{
				DisablePlayerCheckpoint(playerid);
				
				if(!annul)
				{
					if(items > 0)
					{
						format(fmt_str, sizeof fmt_str, "–абочий день завершен. ¬ы добыли %d кг руды", items);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);
						
						format(fmt_str, sizeof fmt_str, "¬сего заработано %d руб", pay_sum);
						SendClientMessage(playerid, 0x3399FFFF, fmt_str);
						
						GivePlayerMoneyEx(playerid, pay_sum, "«арплата на работе шахтера", true, false);
					
						format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
						GameTextForPlayer(playerid, fmt_str, 4000, 1);
					}
					else SendClientMessage(playerid, 0x3399FFFF, "–абочий день завершен");
				}
				else SendClientMessage(playerid, 0xFF6600FF, "¬ы покинули территорию шахты. «аработок был аннулирован");

				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 1, 0, USE_ANIM_TYPE_NONE);
			}
			case TEMP_JOB_FACTORY:
			{
				pay_sum = GetPlayerJobWage(playerid);
				
				new bad_items = GetPVarInt(playerid, "factory_bad_prods");
				new skill = GetPVarInt(playerid, "factory_skill");
				new waste_sum = bad_items * (random(16) + 5);
				
				if(!annul)
				{
					SendClientMessage(playerid, 0x3399FFFF, "–абочий день завершен");
					if(pay_sum > 0 && waste_sum < pay_sum)
					{
						format(fmt_str, sizeof fmt_str, "¬сего создано {FFFF00}%d {66CC00}продуктов, забракованно {FFFF00}%d шт.", items, bad_items) ;
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);

						if(skill > 0)
						{
							format(fmt_str, sizeof fmt_str, "–абочий навык увеличилс€ {66CCFF}на %d единиц(ы)", skill);
						}
						else fmt_str = "–абочий навык не изменилс€";
						SendClientMessage(playerid, 0x66CC00FF, fmt_str);
						
						format(fmt_str, sizeof fmt_str, "«аработано {00CC00}%d руб, {FFFFFF}из них {FF6600}%d руб {FFFFFF}- штраф за брак продуктов", pay_sum, waste_sum);
						SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);

						pay_sum -= waste_sum;
						format(fmt_str, sizeof fmt_str, "~b~~h~+%d rub", pay_sum);
						GameTextForPlayer(playerid, fmt_str, 4000, 1);
						
						GivePlayerMoneyEx(playerid, pay_sum, "«арплата на работе в цеху (завод)", true, false);
					}
				}
				else SendClientMessage(playerid, 0xFF6600FF, "¬ы покинули территорию завода. ¬ыручка была аннулирована");
				
				skill = GetPlayerData(playerid, P_FACTORY_USE_DESK);
				SetPlayerFactoryDeskUse(playerid, skill, false);
			}
		}
		
		SetPlayerJobLoadItems(playerid, 0);
		SetPlayerData(playerid, P_JOB_WAGE, 0);
		SetPlayerTempJob(playerid, TEMP_JOB_NONE);
	}
}

stock TogglePlayerFactoryCP(playerid, toggle)
{
	for(new idx; idx < sizeof factory_desk; idx ++)
	{
		TogglePlayerDynamicCP(playerid, factory_desk[idx][FD_CHEK_ID], toggle);
	}
}

stock KillEndJobTimer(playerid)
{
	KillTimer(GetPlayerData(playerid, P_END_JOB_TIMER));
	SetPlayerData(playerid, P_END_JOB_TIMER, -1);
}

stock StartEndJobTimer(playerid, time = 15_000)
{
	if(GetPlayerData(playerid, P_END_JOB_TIMER) == -1)
		SetPlayerData(playerid, P_END_JOB_TIMER, SetTimerEx("EndPlayerJob", time, false, "i", playerid));
}

stock ShowPlayerBuyMetalDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_MINER_BUY_METALL, DIALOG_STYLE_INPUT,
		"{FFCD00}ѕокупка металла",
		"{FFFFFF}—колько кг металла вы хотите купить?\n"\
		"{00CC00}÷ена за кг: 15 рублей",
		" упить", "ќтмена"
	);
}

stock SetPlayerMinerJobLoadCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		new rand = random(sizeof miner_job_load_cp);
		
		SetPlayerCheckpoint(playerid, miner_job_load_cp[rand][0], miner_job_load_cp[rand][1], miner_job_load_cp[rand][2], 2.0, CP_ACTION_TYPE_MINER_JOB_TAKE);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_LOAD);
	}
}

stock SetPlayerMinerJobUnLoadCP(playerid)
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_MINER)
	{
		SetPlayerCheckpoint(playerid, 2712.590332, -1551.885620, 1401.908935, 2.0, CP_ACTION_TYPE_MINER_JOB_PUT);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_MINER_UNLOAD);
	}
}

stock SetPlayerLoaderJobUnLoadCP(playerid) // установить чекпоинт где ложить груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		new rand = random(sizeof loader_job_unload_cp);
		
		SetPlayerCheckpoint(playerid, loader_job_unload_cp[rand][0], loader_job_unload_cp[rand][1], loader_job_unload_cp[rand][2], 2.0, CP_ACTION_TYPE_LOADER_JOB_PUT);
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_UNLOAD);
		
		SetPlayerTempJobCheckAnim(playerid, true);
	}
}

public: SetPlayerLoaderJobLoadCP(playerid) // установить чекпоинт где брать груз
{
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		SetPlayerTempJobCheckAnim(playerid, false);
		
		SetPlayerTempJobState(playerid, TEMP_JOB_STATE_LOADER_LOAD);
		SetPlayerCheckpoint(playerid, 528.8989, 1641.3206, 12.5027, 2.0, CP_ACTION_TYPE_LOADER_JOB_TAKE);
	}
}

stock ShowPlayerDrivingTutorial(playerid)
{
	Dialog
	(
		playerid, DIALOG_DRIVING_TUTORIAL_START, DIALOG_STYLE_MSGBOX,
		"{0099FF}¬ведение",
		"{FFFFFF}Ёто пособие поможет вам хорошо подготовитьс€\n"\
		"к экзамену по вождению\n\n"\
		"{CC9900}ƒл€ того, чтобы начать обучение нажмите \"ƒалее\"",
		"ƒалее", "ќтмена"
	);
	return 1;
}

stock ShowDrivingTutorialSection(playerid, step)
{
	if(0 <= step <= sizeof driving_tutorial-1)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_TUTORIAL, DIALOG_STYLE_MSGBOX,
			driving_tutorial[step][DT_TITLE],
			driving_tutorial[step][DT_INFO],
			"ƒалее", "Ќазад"
		);
		SetPVarInt(playerid, "driving_tutorial_step", step);
	}
}

stock ShowPlayerDrivingExam(playerid, step)
{
	if(0 <= step <= sizeof driving_exam - 1)
	{
		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM, DIALOG_STYLE_LIST,
			driving_exam[step][DE_TITLE],
			driving_exam[step][DE_LIST_ITEMS],
			"ќтветить", ""
		);
		SetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP, step);	
	}
	else if(step >= sizeof driving_exam)
	{
		new points = GetPlayerDrivingExamInfo(playerid, DE_POINTS);
		SetPlayerDrivingExamInfo(playerid, DE_EXAM_STEP, 0);
		SetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP, 0);
		
		if(points >= 9)
			SetPlayerData(playerid, P_DRIVING_LIC, 1);
		
		new fmt_str[256];
		format(fmt_str, sizeof fmt_str, "{FFFFFF} оличество правильных ответов: {66CC00}%d\n\n", points);
		
		if(points == 9)
		{
			strcat
			(
				fmt_str, 
				"{6699FF}ѕоздравл€ем!\n"\
				"¬ы набрали минимальное количество баллов, чтобы приступить ко второй части экзамена!"
			);
		}
		else if(points >= 10)
		{
			static const 
				medal_name[3][12] = {"бронзовую", "серебр€нную", "золотую"};
				
			format(fmt_str, sizeof fmt_str, "%s{6699FF}ѕоздравл€ем!\n¬ы получаете %s медаль за теоретическую часть экзамена!", fmt_str, medal_name[points - 10]);
		}
		else
		{
			ClearPlayerDrivingExamInfo(playerid);
			strcat
			(
				fmt_str, 
				"{FF6600}  сожалению вы не набрали необходимого количества баллов\n"\
				"¬ следующий раз внимательно прочитайте обучающий раздел\n"\
				"∆дем вас на пересдаче!"
			);
		}
		
		Dialog
		(
			playerid, DIALOG_DRIVING_EXAM_RESULT, DIALOG_STYLE_MSGBOX,
			"{FFFF00}–езультаты теоретической части", 
			fmt_str,
			"ќк", ""
		);	
	}
	return 1;
}

stock NextDrivingExamRouteCP(playerid)
{
	new step = GetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP);
	
	SetPlayerRaceCheckpoint
	(
		playerid,
		0,
		driving_exam_route[step][0],
		driving_exam_route[step][1],
		driving_exam_route[step][2],
		driving_exam_route[step + 1][0],
		driving_exam_route[step + 1][1],
		driving_exam_route[step + 1][2],
		4.0,
		RCP_ACTION_TYPE_DRIVING_EXAM
	);
	SetPlayerDrivingExamInfo(playerid, DE_ROUTE_STEP, step + 1);
}

stock GetPlayerSpeed(playerid)
{
	new Float: x, Float: y, Float: z;
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	}
	else GetPlayerVelocity(playerid, x, y, z);
	
	return floatround(floatsqroot(x*x+y*y+z*z)*100);
}

stock IsPlayerDriver(playerid) // сидит ли игрок за рулем “—
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER);
}

stock IsPlayerPassenger(playerid) // сидит ли игрок как пассажир
{
	return (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER);
}

stock SpeedometrShowForPlayer(playerid, vehicleid = INVALID_VEHICLE_ID)
{
	TextDrawShowForPlayer(playerid, speedometr_TD[0]);
	TextDrawShowForPlayer(playerid, speedometr_TD[1]);
	
	SpeedometrKeyStatusInit(playerid, vehicleid);
	
	for(new idx; idx < sizeof speedometr_PTD[]; idx ++)
		PlayerTextDrawShow(playerid, speedometr_PTD[playerid][idx]);
}

stock SpeedometrHideForPlayer(playerid)
{
	for(new idx; idx < sizeof speedometr_PTD[]; idx ++)
		PlayerTextDrawHide(playerid, speedometr_PTD[playerid][idx]);
	
	TextDrawHideForPlayer(playerid, speedometr_TD[0]);
	TextDrawHideForPlayer(playerid, speedometr_TD[1]);
}

stock CreateSpeedometrForPlayer(playerid)
{
	speedometr_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 451.200164, 366.613281, "0_~b~~h~~h~~h~:km/h");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][0], 0.354799, 1.764266);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][0], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][0], 1);

	speedometr_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 522.5, 366.613281, "0000000");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][1], 0.273346, 1.764266);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][1], 2);

	speedometr_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 450.400085, 394.986785, "Fuel:_~y~50~n~~w~limit:_~r~off");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][2], 0.313199, 1.663698);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][2], 1);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][2], 59);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][2], 1);

	speedometr_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 517.5, 393.653259, "E__L__B");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][3], 0.437357, 2.124531);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][3], 1);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][3], 59);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][3], 1);

	speedometr_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 543.068115, 410.499603, "~r~close");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][4], 0.309199, 1.659733);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][4], 1);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][4], 1);

	speedometr_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 567.199645, 387.427215, "~y~.");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][5], 1.000398, 4.579195);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][5], 0xCECECEFF);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][5], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][5], 1);
	
	speedometr_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 450.400115, 378.560241, "_");
	PlayerTextDrawLetterSize(playerid, speedometr_PTD[playerid][6], 0.463600, 2.100265);
	PlayerTextDrawAlignment(playerid, speedometr_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, speedometr_PTD[playerid][6], 0xFF9933AA);
	PlayerTextDrawSetShadow(playerid, speedometr_PTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, speedometr_PTD[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, speedometr_PTD[playerid][6], 51);
	PlayerTextDrawFont(playerid, speedometr_PTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, speedometr_PTD[playerid][6], 1);
}

stock CreateAutoMarketForPlayer(playerid)
{
	buy_menu_PTD[playerid] = CreatePlayerTextDraw(playerid, 317.600006, 347.199920, "---");
	PlayerTextDrawLetterSize(playerid, buy_menu_PTD[playerid], 0.346798, 1.861333);
	PlayerTextDrawAlignment(playerid, buy_menu_PTD[playerid], 2);
	PlayerTextDrawColor(playerid, buy_menu_PTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, buy_menu_PTD[playerid], 1);
	PlayerTextDrawSetOutline(playerid, buy_menu_PTD[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, buy_menu_PTD[playerid], 51);
	PlayerTextDrawFont(playerid, buy_menu_PTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, buy_menu_PTD[playerid], 1);

	buy_car_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 454.400146, 120.213172, "ABПO #0");
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][0], 0.593998, 2.406393);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][0], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][0], 1);

	buy_car_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 536.799865, 145.599868, "~b~~h~ЙEмA: 0 P~n~МPOАEВ: 0 km~n~~b~~h~CKOPOCПТ: 0 km/h~n~KЗACC: -");
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][1], 0.365597, 1.764965);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][1], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][1], 1);

	buy_car_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 521.0, 226.916687, "ЙBEП  ");
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][2], 521.0 + 30.0, 7.0);	 // ----------------------
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][2], 0.180999, 0.975832);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][2], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][2], true);

	buy_car_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 475.5, 239.4, "_");
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][3], 475.5 + 36.5, 34.0);
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][3], 1.0, 4.1);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, buy_car_PTD[playerid][3], true);
	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][3], 255);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][3], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][3], true);

	buy_car_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 516.5, 239.4, "_");
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][4], 516.5 + 36.5, 34.0);
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][4], 1.0, 4.1); // 4.108332);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, buy_car_PTD[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][4], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][4], 1);

	// ------
	
	buy_car_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 557.5, 239.4, "_");
	PlayerTextDrawTextSize(playerid, buy_car_PTD[playerid][5], 557.5 + 36.5, 34.0);
	PlayerTextDrawLetterSize(playerid, buy_car_PTD[playerid][5], 1.0, 4.1);
	PlayerTextDrawAlignment(playerid, buy_car_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, buy_car_PTD[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, buy_car_PTD[playerid][5], true);
	PlayerTextDrawBoxColor(playerid, buy_car_PTD[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, buy_car_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, buy_car_PTD[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, buy_car_PTD[playerid][5], 51);
	PlayerTextDrawFont(playerid, buy_car_PTD[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, buy_car_PTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, buy_car_PTD[playerid][5], true);
}

stock SendMessageInChat(playerid, text[], Float: radius = 30.0)
{
	new Float: dist, type;
	new Float: x, Float: y, Float: z;
	
	GetPlayerPos(playerid, x, y, z);
	SetPlayerChatBubble(playerid, text, 0x00CCFFFF, 30.0, 8000);

	ChatMessageInit(playerid, text);
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		dist = GetPlayerDistanceFromPoint(idx, x, y, z);
		
		if(dist > radius) continue;
		type = GetPlayerChatType(idx);
		
		switch(GetPlayerSettingData(idx, S_CHAT_TYPE))
		{
			case SETTING_CHAT_ADVANCE:
			{
				if(dist < (radius / 4))
				{		
					SendClientMessage(idx, 0xCECECEFF, chat_message[type]); 
				}	
				else if(dist < (radius / 2))
				{
					SendClientMessage(idx, 0x999999FF, chat_message[type]); 
				}
				else
				{
					SendClientMessage(idx, 0x6B6B6BFF, chat_message[type]);
				}
			}
			case SETTING_CHAT_STANDART:
			{
				if(GetPlayerSettingData(idx, S_NICK_IN_CHAT))
				{
					SendPlayerMessageToPlayer(idx, playerid, chat_message[type]);
				}
				else SendClientMessage(idx, 0xCECECEFF, text);
			}
			default: continue;
		}
	}
	if(!IsPlayerDriver(playerid))
	{
		if(GetPlayerData(playerid, P_USE_ANIM_TYPE) == USE_ANIM_TYPE_NONE)
		{
			ApplyAnimationEx(playerid, "PED", "IDLE_chat", 4.100, 0, 1, 1, 1, 1, 0, USE_ANIM_TYPE_CHAT);
			SetTimerEx("ClearPlayerChatAnim", 3500, false, "i", playerid);
		}
	}
	return 1;
}

stock ChatMessageInit(playerid, text[])
{
	format(chat_message[0], 129, "- %s {%06x}(%s)[%d]", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid), playerid);
	format(chat_message[1], 129, "- %s {%06x}(%s)", text, GetPlayerColorEx(playerid) >>> 8, GetPlayerNameEx(playerid));
	format(chat_message[2], 129, "- %s", text);
	
	format(chat_message[3], 129, "(%d): %s", playerid, text);
	format(chat_message[4], 129, "%s", text);
}

stock SetPlayerChatInit(playerid)
{
	new type = 0;
	switch(GetPlayerSettingData(playerid, S_CHAT_TYPE))
	{
		case SETTING_CHAT_ADVANCE:
		{
			if(GetPlayerSettingData(playerid, S_NICK_IN_CHAT) == SETTING_TYPE_ON)
			{
				if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
				{
					type = 0;
				}
				else type = 1;
			}
			else type = 2;
		}
		case SETTING_CHAT_STANDART:
		{
			if(GetPlayerSettingData(playerid, S_ID_IN_CHAT) == SETTING_TYPE_ON)
			{
				type = 3;
			}
			else type = 4;
		}
		default: type = 0;
	}
	SetPlayerChatType(playerid, type);
}

stock SetPlayerSpawnInit(playerid)
{
	new spawn_id;
	if(GetPlayerLevel(playerid) >= 10)
		spawn_id = 3;
	else if(GetPlayerLevel(playerid) >= 5)
		spawn_id = 2;
	else if(GetPlayerLevel(playerid) >= 3)
		spawn_id = 1;
	else spawn_id = 0;

	SetSpawnInfo
	(
		playerid, 
		0,
		GetPlayerSkinEx(playerid),
		spawn_pos_data[spawn_id][0] + random(3),
		spawn_pos_data[spawn_id][1] + random(3), 
		spawn_pos_data[spawn_id][2],
		spawn_pos_data[spawn_id][3],
		0, 0, 0, 0, 0, 0
	);
	return 1;
}

stock SetPlayerSpawnPos(playerid)
{
	if(GetPlayerData(playerid, P_HOSPITAL))
	{
		SetPlayerPosEx
		(
			playerid,
			1123.4766 + random(2),
			-22.7675 + random(2),
			1011.1254,
			270.3625,
			1, 5
		);
	}
	else
	{
		switch(GetPlayerSpawnSetting(playerid))
		{
			case 1:
			{
				if(GetPlayerHouse(playerid, HOUSE_TYPE_HOME) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				EnterPlayerToHouse(playerid, GetPlayerHouse(playerid, HOUSE_TYPE_HOME));
			}
			case 2:
			{
				if(GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				new hotel_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL),
					room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
				
				EnterPlayerToHotelRoom(playerid, hotel_id, room_id);
			}
			case 3:
			{
				new team_id = GetPlayerTeamEx(playerid);

				if(!team_id)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				SetPlayerPosEx
				(
					playerid,
					GetTeamData(team_id, O_SPAWN)[0],
					GetTeamData(team_id, O_SPAWN)[1],
					GetTeamData(team_id, O_SPAWN)[2],
					GetTeamData(team_id, O_SPAWN)[3],
					GetTeamData(team_id, O_SPAWN_INT),
					GetTeamData(team_id, O_SPAWN_VW)
				);
			}
			case 4:
			{
				if(GetPlayerHouse(playerid, HOUSE_TYPE_ROOM) == -1)
				{
					SetPlayerSpawnSetting(playerid, 0);
					UpdatePlayerDatabaseInt(playerid, "setting_spawn", 0);

					return 1;
				}

				EnterPlayerToHouse(playerid, GetPlayerHouse(playerid, HOUSE_TYPE_ROOM));
			}
		}
	}

	return 1;
}

stock SetPlayerInit(playerid)
{
	SetPlayerLevelInit(playerid);
	SetPlayerColorInit(playerid);
	SetPlayerSuspectInit(playerid);
	SetPlayerSkinInit(playerid);
	SetPlayerChatInit(playerid);
	SetPlayerMoneyInit(playerid);

	CreateTeleportObjects(playerid);
	CreateSpeedometrForPlayer(playerid);
	CreateAutoMarketForPlayer(playerid);
	
	SetPlayerLogged(playerid, true);
}

stock GetPlayerSkinEx(playerid)
{
	if(1 <= GetPlayerTeamEx(playerid) <= 10)
		return GetPlayerData(playerid, P_OSKIN);
	else
		return GetPlayerData(playerid, P_SKIN);
}

stock PreLoadPlayerAnims(playerid)
{
	for(new idx; idx < sizeof g_anim_libs; idx ++)
	{
		PreloadAnimLib(playerid, g_anim_libs[idx]);
	}
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0, 0);
}

stock SetPlayerMoneyInit(playerid)
{
	ResetPlayerMoney(playerid);
	return GivePlayerMoney(playerid, GetPlayerMoneyEx(playerid));
}

stock SetPlayerColorInit(playerid)
{
	return SetPlayerColorEx(playerid, GetPlayerTeamColor(playerid));
}

stock SetPlayerColorEx(playerid, color)
{
	SetPlayerData(playerid, P_COLOR, color);
	return SetPlayerColor(playerid, color);
}

stock SetPlayerHealthEx(playerid, Float: health, bool: inc_health = false)
{
	if(inc_health)
	{
		AddPlayerData(playerid, P_HEALTH, +, health);
	}
	else SetPlayerData(playerid, P_HEALTH, health);
	
	if(GetPlayerData(playerid, P_HEALTH) > 100.0)
		SetPlayerData(playerid, P_HEALTH, 100.0);
	
	return SetPlayerHealth(playerid, GetPlayerData(playerid, P_HEALTH));
}

stock GetPlayerTeamColor(playerid)
{
	return team_colors[GetPlayerTeamEx(playerid)];
}

stock SetPlayerSuspectInit(playerid)
{
	return SetPlayerWantedLevel(playerid, GetPlayerSuspect(playerid));
}

stock SetPlayerSkinInit(playerid)
{
	return SetPlayerSkin(playerid, GetPlayerSkinEx(playerid));
}

stock SetPlayerLevelInit(playerid)
{
	return SetPlayerScore(playerid, GetPlayerLevel(playerid));
}

stock SetPlayerSkillsInit(playerid)
{
	SetPlayerSkillLevel(playerid, 0, GetPlayerData(playerid, P_SKILL_COLT) * 10);
	SetPlayerSkillLevel(playerid, 1, GetPlayerData(playerid, P_SKILL_SDPISTOL) * 10);
	SetPlayerSkillLevel(playerid, 2, GetPlayerData(playerid, P_SKILL_DEAGLE) * 10);
	SetPlayerSkillLevel(playerid, 3, GetPlayerData(playerid, P_SKILL_SHOTGUN) * 10);
	SetPlayerSkillLevel(playerid, 4, GetPlayerData(playerid, P_SKILL_SAWNOFF) * 10);
	SetPlayerSkillLevel(playerid, 5, GetPlayerData(playerid, P_SKILL_COMBAT_SG) * 10);
	SetPlayerSkillLevel(playerid, 6, GetPlayerData(playerid, P_SKILL_MICRO_UZI) * 10);
	SetPlayerSkillLevel(playerid, 7, GetPlayerData(playerid, P_SKILL_MP5) * 10);
	SetPlayerSkillLevel(playerid, 8, GetPlayerData(playerid, P_SKILL_AK47) * 10);
	SetPlayerSkillLevel(playerid, 9, GetPlayerData(playerid, P_SKILL_M4) * 10);
	SetPlayerSkillLevel(playerid, 10, GetPlayerData(playerid, P_SKILL_SNIPER_RIFLE) * 10);

	return 1;
}

stock SetPlayerSelectSkin(playerid, select_skin, skinid)
{
	SetPlayerData(playerid, P_SELECT_SKIN, select_skin);
	SetPlayerSkin(playerid, skinid);
}

stock SetPlayerPosEx(playerid, Float: x, Float: y, Float: z, Float: angle, interior = -1, virtual_world = -1)
{
	if(interior > 0)
		PlayerTeleportInit(playerid, x, y,  z, angle);

	SetPlayerPos(playerid, x, y, z);
	SetPlayerFacingAngle(playerid, angle);
	SetCameraBehindPlayer(playerid);
	
	if(interior != -1 && GetPlayerInterior(playerid) != interior)
	{
		SetPlayerInterior(playerid, interior);
	}
	if(virtual_world != -1 && GetPlayerVirtualWorld(playerid) != virtual_world)
	{
		SetPlayerVirtualWorld(playerid, virtual_world);
	}
	return 1;
}

stock UpdatePlayerDatabaseInt(playerid, field[], value)
{
	if(!IsPlayerConnected(playerid)) return 1;
	
	new query[90];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %s=%d WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);
	
	return 1;
}

stock UpdatePlayerDatabaseFloat(playerid, field[], Float:value)
{
	if(!IsPlayerConnected(playerid)) return 1;
	
	new query[90];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %s=%f WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);
	
	return 1;
}

stock UpdatePlayerDatabaseString(playerid, field[], value[])
{
	if(!IsPlayerConnected(playerid)) return 1;
	
	new query[90];

	mysql_format(mysql, query, sizeof query, "UPDATE accounts SET %s=%s WHERE id=%d LIMIT 1", field, value, GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);
	
	return 1;
}

stock FixKick(playerid, message[] = "¬ведите /q (/quit) чтобы выйти", time_ms = 500)
{
	if(strlen(message) > 1)
		SendClientMessage(playerid, 0xFF6600FF, message);
	
	SetTimerEx("FixedKick", time_ms, false, "i", playerid);
	
	return 1;
}

stock ClearPlayerInfo(playerid)
{
	g_player[playerid] = g_player_default_values;
	g_player_gps[playerid] = g_gps_default_values;
	g_player_setting[playerid] = g_settings_default_values;
	g_player_driving_exam[playerid] = g_driving_exam_default_values;
	
	g_pickup_flood[playerid] = 0;
	g_speed_line_update[playerid] = -1;
	g_teleport_object[playerid] = {-1, -1};
	
	price_select_TD[playerid] = PlayerText:{-1, -1}; 
	
	SetPlayerPhoneBookInitStatus(playerid, false);
	SetPlayerPhoneBookContacts(playerid, 0);

	ClearPlayerOffer(playerid);
	ClearPlayerListitemValues(playerid);
	ClearPlayerPhoneCall(playerid);
	
	AntiFloodPlayerInit(playerid);
	// ClearBankAccountsData(playerid);
	
	DestroyTeleportObjects(playerid);

	SetPlayerSpectateData(playerid, S_PLAYER, -1);
	
	#if defined _SYSTEM_CP
	ClearPlayerCPInfo(playerid);
	#endif
	
	#if defined _SYSTEM_RACE_CP
	ClearPlayerRCPInfo(playerid);
	#endif
	
	SetPlayerPinCodeState(playerid, PIN_CODE_STATE_NONE);
	
	mysql_race[playerid] ++;
}

stock CreatePlayerAccount(playerid)
{
	new query[256];
	new Cache: result;
	
	new time = gettime();
	
	SetPlayerData(playerid, P_REG_TIME, time);
	SetPlayerData(playerid, P_LAST_LOGIN_TIME, time);
	
	format(g_player[playerid][P_REG_IP], 16, "%s", GetPlayerIpEx(playerid));
	format(g_player[playerid][P_LAST_IP], 16, "%s", GetPlayerIpEx(playerid));
	
	mysql_format
	(
		mysql, query, sizeof query,
		"INSERT INTO accounts "\
			"(name,password,email,refer,sex,reg_time,reg_ip,last_ip,last_login) "\
			"VALUES "\
			"('%e','%e','%e',%d,%d,%d,'%e','%e',%d)",
		GetPlayerNameEx(playerid),
		GetPlayerData(playerid, P_PASSWORD),
		GetPlayerData(playerid, P_EMAIL),
		GetPlayerData(playerid, P_REFER),
		GetPlayerData(playerid, P_SEX),
		GetPlayerData(playerid, P_REG_TIME),
		GetPlayerData(playerid, P_REG_IP),
		GetPlayerData(playerid, P_LAST_IP),
		GetPlayerData(playerid, P_LAST_LOGIN_TIME)
	);
	result = mysql_query(mysql, query);
	
	SetPlayerData(playerid, P_ACCOUNT_ID, cache_insert_id());
	cache_delete(result);
	
	return GetPlayerAccountID(playerid);
}

stock CreateTextDraws()
{
	/*
	server_logo_TD = TextDrawCreate(545.000, 4.000, ""Advance_RP");
	TextDrawLetterSize(server_logo_TD, 0.33, 1.5);
	TextDrawBackgroundColor(server_logo_TD, 0x000000FF);
	TextDrawColor(server_logo_TD, 0x3399FFFF);
	TextDrawFont(server_logo_TD, 1);
	TextDrawSetOutline(server_logo_TD, 1);
	
	server_logo_TD[0] = TextDrawCreate(545.827331, 6.999959, "ONLINE");
	TextDrawLetterSize(server_logo_TD[0], 0.584932, 1.763334);
	TextDrawAlignment(server_logo_TD[0], 1);
	TextDrawColor(server_logo_TD[0], -1);
	TextDrawSetShadow(server_logo_TD[0], 1);
	TextDrawSetOutline(server_logo_TD[0], 0);
	TextDrawBackgroundColor(server_logo_TD[0], 60);
	TextDrawFont(server_logo_TD[0], 1);
	TextDrawSetProportional(server_logo_TD[0], 1);

	server_logo_TD[1] = TextDrawCreate(554.260681, 19.833353, "roleplay");
	TextDrawLetterSize(server_logo_TD[1], 0.236821, 1.115833);
	TextDrawAlignment(server_logo_TD[1], 1);
	TextDrawColor(server_logo_TD[1], -1);
	TextDrawSetShadow(server_logo_TD[1], 1);
	TextDrawSetOutline(server_logo_TD[1], 0);
	TextDrawBackgroundColor(server_logo_TD[1], 60);
	TextDrawFont(server_logo_TD[1], 2);
	TextDrawSetProportional(server_logo_TD[1], 1);
	
	*/
	
	server_logo_TD = TextDrawCreate(554.0, 3.0, "GREAT ROLEPLAY");
	TextDrawLetterSize(server_logo_TD, 0.4, 1.6); // 0.44, 1.6
	TextDrawAlignment(server_logo_TD, 2);
	TextDrawColor(server_logo_TD, -1);
	TextDrawSetShadow(server_logo_TD, 1);
	//TextDrawSetOutline(server_logo_TD, -1);
	TextDrawBackgroundColor(server_logo_TD, 61);
	TextDrawFont(server_logo_TD, 1);
	TextDrawSetProportional(server_logo_TD, 1);
	
	
	gps_TD = TextDrawCreate(70.000, 320.000, "GPS_On");
	TextDrawLetterSize(gps_TD, 0.300, 1.300);
	TextDrawAlignment(gps_TD, 1);
	TextDrawBackgroundColor(gps_TD, 0x000000FF);
	TextDrawColor(gps_TD, 0x66CC00FF);
	TextDrawFont(gps_TD, 1);
	TextDrawSetOutline(gps_TD, 1);
	TextDrawSetProportional(gps_TD, 1);
	TextDrawSetShadow(gps_TD, 2);

	anim_TD = TextDrawCreate(630.000, 430.000, "~k~~PED_SPRINT~_~w~to_stop_the_animation");
	TextDrawLetterSize(anim_TD, 0.300, 1.100);
	TextDrawAlignment(anim_TD, 3);
	TextDrawBackgroundColor(anim_TD, 0x000000FF);
	TextDrawColor(anim_TD, 0x00CC00FF);
	TextDrawFont(anim_TD, 2);
	TextDrawSetOutline(anim_TD, 1);
	TextDrawSetProportional(anim_TD, 1);
	TextDrawSetShadow(anim_TD, 2);

	
	speedometr_TD[0] = TextDrawCreate(580.399902, 368.113159, "_");
	TextDrawLetterSize(speedometr_TD[0], 0.000000, 6.320374);
	TextDrawTextSize(speedometr_TD[0], 445.474060, 0.000000);
	TextDrawAlignment(speedometr_TD[0], 1);
	TextDrawColor(speedometr_TD[0], -1);
	TextDrawUseBox(speedometr_TD[0], true);
	TextDrawBoxColor(speedometr_TD[0], 132);
	TextDrawSetShadow(speedometr_TD[0], 0);
	TextDrawSetOutline(speedometr_TD[0], -55);
	TextDrawFont(speedometr_TD[0], 0);

	speedometr_TD[1] = TextDrawCreate(450.400115, 378.560241, "IIIIIIIIIIIIIIIIIIIIIIIIIIIIII");
	TextDrawLetterSize(speedometr_TD[1], 0.463600, 2.100265);
	TextDrawAlignment(speedometr_TD[1], 1);
	TextDrawColor(speedometr_TD[1], -2139062017);
	TextDrawSetShadow(speedometr_TD[1], 0);
	TextDrawSetOutline(speedometr_TD[1], 0);
	TextDrawBackgroundColor(speedometr_TD[1], 51);
	TextDrawFont(speedometr_TD[1], 2);
	TextDrawSetProportional(speedometr_TD[1], 1);

	wait_panel_TD[0] = TextDrawCreate(405.000000, 182.333358, "usebox");
	TextDrawLetterSize(wait_panel_TD[0], 0.000000, 8.433333);
	TextDrawTextSize(wait_panel_TD[0], 236.000000, 0.000000);
	TextDrawAlignment(wait_panel_TD[0], 1);
	TextDrawColor(wait_panel_TD[0], 0);
	TextDrawUseBox(wait_panel_TD[0], true);
	TextDrawBoxColor(wait_panel_TD[0], 102);
	TextDrawSetShadow(wait_panel_TD[0], 0);
	TextDrawSetOutline(wait_panel_TD[0], 0);
	TextDrawFont(wait_panel_TD[0], 0);

	wait_panel_TD[1] = TextDrawCreate(251.500000, 186.666549, "Please wait...");
	TextDrawLetterSize(wait_panel_TD[1], 0.792499, 2.270833);
	TextDrawAlignment(wait_panel_TD[1], 1);
	TextDrawColor(wait_panel_TD[1], -1);
	TextDrawSetShadow(wait_panel_TD[1], 0);
	TextDrawSetOutline(wait_panel_TD[1], 1);
	TextDrawBackgroundColor(wait_panel_TD[1], 51);
	TextDrawFont(wait_panel_TD[1], 0);
	TextDrawSetProportional(wait_panel_TD[1], 1);
	
	wait_panel_TD[2] = TextDrawCreate(320.000000, 239.749984, "great rp~n~great-roleplay.ru");
	TextDrawLetterSize(wait_panel_TD[2], 0.150500, 0.905833);
	TextDrawAlignment(wait_panel_TD[2], 2);
	TextDrawColor(wait_panel_TD[2], -1);
	TextDrawSetShadow(wait_panel_TD[2], 0);
	TextDrawSetOutline(wait_panel_TD[2], 1);
	TextDrawBackgroundColor(wait_panel_TD[2], 51);
	TextDrawFont(wait_panel_TD[2], 2);
	TextDrawSetProportional(wait_panel_TD[2], 1);	
	
	wait_panel_TD[3] = TextDrawCreate(305.0, 205.0, "ld_grav:timer");
	TextDrawLetterSize(wait_panel_TD[3], 0.0, 0.0);
	TextDrawTextSize(wait_panel_TD[3], 30.0, 30.0);
	TextDrawAlignment(wait_panel_TD[3], 1);
	TextDrawColor(wait_panel_TD[3], -1);
	TextDrawSetShadow(wait_panel_TD[3], 0);
	TextDrawSetOutline(wait_panel_TD[3], 0);
	TextDrawBackgroundColor(wait_panel_TD[3], 0x0);
	TextDrawFont(wait_panel_TD[3], 4);
	
	
	select_TD[0] = TextDrawCreate(227.000, 386.000, "Select-BOX");
	TextDrawLetterSize(select_TD[0], 0.500, 2.000);
	TextDrawTextSize(select_TD[0], 315.000, 20.000);
	TextDrawAlignment(select_TD[0], 1);
	TextDrawBoxColor(select_TD[0], 0x32CD3270);
	TextDrawColor(select_TD[0], 0xFFFFFFFF);
	TextDrawFont(select_TD[0], 5);
	TextDrawSetOutline(select_TD[0], 0);
	TextDrawSetProportional(select_TD[0], 1);
	TextDrawSetShadow(select_TD[0], 1);
	TextDrawUseBox(select_TD[0], 1);
	TextDrawSetSelectable(select_TD[0], true);

	select_TD[1] = TextDrawCreate(415.000, 386.700, "right");
	TextDrawLetterSize(select_TD[1], 0.500, 1.800);
	TextDrawTextSize(select_TD[1], 435.000, 18.000);
	TextDrawAlignment(select_TD[1], 1);
	TextDrawBoxColor(select_TD[1], 0x00000060);
	TextDrawColor(select_TD[1], 0xFFFFFFFF);
	TextDrawFont(select_TD[1], 5);
	TextDrawSetOutline(select_TD[1], 0);
	TextDrawSetProportional(select_TD[1], 1);
	TextDrawSetShadow(select_TD[1], 1);
	TextDrawUseBox(select_TD[1], 1);
	TextDrawSetSelectable(select_TD[1], true);

	select_TD[2] = TextDrawCreate(200.000, 386.700, "left");
	TextDrawLetterSize(select_TD[2], 0.500, 1.800);
	TextDrawTextSize(select_TD[2], 220.000, 18.000);
	TextDrawAlignment(select_TD[2], 1);
	TextDrawBoxColor(select_TD[2], 0x00000060);
	TextDrawColor(select_TD[2], 0xFFFFFFFF);
	TextDrawFont(select_TD[2], 5);
	TextDrawSetOutline(select_TD[2], 0);
	TextDrawSetProportional(select_TD[2], 1);
	TextDrawSetShadow(select_TD[2], 1);
	TextDrawUseBox(select_TD[2], 1);
	TextDrawSetSelectable(select_TD[2], true);

	select_TD[3] = TextDrawCreate(321.000, 386.000, "Close-BOX");
	TextDrawLetterSize(select_TD[3], 0.500, 2.000);
	TextDrawTextSize(select_TD[3], 409.000, 20.000);
	TextDrawAlignment(select_TD[3], 1);
	TextDrawBoxColor(select_TD[3], 0xEE2C2C70);
	TextDrawFont(select_TD[3], 5);
	TextDrawSetOutline(select_TD[3], 0);
	TextDrawSetProportional(select_TD[3], 1);
	TextDrawSetShadow(select_TD[3], 1);
	TextDrawUseBox(select_TD[3], 1);
	TextDrawSetSelectable(select_TD[3], true);
	
	select_TD[4] = TextDrawCreate(246.000, 392.000, "Select");
	TextDrawLetterSize(select_TD[4], 0.320, 0.800);
	TextDrawAlignment(select_TD[4], 1);
	TextDrawBackgroundColor(select_TD[4], 0xFF000000); // FF000000
	TextDrawColor(select_TD[4], 0xFFFFFFFF); // FFFFFFFF
	TextDrawFont(select_TD[4], 2);
	TextDrawSetOutline(select_TD[4], 0);
	TextDrawSetProportional(select_TD[4], 1);
	TextDrawSetShadow(select_TD[4], 0);
	TextDrawUseBox(select_TD[4], 0);

	select_TD[5] = TextDrawCreate(421.000, 390.000, ">");
	TextDrawLetterSize(select_TD[5], 0.320, 1.300);
	TextDrawAlignment(select_TD[5], 1);
	TextDrawBackgroundColor(select_TD[5], 0xFF000000); // FF000000
	TextDrawColor(select_TD[5], 0xFFFFFFFF); // FFFFFFFF
	TextDrawFont(select_TD[5], 2);
	TextDrawSetOutline(select_TD[5], 0);
	TextDrawSetProportional(select_TD[5], 1);
	TextDrawSetShadow(select_TD[5], 0);

	select_TD[6] = TextDrawCreate(205.000, 390.000, "<");
	TextDrawLetterSize(select_TD[6], 0.320, 1.300);
	TextDrawAlignment(select_TD[6], 1);
	TextDrawBackgroundColor(select_TD[6], 0xFF000000);
	TextDrawColor(select_TD[6], 0xFFFFFFFF);
	TextDrawFont(select_TD[6], 2);
	TextDrawSetOutline(select_TD[6], 0);
	TextDrawSetProportional(select_TD[6], 1);
	TextDrawSetShadow(select_TD[6], 0);

	select_TD[7] = TextDrawCreate(345.000, 392.000, "Close");
	TextDrawLetterSize(select_TD[7], 0.320, 0.800);
	TextDrawAlignment(select_TD[7], 1);
	TextDrawBackgroundColor(select_TD[7], 0xFF000000);
	TextDrawColor(select_TD[7], 0xFFFFFFFF); 
	TextDrawFont(select_TD[7], 2);
	TextDrawSetOutline(select_TD[7], 0);
	TextDrawSetProportional(select_TD[7], 1);
	TextDrawSetShadow(select_TD[7], 0);

	buy_car_TD[0] = TextDrawCreate(626.000000, 134.406661, "usebox");
	TextDrawLetterSize(buy_car_TD[0], 0.110399, 9.810622);
	TextDrawTextSize(buy_car_TD[0], 442.000000, 0.000000);
	TextDrawAlignment(buy_car_TD[0], 1);
	TextDrawColor(buy_car_TD[0], 0);
	TextDrawUseBox(buy_car_TD[0], true);
	TextDrawBoxColor(buy_car_TD[0], 102);
	TextDrawSetShadow(buy_car_TD[0], 0);
	TextDrawSetOutline(buy_car_TD[0], 0);
	TextDrawFont(buy_car_TD[0], 0);

	buy_car_TD[1] = TextDrawCreate(626.000000, 226.406677, "usebox");
	TextDrawLetterSize(buy_car_TD[1], 0.110399, 6.765620);
	TextDrawTextSize(buy_car_TD[1], 442.000000, 0.000000);
	TextDrawAlignment(buy_car_TD[1], 1);
	TextDrawColor(buy_car_TD[1], 0);
	TextDrawUseBox(buy_car_TD[1], true);
	TextDrawBoxColor(buy_car_TD[1], 102);
	TextDrawSetShadow(buy_car_TD[1], 0);
	TextDrawSetOutline(buy_car_TD[1], 0);
	TextDrawFont(buy_car_TD[1], 0);	
	
	print("[TextDraw]: ¬се текстдравы созданы");
}

stock CreateMenus()
{
	admin_spec_menu = CreateMenu(" ", 1, 550.0, 130.0, 50.0);
    AddMenuItem(admin_spec_menu, 0, "-EXIT-");
    AddMenuItem(admin_spec_menu, 0, "Update");
    AddMenuItem(admin_spec_menu, 0, "Stats");
    AddMenuItem(admin_spec_menu, 0, "Skick");
    AddMenuItem(admin_spec_menu, 0, "Mute");
    AddMenuItem(admin_spec_menu, 0, "Slap");
    AddMenuItem(admin_spec_menu, 0, "GMTest");
    AddMenuItem(admin_spec_menu, 0, "Info");
    AddMenuItem(admin_spec_menu, 0, "-EXIT-");


	/*
	reg_select_skin_menu = CreateMenu("Skin", 1, 150.0, 250.0, 60.0, 60.0);
	AddMenuItem(reg_select_skin_menu, 0, "Next >>");
    AddMenuItem(reg_select_skin_menu, 0, "<< Prev");
    AddMenuItem(reg_select_skin_menu, 0, "OK");
	*/

	print("[Menu]: ¬се меню созданы");
}

stock CreateVehicles()
{
	new spawn_time = 60 * 5; // 5 минут
	
	// --------------- јвтобусы
	AddStaticVehicleEx(418,758.8998,723.5314,12.2439,248.7655,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 1
	AddStaticVehicleEx(418,757.3745,719.7014,12.1885,249.3062,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 2
	AddStaticVehicleEx(418,755.6907,715.4114,12.1333,248.9229,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 3
	AddStaticVehicleEx(418,754.1324,711.1880,12.0992,249.3299,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 4
	AddStaticVehicleEx(418,752.6511,707.2150,12.0903,248.8002,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 5
	AddStaticVehicleEx(418,750.8207,702.5714,12.0930,248.1884,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 6
	AddStaticVehicleEx(418,749.1871,698.3358,12.0932,249.0095,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 7
	AddStaticVehicleEx(418,747.5515,694.0026,12.0930,249.3973,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 8
	AddStaticVehicleEx(418,745.9255,689.8022,12.0931,249.8988,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 9
	AddStaticVehicleEx(418,744.3026,685.6509,12.0931,249.3905,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 10
	AddStaticVehicleEx(418,742.6512,681.3754,12.0930,249.4450,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 11
	AddStaticVehicleEx(418,741.0107,677.0425,12.0931,249.4603,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 12
	AddStaticVehicleEx(418,739.3386,672.7777,12.0929,249.4026,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 13
	AddStaticVehicleEx(418,737.7796,668.5155,12.0930,249.2589,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 14
	AddStaticVehicleEx(418,736.0520,663.8519,12.0930,250.1295,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 15
	AddStaticVehicleEx(418,734.3118,659.4240,12.0928,249.0372,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 16
	AddStaticVehicleEx(418,732.4960,654.7409,12.0930,249.3797,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 17
	AddStaticVehicleEx(418,730.8508,650.4247,12.0930,249.0664,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 18
	AddStaticVehicleEx(418,729.2156,645.9833,12.0930,249.3153,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 19
	AddStaticVehicleEx(418,727.4211,641.1423,12.0930,249.6270,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_BUS_DRIVER); // ћаршрутка 20
	
	// --------------- “акси
	AddStaticVehicleEx(438,501.6323,1757.9569,11.8938,176.2031,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // ∆/ƒ вокзал, такси 1
	AddStaticVehicleEx(438,505.0952,1757.6876,11.8931,175.8430,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // ∆/ƒ вокзал, такси 2
	AddStaticVehicleEx(420,508.3364,1757.6006,11.8818,175.8649,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // ∆/ƒ вокзал, такси 3
	AddStaticVehicleEx(420,511.7741,1757.2988,11.8811,176.4038,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // ∆/ƒ вокзал, такси 4
	AddStaticVehicleEx(420,515.0672,1757.0718,11.8793,175.5950,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // ∆/ƒ вокзал, такси 5
	AddStaticVehicleEx(420,518.3334,1756.8132,11.8793,175.4676,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // ∆/ƒ вокзал, такси 6
	AddStaticVehicleEx(420,521.7852,1756.5070,11.8793,175.7498,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // ∆/ƒ вокзал, такси 7

	AddStaticVehicleEx(438,1872.5802,2260.5298,15.1562,90.4024,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // јвтошкола, такси 1
	AddStaticVehicleEx(438,1872.5099,2264.3132,15.1572,90.1363,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // јвтошкола, такси 2
	AddStaticVehicleEx(420,1872.5029,2267.6094,15.1456,90.0060,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // јвтошкола, такси 3
	AddStaticVehicleEx(420,1872.4307,2270.8154,15.1490,90.4211,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // јвтошкола, такси 4
	AddStaticVehicleEx(420,1872.4064,2273.9580,15.1511,90.3450,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // јвтошкола, такси 5

	AddStaticVehicleEx(438,-2490.6890,2846.5657,37.5173,89.6803,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ёдово, такси 1
	AddStaticVehicleEx(438,-2490.6812,2842.3467,37.5189,89.4857,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ёдово, такси 2
	AddStaticVehicleEx(420,-2490.6860,2838.0046,37.5068,90.3039,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ёдово, такси 3
	AddStaticVehicleEx(420,-2490.7419,2833.7920,37.5068,90.2202,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ёдово, такси 4
	AddStaticVehicleEx(420,-2490.8013,2829.9333,37.5071,89.7149,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ёдово, такси 5

	AddStaticVehicleEx(420,-245.0356,453.3494,12.7324,73.8823,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ѕольница, такси 1
	AddStaticVehicleEx(420,-246.2037,449.3405,12.7325,74.0256,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ѕольница, такси 2
	AddStaticVehicleEx(420,-247.3436,445.4543,12.7325,73.9557,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ѕольница, такси 3
	AddStaticVehicleEx(438,-248.5921,441.2789,12.7437,73.4070,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ѕольница, такси 4
	AddStaticVehicleEx(438,-249.6691,437.3716,12.7437,73.7906,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ѕольница, такси 5

	AddStaticVehicleEx(420,-2399.8335,197.4634,21.0467,258.4910,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ћыткарино, такси 1
	AddStaticVehicleEx(420,-2400.6265,193.7770,21.0451,258.1457,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ћыткарино, такси 2
	AddStaticVehicleEx(420,-2401.4087,189.9429,21.0426,258.7071,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ћыткарино, такси 3
	AddStaticVehicleEx(438,-2402.0530,186.2944,21.0539,259.4415,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ћыткарино, такси 4
	AddStaticVehicleEx(438,-2402.9199,182.1572,21.0538,259.6259,6,1, spawn_time, 0, VEHICLE_ACTION_TYPE_TAXI_DRIVER); // Ћыткарино, такси 5
	
	// --------------- –азвозчики прод
	CreateVehicle(609,-210.8739,234.8200,12.2369,359.4061,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); // 
	CreateVehicle(609,-218.8448,234.7702,12.2403,0.090900,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); // 
	CreateVehicle(609,-226.0548,234.6511,12.2406,0.548500,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); // 
	CreateVehicle(609,-234.0121,234.5447,12.2436,0.488800,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); // 
	CreateVehicle(609,-242.3295,234.5451,12.2436,359.8156,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); // 
	CreateVehicle(609,-250.4456,234.5418,12.2335,0.303100,7,7, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER); //	
	
	// --------------- –азвозчики топлива
	CreateVehicle(584, 354.4533, -444.6721, 5.1695, 90.0000, -1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(584, 330.1744, -444.4918, 5.1695, 90.0000, -1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(584, 306.3080, -444.5778, 5.1695, 90.0000, -1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);

	CreateVehicle(514, 327.4969, -468.1053, 4.5210, 0.0000, -1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(514, 331.9969, -468.1053, 4.5210, 0.0000, -1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	CreateVehicle(514, 336.4969, -468.1053, 4.5210, 0.0000, -1, -1, spawn_time, 0, VEHICLE_ACTION_TYPE_TRUCKER);
	
	// --------------- ћеханики
	CreateVehicle(525,1142.9878,2486.9973,12.3509,301.8680,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 1
	CreateVehicle(525,1141.0784,2490.1216,12.3592,301.2564,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 2
	CreateVehicle(525,1201.8059,2502.0313,12.1630,31.30580,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 3
	CreateVehicle(525,1205.4995,2504.3215,12.1629,30.81340,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 4
	CreateVehicle(525,1209.2325,2506.6006,12.1630,31.90060,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 5
	CreateVehicle(525,1212.8977,2508.8955,12.1630,31.02640,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 6
	CreateVehicle(525,1208.6957,2527.5200,12.1629,122.4859,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 7
	CreateVehicle(525,1206.5468,2530.8984,12.1629,122.8413,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 8
	CreateVehicle(525,1203.7800,2534.8557,12.3507,122.1955,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 9
	CreateVehicle(525,1201.6656,2538.2449,12.3544,122.2750,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 10
	CreateVehicle(525,1139.1326,2493.2759,12.3495,302.2898,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 11
	CreateVehicle(525,1137.2019,2496.4790,12.3578,302.6617,1,6, spawn_time, 0, VEHICLE_ACTION_TYPE_MECHANIC); // ћеханики 12

	// --------------- ћ„— (ѕожарник)
	/*	
	// батырево
	CreateVehicle(544,1833.9083,2522.2378,15.8410,126.4627,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(544,1830.9589,2526.5569,15.8433,125.1378,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(407,1839.2209,2506.0569,15.8813,123.6029,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(407,1842.2141,2501.6240,15.8911,125.9585,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(407,1836.1093,2510.9060,15.8818,124.8976,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	
	// јрзамасска€
	CreateVehicle(544,1577.5398,-287.9251,4.1764,88.8271,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(544,1577.6602,-282.3537,4.1783,88.0708,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(407,1574.9150,-267.0268,4.2169,88.4024,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	CreateVehicle(407,1573.9773,-302.7855,4.2166,88.7209,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_NONE);
	*/
	
	// --------------- траснпорт на аренду
	/*
	for(new i; i < sizeof rent_cars_data; i ++)
	{
		rent_cars_data[i][rent_car_tenant_id] = INVALID_PLAYER_ID;
		rent_car_id[i] = CreateVehicle(rent_cars_data[i][rent_car_modelid], rent_cars_data[i][rent_car_pos_x], rent_cars_data[i][rent_car_pos_y], rent_cars_data[i][rent_car_pos_z], rent_cars_data[i][rent_car_angle], -1, -1, 600);
	}
	*/
	
	// --------------- ѕравительство
	CreateVehicle(475,-103.0350,-260.8059,4.1691,279.0488,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // ѕравительство. ѕаджеро ( ) 1
	CreateVehicle(426,-111.2283,-262.0719,4.3041,279.8651,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // ѕравительство. Ћимузин ( ) 1
	CreateVehicle(475,-119.3636,-263.5043,4.1695,278.7228,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // ѕравительство. ѕаджеро ( ) 2
	CreateVehicle(475,-192.7565,-265.7835,4.1478,189.5820,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // ѕравительство. ѕаджеро 3
	CreateVehicle(475,-196.1176,-266.3530,4.1494,189.0426,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // ѕравительство. ѕаджеро 4
	CreateVehicle(475,-207.3455,-273.6015,4.1477,279.4680,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // ѕравительство. ѕаджеро 5
	CreateVehicle(426,-201.2916,-283.0370,4.2789,279.0004,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // ѕравительство. Ћимузин 2
	CreateVehicle(426,-192.3694,-281.5222,4.2775,279.8237,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // ѕравительство. Ћимузин 3
	CreateVehicle(487,-94.62410,-348.5245,4.4318,279.5082,1,1, spawn_time, 0, VEHICLE_ACTION_TYPE_GOV_CAR); // ѕравительство, вертолет
	
	// --------------- јрми€ 
	CreateVehicle(433,1156.7839,-315.7548,4.0657,269.7149,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,1156.7582,-310.3722,4.0653,270.7051,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,1156.7754,-304.4783,4.0654,270.8091,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,1156.7952,-299.0881,4.0656,271.3176,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(578,1156.1288,-290.2753,4.1566,269.1052,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(578,1156.1384,-284.6878,4.1565,269.6847,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,1156.7737,-278.9651,4.0659,268.7352,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(433,1156.7626,-273.6026,4.0655,270.4865,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(551,1234.2112,-393.4836,3.9303,89.54020,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(551,1234.1979,-396.9344,3.9314,89.33490,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,1233.8148,-400.9222,4.0629,89.68860,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,1233.8270,-404.9666,4.0607,89.11960,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(470,1233.7650,-409.2629,4.0587,90.34210,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR);
	CreateVehicle(539,1211.8688,-325.3603,3.5158,89.90260,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// воздушна€ подушка дл€ армии
	CreateVehicle(539,1211.9418,-313.4679,3.5158,88.45440,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// воздушна€ подушка дл€ армии
	CreateVehicle(471,1177.6888,-313.0419,3.6359,180.0603,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// квадроцикл дл€ армии
	CreateVehicle(471,1177.6407,-325.9603,3.6373,359.3870,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// квадроцикл дл€ армии
	CreateVehicle(432,1153.8374,-339.3727,4.0109,270.9231,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// танк дл€ армии
	CreateVehicle(432,1153.9091,-332.5274,4.0119,270.1491, 1, 1, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// танк дл€ армии
	CreateVehicle(432,1153.9709,-325.6381,4.0124,269.9100,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// танк дл€ армии
	CreateVehicle(508,1242.4823,-415.2211,4.3139,89.70100,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// авто дл€ армии	
	
	CreateVehicle(515,1249.9360,-282.2376,4.6363,179.8160,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// от маги
	CreateVehicle(515,1245.0769,-282.4388,4.6387,179.9166,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// от маги
	CreateVehicle(582,1240.8258,-282.4004,4.0606,179.4684,99,99, spawn_time, 0, VEHICLE_ACTION_TYPE_ARMY_CAR); 	// от маги
	
	// --------------- Ѕольница 
	CreateVehicle(416,-238.7698,550.8733,12.8994,172.9392,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); //  арета 1
	CreateVehicle(416,-242.7097,551.2446,12.8732,172.6469,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); //  арета 2
	CreateVehicle(416,-246.4461,551.7439,12.8284,173.2092,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); //  арета 3
	CreateVehicle(416,-250.5226,552.2697,12.7723,173.1097,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); //  арета 4
	CreateVehicle(416,-254.7837,552.7803,12.7358,172.8184,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); //  арета 5
	CreateVehicle(416,-259.3213,553.0524,12.7474,173.1399,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); //  арета 6
	CreateVehicle(416,-263.5467,553.6649,12.7380,172.5578,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); //  арета 7
	CreateVehicle(551,-268.3803,554.4357,12.2997,173.0043,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // ¬олга 1
	CreateVehicle(551,-272.1465,554.9032,12.2546,173.1070,3,1, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // ¬олга 2
	CreateVehicle(487,-215.8927,548.0470,12.6525,170.4808,1,3, spawn_time, 0, VEHICLE_ACTION_TYPE_MED_CAR); // ¬ертолет	

	// --------------- –адио “–  ритм 
	CreateVehicle(488,-2071.9351,-227.7029,34.3738,350.3357,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, вертолет
	CreateVehicle(582,-2023.0909,-154.7924,25.7265,169.5153,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 1
	CreateVehicle(582,-2027.0698,-154.0206,25.7269,169.4299,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 2
	CreateVehicle(582,-2031.0341,-153.3923,25.7263,169.1252,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 3
	CreateVehicle(582,-2034.9696,-152.8096,25.7336,169.3665,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, фургон 5
	CreateVehicle(436,-2042.6635,-151.3722,25.7618,169.8739,7,1, spawn_time, 0, VEHICLE_ACTION_TYPE_RADIO_CAR); // ORP, репортеры, ћарк 2		

	// --------------- ƒѕ—
	CreateVehicle(497,231.0099,1476.9618,20.9156,347.8531,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ????
	CreateVehicle(598,217.8206,1511.0735,11.9601,167.6630,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, 2114 (1)
	CreateVehicle(598,221.3322,1510.3225,11.9578,169.5956,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, 2114 (2)
	CreateVehicle(598,224.7700,1509.5897,11.9615,169.6560,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, 2114 (3)
	CreateVehicle(598,228.4079,1508.7455,11.9613,168.0535,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, 2114 (4)
	CreateVehicle(598,231.9449,1507.9738,11.9591,169.9643,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, 2114 (5)
	CreateVehicle(405,235.4960,1507.0621,12.0754,169.5155,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, Lancer (1)
	CreateVehicle(405,239.1409,1506.2278,12.0752,169.7900,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, Lancer (2)
	CreateVehicle(427,246.2852,1505.1682,12.6179,166.7336,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ??? (1)
	CreateVehicle(427,242.6277,1505.9247,12.6154,167.9913,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ??? (2)
	CreateVehicle(523,251.6668,1497.8969,11.9817,79.9695,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ?? (1)
	CreateVehicle(523,250.3617,1491.7239,11.9828,78.4213,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ?? (2)
	CreateVehicle(523,248.8794,1485.7477,11.9819,77.7901,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ?? (3)
	CreateVehicle(523,247.5661,1479.4058,11.9795,76.4383,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_DPS_CAR); // ORP, ?? (4)
	
	// --------------- ѕѕ—
	CreateVehicle(599,43.7741,314.4717,12.3043,158.0665,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, ”ј« 1
	CreateVehicle(599,47.0117,313.1432,12.3052,159.0299,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, ”ј« 2
	CreateVehicle(599,50.3530,311.7809,12.3051,158.5672,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, ”ј« 3
	CreateVehicle(599,53.7616,310.4499,12.3045,158.9264,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, ”ј« 4
	CreateVehicle(599,57.0600,309.0200,12.3043,157.7294,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, ”ј« 5
	CreateVehicle(601,63.6441,268.5136,11.8541,338.0997,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ѕоливалка 1
	CreateVehicle(601,59.6313,270.1782,11.8551,338.1539,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ѕоливалка 2
	CreateVehicle(483,66.9540,304.2593,12.2626,158.4921,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ѕј« 1
	CreateVehicle(483,60.2165,306.9345,12.2633,157.6622,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ѕј« 2
	CreateVehicle(497,47.6793,279.7089,20.9092,337.0798,1,7, spawn_time, 0, VEHICLE_ACTION_TYPE_PPS_CAR); // ORP, вертолет
	
	// --------------- ‘—Ѕ
	CreateVehicle(436,-429.4131,949.5490,11.9645,269.5054,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ћарк 2 (1)
	CreateVehicle(436,-429.4118,945.7587,11.9645,270.8111,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ћарк 2 (2)
	CreateVehicle(482,-429.3771,941.8729,12.2697,270.9898,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Ѕуритто 1
	CreateVehicle(482,-429.4834,937.7449,12.2674,270.5646,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // Ѕуритто 2
	CreateVehicle(490,-429.0381,933.5400,12.2794,270.4852,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // –анчер 1
	CreateVehicle(490,-429.1058,928.2256,12.2789,270.0279,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // –анчер 2
	CreateVehicle(490,-429.1569,923.2666,12.2794,269.8669,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // –анчер 3
	CreateVehicle(490,-429.2524,918.7321,12.2800,270.6324,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // –анчер 4
	CreateVehicle(497,-425.3671,897.8140,12.3065,178.9797,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // ‘—Ѕ, вертолет
	
	CreateVehicle(582,-419.5389,918.5320,12.2050,0.2424,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_FBI_CAR); // от маги
	
	// --------------- ќѕ√ јрзамасска€
	CreateVehicle(492, 1641.0050, -301.7708, 4.0192, 357.3890, 0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто јрзамасска€ ќѕ√
	CreateVehicle(492, 1636.9392, -301.7030, 4.0172, 359.0896, 0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто јрзамасска€ ќѕ√
	CreateVehicle(482, 1621.3461, -280.7383, 4.1451, 268.5416, 0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто јрзамасска€ ќѕ√
	CreateVehicle(482, 1621.3427, -284.7936, 4.0778, 268.8133, 0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто јрзамасска€ ќѕ√
	CreateVehicle(404, 1641.9578, -289.9147, 3.9477, 38.56050, 0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто јрзамасска€ ќѕ√
	CreateVehicle(404, 1642.1459, -284.9109, 3.9486, 37.45260, 0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_ARZ_CAR); // авто јрзамасска€ ќѕ√
	
	// --------------- ќѕ√ Ѕатырево
	CreateVehicle(463,1948.7590,2167.8774,15.2449,89.2575,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ќѕ√ Ѕатырево, мото 1
	CreateVehicle(463,1948.6904,2164.2683,15.2448,89.8878,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ќѕ√ Ѕатырево, мото 2
	CreateVehicle(463,1948.6851,2160.5647,15.2423,91.4960,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ќѕ√ Ѕатырево, мото 3
	CreateVehicle(463,1948.7839,2156.7493,15.2449,89.4765,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ќѕ√ Ѕатырево, мото 4
	CreateVehicle(482,1932.6991,2170.4280,15.8223,269.8936,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ќѕ√ Ѕатырево, Ѕуритто 1
	CreateVehicle(482,1932.6681,2174.2288,15.8255,270.3850,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // ќѕ√ Ѕатырево Ѕуритто 2
	
	CreateVehicle(461,1938.2802,2166.0913,15.2826,272.8900,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); // 
	CreateVehicle(461,1938.1625,2163.5066,15.2761,270.5090,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_BAT_CAR); //
	
	// --------------- Ћыткаринска€ ќѕ√
	CreateVehicle(551,-2340.2644,104.5932,20.4217,259.5525,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ¬олга 1 (1)
	CreateVehicle(551,-2341.0471,100.8282,20.4220,258.7062,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ¬олга 1 (2)
	CreateVehicle(445,-2341.6548,97.2001,20.8720,259.0891,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ¬олга 2 (1)
	CreateVehicle(445,-2342.4653,93.2930,20.8720,258.3354,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // ¬олга 2 (2)
	CreateVehicle(482,-2343.4084,89.1208,21.1174,258.7979,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // Ѕуритто 1
	CreateVehicle(482,-2344.3076,84.8594,21.1200,258.6470,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // Ѕуритто 2
	
	CreateVehicle(489,-2345.0205,80.8984,21.0643,258.3234,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); // 
	CreateVehicle(516,-2345.7017,77.4525,20.7411,258.9327,0,0, spawn_time, 0, VEHICLE_ACTION_TYPE_LYT_CAR); //

	// --------------- јвто дл€ аренды
	for(new i; i < sizeof rent_cars_data; i++)
	{
		new rent_market_id,
			vehicleid;

		switch(i)
		{
			case 0..10: rent_market_id = 0;
			case 11..24: rent_market_id = 1;
			case 25..40: rent_market_id = 2;
			case 41..54: rent_market_id = 3;
		}

		rent_cars_data[i][rent_car_tenant_id] = INVALID_PLAYER_ID;
		vehicleid = CreateVehicle
		(
			rent_cars_data[i][rent_car_modelid],
			rent_cars_data[i][rent_car_pos_x], 
			rent_cars_data[i][rent_car_pos_y], 
			rent_cars_data[i][rent_car_pos_z], 
			rent_cars_data[i][rent_car_angle], 
			-1, -1, spawn_time, 0, 
			VEHICLE_ACTION_TYPE_RENT_CAR, rent_market_id
		);

		if(i == 0) first_rent_car_id = vehicleid;
	}
	
	// --------------- ¬елики на спавнах
	CreateVehicle(510, 524.6428, 1672.6086, 11.7703, -216.7200, -1, -1, 100);
	CreateVehicle(510, 525.9127, 1672.4463, 11.7703, -216.7200, -1, -1, 100);
	CreateVehicle(510, 527.1146, 1672.3667, 11.7703, -216.7200, -1, -1, 100);
	CreateVehicle(510, 528.3008, 1672.4495, 11.7703, -216.7200, -1, -1, 100);
	CreateVehicle(510, 529.5106, 1672.3778, 11.7703, -216.7200, -1, -1, 100);
	CreateVehicle(510, 530.7240, 1672.2489, 11.7703, -216.7200, -1, -1, 100);
	CreateVehicle(510, 531.7532, 1672.0746, 11.7703, -216.7200, -1, -1, 100);
	CreateVehicle(510, 523.3896, 1672.9454, 11.7703, -216.7200, -1, -1, 100);
	CreateVehicle(510, -1108.7395, 2169.7300, 37.6036, 0.0000, -1, -1, 100);
	CreateVehicle(510, -1109.7124, 2169.9663, 37.6036, 0.0000, -1, -1, 100);
	CreateVehicle(510, -1110.7065, 2170.0657, 37.6036, 0.0000, -1, -1, 100);
	CreateVehicle(510, -1111.6620, 2170.2090, 37.6036, 0.0000, -1, -1, 100);
	CreateVehicle(510, -1112.5703, 2170.3350, 37.6036, 0.0000, -1, -1, 100);
	CreateVehicle(510, 950.3660, -274.0046, 3.7284, 90.0000, -1, -1, 100);
	CreateVehicle(510, 950.3660, -275.0046, 3.7284, 90.0000, -1, -1, 100);
	CreateVehicle(510, 950.3660, -276.0046, 3.7284, 90.0000, -1, -1, 100);
	CreateVehicle(510, 950.3660, -277.0046, 3.7284, 90.0000, -1, -1, 100);
	CreateVehicle(510, 950.3660, -278.0046, 3.7284, 90.0000, -1, -1, 100);
	
	AddStaticVehicle(510,2423.1360,-625.8669,11.9763,0.5518,46,46); // велосипед на лесопилке
	AddStaticVehicle(510,2421.3872,-625.8600,11.9769,359.8800,2,2); // велосипед на лесопилке
	AddStaticVehicle(510,2424.8699,-625.8561,11.9772,0.6112,43,43); // велосипед на лесопилке
	AddStaticVehicle(510,2426.8066,-625.8909,11.9762,3.3079,28,28); // велосипед на лесопилке
	AddStaticVehicle(510,2419.5664,-625.7858,11.9769,1.0366,39,39); // велосипед на лесопилке
	
	CreateVehicle(510, 1847.7469, 2241.4727, 14.8344, -90.0000, -1, -1, 100);
	CreateVehicle(510, 1847.7469, 2240.4727, 14.8344, -90.0000, -1, -1, 100);
	CreateVehicle(510, 1847.7469, 2239.4727, 14.8344, -90.0000, -1, -1, 100);
	CreateVehicle(510, 1847.7469, 2238.4727, 14.8344, -90.0000, -1, -1, 100);
	CreateVehicle(510, 1847.7469, 2237.4727, 14.8344, -90.0000, -1, -1, 100);
	CreateVehicle(510, 522.1014, 1672.9890, 11.7703, -216.7200, -1, -1, 100);
	CreateVehicle(510, 520.7606, 1673.0159, 11.7703, -216.7200, -1, -1, 100);
	CreateVehicle(510, -88.6147, 298.3748, 11.7671, 0.0000, -1, -1, 100);
	CreateVehicle(510, -87.6147, 298.2998, 11.7671, 0.0000, -1, -1, 100);
	CreateVehicle(510, -86.6147, 298.1498, 11.7671, 0.0000, -1, -1, 100);
	CreateVehicle(510, -85.6147, 297.9998, 11.7671, 0.0000, -1, -1, 100);
	CreateVehicle(510, -84.6147, 297.8748, 11.7671, 0.0000, -1, -1, 100);
	CreateVehicle(510, -103.4119, 300.4464, 11.7671, 0.0000, -1, -1, 100);
	CreateVehicle(510, -102.4787, 300.3738, 11.7671, 0.0000, -1, -1, 100);
	CreateVehicle(510, -101.5577, 300.2741, 11.7671, 0.0000, -1, -1, 100);
	CreateVehicle(510, -100.6291, 300.1696, 11.7671, 0.0000, -1, -1, 100);
	CreateVehicle(510, -99.8420, 300.0519, 11.7671, 0.0000, -1, -1, 100);
	
	CreateVehicle(510,2367.7622,1783.5487,-0.4643,275.4319, -1, -1, 100); // велосипед у шахты id 510
	CreateVehicle(510,2367.8992,1782.1235,-0.6421,275.3601, -1, -1, 100); // велосипед у шахты id 510
	CreateVehicle(510,2368.1394,1780.4094,-0.8601,273.0810, -1, -1, 100); // велосипед у шахты id 510
	CreateVehicle(510,2368.1377,1778.9650,-1.0353,264.0700, -1, -1, 100); // велосипед у шахты id 510
	CreateVehicle(510,2368.2961,1776.7134,-1.3138,274.9945, -1, -1, 100); // велосипед у шахты id 510
	// ---------------	
	
	print("[Vehicle]: ¬се транспортные средства созданы");
}

stock CreateMedBeds()
{
	for(new i; i < sizeof g_med_bed_pos; i ++)
	{
		g_med_bed_label[i] = CreateDynamic3DTextLabel(" ", 0xFFFFFFEE, g_med_bed_pos[i][0], g_med_bed_pos[i][1], g_med_bed_pos[i][2], 5.0, _, _, _, -1, -1, _, 30.0);
		UpdateMedBed(i);
	}
}

stock ShowPlayerPayForRentDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_PAY_FOR_RENT, DIALOG_STYLE_LIST,
		"{66CC00}ќплата",
		"1. «аплатить за дом\n"\
		"2. ќплатить аренду бизнеса\n"\
		"3. ќплатить аренду ј«—",
		"ƒалее", "ќтмена"
	);
	return 1;
}

stock ClearBankAccountInfo(playerid, accountid)
{
	strmid(g_bank_account[playerid][accountid][BA_NAME], "None", 0, 21, 21);
	
	SetBankAccountData(playerid, accountid, BA_ID, 0);
	SetBankAccountData(playerid, accountid, BA_PIN_CODE, 0);
	
	SetBankAccountData(playerid, accountid, BA_BALANCE, 0);
	SetBankAccountData(playerid, accountid, BA_REG_TIME, 0);
}

stock ClearBankAccountsData(playerid)
{
	for(new idx; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);
	}
}

stock ShowPlayerBankDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_BANK, DIALOG_STYLE_LIST,
		"{00CC00}Ѕанк",
		"ћои счета\n"\
		"ќткрыть новый счет",
		"¬ыбрать", "ќтмена"
	);
}

stock ShowPlayerBankAccounts(playerid)
{
	new query[64];
	new Cache: result;
	new rows; 
	new bank_accounts_list[(37 * MAX_BANK_ACCOUNTS) + 22 + 1];
	
	format(query, sizeof query, "SELECT * FROM bank_accounts WHERE uid=%d LIMIT %d", GetPlayerAccountID(playerid), MAX_BANK_ACCOUNTS);
	result = mysql_query(mysql, query);
	rows = cache_num_rows();

	bank_accounts_list = "{99CC00}ќсновной счет\n";
	for(new idx, count; idx < MAX_BANK_ACCOUNTS; idx ++)
	{
		ClearBankAccountInfo(playerid, idx);
		
		if(idx < rows)
		{
			SetBankAccountData(playerid, idx, BA_ID, cache_get_row_int(idx, 0));
			
			cache_get_row(idx, 2, g_bank_account[playerid][idx][BA_NAME], mysql, 21);
			cache_get_row(idx, 4, g_bank_account[playerid][idx][BA_PIN_CODE], mysql, 9);
			
			SetBankAccountData(playerid, idx, BA_BALANCE, cache_get_row_int(idx, 3));
			SetBankAccountData(playerid, idx, BA_REG_TIME, cache_get_row_int(idx, 5));
			
			format(query, sizeof query, "%s - є%d\n", GetBankAccountData(playerid, idx, BA_NAME), GetBankAccountData(playerid, idx, BA_ID));
			strcat(bank_accounts_list, query);
			
			SetPlayerListitemValue(playerid, count ++, idx);
		}
	}
	cache_delete(result);
	
	return Dialog(playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_LIST, "{FFCD00}¬аши счета", bank_accounts_list, "ќперации", "Ќазад");
}

stock IsValidBankAccount(playerid, accountid)
{
	if(0 <= accountid <= MAX_BANK_ACCOUNTS-1)
	{
		if(GetBankAccountData(playerid, accountid, BA_ID) > 0)
		{
			return 1;
		}
	}
	return 0;
}

stock UpdateBankAccountData(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new query[64];
		new Cache: result;
		
		format(query, sizeof query, "SELECT balance FROM bank_accounts WHERE id=%d LIMIT 1", GetBankAccountData(playerid, accountid, BA_ID));
		result = mysql_query(mysql, query);
		
		if(cache_num_rows())
			SetBankAccountData(playerid, accountid, BA_BALANCE, cache_get_row_int(0, 0));
		
		cache_delete(result);
	}
}

stock ShowPlayerBankAccountOperation(playerid)
{
	Dialog
	(
		playerid, DIALOG_BANK_ACCOUNT_OPERATION, DIALOG_STYLE_LIST,
		"{0099FF}—писок операций",
		"1. »нформаци€ о счете\n"\
		"2. »стори€ операций\n"\
		"3. —н€ть деньги\n"\
		"4. ѕоложить деньги\n"\
		"5. ѕеревести на другой счет\n"\
		"6. ѕереименовать счет\n"\
		"7. »зменить PIN-код",
		"¬ыбрать", "Ќазад"
	);
	return 1;
}

stock ShowPlayerBankAccountTransfer(playerid, accountid)
{
	if(IsValidBankAccount(playerid, accountid))
	{
		new fmt_str[128];
		format
		(
			fmt_str, sizeof fmt_str, 
			"{FFFFFF}»сходный счет:\t%d\n"\
			"Ќазначение:\t\t\"%s\", є%d\n\n"\
			"¬ведите сумму дл€ перевода:",
			GetBankAccountData(playerid, accountid, BA_ID),
			GetPlayerBankTransfer(playerid, BT_NAME),
			GetPlayerBankTransfer(playerid, BT_ID)
		);
		Dialog(playerid, DIALOG_BANK_ACCOUNT_TRANSFER_2, DIALOG_STYLE_INPUT, "{FFCD00}ѕеревод средств", fmt_str, "ѕеревести", "ќтмена");
	}
	return 1;
}

stock ShowPlayerATMTransfer(playerid)
{
	new transfer_id = GetPlayerBankTransfer(playerid, BT_ID);
	if(transfer_id)
	{
		new fmt_str[64 + 1];
		
		format
		(
			fmt_str, sizeof fmt_str, 
			"{FFFFFF}¬ы выполн€ете перевод на счет є%d\n"\
			"”кажите сумму:",			
			transfer_id
		);
		Dialog(playerid, DIALOG_ATM_TRANSFER_MONEY_2, DIALOG_STYLE_INPUT, "{FFCD00}Ѕезналичный перевод", fmt_str, "ѕеревести", "ќтмена");
	}
	return 1;
}

stock IsABadBankAccountName(dest[], pos=0)
{
	new is_bad_name = false;
	do
	{
		switch(dest[pos])
		{
			case 
				'a'..'z', 'A'..'Z', 'а'..'€', 'ј'..'я', '0'..'9': continue;
				
			default:
				is_bad_name = true;
				
		}
	}
	while(dest[++pos]);
	
	return is_bad_name;
}

stock BankAccountLog(playerid, accountid, description[])
{
	new query[180 + 1];
	
	mysql_format(mysql, query, sizeof query, "INSERT INTO bank_accounts_log (acc_id,uip,time,description) VALUES (%d,'%e',%d,'%e')", accountid, GetPlayerIpEx(playerid), gettime(), description);
	mysql_query(mysql, query, false);
	
	return 1;
}

stock ShowPlayerBankAccountLog(playerid, accountid)
{
	new fmt_str[128];
	new Cache: result;
	new rows;
	
	format(fmt_str, sizeof fmt_str, "SELECT FROM_UNIXTIME(time,'%%Y-%%m-%%d') AS date,description FROM bank_accounts_log WHERE acc_id=%d ORDER BY id DESC LIMIT 10", accountid);
	result = mysql_query(mysql, fmt_str);

	rows = cache_num_rows();
	
	if(rows)
	{
		new text[900] = "{FFFFFF}";
		new day, month, year;
		
		for(new idx; idx < rows; idx ++)
		{
			cache_get_row(idx, 0, fmt_str);
			sscanf(fmt_str, "P<->ddd", year, month, day);
			
			cache_get_row(idx, 1, fmt_str);

			format(fmt_str, sizeof fmt_str, "%d %s %d г.\t\t%s\n", day, GetMonthName(month), year, fmt_str);
			strcat(text, fmt_str);
		}
		Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}ѕоследние 10 операций", text, "¬ернутьс€", "");
	}
	else Dialog(playerid, DIALOG_BANK_ACCOUNT_INFO, DIALOG_STYLE_MSGBOX, "{FFCD00}»стори€", "{FFFFFF}»стори€ операций пуста", "¬ернутьс€", "");
	
	cache_delete(result);
	return 1;
}

stock RemovePlayerAttachedObjects(playerid)
{
	for(new idx; idx < MAX_PLAYER_ATTACHED_OBJECTS; idx ++)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, idx))
		{
			RemovePlayerAttachedObject(playerid, idx);
		}
	}
}

stock RemovePlayerAttachedObjectEx(playerid, ...)
{
	new args = numargs()-1;
	for(new idx; idx < args; idx ++)
		RemovePlayerAttachedObject(playerid, getarg(idx + 1));
}

stock HelpInfoInit()
{
	new fmt_str[64];
	
	for(new idx; idx < sizeof help_info; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, help_info[idx][H_TITLE]);
		strcat(help_info_items, fmt_str);
		
		format(fmt_str, sizeof fmt_str, "{FFCD00}%d. ", idx + 1);
		strins(help_info[idx][H_TITLE], fmt_str, 0, 64);
		
		//strins(help_info[idx][H_INFO], "{FFFFFF}", 0, 1024);
	}
	
	help_info_CP = CreateDynamicCP(529.6985, 1675.3622, 12.0097, 1.9, _, _, _, 5.0); // арзамас (спавн)
	CreateDynamic3DTextLabel("–аздел дл€ новичков\n{FFFF00}ѕомощь по игре", 0x3399FFFF, 529.6985, 1675.3622, 12.0097 + 0.66, 15.0, _, _, _, 0, 0);

	//help_info_CP[1] = CreateDynamicCP(1763.693, -1885.828, 13.555, 2.1, _, _, _, 23.0); // ∆ƒ-вокзал Ћ—
	//CreateDynamic3DTextLabel("–аздел дл€ новичков\n{FFFF00}ѕомощь по игре", 0x3399FFFF, 1763.693, -1885.828, 13.555 + 0.66, 26.0, _, _, _, 0, 0);
}

stock ShowPlayerHelpSection(playerid, sectionid)
{
	new next_buttom[9] = "ƒалее >>";
	if(sectionid >= sizeof help_info - 1)
	{
		next_buttom[0] = '\0';
	}
	
	Dialog
	(
		playerid, DIALOG_HELP_SECTION, DIALOG_STYLE_MSGBOX,
		GetHelpInfoData(sectionid, H_TITLE),
		GetHelpInfoData(sectionid, H_INFO),
		"<< ћеню", next_buttom
	);
	SetPVarInt(playerid, "help_section", sectionid);
}

stock ServerRadioInit()
{
	new fmt_str[64];
	
	for(new idx; idx < sizeof g_server_radio; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetServerRadioData(idx, SR_CHANNEL_NAME));
		strcat(g_server_radio_items, fmt_str);
	}
}

stock MapIconsInit()
{
	for(new idx; idx < sizeof map_icons; idx ++)
	{
		CreateDynamicMapIcon
		(
			GetMapIconsData(idx, MI_POS_X),
			GetMapIconsData(idx, MI_POS_Y), 
			GetMapIconsData(idx, MI_POS_Z), 
			GetMapIconsData(idx, MI_TYPE), 
			0, 
			0,
			0, 
			-1,
			MAP_ICON_STREAM_DISTANCE,
			MAPICON_LOCAL
		);
	}
}

stock TeleportPickupsInit()
{
	new Text3D:buffer;
	for(new idx; idx < sizeof g_teleport; idx ++)
	{
		if(strlen(GetTeleportData(idx, T_NAME)) && !GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD))
		{
			buffer = CreateDynamic3DTextLabel
			(
				GetTeleportData(idx, T_NAME), 
				0x3399FFEE, 
				GetTeleportData(idx, T_PICKUP_POS_X),
				GetTeleportData(idx, T_PICKUP_POS_Y),
				GetTeleportData(idx, T_PICKUP_POS_Z) + 0.8,
				5.0,
				INVALID_PLAYER_ID,
				INVALID_VEHICLE_ID, 
				0,
				0,
				0, 
				-1,
				STREAMER_3D_TEXT_LABEL_SD
			);
			SetTeleportData(idx, T_LABEL, buffer);
		}
		CreatePickup(1318, 23, GetTeleportData(idx, T_PICKUP_POS_X), GetTeleportData(idx, T_PICKUP_POS_Y), GetTeleportData(idx, T_PICKUP_POS_Z), GetTeleportData(idx, T_PICKUP_VIRTUAL_WORLD), PICKUP_ACTION_TYPE_TELEPORT, idx);
	}

	CreatePickup(1318, 23, 5.6028, -23.3124, 1080.9968, -1, PICKUP_ACTION_TYPE_BIZ_CAR_ENT); // авторынок телепорт ко входу
	CreatePickup(1318, 23, 5.9334, -25.4932, 1085.9291, -1, PICKUP_ACTION_TYPE_BIZ_CAR_EXI); // авторынок телепорт к выходу

	print("[TP]: ¬се входы/выходы созданы");
}

stock DrivingSchoolInit()
{
	new buffer[2];
	
	driving_exam_CP = CreateDynamicCP(1911.2469, 2237.3105, 16.2557, 1.5, 0, 0, -1, 15.0); // автошкола
	CreateDynamic3DTextLabel("—дача\nэкзамена", 0x99CC00BB, 1911.2469, 2237.3105, 16.2557, 7.0);
	
	CreatePickup(2894, 2, 1917.3297, 2237.8137, 16.2557, 0, PICKUP_ACTION_TYPE_DRIVING_TUTO); // автошкола обучающий раздел
	CreateDynamic3DTextLabel("ќбучающий\nраздел", 0xCC9900BB, 1917.3297, 2237.8137, 16.2557 + 0.2, 5.0);
	
	buffer[0] = AddStaticVehicleEx(565, 1928.5189, 2225.2505, 15.7314, 360.0, 17, 17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); // учебный 1
	AddStaticVehicleEx(565, 1932.1473, 2225.2505, 15.7304, 360.0, 17, 17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); 			// учебный 2
	buffer[1] = AddStaticVehicleEx(565, 1936.1224, 2225.2505, 15.7313, 360.0, 17, 17, 300, 0, VEHICLE_ACTION_TYPE_DRIVING_SCH); // учебный 3
	
	for(new idx = buffer[0]; idx <= buffer[1]; idx ++)
		CreateDynamic3DTextLabel("”чебный", 0xFF0000FF, 0.0, 0.0, 1.2, 16.0, INVALID_PLAYER_ID, idx);
	
	new fmt_str[64];
	for(new idx; idx < sizeof driving_tutorial; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "{CC9900}–аздел %d: ", idx + 1);
		strins(driving_tutorial[idx][DT_TITLE], fmt_str, 0, 64);
	}
	
	for(new idx; idx < sizeof driving_exam; idx ++)
	{
		strins(driving_exam[idx][DE_TITLE], "{00CC66}", 0, 64);
	}
}

stock GatesInit()
{
	new type;
	new Float: x, Float: y, Float: z;
	new Float: angle, Float: dist = 3.5;
	
	for(new idx; idx < sizeof g_gate; idx ++)
	{
		type = GetGateData(idx, G_TYPE);
	
		x = GetGateData(idx, G_POS_X);
		y = GetGateData(idx, G_POS_Y);
		z = GetGateData(idx, G_POS_Z);
		angle = GetGateData(idx, G_ANGLE);
	
		switch(type)
		{
			case 
				GATE_TYPE_BARRIER, 
				GATE_TYPE_BARRIER_MSG, 
				GATE_TYPE_BARRIER_BUTTON:
			{
				g_gate[idx][G_OBJECT_ID][0] = CreateDynamicObject(966, x, y, z, 0.0, 0.0, angle, -1, -1, -1, 300.0, 200.0);
				g_gate[idx][G_OBJECT_ID][1] = CreateDynamicObject(968, x, y, z + 0.8, 0.0, 0.0, angle, -1, -1, -1, 300.0, 200.0);				
			
				if(type != GATE_TYPE_BARRIER_BUTTON)
				{
					angle += 90.0;
				
					SetGateData(idx, G_OPEN_POS_X, x + (dist * floatsin(-angle, degrees)));
					SetGateData(idx, G_OPEN_POS_Y, y + (dist * floatcos(-angle, degrees)));
					SetGateData(idx, G_OPEN_POS_Z, z);
				}
				else 
				{
					type = g_gate_buttons_count;
					
					g_gate_button[type][1] = idx;
					g_gate_button[type][0] = CreateButton(GetGateData(idx, G_OPEN_POS_X), GetGateData(idx, G_OPEN_POS_Y), GetGateData(idx, G_OPEN_POS_Z), GetGateData(idx, G_OPEN_ANGLE));
			
					g_gate_buttons_count ++;
				}
				//CreateDynamic3DTextLabel("Ўлагбаум", 0xFF6600FF, GetGateData(idx, G_OPEN_POS_X), GetGateData(idx, G_OPEN_POS_Y), GetGateData(idx, G_OPEN_POS_Z), 10.0);
			}
			case GATE_TYPE_NORMAL:
			{
				
			}
		}
		SetGateStatus(idx, GetGateData(idx, G_STATUS), -1);
	}
	print("[Gates]: ¬се шлагбаумы созданы");
}

stock IsGateButtonID(buttonid)
{
	return (g_gate_button[0][0] <= buttonid <= g_gate_button[g_gate_buttons_count - 1][0]);
}

stock GetNearestGate(playerid, Float: dist = 10.0)
{
	if(!(0.0 <= dist <= 20.0))
	{
		dist = 10.0;
	}
	//if(dist == 0.0)
	//	dist = FLOAT_INFINITY;
		
	new gateid = -1;
	new Float: my_dist;
	
	for(new idx; idx < sizeof g_gate; idx ++)
	{
		if(GetGateData(idx, G_TYPE) == GATE_TYPE_BARRIER_BUTTON) continue;
		
		my_dist = GetPlayerDistanceFromPoint(playerid, GetGateData(idx, G_OPEN_POS_X), GetGateData(idx, G_OPEN_POS_Y), GetGateData(idx, G_OPEN_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			gateid = idx;
		}
	}
	return gateid;
}

stock AtmsInit()
{
	new Float: x, Float: y, Float: z, Float: rot_z;
	new Float: dist = 0.6; // дистацни€ пикапа от банкомата

	for(new idx; idx < sizeof g_atm; idx ++)
	{
		x = GetATMInfo(idx, A_POS_X);
		y = GetATMInfo(idx, A_POS_Y);
		z = GetATMInfo(idx, A_POS_Z);
		rot_z = GetATMInfo(idx, A_ROT_Z);
		
		CreateDynamicObject(2942, x, y, z, 0.0, 0.0, rot_z, 0, 0, -1, STREAMER_OBJECT_SD, 100.0);
		//SetDynamicObjectMaterialText(buffer, 2, "Ѕанкомат\n\n\n\n\n", OBJECT_MATERIAL_SIZE_256x256, "Tahoma", 48, 1, 0xFF000000, 0xFFFF9966, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
		
		CreateDynamic3DTextLabel("Ѕанкомат\n{FFCC33}Ќажмите ~k~~SNEAK_ABOUT~", 0x00CC00FE, x, y, z + 0.7, 3.0); // 0x00CC00EE
		
		#if defined ATM_CREATED_PICKUP
		rot_z += 180.0;
		CreatePickup(1212, 2, x + dist * -floatsin(rot_z, degrees), y + dist * floatcos(rot_z, degrees), z, -1, PICKUP_ACTION_TYPE_ATM, idx);
		#endif
	}
	print("[ATM]: ¬се банкоматы созданы");
}

stock GetPlayerNearestATM(playerid, Float: dist = 1.3)
{
	if(dist == 0.0)
		dist = FLOAT_INFINITY;
		
	new atmid = -1;
	new Float: my_dist;

	for(new idx; idx < sizeof g_atm; idx ++)
	{
		my_dist = GetPlayerDistanceFromPoint(playerid, GetATMInfo(idx, A_POS_X), GetATMInfo(idx, A_POS_Y), GetATMInfo(idx, A_POS_Z));
		if(my_dist < dist)
		{
			dist = my_dist,
			atmid = idx;
		}
	}
	return atmid;
}

stock ShowPlayerATMDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ATM, DIALOG_STYLE_LIST,
		"{FFCD00}Ѕанкомат",
		"1. —н€ть с банковского счета\n"\
		"2. ѕоложить на банковский счет\n"\
		"3. Ѕаланс банковского счета\n"\
		"4. —н€ть со счета предпри€ти€\n"\
		"5. ѕоложить на счет предпри€ти€\n"\
		"6. ѕополнить мобильный телефон\n"\
		"7. Ѕезналичный перевод\n"\
		"8. Ѕлаготворительность",
		"¬ыбрать", "¬ыйти"
	);
	return 1;
}

stock ShowPlayerATMSelectSumDialog(playerid, bool:take)
{
	Dialog
	(
		playerid, take ? DIALOG_ATM_TAKE_MONEY : DIALOG_ATM_PUT_MONEY, DIALOG_STYLE_LIST,
		"¬ыберите сумму",
		"100 руб\n"\
		"200 руб\n"\
		"500 руб\n"\
		"1000 руб\n"\
		"2000 руб\n"\
		"5000 руб\n"\
		"10000 руб\n"\
		"ƒруга€ сумма...",
		take ? ("—н€ть") : ("ѕоложить"), "Ќазад"
	);
	return 1;
}

stock ShowPlayerATMSelectOtherSum(playerid, bool:take)
{
	Dialog
	(
		playerid, take ? DIALOG_ATM_TAKE_OTHER_MONEY : DIALOG_ATM_PUT_OTHER_MONEY, DIALOG_STYLE_INPUT,
		"{FFCD00}ƒруга€ сумма",
		"{FFFFFF}”кажите сумму:",
		take ? ("—н€ть") : ("ѕоложить"), "Ќазад"
	);
	return 1;
}

stock ShowPlayerATMCharityDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_ATM_CHARITY, DIALOG_STYLE_INPUT,
		"{FFCD00}Ѕлаготворительность",
		"{FFFFFF}ћы предлагаем вам перечислить любую\n"\
		"сумму на благотворительный счет\n"\
		"государства. ¬се средства пойдут на\n"\
		"развитие нашей страны и подн€тие\n"\
		"экономики.\n\n"\
		"ѕомимо этого, в мэри€х врем€ от времени\n"\
		"будут публиковатьс€ списки тех, кто\n"\
		"сделал наибольшие взносы.\n\n"\
		"Ётот список можно просмотреть командой\n"\
		"/charity. “ам же можно узнать общую\n"\
		"сумму сделанных ¬ами пожертвований.",
		"¬нести", "«акрыть"
	);
	return 1;
}

stock ShowPlayerATMCompanyDialog(playerid, bool: take)
{
	new stationid = GetPlayerFuelStation(playerid);
	new businessid = GetPlayerBusiness(playerid);
	
	if(stationid != -1 && businessid != -1)
	{
		new fmt_str[64 + 1];
		
		format
		(
			fmt_str, sizeof fmt_str, 
			"1. %s (є%d)\n"\
			"2. %s (є%d)", 
			GetBusinessData(businessid, B_NAME), businessid,
			GetFuelStationData(stationid, FS_NAME), stationid
		);
		Dialog(playerid, take ? DIALOG_ATM_SELECT_COMPANY_TAKE : DIALOG_ATM_SELECT_COMPANY_PUT, DIALOG_STYLE_LIST, "{FFCD00}¬ыберите предпри€тие", fmt_str, "¬ыбрать", "Ќазад");
	}
	else if(stationid != -1)
	{
		ShowPlayerATMFuelStationDialog(playerid, take);
	}
	else if(businessid != -1)
	{
		ShowPlayerATMBusinessDialog(playerid, take);
	}
}

stock ShowPlayerATMFuelStationDialog(playerid, bool:take)
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		Dialog
		(
			playerid, take ? DIALOG_ATM_FUEL_ST_TAKE_MONEY : DIALOG_ATM_FUEL_ST_PUT_MONEY, DIALOG_STYLE_INPUT,
			GetFuelStationData(stationid, FS_NAME), 
			"{FFFFFF}”кажите сумму:",
			take ? ("—н€ть") : ("ѕоложить"), "¬ыйти"
		);
	}
}

stock ShowPlayerATMBusinessDialog(playerid, bool:take)
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		Dialog
		(
			playerid, take ? DIALOG_ATM_BIZ_TAKE_MONEY : DIALOG_ATM_BIZ_PUT_MONEY, DIALOG_STYLE_INPUT,
			GetBusinessData(businessid, B_NAME), 
			"{FFFFFF}”кажите сумму:",
			take ? ("—н€ть") : ("ѕоложить"), "¬ыйти"
		);
	}
}

stock BanksInit()
{
	CreatePickup(1274, 2, 904.8345, -787.6771, 1000.5416, -1, PICKUP_ACTION_TYPE_BANK, true);
	CreateDynamic3DTextLabel("/bank", 0x00CC00FF, 904.8345, -787.6771, 1000.5416 + 0.8, 8.0);
	
	CreatePickup(1274, 2, 904.8353, -784.4731, 1000.5416, -1, PICKUP_ACTION_TYPE_BANK, false);
	CreateDynamic3DTextLabel("ќплата\n{CCCC00}дома\nбизнеса\nј«—", 0x66CC66FF, 904.8353, -784.4731, 1000.5416 + 0.8, 8.0);
}

stock TempJobsInit()
{	
	new idx;
	for(idx = 0; idx < sizeof g_temp_jobs-1; idx ++)
	{
		CreatePickup(1275, 23, GetTempJobInfo(idx, TJ_POS_X), GetTempJobInfo(idx, TJ_POS_Y), GetTempJobInfo(idx, TJ_POS_Z), -1, PICKUP_ACTION_TYPE_TEMP_JOB, idx);
	}
	loader_job_area = CreateDynamicRectangle(591.4026, 1781.0015, 482.7329, 1534.9045, 0, 0);
	
	AddStaticVehicleEx(530, 494.4254, 1639.0137, 11.9525, 266.6, 6, 1, 5, 0, VEHICLE_ACTION_TYPE_LOADER); // погрузчик в порту
	AddStaticVehicleEx(530, 494.4254, 1641.4299, 11.9525, 266.6, 6, 1, 5, 0, VEHICLE_ACTION_TYPE_LOADER); // погрузчик в порту
	AddStaticVehicleEx(530, 494.4254, 1643.8461, 11.9525, 266.6, 6, 1, 5, 0, VEHICLE_ACTION_TYPE_LOADER); // погрузчик в порту
	
	// шахта
	for(idx = 0; idx < sizeof miner_carriage; idx ++)
	{
		miner_carriage[idx][MC_STATUS] = false;
		miner_carriage[idx][MC_OBJECT_ID] = CreateDynamicObject(3585, miner_carriage[idx][MC_START_POS_X], miner_carriage[idx][MC_START_POS_Y], miner_carriage[idx][MC_START_POS_Z], 0.0, 0.0, 0.0);
		
		SetTimerEx("MinerCarriageMove", 21_000, true, "i", idx);
	}
	miner_job_area = CreateDynamicRectangle(2447.1799,1697.9985, 2279.3557,1806.0872, 0, 0);
	
	CreatePickup(19134, 2, 2305.8884, 1738.6920, 1.7285, 0, PICKUP_ACTION_TYPE_MINER_SELL_M);
	CreateDynamic3DTextLabel("ѕродажа металла\n{00CC00}15 рублей {FFFFFF}за 1 кг", 0x9966FFBB,  2305.8884, 1738.6920, 1.7285 + 1.2, 10.0);

	CreateDynamic3DTextLabel("Ўахта\n\n{3399CC}1. ¬ыдача инструментов\n2. ѕолучение зарплаты", 0x009933FF, GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_X), GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_Y), GetTempJobInfo(TEMP_JOB_MINER, TJ_POS_Z) + 0.82, 5.0);
	
	// завод
	for(idx = 0; idx < 3; idx ++)
	{
		CreatePickup(1275, 3, 264.4713, -217.2706 + float(idx * 2), 1006.5694, -1, PICKUP_ACTION_TYPE_TEMP_JOB, TEMP_JOB_FACTORY);
	}
	for(idx = 0; idx < sizeof factory_take_metall_pos; idx ++)
	{	
		CreatePickup(19135, 2, factory_take_metall_pos[idx][0], factory_take_metall_pos[idx][1], factory_take_metall_pos[idx][2] - 0.4, -1, PICKUP_ACTION_TYPE_FACTORY_MET);
	}
	
	new Float: x = 311.6580, Float: y = -207.6711, Float: z = 1006.5694;
	for(idx = 0; idx < sizeof factory_desk; idx ++)
	{
		if(idx && !(idx % 4))
			y -= (idx != 8 ? 2.9917 : 3.0085);
	
		factory_desk[idx][FD_POS_X] = x - (float(idx % 4) * 5.5003);
		factory_desk[idx][FD_POS_Y] = y;
		factory_desk[idx][FD_POS_Z] = z;
		
		factory_desk[idx][FD_USED] = false;
		factory_desk[idx][FD_OBJECT_ID] = -1;
	
		factory_desk[idx][FD_CHEK_ID] = CreateDynamicCP(factory_desk[idx][FD_POS_X], factory_desk[idx][FD_POS_Y], factory_desk[idx][FD_POS_Z], 0.3, _, _, _, 0.3);
		factory_desk[idx][FD_LABEl] = CreateDynamic3DTextLabel("–абочий место", 0xFFFFFFEE, factory_desk[idx][FD_POS_X], factory_desk[idx][FD_POS_Y], factory_desk[idx][FD_POS_Z] + 1.0, 5.0);
	
		CallLocalFunction("UpdateFactoryDesk", "i", idx);
	}
	factory_put_zone = CreateDynamicRectangle(264.8033, -199.8648, 296.8693, -202.0421);
	factory_job_area = CreateDynamicRectangle(-981.2298, 2098.1736, -1170.6591, 2263.3167, 0, 0);
	
	// --------------- «авод
	AddStaticVehicleEx(406, -1076.2706, 2204.9490, 38.4303, 180.0, 125, 1, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фургон дл€ перевози металла
	AddStaticVehicleEx(406, -1081.3639, 2204.7727, 38.4130, 180.0, 125, 1, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фургон дл€ перевози металла
	AddStaticVehicleEx(406, -1086.3571, 2204.7319, 38.3786, 180.0, 125, 1, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фургон дл€ перевози металла
	AddStaticVehicleEx(406, -1090.8806, 2204.7322, 38.3446, 180.0, 125, 1, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фургон дл€ перевози металла
	
	AddStaticVehicleEx(514, -1116.3119, 2205.5913, 38.2890, 179.9556, 6, 6, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фура дл€ перевозки топлива
	AddStaticVehicleEx(514, -1107.9980, 2205.7349, 38.1867, 180.4830, 6, 6, 20, 0, VEHICLE_ACTION_TYPE_FACTORY); // фура дл€ перевозки топлива
	
	AddStaticVehicleEx(584,-1121.6831, 2190.3965, 38.0457, 263.2740, 1, 1, 180, 0, VEHICLE_ACTION_TYPE_FACTORY, true); // цистерна
	AddStaticVehicleEx(584,-1121.6831, 2181.3005, 38.0457, 263.2740, 1, 1, 180, 0, VEHICLE_ACTION_TYPE_FACTORY, true); // цистерна	
}

stock InfoPickupsInit()
{
	new title_color[16];
	for(new idx; idx < sizeof info_pickup; idx ++)
	{
		CreatePickup(1239, 2, GetInfoPickupData(idx, IP_POS_X), GetInfoPickupData(idx, IP_POS_Y), GetInfoPickupData(idx, IP_POS_Z), -1, PICKUP_ACTION_TYPE_INFO_PICKUP, idx);
		
		format(title_color, sizeof title_color, "{%06x}", GetInfoPickupData(idx, IP_TITLE_COLOR) >>> 8);
		strins(GetInfoPickupData(idx, IP_TITLE), title_color, 0, 64);
		
		strins(GetInfoPickupData(idx, IP_INFO), "{FFFFFF}", 0, 1024);
		if(strlen(GetInfoPickupData(idx, IP_LABEL_INFO)) > 3)
			CreateDynamic3DTextLabel(GetInfoPickupData(idx, IP_LABEL_INFO), 0x99CC00DD, GetInfoPickupData(idx, IP_POS_X), GetInfoPickupData(idx, IP_POS_Y), GetInfoPickupData(idx, IP_POS_Z) + 0.7, 9.5);
	}
}

stock BusRoutesInit()
{
	new fmt_str[64];
	
	for(new idx; idx < sizeof g_bus_routes; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d.  %s\n", idx + 1, g_bus_routes[idx][BR_NAME]);
		strcat(g_bus_routes_list, fmt_str);
		
		if(g_bus_routes[idx][BR_COLOR] > 0)
		{
			g_bus_routes[idx][BR_COLOR] = 0x66CC00FF;
		}
		else g_bus_routes[idx][BR_COLOR] = 0x3399FFFF;		
	}
}

stock AnimListInit()
{
	new fmt_str[64];
	for(new idx; idx < sizeof anim_list; idx ++)
	{	
		format(fmt_str, sizeof fmt_str, "%d. %s\n", idx + 1, GetAnimListData(idx, AL_DESCRIPTION));
		strcat(anim_list_items, fmt_str);
	
		if(GetAnimListData(idx, AL_LOOP) > 2)
			anim_list[idx][AL_DESCRIPTION] = 2;
	}
	strcat(anim_list_items, "{33CC00}»нформаци€");
}

stock RepositoriesLoad()
{
	new Cache: result; 
	new type, action_id;
	
	result = mysql_query(mysql, "SELECT * FROM repositories ORDER BY type,action_id ASC");
	new rows = cache_num_rows();
	
	for(new idx; idx < rows; idx ++)
	{
		type = cache_get_row_int(idx, 1);
		action_id = cache_get_row_int(idx, 2);
		
		if(0 <= type <= sizeof g_repository-1)
		{
			if(0 <= action_id <= sizeof g_repository[]-1)
			{
				SetRepositoryData(type, action_id, R_AMOUNT, cache_get_row_int(idx, 3));
			}
		}
	}
	cache_delete(result);
	
	RepositoriesInit();
}

stock RepositoriesInit()
{
	// шахта
	
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2387.6606, 1757.4240, -1.8463 + 1.0, 20.0));
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2317.1355, 1738.4092, 5.0, 25.0));
	
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);
	
	// ----------------------
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -2568.2881, 297.3934, -15.7620 + 2.5, 15.0));
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2382.7622, 1720.6998, 4.0, 30.0));
	
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);

	// ----------------------
	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 2387.6606, 1752.0416, -1.8463 + 1.0, 20.0));
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI);

	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_NOT_SAVE, true);
	SetTimer("UpdateMinerRemelting", 10_000, false);
	
	// завод
	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, -1046.6550,2208.5771, 41.0, 20.0));
	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 263.7803, -203.8183, 1010.0, 15.0));
	
	factory_store_label[0] = CreateDynamic3DTextLabel("Ќа складе:\n{FF9900}“опливо: 0 / 1000000 л\n\n{6699FF}/sellf", 0xFFFFFFFF, -1112.0723,2167.1243, 42.0, 20.0); // топливо
	factory_store_label[1] = CreateDynamic3DTextLabel("Ќа складе:\n{FF9900}ћеталл: 0 / 1000000 кг\n\n{6699FF}/sellm", 0xFFFFFFFF, -1042.4534,2170.3594, 42.0, 20.0); // метал
	
	CreateDynamic3DTextLabel("—клад\nпроизводственного\nцеха\n\n{6699FF}/sellf\n/sellm\n{33CC00}/buyprod", 0xFFFFFFFF, -1046.6550, 2208.5771, 42.0, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, _, _, _, _, 50.0);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);
	
	// нефтезавод	
	CreateDynamic3DTextLabel("ѕр€мо\n\n{FFFFFF}ѕродажа топлива дл€ ј«—", 0xFF6600FF, 977.3191, 630.5245, 12.1154 - 0.5, 20.0);
	CreateDynamic3DTextLabel("Ќаправо\n\n{FFFFFF}ѕродажа топлива дл€ завода", 0xFF6600FF, 977.3191, 635.4105, 12.1154 - 0.5, 20.0);
	
	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 935.9503, 662.1276, 12.0029 + 5.0, 35.0)); // дл€ азс
	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_LABEL_2, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 1002.7327, 679.4678, 12.0029 + 5.0, 35.0)); // дл€ завода
	
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);
	SetTimer("UpdateOilFactory", 30_000, false);

	//воинска€ часть
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2] + 1.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 18, 3)); // металл
	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO, R_LABEL, CreateDynamic3DTextLabel("-No Init-", 0xFFFFFFFF, 759.6569, -132.3118, 1014.2467 + 1.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 18, 3)); // патроны
	
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_AMMO);

	print("[Repositories]: ¬се склады загружнены");
}

stock UpdateRepository(type, actionid)
{
	new fmt_str[128];
	new amount = GetRepositoryData(type, actionid, R_AMOUNT);
	new Text3D: label = GetRepositoryData(type, actionid, R_LABEL);
	new Text3D: label_2 = GetRepositoryData(type, actionid, R_LABEL_2);
	
	switch(type)
	{
		case REPOSITORY_TYPE_MINER:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_MINER_METAL:
				{
					format(fmt_str, sizeof fmt_str, "ѕокупка металла\n(дл€ развозчиков)\n\n{FFCD00}Ќа складе %d кг\n упить: /buym", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
					
					format(fmt_str, sizeof fmt_str, "ћеталл\n{0099CC}Ќа складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_ORE:
				{
					format(fmt_str, sizeof fmt_str, "–уда\n{00CC00}Ќа складе:\n%d кг", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
					
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_MINER_REMELTI:
				{
					format(fmt_str, sizeof fmt_str, " узница\n{CC9900}%d кг руды\nна переплавке", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_FACTORY_METAL..REPOSITORY_ACTION_FACTORY_PROD:
				{
					if(actionid != REPOSITORY_ACTION_FACTORY_PROD)
					{
						format(fmt_str, sizeof fmt_str, "Ќа складе:\n{FF9900}“опливо: %d / 1000000 л\n\n{6699FF}/sellf", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[0], 0xFFFFFFFF, fmt_str);
						
						format(fmt_str, sizeof fmt_str, "Ќа складе:\n{FF9900}ћеталл: %d / 1000000 л\n\n{6699FF}/sellm", GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT));
						UpdateDynamic3DTextLabelText(factory_store_label[1], 0xFFFFFFFF, fmt_str);
					}
				
					label = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL);
					label_2 = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_LABEL_2);
					
					format
					(
						fmt_str, sizeof fmt_str, 
						"»сходные материалы:\n"\
						"{FF9900}“опливо: %d / 1000000 л\n"\
						"ћеталл: %d / 1000000 кг\n"\
						"{33CC00}ѕродукты: %d шт.",
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT), 
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT), 
						GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_PROD, R_AMOUNT)
					);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_OIL_FACTORY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_OIL_FACTORY_F:
				{
					format(fmt_str, sizeof fmt_str, "“опливо дл€ ј«—\n\n{FFCD00}Ќа складе\n%d л топлива\n{33FF00} упить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
					
					format(fmt_str, sizeof fmt_str, "“опливо дл€ завода\n\n{FFCD00}Ќа складе\n%d л топлива\n{33FF00} упить: /buyf", amount);
					UpdateDynamic3DTextLabelText(label_2, 0xFFFFFFFF, fmt_str);
				}
			}
		}
		case REPOSITORY_TYPE_ARMY:
		{
			switch(actionid)
			{
				case REPOSITORY_ACTION_ARMY_METAL:
				{
					format(fmt_str, sizeof fmt_str, "ћеталл на складе:\n{66cc33}%d кг\n\n{9999ff}/takem\n/putm", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFFFFFFF, fmt_str);
				}
				case REPOSITORY_ACTION_ARMY_AMMO:
				{
					format(fmt_str, sizeof fmt_str, "ѕатроны на складе:\n%d / 200000 шт.", amount);
					UpdateDynamic3DTextLabelText(label, 0xFFCC00FF, fmt_str);
				}
			}
		}
	}
}

public: UpdateOilFactory()
{
	new add_fuels = (random(2500) + 500);
	new fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT) + add_fuels;
	
	new time = (random(fuels <= 20_000 ? 1 : 180) + 60) * 1000;
	
	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, fuels);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);
	
	SetTimer("UpdateOilFactory", time, false);
}

public: UpdateMinerRemelting()
{
	new remelting = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT);
	new ore = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT);
	new metall = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);
	new rand;
	
	// берем с переплавки руду
	rand = random(40) + 11; // от 10 до 50;
	if(remelting > 0) // если на переплавке есть руда
	{	
		if(rand > remelting) // если вз€ли больше чем было
			rand = remelting; // берем все что осталось
		
		remelting -= rand;
		
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting); // забрали с переплавки	
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, metall + rand); // добавили на склад металл		
	}
	
	// берем со склада руду
	rand = random(50) + 11; // от 10 до 60;
	if(remelting < 100) // если на пререплавке меньше 100 кг
	{
		if(rand > ore) // если вз€ли больше чем на складе
			rand = ore; // берем все что осталось
		
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE, R_AMOUNT, ore - rand); // вз€ли со склада
		SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI, R_AMOUNT, remelting + rand); // добавили в переплавку
	}
	
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_ORE);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_REMELTI);
	
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);
	
	SetTimer("UpdateMinerRemelting", (random(16)+15) * 1000, false);
}

stock SaveRepository(type = -1, actionid = -1)
{
	new fmt_str[128];
	
	if(type != -1 && actionid != -1)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(type, actionid, R_AMOUNT), type, actionid);
		mysql_query(mysql, fmt_str, false);
	}
	else 
	{
		for(new idx, idx_2; idx < sizeof g_repository; idx ++)
		{
			for(idx_2 = 0; idx_2 < sizeof g_repository[]; idx_2 ++)
			{
				if(GetRepositoryData(idx, idx_2, R_NOT_SAVE)) continue;
				
				format(fmt_str, sizeof fmt_str, "UPDATE repositories SET amount=%d WHERE type=%d AND action_id=%d LIMIT 1", GetRepositoryData(idx, idx_2, R_AMOUNT), idx, idx_2);
				mysql_query(mysql, fmt_str, false);				
			}
		}
	}
}

stock PreLoadPlayerAnimList(playerid)
{
	if(!GetPlayerData(playerid, P_ANIM_LIST_INIT))
	{
		PreLoadPlayerAnims(playerid);
		SetPlayerData(playerid, P_ANIM_LIST_INIT, true);
		
		return 1;
	}
	return 0;
}

stock SetPlayerAnimation(playerid, animid)
{
	if(0 <= animid <= sizeof anim_list-1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			switch(animid+1)
			{
				case 1..4: 
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1 + animid);
				}	
				default: 
				{
					new type = USE_ANIM_TYPE_NONE - 1;
					if(GetAnimListData(animid, AL_LOOP))
					{
						SetPlayerData(playerid, P_USE_ANIM, true);
						TextDrawShowForPlayer(playerid, anim_TD);
					}
					else
					{
						if(IsPlayerUseAnim(playerid))
						{
							SetPlayerData(playerid, P_USE_ANIM, false);
							TextDrawHideForPlayer(playerid, anim_TD);
						}
						type = USE_ANIM_TYPE_NONE;
					}
					ApplyAnimationEx(playerid, GetAnimListData(animid, AL_LIB), GetAnimListData(animid, AL_NAME), GetAnimListData(animid, AL_DELTA), (GetAnimListData(animid, AL_LOOP) % 2), GetAnimListData(animid, AL_LOCK_X), GetAnimListData(animid, AL_LOCK_Y), GetAnimListData(animid, AL_FREEZE), GetAnimListData(animid, AL_TIME), 0, type);
				}
			}
		}
		return 1;
	}
	return 0;
}

stock ClearPlayerUseAnim(playerid)
{
	if(IsPlayerUseAnim(playerid))
	{
		SetPlayerData(playerid, P_USE_ANIM_TYPE, USE_ANIM_TYPE_NONE);
		
		SetPlayerData(playerid, P_USE_ANIM, false);
		TextDrawHideForPlayer(playerid, anim_TD);
	
		ClearPlayerAnim(playerid);
	}
}

stock IsValidMail(email[], len = sizeof email)
{
    new count[2];
    if(!(5 <= len <= 60)) return 0;
    for(new i; i != len; i++)
    {
		switch(email[i])
		{
			case '@':
			{
				count[0]++;
				if(count[0] != 1 || i == len - 1 || i == 0) return 0;
			}
			case '.':
			{
				if(count[0] == 1 && count[1] == 0 && i != len - 1) 
				{
					count[1] = 1;
				}
			}
			case '0'..'9', 'a'..'z', 'A'..'Z', '_', '-':
			{
				continue;
			}
			default:
				return 0;
		}
    }
    if(count[1] == 0) return 0;
    return 1;
} 

stock ShowPlayerRegDialog(playerid, step)
{
	if(GetPlayerData(playerid, P_ACCOUNT_STATE) != ACCOUNT_STATE_REGISTER) return 0;
	
	switch(step)
	{
		case REGISTER_STATE_PASSWORD:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"{66CCFF}–егистраци€",
				"{FFFFFF}ƒобро пожаловать на сервер "SERVER_NAME" RolePlay\n"\
				"„тобы начать игру сначала необходимо зарегистрироватьс€\n\n"\
				"ѕожалуйста укажите пароль дл€ ¬ашего аккаунта\n"\
				"ќн будет запрашиватьс€ каждый раз, когда вы заходите на сервер\n\n"\
				"\t{66CC66}ѕримечани€:\n"\
				"\t- ѕароль может состо€ть из русских и латинских символов\n"\
				"\t- ѕароль чувствителен к регистру\n"\
				"\t- ƒлина парол€ от 6-ти до 15-ти символов",
				"ƒалее", ""
			);
		}
		case REGISTER_STATE_EMAIL:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"{66CCFF}Email",
				"{FFFFFF}¬ведите адрес ¬ашей электронной почты\n"\
				"»спользу€ его, вы сможете восстановить доступ к аккаунту\n"\
				"в случае взлома или если забудете пароль.\n\n"\
				"Ќа email мы вышлем ссылку. ¬ течение 14 дней ¬ы можете\n"\
				"перейти по ней дл€ подтверждени€ почты.\n\n"\
				"”бедитесь в правильности ввода и нажмите \"ƒалее\"",
				"ƒалее", ""
			);
		}
		case REGISTER_STATE_REFER:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT,
				"{66CCFF}Ќик пригласившего игрока",
				"{FFFFFF}≈сли ¬ы узнали о нашем сервере от своего друга\n"\
				"который тут играет, укажите его ник в поле ниже\n\n"\
				"{66CC66}ѕри достижении вами 4-го уровн€ он получит вознаграждение",
				"¬вести", "ѕропустить"
			);
		}
		case REGISTER_STATE_SEX:
		{
			Dialog
			(
				playerid, DIALOG_REGISTER, DIALOG_STYLE_MSGBOX,
				"{66CCFF}ѕол",
				"{FFFFFF}¬ыберите пол вашего персонажа",
				"ћужской", "∆енский"
			);
		}
		case REGISTER_STATE_RULES:
		{
			ShowServerRules(playerid, true);
		}
		case REGISTER_STATE_CREATE_ACC:
		{
			if(CreatePlayerAccount(playerid))
			{
				SetPlayerData(playerid, P_ACCOUNT_STATE, ACCOUNT_STATE_REG_SKIN);
			
				SetSpawnInfo(playerid, 0, 0, 332.2033, -174.1066, 999.6743, 1.0, 0, 0, 0, 0, 0, 0);
				SpawnPlayer(playerid);
			
				SendClientMessage(playerid, 0xFFFFFFFF, " ");
				SendClientMessage(playerid, 0xFFFFFFFF, "–егистраци€ завершена!");
				SendClientMessage(playerid, 0x66CC00FF, "“еперь выберите внешность ¬ашего персонажа");
				SendClientMessage(playerid, 0xCECECEFF, "ѕодсказка: »спользуйте {FF6600}курсор мышки {CECECE}дл€ выбора внешности");
			}
			else 
			{
				SendClientMessage(playerid, 0xFF6600FF, "ќшибка создани€ аккаунта, перезайдите и повторите попытку");
				Kick:(playerid);
			}
		}
		default:
			return 1;
	}
	
	SetPlayerData(playerid, P_ACCOUNT_STEP_STATE, step);
	return 1;
}

stock ShowServerRules(playerid, bool: reg = false)
{
	Dialog
	(
		playerid, reg ? DIALOG_REGISTER : DIALOG_PLAYER_STATS, DIALOG_STYLE_MSGBOX,
		"{66CCFF}ѕравила сервера",
		"{FFCD00}1. ќсновное\n"\
		"{FFFFFF}- «апрещено использовать любые читы, трейнеры, моды или CLEO скрипты\n"\
		"- «апрещен DeathMatch (DM) - убийство и нанесение вреда игрокам без причины\n"\
		"- «апрещено убивать игроков на спавне (на месте, где они по€вл€ютс€ в игре)\n"\
		"- «апрещены убийства путем наезда на него или стрельбы из авто\n"\
		"- «апрещено уходить на паузу в цел€х спасени€ от нападающих\n"\
		"- «апрещено использование возможностей сервера дл€ создани€ неудобств другим игрокам\n\n"\
		"{FFCD00}2. ѕроцесс общени€\n"\
		"{FFFFFF}- «апрещен мат, оскорбление других игроков\n"\
		"- «апрещены угрозы другим игрокам (не относ€щиес€ к игровому процессу)\n"\
		"- «апрещено писать транслитом (например \"ya zawel na server\")\n"\
		"- «апрещена люба€ реклама сторонних ресурсов\n"\
		"- «апрещено флудить (часто повтор€ть одинаковые фразы, или фразы без смысловой нагрузки)\n\n"\
		"{FFCD00}3. јдминистраци€\n"\
		"{FFFFFF}- Ќеобходимо сообщать администрации сервера о любых случа€х нарушени€ данных правил\n"\
		"- јдминистраци€ самосто€тельно выбирает штрафные санкции дл€ каждого конкретного случа€\n"\
		"- —анкции могут примен€тьс€ сразу после нарушени€ или через врем€ (например, впоследствии поступлени€ жалобы)\n"\
		"- ≈сли штрафна€ санкци€ была применена к вам ошибочно, св€житесь с администрацией",
		"ѕрин€ть", "ќтмена"
	);
}

stock GetPlayerHouseName(playerid)
{
	new name[32];
	new houseid = GetPlayerHouse(playerid);

	if(houseid != -1)
	{
		switch(GetPlayerData(playerid, P_HOUSE_TYPE))
		{
			case HOUSE_TYPE_HOME:
			{
				if(GetHouseData(houseid, H_ENTRACE) != -1)
				{
					format(name, sizeof name, "ѕодъезд %d (є%d на %d этаже)", GetHouseData(houseid, H_ENTRACE) + 1, GetHouseData(houseid, H_FLAT_ID) + 1, GetHouseData(houseid, H_FLAT_ID) / 4 + 1);
				}
				else format(name, sizeof name, "%s (є%d)", GetHouseData(houseid, H_NAME), houseid);
			}
			case HOUSE_TYPE_ROOM:
			{
				format(name, sizeof name, "¬ гост€х (дом є%d)", houseid);
			}
			case HOUSE_TYPE_HOTEL:
			{
				format(name, sizeof name, "√остиница (є%d на %d этаже)", (GetPlayerData(playerid, P_HOUSE_ROOM) % 12) + 1, (GetPlayerData(playerid, P_HOUSE_ROOM) / 12) + 1);
			}
		}
	}
	else name = "Ѕездомный";
	
	return name;
}

stock GetPlayerBizName(playerid)
{
	new name[32];
	new businessid = GetPlayerBusiness(playerid);
	
	if(businessid != -1)
	{
		format(name, sizeof name, "%s (є%d)", GetBusinessData(businessid, B_NAME),  businessid);
	}
	else name = "Ќет";

	return name;
}

stock GetPlayerJobAndRankName(playerid)
{
	new team = GetPlayerTeamEx(playerid);
	new rang = GetPlayerJob(playerid);
	new fmt_rank[32];

	if(TEAM_GOVERNMENT <= team <= TEAM_OPG_LYTKARINSKAYA)
	{
		if(!(1 <= rang <= 10))
			rang = 1;

		format(fmt_rank, sizeof fmt_rank, rank_names[team - 1][rang - 1]);
	}
	else
	{
	    format(fmt_rank, sizeof fmt_rank, GetPlayerJobName(playerid));
	}

	return fmt_rank;
}

stock GetPlayerTeamName(playerid)
{
	new team_name_id = GetPlayerTeamEx(playerid);
	switch(team_name_id)
	{
		case TEAM_GOVERNMENT..TEAM_RADIO:
			return team_names[team_name_id];

		case TEAM_DPS..TEAM_FBI:
			return team_names[5];

		case TEAM_OPG_ARZAMASKAYA..TEAM_OPG_LYTKARINSKAYA:
			return team_names[team_name_id - 2];

		default:
			return team_names[0];
	}
	return team_names[0];
}

stock IsTeamSubdivision(team)
{
	if(TEAM_DPS <= team <= TEAM_FBI)
	{
		return true;
	}
	return false;
}

stock GetPlayerSubdivisionName(playerid)
{
	new player_team = GetPlayerTeamEx(playerid);
	
	if(IsTeamSubdivision(player_team))
		return team_subdivision_name[player_team - 4];

	return team_subdivision_name[0];
}

stock GetPlayerTeamStats(playerid)
{
	new fmt_text[110];
	
	format(fmt_text, sizeof fmt_text, "ќрганизаци€:\t\t\t%s\n", GetPlayerTeamName(playerid));
	
	if(IsTeamSubdivision(GetPlayerTeamEx(playerid)))
	{
	    format(fmt_text, sizeof fmt_text, "%sѕодразделение:\t\t%s\n", fmt_text, GetPlayerSubdivisionName(playerid));
	}

	return fmt_text;
}

stock GetPlayerGameStatus(playerid)
{
	new status[16];

	switch(GetPlayerLevel(playerid))
	{
	    case 0: status = "ќшибка";
	    case 1: status = "Ѕез статуса";
	    case 2..5: status = "Ќовичок";
	    case 6..9: status = "–азвивающийс€";
	    case 10..14: status = "ќсвоившийс€";
	    case 15..19: status = "ќпытный игрок";
	    case 20..29: status = "јктивный игрок";
	    default: status = "Ћегендарный";
	}

	if(GetPlayerTeamEx(playerid) && (GetPlayerJob(playerid) == 10)) status = "Ћидер";
	if(GetPlayerAdminEx(playerid) != 0) status = "јдминистратор";

	return status;
}

stock ShowPlayerStats(playerid, to_player = -1)
{
	if(to_player < 0)
		to_player = playerid;
		
	new fmt_str[1024],
	    rank_value[3] = "Ч";
	    
    if(1 <= GetPlayerTeamEx(playerid) <= 10)
	{
		if(1 <= GetPlayerJob(playerid) <= 10)
			valstr(rank_value, GetPlayerJob(playerid));
		else
			rank_value = "1";
	}

	format
	(
		fmt_str, sizeof fmt_str, 
		"{FFFFFF}»м€:\t\t\t\t{0099FF}%s\n"\
		"{FFFFFF}”ровень:\t\t\t%d\n"\
		"ќчки опыта:\t\t\t%d из %d\n"\
		"Ќомер телефона:\t\t%d\n"\
		"Ќа счету телефона:\t\t%d руб\n"\
		"«аконопослушность:\t\t%d\n"\
		"”ровень розыска:\t\t%d\n"\
		"”ровень улучшений:\t\t%d\n"\
		"—ила:\t\t\t\t%d\n"\
		"Ќаркотики:\t\t\t%d\n"\
		"ѕатроны:\t\t\t%d\n"\
		"ћеталл:\t\t\t%d\n"\
		"ѕол:\t\t\t\t%s\n"\
		"%s:\t\t\t%s\n\n"\
		"%s"\
		"–абота / должность:\t\t%s\n"\
		"–анг:\t\t\t\t%s\n\n"\
		"ѕроживание:\t\t\t%s\n"\
		"Ѕизнес:\t\t\t%s\n"\
		"»гровой статус:\t\t%s",
		GetPlayerNameEx(playerid),
		GetPlayerLevel(playerid),
		GetPlayerExp(playerid),
		GetExpToNextLevel(playerid),
		GetPlayerPhone(playerid),
		GetPlayerData(playerid, P_PHONE_BALANCE),
		GetPlayerData(playerid, P_LAW_ABIDING),
		GetPlayerSuspect(playerid),
		GetPlayerData(playerid, P_IMPROVEMENTS),
		GetPlayerData(playerid, P_POWER),
		GetPlayerData(playerid, P_DRUGS),
		GetPlayerData(playerid, P_AMMO),
		GetPlayerData(playerid, P_METALL),
		GetPlayerSexName(playerid),
		GetPlayerSex(playerid) ? ("«амужем за") : ("∆енат на"),
		GetPlayerData(playerid, P_WIFE_NAME),
		GetPlayerTeamStats(playerid), 		// P_TEAM | P_SUBDIVISON
		"Ќет",
		rank_value, 			// P_JOB
		GetPlayerHouseName(playerid),
		GetPlayerBizName(playerid),
		GetPlayerGameStatus(playerid)
	);
	return Dialog(to_player, DIALOG_PLAYER_STATS, DIALOG_STYLE_MSGBOX, "{CC9900}—татистика игрока", fmt_str, "Ќазад", "«акрыть");
}

stock ShowPlayerCMDSDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_PLAYER_CMDS, DIALOG_STYLE_LIST,
		"{FFCD00}—писок команд",
		"{99CC00}1. ѕолучить описание\n"\
		"2. ќбщие команды\n"\
		"3. ќбщение\n"\
		"4. ƒома\n"\
		"5. Ѕизнес и ј«—\n"\
		"6. –аботы\n"\
		"7. Ѕанды и мафии\n"\
		"8. ѕравительство\n"\
		"9. ћинистерство внутренних дел\n"\
		"10. ћинистерство обороны\n"\
		"11. ћин. здравоохранени€\n"\
		"12. “¬ и радио\n"\
		"13. Ћидерам\n"\
		"14. ѕрочее",
		"¬ыбрать", "Ќазад"
	);
	return 1;
}

stock ShowPlayerSettings(playerid)
{	
	static const 
		chat_type_name[3][17] = {"{FF3333}ќтключен", "{00CC00}—тандарт", "{0099FF}Great"};
	
	new s_info[256];
	format
	(
		s_info, sizeof s_info,
		"ќсновной чат\t\t%s\n"\
		"„ат организации\t%s\n"\
		"Ќики над игроками\t%s\n"\
		"Ќики в чате\t\t%s\n"\
		"ID игроков в чате\t%s\n"\
		"”правл. транспортом\t%s\n"\
		"{888888}[—охранить настройки]",
		chat_type_name[GetPlayerSettingData(playerid, S_CHAT_TYPE)],
		GetPlayerSettingData(playerid, S_TEAM_CHAT) 	? ("{00CC00}¬ключен")  : ("{FF3333}ќтключен"),
		GetPlayerSettingData(playerid, S_PLAYERS_NICK) 	? ("{00CC00}¬ключены") : ("{FF3333}ќтключены"),
		GetPlayerSettingData(playerid, S_NICK_IN_CHAT) 	? ("{00CC00}¬ключены") : ("{FF3333}ќтключены"),
		GetPlayerSettingData(playerid, S_ID_IN_CHAT) 	? ("{00CC00}¬ключены") : ("{FF3333}ќтключены"),
		GetPlayerSettingData(playerid, S_VEH_CONTROL) 	? ("{00CC00} лавиши и команды") : ("{FF9900}“олько команды")
	);
	return Dialog(playerid, DIALOG_PLAYER_SETTINGS, DIALOG_STYLE_LIST, "{FFCD00}Ћичные настройки", s_info, "¬кл|¬ыкл", "Ќазад");
}

stock ShowPlayerSecuritySettings(playerid)
{
	Dialog
	(
		playerid, DIALOG_PLAYER_SECURITY_SETTINGS, DIALOG_STYLE_LIST,
		"{FFCD00}Ќастройки безопасности",
		"1. »нформаци€ о настройках\n"\
		"2. ћобильный телефон\n"\
		"3. '—лучайный' PIN-код\n"\
		"4. Google Authenticator\n"\
		"{00CC66}5. »зменить пароль\n"\
		"6. »зменить 'случайный' PIN-код\n"\
		"{0099FF}7. —татус безопасности\n"\
		"{999999}8. ѕодтвердить Email",
		"¬ыбрать", "Ќазад"
	);
}

stock ShowPlayerReportDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_REPORT, DIALOG_STYLE_INPUT,
		"{FFCD00}—в€зь с администрацией",
		"{FFFFFF}¬ведите свое сообщение дл€ администрации сервера\n"\
		"ќно должно быть кратким и €сным\n\n"\
		"{66CC66}≈сли вы хотите подать жалобу на игрока,\n"\
		"об€зательно укажите его ID и причину жалобы",
		"ќтправить", "Ќазад"
	);
}

stock ShowPlayerChangeNameDialog(playerid)
{
	Dialog
	(
		playerid, DIALOG_CHANGE_NAME, DIALOG_STYLE_INPUT,
		"{FFCD00}»зменение имени",
		"{FFFFFF}¬ы можете изменить им€ своего персонажа, если оно не соответствует RP правилам\n"\
		"¬о всех остальных случа€х смена имени осуществл€етс€ в {6699FF}/menu > ƒополнительно.\n\n"\
		"{FFFFFF}RP ник имеет формат »м€_‘амили€.\n"\
		"Ќапример: Andrey_Ivanov, Nikolas_Ryan, Kate_Valente и т. п.\n\n"\
		"¬ведите новое им€ в поле ниже. ƒопустимы только латинские символы:",
		"»зменить", "«акрыть"
	);
}

stock ShowPlayerImprovementsDialog(playerid)
{
	new fmt_str[67 + 1];
	new dest[((sizeof(fmt_str)-1) * (sizeof(g_player_improvements))) + 10 + 1];
	
	new str_numeric[14 + 1];
	new my_i_level = GetPlayerData(playerid, P_IMPROVEMENTS);
	
	for(new idx = 0; idx < sizeof g_player_improvements; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d. %s\t\t", idx + 1, GetPlayerImprovementInfo(idx, I_NAME));
		if(idx == 2)
			strcat(fmt_str, "\t");
			
		if(my_i_level > idx)
		{
			strins(fmt_str, "{FFCD00}", 0);
			strcat(fmt_str, "јктивно\n");
			strcat(dest, fmt_str);
	
			continue;
		}
		else if(my_i_level < idx)
		{
			strins(fmt_str, "{FF3333}", 0);
		}
		else 
		{
			strcat(fmt_str, "{00CC00}");
		}
		strcat(dest, fmt_str);
		valfmt(str_numeric, GetPlayerImprovementInfo(idx, I_PRICE));
	
		format(fmt_str, sizeof fmt_str, "требуетс€ %d уровень и %s руб\n", GetPlayerImprovementInfo(idx, I_LEVEL), str_numeric);
		strcat(dest, fmt_str);
	}
	strcat(dest, "»нформаци€");
	
	return Dialog(playerid, DIALOG_PLAYER_IMPROVEMENTS, DIALOG_STYLE_LIST, "{FFCD00}”лучшени€", dest, "¬ыбрать", "Ќазад");
}

stock SendMessageToAdmins(message[], color, a_level = 1)
{
	if(a_level < 1)
		a_level = 1;
	
	new count;
	foreach(new playerid : Player)
	{
		if(!IsPlayerLogged(playerid)) continue;
		if(GetPlayerAdminEx(playerid) < a_level) continue;
		
		SendClientMessage(playerid, color, message);
		count ++;
	}
	return count;
}

stock SendMessageToTeam(team, message[], color = -1, playerid = -1)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(GetPlayerSettingData(i, S_TEAM_CHAT) == 0) continue;
		else if(GetPlayerTeamEx(i) != team) continue;
		else if(i == playerid) continue;

		SendClientMessage(i, color, message);
	}
	return 1;
}

stock SendMessageToPoliceTeam(message[], color = -1, playerid = -1)
{
	SendMessageToTeam(TEAM_DPS, message, color, playerid);
	SendMessageToTeam(TEAM_PPS, message, color, playerid);
	SendMessageToTeam(TEAM_FBI, message, color, playerid);

	return 1;
}

stock SendMessageToJob(to_job, message[], color = -1, playerid = -1, bool: org_chat = false)
{
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(playerid)) continue;
		else if(GetPlayerJob(playerid) != to_job) continue;
		else if(org_chat && !GetPlayerSettingData(playerid, S_TEAM_CHAT)) continue;
		else if(playerid == i) continue;

		SendClientMessage(i, color, message);
	}
	return 1;
}

stock HidePlayerDialog(playerid)
{
	return Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, "NULL", "NULL", "NULL", "NULL");
}

stock Shuffle(array[], size = sizeof array)
{
	new 
		index, 
		rand,
		buffer;
	
	for(index = 0; index < size; index ++)
	{
		rand = random(size);
		buffer = array[index];
		
		array[index] = array[rand];
		array[rand] = buffer;
	}
}

stock ShowPlayerPinCodePTD(playerid, s_state)
{
	if(GetPlayerPinCodeState(playerid) != PIN_CODE_STATE_NONE) return ;
	pin_code_input[playerid][0] = 0;
	
	switch(s_state)
	{
		case PIN_CODE_STATE_SET:
			SendClientMessage(playerid, 0x3399FFFF, "ѕридумайте свой PIN-код и наберите его");
		
		case PIN_CODE_STATE_CHECK:
			SendClientMessage(playerid, 0xFFFF00FF, "Ќаберите ¬аш текущий PIN-код");

		case PIN_CODE_STATE_CHANGE: 
			SendClientMessage(playerid, 0xFFFF00FF, "Ќаберите новый PIN-код");
		
		case PIN_CODE_STATE_LOGIN_CHECK:
			SendClientMessage(playerid, 0xFFFFFFFF, "—истема безопасности запрашивает ввод ¬ашего случайного PIN-кода");
		
		default: 
			return ;
	
	}
	
	new values[10] = {0, 1, ...};
	new ch[2];
	Shuffle(values);
	
	new Float: add_pos_x, Float: add_pos_y;
	for(new idx = 0; idx < 10; idx ++)
	{
		add_pos_x = ((idx % 3) * 40.0);
		add_pos_y = ((idx / 3) * 40.0);
		
		if(idx == 9)
			add_pos_x += 40.0;
		
		valstr(ch, values[idx]);
		SetPlayerPinCodeValue(playerid, idx, values[idx]);
		
		pin_code_PTD[playerid][idx] = CreatePlayerTextDraw(playerid, 420.0 + add_pos_x, 170.0 + add_pos_y, ch);
		PlayerTextDrawTextSize(playerid, pin_code_PTD[playerid][idx], 445.0 + add_pos_x, 25.0);
		PlayerTextDrawLetterSize(playerid, pin_code_PTD[playerid][idx], 1.0, 3.0);
		PlayerTextDrawAlignment(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawBackgroundColor(playerid, pin_code_PTD[playerid][idx], 0x000000FF);
		PlayerTextDrawBoxColor(playerid, pin_code_PTD[playerid][idx], 0x80808080);
		PlayerTextDrawColor(playerid, pin_code_PTD[playerid][idx], 0xFFFFFFFF);
		PlayerTextDrawFont(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetOutline(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetProportional(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetShadow(playerid, pin_code_PTD[playerid][idx], 2);
		PlayerTextDrawUseBox(playerid, pin_code_PTD[playerid][idx], 1);
		PlayerTextDrawSetSelectable(playerid, pin_code_PTD[playerid][idx], 1);

		PlayerTextDrawShow(playerid, pin_code_PTD[playerid][idx]);
	}
	SelectTextDraw(playerid, 0x0066FFFF);

	SetPlayerPinCodeState(playerid, s_state);
}

stock HidePlayerPinCodePTD(playerid, bool: canel_select = true)
{
	if(GetPlayerPinCodeState(playerid) != PIN_CODE_STATE_NONE)
	{
		SetPlayerPinCodeState(playerid, PIN_CODE_STATE_NONE);
		
		if(canel_select)
			CancelSelectTextDraw(playerid);
		
		for(new idx = 0; idx < 10; idx ++)
		{
			PlayerTextDrawHide(playerid, pin_code_PTD[playerid][idx]);
			PlayerTextDrawDestroy(playerid, pin_code_PTD[playerid][idx]);
		}
	}
}

stock ShowCurrentTime(playerid)
{
	new 
		hour, minute, 
		year, month, day;
		
	gettime(hour, minute);
	getdate(year, month, day);
	
	SetPlayerChatBubble(playerid, "звонит в службу точного времени...", 0xDD90FFFF, 25.0, 7000);
	if(!IsPlayerInAnyVehicle(playerid))
		ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, false, 0, 0, 0, 0, 0);
	
	new fmt_str[350];
	
	format(fmt_str, sizeof fmt_str, "~y~%d:%02d~n~~b~~h~%02d.%02d.%d", hour, minute, day, month, year);
	GameTextForPlayer(playerid, fmt_str, 3000, 1);
	
	format
	(
		fmt_str, sizeof fmt_str, 
		"{FFFFFF}«дравствуйте!\n"\
		"¬ы позвонили в службу точного времени\n\n"\
		"—егодн€шн€€ дата:\t\t{66CC00}%d %s %d г.\n"\
		"{FFFFFF}ƒень недели:\t\t\t{66CC00}%s\n"\
		"{FFFFFF}“екущее врем€:\t\t{3399FF}%d:%02d\n\n"\
		"{FFFFFF}¬рем€ в игре за час:\t\t{FF7000}%d мин\n"\
		"{FFFFFF}¬рем€ в игре сегодн€:\t\t{FF7000}%d ч %d мин\n"\
		"{FFFFFF}¬рем€ в игре вчера:\t\t{FF7000}%d ч %d мин",
		day,
		GetMonthName(month),
		year,
		GetDayName(GetDayOfWeek(year, month, day)),
		hour,
		minute,
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_HOUR), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY), CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(GetPlayerData(playerid, P_GAME_FOR_DAY_PREV), CONVERT_TIME_TO_MINUTES)
	);
	SendClientMessage(playerid, 0x99CC00FF, "¬ы позвонили в службу точного времени");
	
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}“очное врем€", fmt_str, "«акрыть", "");
}

stock GetDayOfWeek(year, month, day)
{
    new a = (14 - month) / 12; 
    new y = year + 4800 - a; 
	new m = month + 12 * a - 3;
	new c_date = day + (153 * m + 2) / 5 + 365 * y + y / 4 - y / 100 + y / 400 - 32045;
	new day_of_week = c_date % 7 + 1;

    return day_of_week;
}

stock UpdateCharity()
{
	if(cache_is_valid(charity_cache_data))
	{
		cache_delete(charity_cache_data);
	}
	new Cache: result;
	
	result = mysql_query(mysql, "SELECT (SELECT a.name FROM accounts a WHERE a.id = c.uid) as name, SUM(c.money) as total FROM charity c GROUP BY c.uid ORDER BY total DESC LIMIT 25", true);
	charity_cache_data = result;
}

stock Dialog(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	SetPlayerData(playerid, P_LAST_DIALOG, dialogid);
	
	return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}

stock abs(value)
{
	return value = -value;
}

stock IsNumeric(dest[], pos=0)
{
	new is_numeric = true;
	do
	{
		switch(dest[pos])
		{
			case '0'..'9': continue;
			default:
			{
				is_numeric = false;
				break;
			}
		}
	}
	while(dest[++pos]);
	
	return is_numeric;
}

stock valfmt(dest[], value, size = sizeof dest)
{	
	new buffer[15 + 1];
	valstr(buffer, value);
	
	new pos = strlen(buffer);
	while((pos -= 3) > 0)
	{
		strins(buffer, ".", pos);
	}
	format(dest, size, "%s", buffer);
}

stock GetSubnet(dest[], ip[], size = sizeof dest)
{
	new pos, dots;
	do
	{
		if(ip[pos] == '.')
		{
			if(++dots == 2) 
			{	
				ip[pos] = 0;
				break;
			}
		}
	}
	while(ip[++pos]);
	
	format(dest, size, "%s", ip);
}

stock GetFamilyChatID(team)
{
	if(TEAM_GOVERNMENT <= team <= TEAM_RADIO)
	{
		return 1;
	}
	else if(TEAM_DPS <= team <= TEAM_FBI)
	{
		return 2;
	}
	else if(TEAM_OPG_ARZAMASKAYA <= team <= TEAM_OPG_LYTKARINSKAYA)
	{
		return team;
	}
	return 0;
}

stock GivePlayerMoneyEx(playerid, money, description[]="None", bool:save=true, bool:game_text=true)
{
	if(money < 0 && GetPlayerMoneyEx(playerid) < money) return -1;

	new fmt_str[185];
	AddPlayerData(playerid, P_MONEY, +, money);
	GivePlayerMoney(playerid, money);
	
	format(fmt_str, sizeof fmt_str, "INSERT INTO money_log (uid,uip,time,money,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), money, description);
	mysql_query(mysql, fmt_str, false);
	
	if(save)
	{
		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);
	}
	if(game_text)
	{
		format(fmt_str, sizeof fmt_str, "%s%d rub", money < 0 ? ("~r~") : ("~g~+"), money);
		GameTextForPlayer(playerid, fmt_str, 4000, 1);
	}
	return 1;
}

stock GivePlayerDonate(playerid, donate, description[]="None", bool:save=true, bool:game_text=true)
{
	new fmt_str[185];
	AddPlayerData(playerid, P_DONATE_CURRENT, +, donate);
	AddPlayerData(playerid, P_DONATE_TOTAL, +, donate);
	
	format(fmt_str, sizeof fmt_str, "INSERT INTO donate_log (uid,uip,time,donate,description) VALUES (%d,'%s',%d,%d,'%s')", GetPlayerAccountID(playerid), GetPlayerIpEx(playerid), gettime(), donate, description);
	mysql_query(mysql, fmt_str, false);
	
	if(save)
	{
		UpdatePlayerDatabaseInt(playerid, "donate_current", GetPlayerCurrentDonate(playerid));
		UpdatePlayerDatabaseInt(playerid, "donate_total", GetPlayerTotalDonate(playerid));
	}
	if(game_text)
	{
		format(fmt_str, sizeof fmt_str, "~w~%s%d rub", donate < 0 ? ("") : ("+"), donate);
		GameTextForPlayer(playerid, fmt_str, 4000, 1);
	}
	return 1;
}

stock SendMessageInLocal(playerid, message[], color, Float: radius = 30.0)
{
	new virtual_world = GetPlayerVirtualWorld(playerid);
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		if(GetPlayerVirtualWorld(idx) != virtual_world) continue;
		if(!IsPlayerInRangeOfPoint(idx, radius, x, y, z)) continue;
		
		SendClientMessage(idx, color, message);
	}
	return 1;
}

stock Action(playerid, message[], Float:radius=25.0, bool:bubble=true)
{
	if(bubble)
		SetPlayerChatBubble(playerid, message, 0xDD90FFFF, radius, 7000);
		
	new fmt_str[128];

	format(fmt_str, sizeof fmt_str, "%s %s", GetPlayerNameEx(playerid), message);
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, radius);
	
	return 1;
}

stock EnablePlayerGPS(playerid, markertype, Float: x, Float: y, Float: z, message[] = "ћесто отмечено у ¬ас на GPS")
{
	SetPlayerGPSInfo(playerid, G_POS_X, x);
	SetPlayerGPSInfo(playerid, G_POS_Y, y);
	SetPlayerGPSInfo(playerid, G_POS_Z, z);
	
	SetPlayerMapIcon(playerid, 98, x, y, z, markertype, 0, MAPICON_GLOBAL);
	TextDrawShowForPlayer(playerid, gps_TD);
	
	if(strlen(message))
		SendClientMessage(playerid, 0xFFFF00FF, message);
		
	SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_ON);
	
	return 1;
}

stock DisablePlayerGPS(playerid)
{
	if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_ON)
	{
		RemovePlayerMapIcon(playerid, 98);
		TextDrawHideForPlayer(playerid, gps_TD);
		
		SetPlayerGPSInfo(playerid, G_ENABLED, GPS_STATUS_OFF);
	}
	return 1;
}

stock IsPlayerInRangeOfPlayer(playerid, to_player, Float: distance)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(to_player, x, y, z);
	
	return IsPlayerInRangeOfPoint(playerid, distance, x, y, z);
}

stock GetPlayerMaxStorage(playerid, storage)
{
	new amount;

	switch(storage)
	{
		case STORAGE_METALL: amount = 20;
		case STORAGE_AMMO: amount = 250;
		case STORAGE_DRUGS: amount = 500;
	}

	return GetPlayerData(playerid, P_IMPROVEMENTS) >= 3 ? amount * 2 : amount;
}

stock GetPlayerOwnableCars(playerid)
{
	new count,
		query[70],
		Cache: result;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	count = cache_num_rows();

	cache_delete(result);

	return count;
}

stock IsPlayerHasDonations(playerid)
{
	new query[80];
	new Cache: result;
	new rows;
	
	mysql_format(mysql, query, sizeof query, "SELECT * FROM `donations` WHERE acc_id = '%d' AND activated = 0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);
	
	rows = cache_num_rows();
	
	cache_delete(result);
	
	if(rows) return 1;
	
	return 0;
}

stock GetPlayerLastDonation(playerid)
{
	new query[100],
		Cache: result,
		count;

	mysql_format(mysql, query, sizeof query, "SELECT amount FROM `donations` WHERE acc_id = '%d' AND activated = 1 ORDER BY id DESC LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	if(cache_num_rows())
		count = cache_get_row_int(0, 0);

	cache_delete(result);

	return count;
}

stock ShowPlayerDonateDialog(playerid)
{
	new fmt_text[570];

	format
	(
	    fmt_text,
	    sizeof fmt_text,
	    "{ffffff}\
	    ¬ этом разделе вы можете использовать дополнительные\n\
	    возможности сервера. „тобы получить к ним доступ,\n\
	    необходимо пополнить свой игровой счЄт. ќписание всех\n\
	    дополнительных возможностей, а также о способах\n\
		пополнени€ счЄта вы можете узнать на нашем сайте:\n\
		{33cc66}"#SERVER_SITE" (раздел \"ƒонат\")\n\n\
		{6699cc}»нформаци€:{ffffff}\n\
		Ќомер аккаунта:\t\t\t%d\n\
		“екущее состо€ние счЄта:\t\t%d.00 руб.\n\
		ѕоследнее пополнение:\t\t%d.00 руб.\n\
		ќбща€ сумма пополнений:\t\t%d.00 руб.\
		",
		GetPlayerAccountID(playerid),
		GetPlayerCurrentDonate(playerid),
		GetPlayerLastDonation(playerid),
		GetPlayerTotalDonate(playerid)
	);

	Dialog
	(
	    playerid, DIALOG_DONATE_INFO, DIALOG_STYLE_MSGBOX,
	    "{FFCC00}ƒополнительные возможности",
	    fmt_text,
	    "ѕросмотр", "Ќазад"
	);
	return 1;
}

stock ShowPlayerDonateMenu(playerid)
{
    new fmt_text[640];

	format
	(
	    fmt_text,
	    sizeof fmt_text,
	    "\
	    {99cc00}1. ѕросмотреть последние пополнени€\n\
	    {99cc00}2.  онвертировать рубли в игровые деньги\n\
	    3. »зменить им€\t\t\t\t\t{6699cc}%d руб.\n\
	    4. —н€ть все предупреждени€\t\t\t\t{6699cc}%d руб.\n\
	    5. ѕолучить наркотик Ћ—ƒ (8 доз)\t\t\t{6699cc}%d руб.\n\
	    6. ѕодделка документов (законопослушность +10)\t{6699cc}%d руб.\n\
	    7. ѕокупка 4-х значного номера телефона\t\t{6699cc}%d руб.\n\
	    8. ѕрокачать силу или навыки владени€ оружием\t{6699cc}%d руб./2 ед.\n\
		9. »зменить номер транспортного средства\t\t{6699cc}от %d руб.\n\
		10. ”величить количество слотов дл€ транспорта\t{6699cc}%d руб./слот\
	    ",
	    donate_prices[0], donate_prices[1], donate_prices[2],
	    donate_prices[3], donate_prices[4], donate_prices[5],
		donate_prices[6], donate_prices[7]
	);

	Dialog
	(
	    playerid, DIALOG_DONATE_MENU, DIALOG_STYLE_LIST,
	    "{FFCC00}ћеню дополнительных возможностей",
	    fmt_text,
	    "¬ыбрать", "«акрыть"
	);

	return 1;
}

stock ShowPlayerDonations(playerid, name[])
{
	new query[80],
		fmt_text[1384],
		Cache: result,
		sql_id = GetPlayerSqlIDByName(name),
		player_sql_id = GetPlayerAccountID(playerid);

	if(sql_id == -1) return SendClientMessage(playerid, 0x999999FF, "»грок с таким именем не найден");

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `donations` WHERE acc_id = '%d' AND activated = 0", sql_id);
	result = mysql_query(mysql, query, true);

	if(!cache_num_rows())
	{
		if(sql_id == player_sql_id)
			format
			(
				fmt_text, sizeof fmt_text,
				"{ffffff}\
				¬ы еще ни разу не пополн€ли свой аккаунт.\n\
				Ёто можно сделать на сайте {33cc66}"#SERVER_SITE" {ffffff}в разделе {6699cc}\"ƒонат\".\
				"
			);

		else
			format
			(
				fmt_text, sizeof fmt_text,
				"{ffffff}\
				»грок еще ни разу не пополн€л свой аккаунт.\
				"
			);

		Dialog
		(
			playerid, sql_id == player_sql_id ? DIALOG_DONATIONS : INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			"{FFCC00}ѕоследние пополнени€",
			fmt_text,
			sql_id == player_sql_id ? "Ќазад" : "«акрыть", ""
		);
		
		cache_delete(result);
		return 1;
	}

	format
	(
	    fmt_text,
        sizeof(fmt_text),
        "\
        ƒата и врем€\t\t\t—умма{ffffff}\n\
        "
	);

	for(new i = 0; i < cache_num_rows(); i++)
	{
	    new tmp_text[64], tmp_date[16], tmp_time[16];
	    
	    cache_get_field_content(i, "date", tmp_date);
		cache_get_field_content(i, "time", tmp_time);
	    
	    format(tmp_text, sizeof tmp_text, "\n%s в %s\t\t%d.00 руб.", tmp_date, tmp_time, cache_get_field_content_int(i, "amount"));
	    strcat(fmt_text, tmp_text);
	}
	
	Dialog
	(
	    playerid,
	    sql_id == player_sql_id ? DIALOG_DONATIONS : INVALID_DIALOG_ID,
	    DIALOG_STYLE_MSGBOX,
	    "{FFCC00}20 последних операций пополнени€",
	    fmt_text,
	    sql_id == player_sql_id ? "Ќазад" : "«акрыть", ""
	);

	return 1;
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync, anim_type=USE_ANIM_TYPE_NONE)
{
	SetPlayerData(playerid, P_USE_ANIM_TYPE, anim_type);
	return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock ResetSkin(playerid)
{
	if(GetPlayerData(playerid, P_OSKIN) && 1 <= GetPlayerTeamEx(playerid) <= 10)
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_OSKIN));
	else 	
		SetPlayerSkin(playerid, GetPlayerData(playerid, P_SKIN));
	return 1;
}

stock InvitePlayer(playerid, org_id, give_rang = 1, bool: save = false)
{
	if(!(1 <= give_rang <= 10))
		give_rang = 1;
	
	if(1 <= org_id <= 10)
	{
		SetPlayerTeamEx(playerid, org_id);
		SetPlayerData(playerid, P_JOB, give_rang);
	}
	else 
	{
		SetPlayerTeamEx(playerid, 0);
		SetPlayerData(playerid, P_JOB, 0);
		//SetPlayerData(playerid, P_JOB, 0);
	}

	SetPlayerColorEx(playerid, team_colors[org_id]);
	
	if(save)
	{
		new query[80];
		
		//SetPlayerData(playerid, P_JOB, 0);
		
		if(1 <= org_id <= 10)
		{
			if(!GetPlayerSex(playerid))
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id - 1][O_SKINS][give_rang - 1]);
			else 
				SetPlayerData(playerid, P_OSKIN, g_organization[org_id - 1][O_WOMEN_SKIN]);
		}
		else SetPlayerData(playerid, P_OSKIN, 0);
		
		format(query, sizeof query, "UPDATE accounts SET team=%d,org_skin=%d,job=%d WHERE id=%d",\
			GetPlayerTeamEx(playerid), GetPlayerData(playerid, P_OSKIN), GetPlayerData(playerid, P_JOB), GetPlayerAccountID(playerid));
		mysql_query(mysql, query, false);
		
		ResetSkin(playerid);
	}
	
	return 1;
}

stock UnInvite(playerid, to_player)
{
	if(!(1 <= GetPlayerTeamEx(to_player) <= 10)) return 0;
	
	new fmt_msg[85];
	format(fmt_msg, sizeof fmt_msg, "%s[%d] уволил ¬ас из организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
	SendClientMessage(to_player, 0xFF6600FF, fmt_msg);
	
	if(GetPlayerTeamEx(playerid) == GetPlayerTeamEx(to_player))
	{
		format(fmt_msg, sizeof fmt_msg, "¬ы уволили %s[%d] из своей организации", GetPlayerNameEx(to_player), to_player);
		SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
	}
	else 
	{
		format(fmt_msg, sizeof fmt_msg, "¬ы уволили %s[%d] из организации \"%s\"", GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
		SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
	}
	
	if(GetPlayerTeamEx(to_player) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL)))
	{
		DestroyDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL));
		SetPlayerData(to_player, P_ADVISOR_LABEL, Text3D: -1);
	}

	InvitePlayer(to_player, 0, 0, true);
	
	return 1;
}

stock SendPlayerOffer(playerid, to_player, type, value_1 = 0, value_2 = 0)
{
	if(GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER) == INVALID_PLAYER_ID)
	{
		new fmt_str[144];
		switch(type)
		{
			case OFFER_TYPE_HANDSHAKE:
			{
				format(fmt_str, sizeof fmt_str, "»грок %s предлагает пожать ¬ам руку", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, 0xFFFFFFFF, "Ќажмите {00CC00}Y {FFFFFF}дл€ согласи€ или {FF6600}N {FFFFFF}дл€ отказа");
				
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s пожать руку", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_FUEL_ST:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает ¬ам купить заправочную станцию є%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetFuelStationData(value_1, FS_NAME), value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, 0xFFFFFFFF, "Ќажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}дл€ отказа");
				
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s купить ¬ашу заправочную станцию \"%s\" за %d руб", GetPlayerNameEx(to_player), GetFuelStationData(value_1, FS_NAME), value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_FILL_CAR:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает заправить ¬аш транспорт на %d л за %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, 0xFFFFFFFF, "Ќажмите {00CC00}Y {FFFFFF}чтобы согласитьс€ или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s заправку транспорта на %d л за %d руб", GetPlayerNameEx(to_player), value_1, value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);				
			}
			case OFFER_TYPE_REPAIR_CAR:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает починить ¬аш транспорт за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, 0xFFFFFFFF, "Ќажмите {00CC00}Y {FFFFFF}чтобы согласитьс€ или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s сделать ремонт транспорта за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);				
			}
			case OFFER_TYPE_SELL_BUSINESS:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает ¬ам купить бизнес є%d \"%s\" по цене %d руб", GetPlayerNameEx(playerid), value_1, GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, 0xFFFFFFFF, "Ќажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}дл€ отказа");
				
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s купить ¬аш бизнес \"%s\" за %d руб", GetPlayerNameEx(to_player), GetBusinessData(value_1, B_NAME), value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_BUSINESS_MANAGER:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает ¬ам стать сотрудником его предпри€ти€ (%s)", GetPlayerNameEx(playerid), GetBusinessData(value_1, B_NAME));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, 0xFFFFFFFF, "Ќажмите {00CC00}Y {FFFFFF}чтобы согласитьс€ или {FF6600}N {FFFFFF}дл€ отказа");
				
				format(fmt_str, sizeof fmt_str, "%s получил предложение стать вашим сотрудником", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SELL_HOME:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает ¬ам купить дом є%d по цене %d руб", GetPlayerNameEx(playerid), value_1, value_2);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, 0xFFFFFFFF, "Ќажмите {00CC00}Y {FFFFFF}чтобы заключить сделку или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s купить ¬аш дом по цене %d руб", GetPlayerNameEx(to_player), value_2);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);	
			}
			case OFFER_TYPE_HOME_RENT_ROOM:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает ¬ам поселитьс€ в своем доме є%d", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
	
				SendClientMessage(to_player, 0xFFFFFFFF, "Ќажмите {00CC00}Y {FFFFFF}чтобы согласитьс€ или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s поселитьс€ в своем доме є%d", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);			
			}
			case OFFER_TYPE_SELL_OWNABLE_CAR:
			{
				new model_id = GetVehicleData(value_2, V_MODELID);
			
				format(fmt_str, sizeof fmt_str, "%s предлагает ¬ам купить транспорт {33FF66}\"%s\" {3399FF}по цене %d руб", GetPlayerNameEx(playerid), GetVehicleInfo(model_id-400, VI_NAME), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, 0xFFFFFFFF, "Ќажмите {00CC00}Y {FFFFFF}чтобы купить его или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s купить ¬аш транспорт \"%s\" за %d руб", GetPlayerNameEx(to_player), GetVehicleInfo(model_id-400, VI_NAME), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_INVITE:
			{	
				format(fmt_str, sizeof fmt_str, "%s предлагает ¬ам вступить в организацию \"%s\"", GetPlayerNameEx(playerid), GetPlayerTeamName(playerid));
				
				if(IsTeamSubdivision(GetPlayerTeamEx(playerid)))
					format(fmt_str, sizeof fmt_str, "%s, подразделение \"%s\"", fmt_str, GetPlayerSubdivisionName(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
			
				SendClientMessage(to_player, -1, "Ќажмите {00CC00}Y {FFFFFF}чтобы прин€ть предложение или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s вступить в организацию \"%s\"", GetPlayerNameEx(to_player), GetPlayerTeamName(playerid));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_MEDHELP:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает ¬ам пройти курс платного лечени€ за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, -1, "Ќажмите {00CC00}Y {FFFFFF}чтобы пройти экспресс-лечение или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s пройти у ¬ас курс платного лечени€ за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_HEAL:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает ¬ам пройти курс лечени€ за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, -1, "Ќажмите {00CC00}Y {FFFFFF}чтобы согласитьс€ или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s пройти у ¬ас курс лечени€ за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_CHANGE_SEX:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает сделать ¬ам операцию по смене пола за %d руб", GetPlayerNameEx(playerid), value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, -1, "Ќажмите {00CC00}Y {FFFFFF}чтобы согласитьс€ или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s операцию по смене пола за %d руб", GetPlayerNameEx(to_player), value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case OFFER_TYPE_SHOW_SKILL:
			{
				format(fmt_str, sizeof fmt_str, "%s хочет показать ¬ам свои навыки владени€ оружием", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, -1, "Ќажмите {00CC00}Y {FFFFFF}дл€ просмотра или {FF6600}N {FFFFFF}дл€ отказа");
				
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s посмотреть на ¬аши навыки владени€ оружием", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			/*
			case PROPOSITION_TYPE_GIVE_CAR_KEY:
			{
				format(fmt_str, sizeof fmt_str, "%s предлагает дать ¬ам ключи от своего транспотра", GetPlayerNameEx(playerid));
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, -1, "Ќажмите {00CC00}Y {FFFFFF}чтобы вз€ть их или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили игроку %s вз€ть ключи от своего транспорта", GetPlayerNameEx(to_player));
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			case PROPOSITION_TYPE_SELL_GOODS:
			{
				new marketid = player_use_market[playerid];
			
				format(fmt_str, sizeof fmt_str, "%s предлагает ¬ам купить %s по цене %d руб", GetPlayerNameEx(playerid), market[marketid][m_name], value_1);
				SendClientMessage(to_player, 0x3399FFFF, fmt_str);
				
				SendClientMessage(to_player, -1, "Ќажмите {00CC00}Y {FFFFFF}чтобы сделать покупку или {FF6600}N {FFFFFF}дл€ отказа");
			
				format(fmt_str, sizeof fmt_str, "¬ы предложили %s купить %s по цене %d руб", GetPlayerNameEx(to_player), market[marketid][m_name], value_1);
				SendClientMessage(playerid, 0x3399FFFF, fmt_str);
			}
			*/
			default: return 1;
		}
		
		SetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER, to_player);
		
		SetPlayerOfferInfo(to_player, O_INCOMING_PLAYER, playerid);
		SetPlayerOfferInfo(to_player, O_INCOMING_TYPE, type);
		
		SetPlayerOfferValue(to_player, 0, value_1);
		SetPlayerOfferValue(to_player, 1, value_2);
	}
	else SendClientMessage(playerid, 0xFFFFFFFF, "»спользуйте {FF9900}/cancel {FFFFFF}чтобы отозвать предыдущее предложение");

	return 1;
}

// ------------------------------------------
CMD:yes(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_INCOMING_PLAYER);
	new offer_type = GetPlayerOfferInfo(playerid, O_INCOMING_TYPE);

	new value_1 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[0];
	new value_2 = GetPlayerOfferInfo(playerid, O_INCOMING_VALUE)[1];

	if(offer_id != INVALID_PLAYER_ID)
	{
		if(IsPlayerConnected(offer_id) && IsPlayerLogged(offer_id)) 
		{
			if(GetPlayerOfferInfo(offer_id, O_OUTCOMIG_PLAYER) == playerid)
			{
				ClearPlayerOffer(offer_id);
			}
			else offer_type = -1;
			
			new Float: x, Float: y, Float: z;
			new Float: dist;
			
			GetPlayerPos(offer_id, x, y, z);
			dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
			
			if(dist <= 10.0)
			{
				new fmt_str[144];
				
				switch(offer_type)
				{
					case OFFER_TYPE_SHOW_SKILL:
					{
						ShowPlayerSkills(offer_id, playerid);
						Action(offer_id, "показал свои навыки владени€ оружием", _, false);
					}
					
					case OFFER_TYPE_INVITE:
					{
						new team_id = GetPlayerTeamEx(offer_id);
						if(!(1 <= team_id <= 10) || 1 <= GetPlayerTeamEx(playerid) <= 10) return SendClientMessage(playerid, 0xCECECEFF, "ѕри вступлении в организацию произошла ошибка");
						
						InvitePlayer(playerid, team_id, 1, true);
						
						new fmt_msg[120];
						format(fmt_msg, sizeof fmt_msg, "ѕоздравл€ем! ¬ы вступили в организацию \"%s\"", GetPlayerTeamName(offer_id));
						if(IsTeamSubdivision(team_id))
							format(fmt_msg, sizeof fmt_msg, "%s и подразделение \"%s\"", fmt_msg, GetPlayerSubdivisionName(offer_id));
						
						SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
						SendClientMessage(playerid, 0x3399FFFF, "»спользуйте {FFCC00}/menu >  оманды сервера{3399FF}, чтобы узнать о новых возможност€х");	
						
						format(fmt_msg, sizeof fmt_msg, "%s прин€л ¬аше предложение вступить в организацию", GetPlayerNameEx(playerid), value_1);
						SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);
						
						GameTextForPlayer(offer_id, "~b~~h~yes", 4000, 1);
					}

					case OFFER_TYPE_HANDSHAKE:
					{
						if(!(IsPlayerInAnyVehicle(playerid) && IsPlayerInAnyVehicle(offer_id)))
						{
							if(0.5 <= dist <= 1.5)
							{
								new Float: to_x, Float: to_y; 
								new Float: angle;
								
								GetPlayerPos(playerid, to_x, to_y, z);
								angle = GetAngleToPoint(x, y, to_x, to_y);
								
								SetPlayerFacingAngle(playerid, angle);
								SetPlayerFacingAngle(offer_id, angle + 180.0);
								
								format(fmt_str, sizeof fmt_str, "пожал(а) руку %s", GetPlayerNameEx(offer_id));
								Action(playerid, fmt_str, _, false);
								
								ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
								ApplyAnimation(offer_id, "GANGS", "hndshkfa", 4.1, 0, 1, 1, 0, 0, 1);
							}
							else 
							{
								valstr(fmt_str, offer_id);
								cmd::hi(playerid, fmt_str);
							}
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ы либо игрок не должны находитьс€ в транспорте");
					}
					case OFFER_TYPE_SELL_FUEL_ST:
					{
						if(GetPlayerFuelStation(offer_id) == value_1 && GetPlayerFuelStation(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								new Float: f_pos_x = GetFuelStationData(value_1, FS_POS_X);
								new Float: f_pos_y = GetFuelStationData(value_1, FS_POS_Y);
								new Float: f_pos_z = GetFuelStationData(value_1, FS_POS_Z);
								
								if(IsPlayerInRangeOfPoint(playerid, 10.0, f_pos_x, f_pos_y, f_pos_z) && IsPlayerInRangeOfPoint(offer_id, 10.0, f_pos_x, f_pos_y, f_pos_z))
								{
									format(fmt_str, sizeof fmt_str, "¬ы продали свою ј«— игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);	
									
									format(fmt_str, sizeof fmt_str, "%s продал ¬ам заправочную станцию \"%s\" за %d руб", GetPlayerNameEx(offer_id), GetFuelStationData(value_1, FS_NAME), value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);		
									
									SellFuelStation(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xFFCD00FF, "ѕроверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "¬ы и продавец должны находитс€ р€дом с заправкой которую хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас недостаточно денег дл€ заключени€ сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "ѕри заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_FILL_CAR:
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						new offer_vehicleid = GetPlayerVehicleID(offer_id);
						
						if(IsPlayerDriver(playerid)) 
						{
							if(GetPlayerJob(offer_id) == JOB_MECHANIC && IsPlayerInJob(offer_id) && IsPlayerInVehicle(offer_id, GetPlayerJobCar(offer_id)))
							{
								if((GetVehicleData(vehicleid, V_FUEL) + float(value_1)) <= 150.0)
								{
									if(GetPlayerMoneyEx(playerid) >= value_2)
									{
										if(GetPlayerJobLoadItems(offer_id) >= value_1)
										{
											GivePlayerMoneyEx(playerid, -value_2, "«аправка транспорта от механика", true, true);
										
											SetVehicleData(vehicleid, V_FUEL, GetVehicleData(vehicleid, V_FUEL) + float(value_1));
											SetPlayerJobLoadItems(offer_id, GetPlayerJobLoadItems(offer_id) - value_1);
											
											AddPlayerData(offer_id, P_MECHANIC_FILL_PAY, +, value_2);
		
											format(fmt_str, sizeof fmt_str, "јвтомеханик %s заправил ¬аш транспорт на %d л", GetPlayerNameEx(offer_id), value_1);
											SendClientMessage(playerid, 0x66CC00FF, fmt_str);	
											
											format(fmt_str, sizeof fmt_str, "¬ы заправили транспорт %s на %d л", GetPlayerNameEx(playerid), value_1);
											SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

											format(fmt_str, sizeof fmt_str, "~g~+%d rub", value_2);
											GameTextForPlayer(offer_id, fmt_str, 4000, 1);
											
											format(fmt_str, sizeof fmt_str, "%s{FFFFFF}јвтомеханик\n{999999}“опливо: %d л", GetPlayerData(offer_id, P_JOB_SERVICE_NAME), GetPlayerJobLoadItems(offer_id));
											UpdateVehicleLabel(offer_vehicleid, 0xCC9900FF, fmt_str);
										}
										else SendClientMessage(playerid, 0xCECECEFF, "ѕри заправке произошла ошибка");
									}
									else SendClientMessage(playerid, 0x999999FF, "” ¬ас недостаточно денег чтобы заплатить автомеханику");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "¬ бензобак этого транспорта столько не поместитс€");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "јвтомеханик должен находитс€ в рабочем транспорте");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ в транспорте за рулем");
					}
					case OFFER_TYPE_REPAIR_CAR:
					{
						new vehicleid = GetPlayerVehicleID(playerid);

						if(IsPlayerDriver(playerid)) 
						{
							if(GetPlayerJob(offer_id) == JOB_MECHANIC && IsPlayerInJob(offer_id) && IsPlayerInVehicle(offer_id, GetPlayerJobCar(offer_id)))
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									GivePlayerMoneyEx(playerid, -value_1, "ѕочинка транспорта от механика", true, true);
									AddPlayerData(offer_id, P_MECHANIC_REPAIR_PAY, +, value_1);
									
									RepairVehicle(vehicleid);
									if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);
									
									SetPlayerChatBubble(playerid, "Repair", 0x3399FFFF, 10.0, 2000);
									SetPlayerChatBubble(offer_id, "Repair", 0x3399FFFF, 10.0, 2000);
									
									format(fmt_str, sizeof fmt_str, "јвтомеханик %s починил ¬аш транспорт за %d руб", GetPlayerNameEx(offer_id), value_1);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);	
									
									format(fmt_str, sizeof fmt_str, "¬ы починили транспорт %s за %d руб", GetPlayerNameEx(playerid), value_1);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);

									format(fmt_str, sizeof fmt_str, "~g~+%d rub", value_1);
									GameTextForPlayer(offer_id, fmt_str, 4000, 1);
								}
								else SendClientMessage(playerid, 0x999999FF, "” ¬ас недостаточно денег чтобы заплатить автомеханику");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "јвтомеханик должен находитс€ в рабочем транспорте");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ в транспорте за рулем");
					}
					case OFFER_TYPE_SELL_BUSINESS:
					{
						if(GetPlayerBusiness(offer_id) == value_1 && GetPlayerBusiness(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								new Float: b_pos_x = GetBusinessData(value_1, B_POS_X);
								new Float: b_pos_y = GetBusinessData(value_1, B_POS_Y);
								new Float: b_pos_z = GetBusinessData(value_1, B_POS_Z);
								
								if(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z) && IsPlayerInRangeOfPoint(offer_id, 7.0, b_pos_x, b_pos_y, b_pos_z))
								{
									format(fmt_str, sizeof fmt_str, "¬ы продали свой бизнес игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);	
									
									format(fmt_str, sizeof fmt_str, "%s продал ¬ам бизнес \"%s\" за %d руб", GetPlayerNameEx(offer_id), GetBusinessData(value_1, B_NAME), value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);		
									
									SellBusiness(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xFFCD00FF, "ѕроверьте количество оплаченных дней аренды, при необходимости оплатить ее можно в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "¬ы и продавец должны находитс€ р€дом с бизнесом который хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас недостаточно денег дл€ заключени€ сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "ѕри заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_BUSINESS_MANAGER:
					{
						if(GetPlayerBusiness(offer_id) == value_1)
						{
							SetPVarInt(playerid, "biz_worker", value_1 + 1);
						
							format(fmt_str, sizeof fmt_str, "¬ы прин€ли предложение от %s", GetPlayerNameEx(offer_id));
							SendClientMessage(playerid, 0x66CC00FF, fmt_str);	
							
							format(fmt_str, sizeof fmt_str, "%s прин€л ¬аше предложение", GetPlayerNameEx(playerid));
							SendClientMessage(offer_id, 0x66CC00FF, fmt_str);
						}
					}
					case OFFER_TYPE_SELL_HOME:
					{
						if(GetPlayerHouse(offer_id, HOUSE_TYPE_HOME) == value_1 && GetPlayerHouse(playerid) == -1)
						{
							if(GetPlayerMoneyEx(playerid) >= value_2)
							{
								if(IsPlayerInRangeOfHouse(playerid, value_1, 10.0) && IsPlayerInRangeOfHouse(offer_id, value_1, 10.0))
								{
									format(fmt_str, sizeof fmt_str, "¬ы продали свой дом игроку %s за %d руб", GetPlayerNameEx(playerid), value_2);
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);	
									
									format(fmt_str, sizeof fmt_str, "%s продал ¬ам cвой дом за %d руб", GetPlayerNameEx(offer_id), value_2);
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);		
									
									SellHouse(offer_id, playerid, value_2);
									SendClientMessage(playerid, 0xFFCD00FF, "Ќасто€тельно рекомендуем проверить квартплату, при необходимости заплатить за дом в банке");
								}
								else SendClientMessage(playerid, 0xCECECEFF, "¬ы и продавец должны находитс€ р€дом с домом который хотите купить");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас недостаточно денег дл€ заключени€ сделки");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "ѕри заключении сделки произошла ошибка");
					}
					case OFFER_TYPE_HOME_RENT_ROOM:
					{
						if(GetPlayerHouse(offer_id, HOUSE_TYPE_HOME) == value_1 && GetPlayerHouse(playerid) == -1)
						{
							if(IsPlayerInRangeOfHouse(playerid, value_1, 10.0) && IsPlayerInRangeOfHouse(offer_id, value_1, 10.0))
							{
								new free_room = GetHouseFreeRoom(value_1);
								if(free_room != -1)
								{
									AddHouseRenter(value_1, free_room, playerid);
		
									format(fmt_str, sizeof fmt_str, "¬ы поселили %s в своем доме", GetPlayerNameEx(playerid));
									SendClientMessage(offer_id, 0x66CC00FF, fmt_str);	
									
									format(fmt_str, sizeof fmt_str, "%s поселил ¬ас в своем доме", GetPlayerNameEx(offer_id));
									SendClientMessage(playerid, 0x66CC00FF, fmt_str);		
									
									GameTextForPlayer(offer_id, "~b~~h~Welcome", 4000, 1);
								}
								else SendClientMessage(playerid, 0x999999FF, "¬се комнаты этого дома уже зан€ты");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "¬ы и арендодатель должны находитс€ р€дом с домом в котором хотите сн€ть комнату");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "ѕроизошла ошибка");
					}
					case OFFER_TYPE_SELL_OWNABLE_CAR:
					{
						if(GetPlayerOwnableCar(offer_id) == value_2 && GetPlayerOwnableCar(playerid) == INVALID_VEHICLE_ID)
						{
							new  Float: car_x, Float: car_y, Float: car_z; 
							GetVehiclePos(value_2, car_x, car_y, car_z);
							
							if(IsPlayerInRangeOfPoint(playerid, 15.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(offer_id, 15.0, car_x, car_y, car_z))
							{
								if(GetPlayerMoneyEx(playerid) >= value_1)
								{
									new index = GetVehicleData(value_2, V_ACTION_ID);

									format(fmt_str, sizeof fmt_str, "UPDATE accounts a, ownable_cars oc SET a.money=%d, oc.owner_id=%d WHERE a.id=%d AND oc.id=%d", GetPlayerMoneyEx(playerid)-value_1, GetPlayerAccountID(playerid), GetPlayerAccountID(playerid), GetOwnableCarData(index, OC_SQL_ID));
									mysql_query(mysql, fmt_str, false);
									
									if(!mysql_errno())
									{
										GivePlayerMoneyEx(playerid, -value_1, "ѕродажа авто с рук", false, true);
									
										GivePlayerMoneyEx(offer_id, value_1, "ѕродажа авто с рук", true, true);
										SetPlayerData(offer_id, P_OWNABLE_CAR, INVALID_VEHICLE_ID);
										
										SetOwnableCarData(index, OC_OWNER_ID, GetPlayerAccountID(playerid));
										SetPlayerData(playerid, P_OWNABLE_CAR, value_2);
									
										format(fmt_str, sizeof fmt_str, "%s продал ¬ам свой транспорт за %d руб", GetPlayerNameEx(offer_id), value_1);
										SendClientMessage(playerid, 0x66CC00FF, fmt_str);	
										
										SendClientMessage(playerid, 0x66CC00FF, "Ќапишите {0099FF}/car {66CC00}чтобы узнать о возможност€х");	
										SendClientMessage(playerid, 0xFFFFFFFF, "¬ам были переданы ключи от транспорта. »спользуйте {BBBB00}/lock 1");
										
										format(fmt_str, sizeof fmt_str, "¬ы продали свой транспорт игроку %s за %d руб", GetPlayerNameEx(playerid), value_1);
										SendClientMessage(offer_id, 0x66CC00FF, fmt_str);
									}
									else SendClientMessage(playerid, 0xFF6600FF, "ѕроизошла ошибка в базе данных");	
								}
								else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас недостаточно денег дл€ покупки");
							}
							else SendClientMessage(playerid, 0xCECECEFF, "¬ы и продавец должны находитс€ р€дом с транспортом который хотите купить");
						}
						else SendClientMessage(playerid, 0xCECECEFF, "ѕроизошла ошибка");
					}

					case OFFER_TYPE_MEDHELP:
					{	
						if(GetPlayerTeamEx(offer_id) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0xCECECEFF, "ѕроизошла ошибка");
						if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1131.1603, -8.5709, 1011.1254)) return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ в больнице");
						if(GetPlayerData(playerid, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ на стационарном лечении");
						if(GivePlayerMoneyEx(playerid, -value_1, " урс лечени€ (купил)", true, true) == -1) return SendClientMessage(playerid, 0x999999FF, "” ¬ас недостаточно денег, чтобы оплатить лечение");
						GivePlayerMoneyEx(offer_id, value_1, " урс лечени€ (провел)", true, true);
						
						SetPlayerHealthEx(playerid, 100.0);
						
						new fmt_msg[128];
						format(fmt_msg, sizeof fmt_msg, "ћедицинский работник %s провел курс платного лечени€", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC00FF, fmt_msg);	
						
						format(fmt_msg, sizeof fmt_msg, "¬ы провели курс платного лечени€ у пациента %s", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);
						
						format(fmt_msg, sizeof fmt_msg, "[MED] ћедицинский работник %s[%d] провел курс платного лечени€ у %s[%d] за %d руб.", GetPlayerNameEx(offer_id), offer_id, GetPlayerNameEx(playerid), playerid, value_1);
						SendMessageToTeam(TEAM_HOSPITAL, fmt_msg, 0x99CC99FF, offer_id);

						ClearMedBed(playerid, GetPlayerData(playerid, P_OCCUPIED_BED));
						SetPlayerData(playerid, P_HOSPITAL, false);
					}
					case OFFER_TYPE_HEAL:
					{
						new vehicleid = GetPlayerVehicleID(offer_id);
						
						if(GetPlayerTeamEx(offer_id) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0xCECECEFF, "ѕроизошла ошибка");
						if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_MED_CAR || GetPlayerVehicleID(playerid) != vehicleid) return SendClientMessage(playerid, 0x999999FF, "¬ы или медицинский работник находитесь не в машине скорой помощи");
						
						if(GivePlayerMoneyEx(playerid, -value_1, " урс лечени€ (купил) [veh]", true, true) == -1) return SendClientMessage(playerid, 0x999999FF, "” ¬ас недостаточно денег, чтобы оплатить лечение");
						GivePlayerMoneyEx(offer_id, value_1, " урс лечени€ (провел) [veh]", true, true);
						
						SetPlayerHealthEx(playerid, 100.0);
						
						new fmt_msg[50];
						format(fmt_msg, sizeof fmt_msg, "¬ы вылечились у медицинского работника %s", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC00FF, fmt_msg);	
						
						format(fmt_msg, sizeof fmt_msg, "¬ы вылечили пациента %s", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);		
					}
					case OFFER_TYPE_CHANGE_SEX:
					{
						if(GetPlayerTeamEx(offer_id) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0xCECECEFF, "ѕроизошла ошибка");
						if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1131.1603, -8.5709, 1011.1254)) return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ в больнице");
						if(GetPlayerData(playerid, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ на стационарном лечении");
						if(GivePlayerMoneyEx(playerid, -value_1, "—мена пола (купил)", true, true) == -1) return SendClientMessage(playerid, 0x999999FF, "” ¬ас недостаточно денег чтобы оплатить операцию");
						
						GivePlayerMoneyEx(offer_id, value_1, "—мена пола (провел)", true, true);
						
						SetPlayerData(playerid, P_SEX, GetPlayerData(playerid, P_SEX) ^ 1);
			
						new fmt_msg[70];
						format(fmt_msg, sizeof fmt_msg, "ћедработник %s сделал ¬ам операцию по смене пола", GetPlayerNameEx(offer_id));
						SendClientMessage(playerid, 0x66CC00FF, fmt_msg);	
						
						format(fmt_msg, sizeof fmt_msg, "ќпераци€ у пациента %s была проведена успешно", GetPlayerNameEx(playerid));
						SendClientMessage(offer_id, 0x66CC00FF, fmt_msg);
					}

					default:
						SendClientMessage(playerid, 0x999999FF, "¬ данный момент ¬ам ничего не предлагают");
				}
			}
			else SendClientMessage(playerid, 0x999999FF, "»грок слишком далеко");
		}
		else SendClientMessage(playerid, 0x999999FF, "»грок вышел из игры");
		
		ClearPlayerOffer(playerid);
	}
	else SendClientMessage(playerid, 0x999999FF, "¬ данный момент ¬ам ничего не предлагают"); 
	
	return 1;
}

CMD:no(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_INCOMING_PLAYER);
	
	if(offer_id != INVALID_PLAYER_ID) 
	{	
		if(GetPlayerOfferInfo(offer_id, O_OUTCOMIG_PLAYER) == playerid)
		{
			ClearPlayerOffer(offer_id);
			
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отказалс€ от ¬ашего предложени€", GetPlayerNameEx(playerid));
			SendClientMessage(offer_id, 0xFF6600FF, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "¬ы отказались от предложени€ игрока %s", GetPlayerNameEx(offer_id));
			SendClientMessage(playerid, 0xFF6600FF, fmt_str);
			
			GameTextForPlayer(offer_id, "~r~no", 4000, 1);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "¬ы отказались от предложени€ игрока");
	}
	else SendClientMessage(playerid, 0x999999FF, "¬ данный момент ¬ам ничего не предлагают"); 
	
	ClearPlayerOffer(playerid);
	return 1;
}

CMD:cancel(playerid, params[])
{
	new offer_id = GetPlayerOfferInfo(playerid, O_OUTCOMIG_PLAYER);
	
	if(offer_id != INVALID_PLAYER_ID) 
	{
		if(GetPlayerOfferInfo(offer_id, O_INCOMING_PLAYER) == playerid)
		{
			ClearPlayerOffer(offer_id);
			
			new fmt_str[64];
			format(fmt_str, sizeof fmt_str, "%s отозвал свое предложение", GetPlayerNameEx(playerid));
			SendClientMessage(offer_id, 0xFF6600FF, fmt_str);
			
			format(fmt_str, sizeof fmt_str, "¬ы отозвали свое предложение дл€ %s", GetPlayerNameEx(offer_id));
			SendClientMessage(playerid, 0xFF6600FF, fmt_str);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "¬ы отозвали свое последнее предложение");
		
		ClearPlayerOffer(playerid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет активных предложений");
	
	return 1;
}

CMD:hi(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) 
		return SendClientMessage(playerid, 0x999999FF, "Ќельз€ использовать в машине");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /hi [id игрока]");
	
	extract params -> new to_player;
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	new Float: to_x, Float: to_y, Float: z;
	GetPlayerPos(to_player, to_x, to_y, z);

	new Float: dist = GetPlayerDistanceFromPoint(playerid, to_x, to_y, z);
	if(0.5 <= dist <= 1.5)
	{
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_HANDSHAKE);
	}
	else if(dist < 20.0)
	{
		new fmt_str[35];
		
		new Float: x, Float: y;
		new Float: angle;
		
		GetPlayerPos(playerid, x, y, z);
		angle = GetAngleToPoint(to_x, to_y, x, y);
		
		SetPlayerFacingAngle(playerid, angle);
		
		format(fmt_str, sizeof fmt_str,"машет рукой %s", GetPlayerNameEx(to_player));
		Action(playerid, fmt_str, _, false);

		ApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 1, 1, 0, 0, 1);
	}
	else SendClientMessage(playerid, 0x999999FF, "¬ы находитесь слишком далеко от игрока");
	
	return 1;
}

CMD:me(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "¬ы не можете использовать это");

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /me [текст]");
	
	return Action(playerid, params);
}

CMD:do(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "¬ы не можете использовать это");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /do [текст]");
	
	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xDD90FFFF, 25.0, 5000);
	
	format(fmt_str, sizeof fmt_str, "%s (%s)", params, GetPlayerNameEx(playerid));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
	
	return 1;
}

CMD:try(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "¬ы не можете использовать это");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /try [текст]");
	
	new fmt_str[128];
	
	format(fmt_str, sizeof fmt_str, "%s %s %s", GetPlayerNameEx(playerid), params, !random(3) ? ("{66CC00}| ”дачно") : ("{FF6600}| Ќеудачно"));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);
	
	return 1;
}

CMD:w(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "¬ы не можете использовать это");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /w [текст]");
	
	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xACCE90FF, 3.0, 5000);
	
	format(fmt_str, sizeof fmt_str, "%s шепчет: %s", GetPlayerNameEx(playerid), params);
	SendMessageInLocal(playerid, fmt_str, 0xACCE90FF, 3.0);

	return 1;
}

CMD:s(playerid, params[])
{
	if(GetPlayerLevel(playerid) >= 2)
		return SendClientMessage(playerid, 0xCECECEFF, "Ётим можно пользоватьс€ со 2 уровн€");
		
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "¬ы не можете использовать это");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /s [текст]");
	
	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0xFFFFFFFF, 37.0, 5000);
	
	format(fmt_str, sizeof fmt_str, "%s[%d] крикнул: %s", GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_str, 0xFFFFFFFF, 37.0);
	
	ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.0, 0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:n(playerid, params[])
{
	if(IsPlayerMuted(playerid))
		return SendClientMessage(playerid, 0xFF6600FF, "¬ы не можете использовать это");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /n [нон-рп сообщение]");
	
	new fmt_str[128];
	SetPlayerChatBubble(playerid, params, 0x999999FF, 30.0, 5000);
	
	format(fmt_str, sizeof fmt_str, "(( %s[%d]: %s ))", GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_str, 0xCCCC99FF, 30.0);
	
	return 1;
}

CMD:lic(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /lic [id игрока]");
	
	extract params -> new to_player;
	
	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
		
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 4.0))
		return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");
	
	static const
		lic_names[3][32 + 1] = {"{FF9900}ќтсутствует", "{00CC33}Ѕазовый уровень", "{6699CC}ѕрофессиональный уровень"};
		
	new fmt_str[64];
	Action(playerid, "показал свои лицензии", _, false);
	
	format(fmt_str, sizeof fmt_str, "Ћицензии %s:", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0xFFFF00FF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "Ќа транспорт: %s", lic_names[ GetPlayerData(playerid, P_DRIVING_LIC) ]);
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "Ќа оружие:      %s", GetPlayerData(playerid, P_WEAPON_LIC) >= 1 ? ("{00CC33}≈сть") : ("{FF9900}ќтсутствует"));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);

	return 1;
}

CMD:pass(playerid, params[])
{	
	extract params -> new to_player; else return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /pass [id игрока]");
	
	if(!IsPlayerConnected(to_player))
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
		
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0))
		return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");
		
	new fmt_str[128];
	Action(playerid, "показал свой паспорт", _, false);
	
	format(fmt_str, sizeof fmt_str, "»м€: %s  |  ¬озраст: %d  |  ѕол: %s  |  ѕроживание: %s", GetPlayerNameEx(playerid), GetPlayerLevel(playerid), GetPlayerSexName(playerid), GetPlayerHouseName(playerid));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "–абота: %s  |  ќрганизаци€ и подразделение: %s / %s", GetPlayerJobName(playerid), ("Ќет"), ("Ќет"));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "“елефон: %d  |  ”ровень розыска: %d  |  «аконопослушность: %d", GetPlayerPhone(playerid), GetPlayerSuspect(playerid), GetPlayerData(playerid, P_LAW_ABIDING));
	SendClientMessage(to_player, 0xFFFFFFFF, fmt_str);
	
	return 1;
}

CMD:gmx(playerid, params[])
{
	return GameModeExit();
}

CMD:menu(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_PLAYER_MENU, DIALOG_STYLE_LIST,
		"{0099CC}ћеню игрока",
		"1. —татистика\n"\
		"2. —писок команд\n"\
		"3. Ћичные настройки\n"\
		"4. Ќастройки безопасности\n"\
		"5. —в€зь с администрацией\n"\
		"6. ”лучшени€\n"\
		"7. ѕравила сервера\n"\
		"8. »зменить им€\n"\
		"9. ƒополнительно",
		"¬ыбрать", "«акрыть"
	);
	return 1;
}
ALT:menu:mn;

CMD:gps(playerid, params[])
{
	DisablePlayerGPS(playerid);
	
	Dialog
	(
		playerid, DIALOG_GPS, DIALOG_STYLE_LIST,
		"{FFCD00}GPS",
		"1. ќбщественные места\n"\
		"2. “ранспортные узлы\n"\
		"3. √осударственные организации\n"\
		"4. Ѕазы банд и мафий\n"\
		"5. ѕо работе\n"\
		"6. Ѕанки\n"\
		"7. –азвлечени€\n"\
		"8. Ѕизнес\n"\
		"9. Ќайти ближайшую ј«—",
		"¬ыбрать", "«акрыть"
	);
	return 1;
}

CMD:help(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_HELP, DIALOG_STYLE_LIST, 
		"{00CC33}ѕомощь по игре", 
		help_info_items, 
		"¬ыбрать", "«акрыть"
	);
	
	return 1;
}

CMD:play(playerid, params[])
{
	if(GetPVarInt(playerid, "server_radio_enabled") == 1)
	{
		StopAudioStreamForPlayer(playerid);
		DeletePVar(playerid, "server_radio_enabled");
		
		SendClientMessage(playerid, 0xFF6600FF, "–адио отключено");
	}

	Dialog
	(
		playerid, DIALOG_SERVER_RADIO, DIALOG_STYLE_LIST,
		"{FFCD00}ќнлайн радио",
		g_server_radio_items,
		"¬ыбрать", "«акрыть"
	);
	return 1;
}

CMD:anim(playerid, params[])
{	
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "јнимации нельз€ использовать в транспорте");
	
	if(PreLoadPlayerAnimList(playerid))
		return SendClientMessage(playerid, 0xFFFF00FF, "—писок анимаций загружен. ¬ведите команду еще раз");

	if(!strlen(params))
	{
		Dialog
		(
			playerid, DIALOG_ANIM_LIST, DIALOG_STYLE_LIST, 
			"{9966FF}јнимации",
			anim_list_items, 
			"¬ыбрать", "«акрыть"
		);
	}
	else 
	{
		extract params -> new anim_id;
		
		if(!SetPlayerAnimation(playerid, anim_id-1))
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте /anim(list) [номер анимации из списка]");
	}
	return 1;
}
ALT:anim:animlist;

CMD:e(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "¬ы не за рулем");
		
		if(IsAOwnableCar(vehicleid))
		{
			new index = GetVehicleData(vehicleid, V_ACTION_ID);		
			if(!GetOwnableCarData(index, OC_KEY_IN))
			{
				return GameTextForPlayer(playerid, "~n~~n~~n~~r~~h~KЗФН мE BCПABЗEм", 1200, 5);
			}
		}
		else if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_RENT_CAR && !(GetPlayerRentCar(playerid) == vehicleid && rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] == playerid))
		{
			TogglePlayerControllable(playerid, true);
			return RemovePlayerFromVehicle(playerid);
		}
		else if(IsAJobCar(vehicleid))
		{
			if(GetPlayerJobCar(playerid) != vehicleid)
			{
				return RemovePlayerFromVehicle(playerid);
			}
		}
		
		if(GetVehicleData(vehicleid, V_FUEL) <= 0.0)
			return GameTextForPlayer(playerid, "~r~no fuel", 4000, 1);
		
		new engine = (GetVehicleParam(vehicleid, V_ENGINE) ^ VEHICLE_PARAM_ON);
		SetVehicleParam(vehicleid, V_ENGINE, engine);
	}
	return 1;
}

CMD:l(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "¬ы не за рулем");
	
		new lights = (GetVehicleParam(vehicleid, V_LIGHTS) ^ VEHICLE_PARAM_ON);
		SetVehicleParam(vehicleid, V_LIGHTS, lights);
	}
	return 1;
}

CMD:sl(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "¬ы не за рулем");
		
		new limit = (GetVehicleData(vehicleid, V_LIMIT) ^ VEHICLE_PARAM_ON);
		SetVehicleData(vehicleid, V_LIMIT, limit);
	}
	return 1;
}

CMD:b(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(IsModelHasBootAndBonnet(GetVehicleModel(vehicleid)))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "¬ы не за рулем");
	
		Dialog
		(
			playerid, DIALOG_OPEN_HOOD_OR_TRUNK, DIALOG_STYLE_MSGBOX, 
			" ", 
			"\t{CC9900}”правлени€ авто", 
			" апот", "Ѕагажник"
		);	
	}
	return 1;
}

CMD:i(playerid, params[])
{	
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "¬ы не за рулем");
	
		new stationid = GetNearestFuelStation(playerid, 10.0);
		if(stationid != -1) 
		{
			FuelStationFillCar(playerid, vehicleid, stationid);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "ѕоблизости нет заправочных станций");
	}
	return 1;
}

CMD:alarm(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(!IsABike(vehicleid))
	{
		if(!IsPlayerDriver(playerid))
			return SendClientMessage(playerid, 0xCECECEFF, "¬ы не за рулем");
		
		new alarm = (GetVehicleData(vehicleid, V_ALARM) ^ VEHICLE_PARAM_ON);
		SetVehicleData(vehicleid, V_ALARM, alarm);	
	}
	return 1;
}

CMD:charity(playerid, params[])
{
	new Cache: result;
	new rows; 
	new money;
	new fmt_str[75];
	new string[1024];
	
	cache_set_active(charity_cache_data);
	rows = cache_num_rows();
	
	string = "—умма\t\t»м€\n\n{FFFFFF}";
	for(new idx; idx < rows; idx ++)
	{
		cache_get_row(idx, 0, fmt_str);
		money = cache_get_row_int(idx, 1);
		
		format(fmt_str, sizeof fmt_str, "%d руб\t\t%s\n", money, fmt_str);
		strcat(string, fmt_str);
	}
	cache_set_active(Cache:0); //unset active cache
	
	format(fmt_str, sizeof fmt_str, "SELECT SUM(money) as money FROM charity WHERE uid=%d LIMIT 1", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, fmt_str, true);

	money = cache_get_row_int(0, 0);
	cache_delete(result);
	
	format(fmt_str, sizeof fmt_str, "\n{999999}—умма ¬аших пожертвований: %d руб", money);
	strcat(string, fmt_str);
	
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{00CC00}“оп 25 благотворителей", string, "«акрыть", "");
}

CMD:bank(playerid, params[])
{
	//if(GetPlayerLevel(playerid) < 4)
	//	return SendClientMessage(playerid, 0x999999FF, "ѕользоватьс€ государственными банками можно с 4 уровн€");

	if(IsPlayerInRangeOfPoint(playerid, 35.0, 909.5200, -785.9926, 1000.5416))
	{
		ShowPlayerBankDialog(playerid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "¬ы не в банке");
	
	return 1;
}

CMD:time(playerid, params[])
{
	if(!(GetPlayerData(playerid, P_MUTE) > 0 || GetPlayerData(playerid, P_WARN_TIME) > 0)) return SendClientMessage(playerid, -1, "»спользуйте {6699FF}/c 060 {FFFFFF}(служба точного времени)");

	new fmt_msg[40];
	if(GetPlayerData(playerid, P_WARN_TIME) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "¬рем€ до сн€ти€ предупреждени€: %d дней", ((GetPlayerData(playerid, P_WARN_TIME) - gettime()) / 86400) + 1);
		SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
	}

	if(GetPlayerData(playerid, P_MUTE) > 0)
	{
		format(fmt_msg, sizeof fmt_msg, "¬рем€ до разблокировки чата: %d:%02d", floatround(GetPlayerData(playerid, P_MUTE) / 60) % 60, (GetPlayerData(playerid, P_MUTE) % 60));
		SendClientMessage(playerid, 0x66CC00FF, fmt_msg);
	}

	return 1;
}

CMD:take(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerTempJob(playerid) == TEMP_JOB_LOADER)
	{
		if(GetVehicleData(vehicleid, V_ACTION_TYPE) == VEHICLE_ACTION_TYPE_LOADER)
		{
			new TODO;
			
			return 1;
		}
	}
	return SendClientMessage(playerid, 0x999999FF, "¬ы должны работать на погрузчике");
}

CMD:id(playerid, params[])
{
	if(!strlen(params)) 
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /id [им€ или часть имени игрока]");
	
	new fmt_str[64];
	new count;
	
	foreach(new idx : Player)
	{
		if(!IsPlayerLogged(idx)) continue;
		
		if(strfind(GetPlayerNameEx(idx), params, true) != -1)
		{
			count ++;
			
			format(fmt_str, sizeof fmt_str, "%d. %s {66CC66}id %d", count, GetPlayerNameEx(idx), idx);
			SendClientMessage(playerid, 0xFFFFFFFF, fmt_str);
	
			if(count >= 5)
			{
				SendClientMessage(playerid, 0x999999FF, "ѕоказаны первые 5 совпадений");
				break;
			}
		}
	}
	if(!count) 
		SendClientMessage(playerid, 0x999999FF, "—овпадений не найдено");
		
	return 1;
}

CMD:buyf(playerid, params[])
{	
	new factory_fuels = GetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT);
	
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, 0x999999FF, "¬ы должны находитьс€ на нефтезаводе в рабочем транспорте");

	new modelid; 
	new vehicleid = GetPlayerJobCar(playerid);
	
	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);
	
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 994.1306, 679.8422, 12.0653))  // дл€ завода
	{
		if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 514)
			return SendClientMessage(playerid, 0xCECECEFF, "¬ы не работаете в отделе доставки завода или зан€ли не ту линию");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, 935.9503, 662.1276, 12.0029))  // дл€ азс
	{
		if(GetPlayerJob(playerid) != JOB_TRUCKER || modelid != 514)
			return SendClientMessage(playerid, 0xCECECEFF, "¬ы не работаете развозчиком топлива или зан€ли не ту линию");
	}
	else 
		return SendClientMessage(playerid, 0x999999FF, "¬ы должны находитьс€ на нефтезаводе");
	
	new total_litres = GetPlayerJobLoadItems(playerid);

	if(!IsPlayerInVehicle(playerid, vehicleid))
		return SendClientMessage(playerid, 0x999999FF, "¬ы должны находитьс€ на нефтезаводе в рабочем транспорте");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /buyf [кол-во в литрах]");
	
	if(!IsTrailerAttachedToVehicle(vehicleid))
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ашего транспорта отсутствует цистерна дл€ топлива"); 
		
	extract params -> new load_fuel;
	
	if(!(1 <= load_fuel <= 8000))
		return SendClientMessage(playerid, 0x999999FF, "ћожно загрузить от 1 до 8000 л топлива");
	
	if(factory_fuels < load_fuel)
		return SendClientMessage(playerid, 0x999999FF, "Ќа нефтезаводе нет такого количества топлива");
		
	if((total_litres + load_fuel) > 8000) 
		return SendClientMessage(playerid, 0xCECECEFF, "¬ цистерну столько не поместитс€");
		
	if(GetPlayerMoneyEx(playerid) < (load_fuel * 10))
		return SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег дл€ покупки такого количества топлива");
	
	GivePlayerMoneyEx(playerid, -(load_fuel * 10), "ѕокупка топлива (нефтезавод)", true, false);
	
	SetRepositoryData(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F, R_AMOUNT, factory_fuels - load_fuel);
	UpdateRepository(REPOSITORY_TYPE_OIL_FACTORY, REPOSITORY_ACTION_OIL_FACTORY_F);
	
	SetPlayerJobLoadItems(playerid, total_litres + load_fuel);
	
	new fmt_str[64];
	
	format(fmt_str, sizeof fmt_str, "¬ы загрузили %d л топлива общей стоимостью %d руб", load_fuel, load_fuel * 10);
	SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "~g~+ %d litres~n~~b~total %d litres", load_fuel, total_litres + load_fuel);
	GameTextForPlayer(playerid, fmt_str, 2000, 6);
	
	format(fmt_str, sizeof fmt_str, "ƒоставка топлива\n{FFFFFF}«агрузка %d / 8000 л", total_litres + load_fuel);
	UpdateVehicleLabel(vehicleid, 0xFF6600FF, fmt_str);
	
	return 1;
}

CMD:sellf(playerid, params[])
{
	new modelid; 
	new vehicleid = GetPlayerJobCar(playerid);
	
	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);
	
	if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 514)
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы не работаете в службе доставки завода");
	
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, -1111.9989, 2169.4163, 38.0353)) 
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитьс€ у склада топлива завода");
	
	new total_litres = GetPlayerJobLoadItems(playerid);
	
	new factory_fuels = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT);
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /sellf [кол-во в литрах]");
		
	extract params -> new sell_fuels;
	
	if(!(1 <= sell_fuels <= 8000)) 
		return SendClientMessage(playerid, 0x999999FF, "ћожно продать от 1 до 8000 л топлива");
	
	if(vehicleid == INVALID_VEHICLE_ID || !IsTrailerAttachedToVehicle(vehicleid) || total_litres < sell_fuels) 
		return SendClientMessage(playerid, 0x999999FF, "¬ ¬ашей фуре нет такого количества топлива или цистерна не прицеплена");
	
	if((factory_fuels + sell_fuels) > 1000000) 
		return SendClientMessage(playerid, 0x999999FF, "—клад топлива завода заполнен");

	GivePlayerMoneyEx(playerid, (sell_fuels * 12), "ѕродажа топлива (завод)", true, true);

	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL, R_AMOUNT, factory_fuels + sell_fuels);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_FUEL);
	
	SetPlayerJobLoadItems(playerid, total_litres - sell_fuels);
	AddPlayerData(playerid, P_JOB_WAGE, +, sell_fuels * 2);
	
	new fmt_str[64];

	format(fmt_str, sizeof fmt_str, "¬ы продали заводу %d л топлива на сумму %d руб", sell_fuels, sell_fuels * 12);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "¬аша чиста€ выручка составл€ет {FF9900}%d руб", sell_fuels * 2);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "ƒоставка топлива\n{FFFFFF}«агрузка %d / 8000 л", total_litres - sell_fuels);
	UpdateVehicleLabel(vehicleid, 0xFF6600FF, fmt_str);
	
	return 1;
}

CMD:buym(playerid, params[])
{
	new modelid; 
	new vehicleid = GetPlayerJobCar(playerid);
	
	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);
	
	if(GetPlayerTempJob(playerid) != TEMP_JOB_FACTORY_TRUCKER || modelid != 406)
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы не работник службы доставки завода");
		
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /buym [кол-во в кг]");	
		
	extract params -> new buy_metal_count;
	
	new metall_loaded_count = GetPlayerJobLoadItems(playerid);
	new miner_metal = GetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT);
	
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2317.2356, 1741.5924, 1.2725) || !IsPlayerInVehicle(playerid, vehicleid)) 
		return SendClientMessage(playerid, 0x999999FF, "¬ы должны находитьс€ у склада шахты в рабочем транспорте");
		
	if(!(1 <= buy_metal_count <= 500)) 
		return SendClientMessage(playerid, 0x999999FF, "ћожно загрузить от 1 до 500 кг металла");
		
	if(miner_metal < buy_metal_count) 
		return SendClientMessage(playerid, 0x999999FF, "Ќа складе шахты нет такого количества металла");
	
	if((metall_loaded_count + buy_metal_count) > 500) 
		return SendClientMessage(playerid, 0xCECECEFF, "¬ фургон столько не поместитс€");
		
	if(GetPlayerMoneyEx(playerid) < (buy_metal_count * 15))
		return SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег дл€ покупки такого количества металла");

	GivePlayerMoneyEx(playerid, -(buy_metal_count * 15), "ѕокупка металла (развозчик)", true, true);

	SetRepositoryData(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL, R_AMOUNT, miner_metal - buy_metal_count);
	UpdateRepository(REPOSITORY_TYPE_MINER, REPOSITORY_ACTION_MINER_METAL);

	SetPlayerJobLoadItems(playerid, metall_loaded_count + buy_metal_count);
	
	new fmt_str[64];
	
	format(fmt_str, sizeof fmt_str, "¬ы загрузили %d кг металла общей стоимостью %d руб", buy_metal_count, buy_metal_count * 15);
	SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "ƒоставка металла\n{FFFFFF}«агрузка %d / 500 кг", metall_loaded_count + buy_metal_count);
	UpdateVehicleLabel(vehicleid, 0x3399FFFF, fmt_str);
	
	return 1;
}

CMD:sellm(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /sellm [кол-во в кг]");
		
	extract params -> new sell_metal_count;
	
	if(!IsPlayerInRangeOfPoint(playerid, 20.0, -1042.5638, 2170.3940, 38.3904))
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитьс€ у склада металла завода");
	
	if(!(1 <= sell_metal_count <= 500)) 
		return SendClientMessage(playerid, 0x999999FF, "ћожно продать от 1 до 500 кг металла");
	
	new factory_metal = GetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT);
	
	if((factory_metal + sell_metal_count) > 1_000_000) 
		return SendClientMessage(playerid, 0xCECECEFF, "—клад металла завода заполнен");
	
	new fmt_str[90];
	
	new modelid; 
	new vehicleid = GetPlayerJobCar(playerid);
	
	if(vehicleid != INVALID_VEHICLE_ID)
		modelid = GetVehicleData(vehicleid, V_MODELID);
	
	if(GetPlayerTempJob(playerid) == TEMP_JOB_FACTORY_TRUCKER && IsPlayerInVehicle(playerid, vehicleid) && modelid == 406)
	{
		new metall_loaded_count = GetPlayerJobLoadItems(playerid);
		
		if(metall_loaded_count < sell_metal_count) 
			return SendClientMessage(playerid, 0x999999FF, "¬ ¬ашем фургоне нет такого количества металла");
		
		metall_loaded_count -= sell_metal_count;
		SetPlayerJobLoadItems(playerid, metall_loaded_count);
	
		format(fmt_str, sizeof fmt_str, "ƒоставка металла\n{FFFFFF}«агрузка %d / 500 кг", metall_loaded_count);
		UpdateVehicleLabel(vehicleid, 0x3399FFFF, fmt_str);
		
		AddPlayerData(playerid, P_JOB_WAGE, +, sell_metal_count * 3);
		GivePlayerMoneyEx(playerid, (sell_metal_count * 18), "ѕродажа металла заводу (развозчик)", true, true);
	}
	else 
	{
		if(GetPlayerData(playerid, P_METALL) < sell_metal_count) 
			return SendClientMessage(playerid, 0x999999FF, "” ¬ас с собой нет такого количества металла");
	
		format(fmt_str, sizeof fmt_str, "UPDATE accounts SET money=%d,metall=%d WHERE id=%d LIMIT 1", GetPlayerMoneyEx(playerid) + (sell_metal_count * 18), GetPlayerData(playerid, P_METALL), GetPlayerAccountID(playerid));
		mysql_query(mysql, fmt_str, false);
		
		if(!mysql_errno())
		{
			AddPlayerData(playerid, P_METALL, -, sell_metal_count);
			GivePlayerMoneyEx(playerid, (sell_metal_count * 18), "ѕродажа металла заводу", false, true);
		}
		else 
			return SendClientMessage(playerid, 0xFF6600FF, "ќшибка сохранени€, повторите попытку {FF0000}(equ-code 13)");

	}
	format(fmt_str, sizeof fmt_str, "¬ы продали заводу %d кг металла на сумму %d руб", sell_metal_count, sell_metal_count * 18);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "¬аша чиста€ выручка составл€ет {FF9900}%d руб", sell_metal_count * 3);
	SendClientMessage(playerid, 0x66CC00FF, fmt_str);
	
	SetRepositoryData(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL, R_AMOUNT, factory_metal + sell_metal_count);
	UpdateRepository(REPOSITORY_TYPE_FACTORY, REPOSITORY_ACTION_FACTORY_METAL);
	
	return 1;
}

CMD:takem(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, 0x999999FF, "¬ы не военнослужащий");

	extract params -> new take_metal_count; else return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /takem [кол-во в кг]");

	if(take_metal_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Ќеверное количество металла");

	new army_metal = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT);
	
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2])) 
		return SendClientMessage(playerid, 0x999999FF, "¬ы должны находитьс€ у склада воинской части");
		
	if(army_metal < take_metal_count) 
		return SendClientMessage(playerid, 0x999999FF, "Ќа складе воинской части нет такого количества металла");
	
	if((GetPlayerData(playerid, P_METALL) + take_metal_count) > 20) 
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы не можете унести с собой столько металла (максимум 20 кг)");

	AddPlayerData(playerid, P_METALL, +, take_metal_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT, army_metal - take_metal_count);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);
	
	new fmt_str[128];
	
	format(fmt_str, sizeof fmt_str, "%s[%d] вз€л(а) на военном складе {00cc33}%d кг металла", GetPlayerNameEx(playerid), playerid, take_metal_count);
	SendMessageToTeam(TEAM_ARMY, fmt_str, 0x3399FFFF);

	return 1;
}

CMD:putm(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, 0x999999FF, "¬ы не военнослужащий");

	extract params -> new put_metal_count; else return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /putm [кол-во в кг]");

	if(put_metal_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Ќеверное количество металла");

	new army_metal = GetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT);
	
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[0], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[1], GetTeamData(TEAM_ARMY, O_REPOSITORY_POS)[2])) 
		return SendClientMessage(playerid, 0x999999FF, "¬ы должны находитьс€ у склада воинской части");
	
	if(GetPlayerData(playerid, P_METALL) < put_metal_count) 
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет такого количества металла");

	AddPlayerData(playerid, P_METALL, -, put_metal_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	SetRepositoryData(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL, R_AMOUNT, army_metal + put_metal_count);
	UpdateRepository(REPOSITORY_TYPE_ARMY, REPOSITORY_ACTION_ARMY_METAL);
	
	new fmt_str[128];
	
	format(fmt_str, sizeof fmt_str, "%s[%d] положил(а) на военный склад {00cc33}%d кг металла", GetPlayerNameEx(playerid), playerid, put_metal_count);
	SendMessageToTeam(TEAM_ARMY, fmt_str, 0x3399FFFF);

	return 1;
}

CMD:givemet(playerid, params[])
{
	extract params -> new to_player, give_metall_count; else return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /givemet [id игрока] [кол-во в кг]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	if(give_metall_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Ќеверное количество металла");

	if(give_metall_count > GetPlayerData(playerid, P_METALL))
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет такого количества металла");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_METALL) + give_metall_count) > GetPlayerMaxStorage(to_player, STORAGE_METALL))
	{
		format(fmt_text, sizeof fmt_text, "»грок не может унести с собой столько металла (максимум %d кг)", GetPlayerMaxStorage(to_player, STORAGE_METALL));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_METALL, -, give_metall_count);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	AddPlayerData(to_player, P_METALL, +, give_metall_count);
	UpdatePlayerDatabaseInt(to_player, "metall", GetPlayerData(playerid, P_METALL));

	format(fmt_text, sizeof fmt_text, "~b~-%d metall", give_metall_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d metall", give_metall_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "¬ы передали металл игроку %s (%d кг.)", GetPlayerNameEx(to_player), give_metall_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "»грок %s передал ¬ам металл (%d кг.)", GetPlayerNameEx(playerid), give_metall_count);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:givepatr(playerid, params[])
{
	extract params -> new to_player, give_ammo_count; else return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /givepatr [id игрока] [кол-во патронов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	if(give_ammo_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Ќеверное количество патронов");

	if(give_ammo_count > GetPlayerData(playerid, P_AMMO))
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет такого количества патронов");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_AMMO) + give_ammo_count) > GetPlayerMaxStorage(to_player, STORAGE_AMMO))
	{
		format(fmt_text, sizeof fmt_text, "»грок не может унести с собой столько патронов (максимум %d шт)", GetPlayerMaxStorage(to_player, STORAGE_AMMO));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_AMMO, -, give_ammo_count);
	UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

	AddPlayerData(to_player, P_AMMO, +, give_ammo_count);
	UpdatePlayerDatabaseInt(to_player, "ammo", GetPlayerData(playerid, P_AMMO));

	format(fmt_text, sizeof fmt_text, "~b~-%d patr.", give_ammo_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d patr.", give_ammo_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "¬ы передали патроны игроку %s (%d шт.)", GetPlayerNameEx(to_player), give_ammo_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "»грок %s передал ¬ам патроны (%d шт.)", GetPlayerNameEx(playerid), give_ammo_count);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:givedrugs(playerid, params[])
{
	extract params -> new to_player, give_drugs_count; else return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /givedrugs [id игрока] [кол-во в г]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	if(give_drugs_count <= 0) return SendClientMessage(playerid, 0x999999FF, "Ќеверное количество наркотиков");

	if(give_drugs_count > GetPlayerData(playerid, P_DRUGS))
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет такого количества наркотиков");

	new fmt_text[80];

	if((GetPlayerData(to_player, P_DRUGS) + give_drugs_count) > GetPlayerMaxStorage(to_player, STORAGE_DRUGS))
	{
		format(fmt_text, sizeof fmt_text, "»грок не может унести с собой столько наркотиков (максимум %d г)", GetPlayerMaxStorage(to_player, STORAGE_DRUGS));
		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
	}

	AddPlayerData(playerid, P_DRUGS, -, give_drugs_count);
	UpdatePlayerDatabaseInt(playerid, "drugs", GetPlayerData(playerid, P_DRUGS));

	AddPlayerData(to_player, P_DRUGS, +, give_drugs_count);
	UpdatePlayerDatabaseInt(to_player, "drugs", GetPlayerData(playerid, P_DRUGS));

	format(fmt_text, sizeof fmt_text, "~b~-%d g.", give_drugs_count);
	GameTextForPlayer(playerid, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "~b~+%d g.", give_drugs_count);
	GameTextForPlayer(to_player, fmt_text, 4000, 1);

	format(fmt_text, sizeof fmt_text, "¬ы передали патроны наркотики %s (%d г.)", GetPlayerNameEx(to_player), give_drugs_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "»грок %s передал ¬ам наркотики (%d г.)", GetPlayerNameEx(playerid), give_drugs_count);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);

	return 1;
}

CMD:msg(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 4)
	{
		if(!strlen(params)) 
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /msg [текст]");
		
		new fmt_str[128];
		
		format(fmt_str, sizeof fmt_str, "јдминистратор %s: %s", GetPlayerNameEx(playerid), params);
		SendClientMessageToAll(0xFFCD00FF, fmt_str);
	}
	return 1;
}
ALT:msg:o;

CMD:ears(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	g_admin_ears = g_admin_ears ^ true;

	new fmt_text[70];

	format(fmt_text, sizeof fmt_text, "¬ы %s прослушку SMS", g_admin_ears ? "включили" : "выключили");
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] јдминистратор %s[%d] %s прослушку SMS", GetPlayerNameEx(playerid), playerid, g_admin_ears ? "включил" : "выключил");
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:ans(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /ans [id игрока] [текст]");
		
		extract params -> new to_player, string: message[64 + 1];
		
		if(!IsPlayerConnected(to_player)) 
			return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
		
		if(!strlen(message))
			return SendClientMessage(playerid, 0x999999FF, "¬ведите сообщение");
			
		new fmt_str[128];
		
		format(fmt_str, sizeof fmt_str, "јдминистратор %s[%d] дл€ %s[%d]: %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, message);
		SendClientMessage(to_player, 0xFF9945FF, fmt_str);
		PlayerPlaySound(to_player, 1085, 0.0, 0.0, 0.0);
		
		SendMessageToAdmins(fmt_str, 0xFF9945FF);
	}
	return 1;
}

CMD:okay(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 3)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуй: /okay [id игрока]");
	
		extract params -> new to_player;
		
		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
			return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
			
		if(!GetPVarInt(to_player, "change_name_status")) 
			return SendClientMessage(playerid, 0xCECECEFF, "»грок не подавал запрос на смену ника");
		
		new player_name[20 + 1];
		GetPVarString(to_player, "change_name", player_name, sizeof(player_name));

		if(ChangePlayerName(to_player, player_name, true))
		{
			Dialog
			(
				to_player, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, 
				"{FFCD00}»м€ изменено",
				"{66FF00}«а€вка на изменение имени одобрена, новое им€ установлено.\n\n"\
				"{FFFFFF}¬ следующий раз при входе в игру используйте свое новое им€. ƒл€\n"\
				"этого нужно изменить его в окне клиента CRMP. –екомендуем пр€мо\n"\
				"сейчас свернуть игру и сделать это.",
				"ќк", ""
			);
		}
		else SendClientMessage(playerid, 0xFF6600FF, "ѕри смене ника произошла ошибка");

		DeletePVar(to_player, "change_name");
		DeletePVar(to_player, "change_name_status");
	}
	
	return 1;
}

CMD:cc(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	for(new i = 0; i < 20; i++)
	{
		SendClientMessageToAll(-1, "");
	}
	SendClientMessageToAll(0xFFCD00FF, "„ат был очищен администрацией");

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		new fmt_text[65];
		format(fmt_text, sizeof fmt_text, "[A] јдминистратор %s[%d] очистил чат", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:ahelp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 1) SendClientMessage(playerid, 0xFFFF00FF, "ƒоступные команды:");
	if(GetPlayerAdminEx(playerid) >= 1) SendClientMessage(playerid, 0xCC9900FF, "1 уровень: /sp /weap /stats /a /admins");
	if(GetPlayerAdminEx(playerid) >= 2) SendClientMessage(playerid, 0xCC9900FF, "2 уровень: /get /kick /mute /unmute /money /slap /test /spawn");
	if(GetPlayerAdminEx(playerid) >= 3) SendClientMessage(playerid, 0xCC9900FF, "3 уровень: /ban /house /biz /inter /worker /warn /skick /lip /respv /goto");
	if(GetPlayerAdminEx(playerid) >= 3) SendClientMessage(playerid, 0xCC9900FF, "3 уровень: /jail /unjail /unwarn /okay /cc");
	if(GetPlayerAdminEx(playerid) >= 4) SendClientMessage(playerid, 0xCC9900FF, "4 уровень: /rban /offban /unrban /unban /setfuel /setweather /settime /showst /reloadbans");
	if(GetPlayerAdminEx(playerid) >= 4) SendClientMessage(playerid, 0xCC9900FF, "4 уровень: /msg /ears /gethere /hp /skin /templeader /sban /vec /spcars");
	if(GetPlayerAdminEx(playerid) >= 5) SendClientMessage(playerid, 0xCC9900FF, "5 уровень: /delacc /deladmin /admdown /setleader /saveall /adminsoff /setmark /tpmark /givegun");
	
	return 1;
}

CMD:sp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /sp [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	if(GetPlayerSpectateData(playerid, S_PLAYER) == -1)
	{
		new Float: x,
			Float: y,
			Float: z,
			Float: a,
			skin = GetPlayerSkin(playerid);

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		SetPlayerSpectateData(playerid, S_START_POS_X, x);
		SetPlayerSpectateData(playerid, S_START_POS_Y, y);
		SetPlayerSpectateData(playerid, S_START_POS_Z, z);
		SetPlayerSpectateData(playerid, S_START_ANGLE, a);

		SetPlayerSpectateData(playerid, S_START_INTERIOR, GetPlayerInterior(playerid));
		SetPlayerSpectateData(playerid, S_START_VIRTUAL_WORLD, GetPlayerVirtualWorld(playerid));

		SetSpawnInfo(playerid, 0, skin, x, y, z, a, 0, 0, 0, 0, 0, 0);
	}

	StartSpectate(playerid, to_player);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		new fmt_text[90];
		format(fmt_text, sizeof fmt_text, "[A] јдминистратор %s[%d] следит за %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:weap(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /weap [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	new fmt_text[625],
		text[45];

	format
	(
		fmt_text,
		sizeof fmt_text,
		"\
		—лот\tќружие\t\tѕатроны\n{ffffff}\
		"
	);

	for(new i = 0; i < 13; i++)
	{
		new weapon_id, weapon_ammo;

		GetPlayerWeaponData(to_player, i, weapon_id, weapon_ammo);

		format(text, sizeof text, "\n%d\t%s%s%d", i+1, GetWeaponName(weapon_id), weapon_dialog_tabulation[weapon_id], weapon_ammo);
		strcat(fmt_text, text);
	}

	Dialog
	(
		playerid,
		INVALID_DIALOG_ID,
		DIALOG_STYLE_MSGBOX,
		"{FFCC00}ќружи€ у игрока",
		fmt_text,
		"«акрыть",
		""
	);

	return 1;
}

CMD:stats(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /stats [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	ShowPlayerStats(to_player, playerid);

	return 1;
}

CMD:a(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) >= 1)
	{
		if(!strlen(params)) 
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /a [текст]");
		
		new fmt_str[128];
		
		format(fmt_str, sizeof fmt_str, "[A] %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
		SendMessageToAdmins(fmt_str, 0x99CC00FF);
	}
	return 1;
}

CMD:admins(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	
	new fmt_text[60],
		count;

	SendClientMessage(playerid, 0x66CC33FF, "јдминистраторы в сети:");
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		else if(!IsPlayerLogged(i)) continue;
		else if(!(1 <= GetPlayerAdminEx(i) <= 5)) continue;
		
		format(fmt_text, sizeof fmt_text, "%s[%d] (%d lvl)", GetPlayerNameEx(i), i, GetPlayerAdminEx(i));

		if(IsPlayerAFK(i))
			format(fmt_text, sizeof fmt_text, "%s {FF0000}AFK [%02d:%02d]", fmt_text, (floatround(GetPlayerData(i, P_AFK_TIME) / 60) % 60), GetPlayerData(i, P_AFK_TIME) % 60);

		else if(GetPlayerSpectateData(playerid, S_PLAYER) != -1)
			format(fmt_text, sizeof fmt_text, "%s {00CC00}/sp > %d", fmt_text, GetPlayerSpectateData(playerid, S_PLAYER));

		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);
		count++;
	}
	if(!count) SendClientMessage(playerid, 0xFFCC00FF, "Ќет администраторов в сети");
	
	return 1;
}

CMD:get(playerid, params[])
{
	if(!strlen(params)) 
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /get [им€ игрока]");
		
	if(!(3 <= strlen(params) <= 20)) 
		return SendClientMessage(playerid, 0x999999FF, "»грок с таким именем не найден");
	
	extract params -> new string: name[21];
	
	new query[90];
	new Cache: result, user_id;
	
	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	user_id = cache_get_field_content_int(0, "id");
	
	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0x999999FF, "»грок с таким именем не найден"), cache_delete(result);

	new reg_ip[16],
		last_ip[16],
		reg_date[6],
		reg_time = cache_get_field_content_int(0, "reg_time"),
		game_for_day = cache_get_field_content_int(0, "game_for_day"),
		game_for_day_prev = cache_get_field_content_int(0, "game_for_day_prev");

	cache_get_field_content(0, "reg_ip", reg_ip);
	cache_get_field_content(0, "last_ip", last_ip);

	timestamp_to_date(reg_time, reg_date[2], reg_date[1], reg_date[0], reg_date[3], reg_date[4], reg_date[5]);

	new fmt_text[384];

	format
	(
		fmt_text, sizeof fmt_text,
		"\
		Ќомер аккаунта:\t\t%d\n\
		Ќаличные:\t\t\t%d\n\
		ќсн. банк счет:\t\t%d\n\
		”ровень:\t\t\t%d\n\
		IP адрес (регистр.):\t\t%s\n\
		IP адрес (послед.):\t\t%s\n\
		ƒата и врем€ регистрации:\t\%02d.%02d.%d в %02d:%02d:%02d\n\
		ƒонат:\t\t\t\t%d (¬сего: %d)\n\
		¬ игре сегодн€:\t\t%d ч %d мин\n\
		¬ игре вчера:\t\t\t%d ч %d мин\
		",
		user_id,
		cache_get_field_content_int(0, "money"),
		cache_get_field_content_int(0, "bank"),
		cache_get_field_content_int(0, "level"),
		reg_ip,
		last_ip,
		reg_date[0], reg_date[1], reg_date[2],
		reg_date[3], reg_date[4], reg_date[5],
		cache_get_field_content_int(0, "donate_current"),
		cache_get_field_content_int(0, "donate_total"),
		ConvertUnixTime(game_for_day, CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(game_for_day, CONVERT_TIME_TO_MINUTES),
		ConvertUnixTime(game_for_day_prev, CONVERT_TIME_TO_HOURS),
		ConvertUnixTime(game_for_day_prev, CONVERT_TIME_TO_MINUTES)
	);

	cache_delete(result);

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, name, fmt_text, "«акрыть", "");
	return 1;
}

CMD:money(playerid, params[])
{
	if(!strlen(params)) 
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /money [им€ игрока]");
		
	if(!(3 <= strlen(params) <= 20)) 
		return SendClientMessage(playerid, 0x999999FF, "»грок с таким именем не найден");
	
	extract params -> new string: name[21];
	
	new query[90];
	new Cache: result, user_id;
	
	mysql_format(mysql, query, sizeof query, "SELECT * FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);

	user_id = cache_get_field_content_int(0, "id");
	
	if(!cache_num_rows() || !user_id)
		return SendClientMessage(playerid, 0x999999FF, "»грок с таким именем не найден"), cache_delete(result);

	new player_cash = cache_get_field_content_int(0, "money"),
		player_bank = cache_get_field_content_int(0, "bank"),
		player_wage = cache_get_field_content_int(0, "wage"),
		player_business = cache_get_field_content_int(0, "business"),
		player_fuel_st = cache_get_field_content_int(0, "fuel_st"),
		bank_accounts_money,
		fmt_text[310];

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "SELECT * FROM bank_accounts WHERE uid='%d'", user_id);
	result = mysql_query(mysql, query);

	if(cache_num_rows())
	{
		for(new i = 0; i < cache_num_rows(); i++)
			bank_accounts_money += cache_get_field_content_int(i, "balance");
	}

	cache_delete(result);

	format
	(
		fmt_text, sizeof fmt_text,
		"\
		Ќаличные деньги:\t\t\t%d руб\n\
		ќсн.банковский счЄт:\t\t\t%d руб\n\
		¬ременный «/ѕ счЄт:\t\t\t%d руб\n\n\
		Ќа всех доп. банк. счетах:\t\t%d руб\n\n\
		",
		player_cash, player_bank, player_wage, bank_accounts_money
	);

	if(player_business != -1)
	{
		mysql_format(mysql, query, sizeof query, "SELECT balance FROM business WHERE owner_id='%d' LIMIT 1", user_id);
		result = mysql_query(mysql, query);

		format(query, sizeof query, "Ќа счету бизнеса:\t\t\t%d руб\n", cache_get_row_int(0, 0));
		strcat(fmt_text, query);

		cache_delete(result);
	}
	else strcat(fmt_text, "Ќет бизнеса\n");

	if(player_fuel_st != -1)
	{
		mysql_format(mysql, query, sizeof query, "SELECT balance FROM fuel_stations WHERE owner_id='%d' LIMIT 1", user_id);
		result = mysql_query(mysql, query);

		format(query, sizeof query, "Ќа счету ј«—:\t\t\t\t%d руб", cache_get_row_int(0, 0));
		strcat(fmt_text, query);

		cache_delete(result);
	}
	else strcat(fmt_text, "Ќет ј«—");

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, name, fmt_text, "«акрыть", "");

	return 1;
}

CMD:kick(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /kick [id игрока] [причина (необ€зательно)]");

	extract params -> new to_player;

	if(!IsPlayerConnected(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
	else if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Ќельз€ кикнуть администратора выше по рангу");
	else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Ќельз€ самого себ€ кикнуть");
	
	new reason[31];
	sscanf(params, "{d}s[30]", reason);
	
	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "јдминистратор %s кикнул игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	
	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. ѕричина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);
	
	Kick(to_player);

	return 1;
}

CMD:skick(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /skick [id игрока]");
	
	if(GetPlayerAdminEx(playerid) < 6)
	{
		new fmt_msg[105];
		format(fmt_msg, sizeof fmt_msg, "[A] јдминистратор %s[%d] кикнул %s[%d] без лишнего шума", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}
	
	Kick(to_player);
	return 1;
}

CMD:mute(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /mute [id игрока] [врем€ в минутах] [причина (необ€зательно)]");

	extract params -> new to_player, mute_time, string: reason[30];
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
	
	if(!(1 <= mute_time <= 360)) return SendClientMessage(playerid, 0xCECECEFF, "¬рем€ должно быть не меньше 1 и не больше 360 минут");
	if(GetPlayerData(to_player, P_MUTE) > 0) return SendClientMessage(playerid, 0xCECECEFF, "” этого игрока уже есть мут");	
	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Ќельз€ поставить затычку администратору выше по рангу");
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Ќельз€ поставить затычку самому себе");
	
	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "јдминистратор %s поставил затычку игроку %s на %d мин", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), mute_time);
	
	if(strlen(reason))
		format(fmt_msg, sizeof fmt_msg, "%s. ѕричина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);
	
	SetPlayerData(to_player, P_MUTE, mute_time * 60);
	SendClientMessage(to_player, 0xCECECEFF, "¬рем€ до окончани€ бана чата: {CCCC00}/time");
	
	return 1;
}

CMD:unmute(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 1) return 1;
	
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /unmute [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
	
	else if(GetPlayerData(to_player, P_MUTE) <= 0) return SendClientMessage(playerid, 0xCECECEFF, "” этого игрока нет мута");	
	//else if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Ќельз€ сн€ть затычку с самого себ€");
	
	new fmt_msg[80];
	format(fmt_msg, sizeof fmt_msg, "јдминистратор %s сн€л затычку с игрока %s", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendClientMessageToAll(0xFF5533FF, fmt_msg);
	
	SetPlayerData(to_player, P_MUTE, 0);
	SendClientMessage(to_player, 0x66CC00FF, "ƒоступ в чат восстановлен");
	
	return 1;
}

CMD:ban(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /ban [id игрока] [срок в дн€й] [причина (необ€зательно)]");
	
	extract params -> new to_player, ban_time, string:reason[30];
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
	
	if(!(1 <= ban_time <= 14)) return SendClientMessage(playerid, 0xCECECEFF, "—рок бана может быть от 1 до 14 дней");

	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Ќельз€ забанить администратора выше по рангу");	
	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Ќельз€ забанить самого себ€");	
	
	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "јдминистратор %s забанил игрока %s на %d дней", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), ban_time);
	
	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. ѕричина: %s", fmt_msg, reason);
		
	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	if(!strlen(reason)) reason = "None";

	AddBan(GetPlayerAccountID(to_player), gettime(), ban_time, GetPlayerIpEx(to_player), reason, GetPlayerNameEx(playerid));
	BanEx(to_player, reason);
	return 1;
}

CMD:house(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new house_id; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /house [номер дома]");

	return 1;
}

CMD:warn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /warn [id игрока] [причина (необ€зательно)]");

	extract params -> new to_player, string:reason[66];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
	if(GetPlayerAdminEx(to_player) > GetPlayerAdminEx(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "Ќельз€ выдать предупреждение админу выше по рангу");
	//if(to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "Ќельз€ выдать предупреждение самому себе");
	
	AddPlayerData(to_player, P_WARN, +, 1);
	SetPlayerData(to_player, P_WARN_TIME, gettime() + (86400 * 10));
	
	new fmt_msg[128];
	format(fmt_msg, sizeof fmt_msg, "јдминистратор %s выдал предупреждение игроку %s [%d|3]", GetPlayerNameEx(playerid), GetPlayerNameEx(to_player), GetPlayerData(to_player, P_WARN));
	
	if(strlen(reason) > 0)
		format(fmt_msg, sizeof fmt_msg, "%s. ѕричина: %s", fmt_msg, reason);

	SendClientMessageToAll(0xFF5533FF, fmt_msg);

	new uid = GetPlayerAccountID(to_player);
	new warns = GetPlayerData(to_player, P_WARN);
	new warns_time = GetPlayerData(to_player, P_WARN_TIME);
	
	if(warns >= 3)
	{
		SendClientMessage(to_player, 0xFF5533FF, "јккаунт заблокирован на 10 дней");
	
		warns =
		warns_time = 0;
		
		AddBan(uid, gettime(), 10, GetPlayerIpEx(to_player), "получено 3 варна", GetPlayerNameEx(playerid));
		BanEx(to_player, "получено 3 варна");
	}
	else Kick:(to_player);
	
	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET warn=%d,warn_time=%d WHERE id=%d", warns, warns_time, uid);
	mysql_query(mysql, fmt_msg, false);
	
	return 1;
}

CMD:spawn(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /spawn [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	SetPlayerSpawnInit(to_player);
	SpawnPlayer(to_player);

	return 1;
}

CMD:spcar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /spcar [id авто]");

	if(IsPlayerInAnyVehicle(playerid) && vehicleid == 0) vehicleid = GetPlayerVehicleID(playerid);

	if(!IsValidVehicle(vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "ƒанного транспорта не существует на сервере");

	SetVehicleToRespawn(vehicleid);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		new fmt_msg[80];
		format(fmt_msg, sizeof fmt_msg, "[A] јдминистратор %s[%d] зареспавнил авто [є%d]", GetPlayerNameEx(playerid), playerid, vehicleid);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}
	return 1;
}

CMD:goto(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /goto [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	
	new Float: x, Float: y, Float: z, interior, virtual_world;
	GetPlayerPos(to_player, x, y, z);
	interior = GetPlayerInterior(to_player);
	virtual_world = GetPlayerVirtualWorld(to_player);
	
	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0, interior, virtual_world);
	
	if(GetPlayerInHouse(to_player)) SetPlayerInHouse(playerid, GetPlayerInHouse(to_player));
	
	SendClientMessage(playerid, -1, "¬ы были телепортированы");
	return 1;
}

ALT:gethere:getp;
ALT:gethere:getplayer;

CMD:gethere(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /gethere [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPosEx(to_player, x + 1, y + 1, z, 0.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	
	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "јдминистратор %s телепортивал ¬ас к себе", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);
	
	format(fmt_msg, sizeof fmt_msg, "¬ы телепортивали %s к себе", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_msg);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] јдминистратор %s[%d] телепортировал к себе %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}
	
	return 1;
}

CMD:vtp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	
	extract params -> new to_vehicleid; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /vtp [id транспорта]");
	if(!IsValidVehicle(to_vehicleid)) return SendClientMessage(playerid, 0xCECECEFF, "ƒанного транспорта не существует на сервере");
	
	new Float: x, Float: y, Float: z;
	GetVehiclePos(to_vehicleid, x, y, z);

	SetPlayerPosEx(playerid, x + 1, y + 1, z, 0.0);
	
	SendClientMessage(playerid, -1, "¬ы были телепортированы");	
	return 1;
}

CMD:getv(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /getv [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	if(GetPlayerOwnableCar(to_player) == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, 0x999999FF, "” игрока нет личного транспорта");

	new fmt_text[105],
		Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(to_player, x, y, z);

	SetVehiclePos(GetPlayerOwnableCar(to_player), x + 2.0, y + 2.0, z);

	format(fmt_text, sizeof fmt_text, "¬ы телепортировали к %s его личный транспорт", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "јдминистратор %s телепортировал к ¬ам ¬аш личный транспорт", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] телепортировал к %s[%d] его личный транспорт", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:fixcar(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /fixcar [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	if(!IsPlayerInAnyVehicle(to_player))
		return SendClientMessage(playerid, 0x999999FF, "»грок должен находитьс€ в транспорте");

	new fmt_text[93],
		vehicleid = GetPlayerVehicleID(to_player);
	
	RepairVehicle(vehicleid);
	if(IsAOwnableCar(vehicleid)) SetVehicleData(vehicleid, V_HEALTH, 1000.0);

	format(fmt_text, sizeof fmt_text, "¬ы починили транспорт игрока %s", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "јдминистратор %s починил ¬аш транспорт", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] починил транспорт игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:slap(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 2) return 1;
	
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /slap [id игрока]");
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	
	new Float: x, Float: y, Float: z, fmt_text[85];
	GetPlayerPos(to_player, x, y, z);
	
	SetPlayerPos(to_player, x, y, z + 5);
	PlayerPlaySound(to_player, 1130, 0.0, 0.0, 0.0);
	
	format(fmt_text, sizeof fmt_text, "¬ы подбросили игрока %s", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "јдминистратор %s подбросил ¬ас", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] %s[%d] подбросил игрока %s[%d]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:hp(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 3) return 1;
	
	extract params -> new to_player, health; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /hp [id игрока] [количество здоровь€]");
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	else if(!(0 <= health <= 100)) return SendClientMessage(playerid, 0x999999FF, "”ровень здоровь€ от 0 до 100");	
		
	SetPlayerData(to_player, P_HEALTH, health);
	SetPlayerHealthEx(to_player, health);
	
	new fmt_msg[105];
	format(fmt_msg, sizeof fmt_msg, "јдминистратор %s изменил ¬ам уровень здоровь€", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, -1, fmt_msg);
	
	format(fmt_msg, sizeof fmt_msg, "¬ы изменили %s уровень здоровь€", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, -1, fmt_msg);
	
	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_msg, sizeof fmt_msg, "[A] јдминистратор %s[%d] изменил уровень здоровь€ %s[%d] на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, health);
		SendMessageToAdmins(fmt_msg, 0x999999FF);
	}	
	
	return 1;
}

CMD:spcars(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	new vehicles_count;
	
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
	    if(!IsValidVehicle(i)) continue;
	    else if(GetVehicleData(i, V_DRIVER_ID) != INVALID_PLAYER_ID) continue;
	    
		switch(GetVehicleModel(i))
		{
			case 435, 450, 584, 591: continue;
		}

	    SetVehicleToRespawn(i);
	    vehicles_count++;
	}

	new fmt_text[90];

	format(fmt_text, sizeof fmt_text, "¬ы зареспавнили весь незан€тый транспорт. ¬сего зареспавнено: %d шт.", vehicles_count);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] јдминистратор %s[%d] зареспавнил весь незан€тый транспорт", GetPlayerNameEx(playerid), playerid);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:vec(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 4) return 1;

	extract params -> new model_id, color_1, color_2; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /vec [id модели] [цвет 1] [цвет 2]");
	if(!(400 <= model_id <= 611)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте модель от 400 до 611");

	new Float: x,
		Float: y,
		Float: z,
		Float: a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	new vehicleid = CreateVehicle(model_id, x, y, z, a, color_1, color_2, -1, 0, VEHICLE_ACTION_TYPE_ADMIN_CAR);
	PutPlayerInVehicle(playerid, vehicleid, 0);

	return 1;
}

CMD:setleader(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	if(!strlen(params))
	{	
		SendClientMessage(playerid, 0xCECECEFF, "»спользуй /setleader [id игрока] [организаци€]");
		
		SendClientMessage(playerid, 0xCECECEFF, "1 - ѕравительство области");
		SendClientMessage(playerid, 0xCECECEFF, "2 - ¬оинска€ часть");
		SendClientMessage(playerid, 0xCECECEFF, "3 - √ородска€ больница");
		SendClientMessage(playerid, 0xCECECEFF, "4 - √“–  Ђ–итмї");
		SendClientMessage(playerid, 0xCECECEFF, "5 - ќтдел полиции є1 (ƒѕ—)");
		SendClientMessage(playerid, 0xCECECEFF, "6 - ќтдел полиции є2 (ѕѕ—)");
		SendClientMessage(playerid, 0xCECECEFF, "7 - ‘едеральна€ —лужба Ѕезопасности");
		SendClientMessage(playerid, 0xCECECEFF, "8 - јрзамасска€ ќѕ√");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Ѕатыревска€ ќѕ√");
		SendClientMessage(playerid, 0xCECECEFF, "10- Ћыткаринска€ ќѕ√");
		
		return 1;
	}
	extract params -> new to_player, org_id;

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(playerid)) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(!(0 <= org_id <= 10)) return SendClientMessage(playerid, 0x999999FF, "Ќеверный идентификатор организации");

	new fmt_msg[155];
	
	if(!org_id)
	{
	    format(fmt_msg, sizeof fmt_msg, "јдминистратор %s[%d] сн€л ¬ас с должности лидера организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0xFFFF00FF, fmt_msg);
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] сн€л %s[%d] с должности лидера организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
		SendClientMessage(to_player, 0x999999FF, fmt_msg);
		return InvitePlayer(to_player, 0, 0, true);
	}
	
	InvitePlayer(to_player, org_id, 10, true);
	
	if(IsTeamSubdivision(org_id))
		format(fmt_msg, sizeof fmt_msg, "јдминистратор %s[%d] назначил ¬ас лидером подразделени€ \"%s\", организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerSubdivisionName(to_player), GetPlayerTeamName(to_player));
	else 
		format(fmt_msg, sizeof fmt_msg, "јдминистратор %s[%d] назначил ¬ас лидером организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerTeamName(to_player));
	
	SendClientMessage(to_player, 0xFFFF00FF, fmt_msg);
	
	if(IsTeamSubdivision(org_id))
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] назначил %s[%d] лидером подразделени€ \"%s\", организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerSubdivisionName(to_player), GetPlayerTeamName(to_player));
	else 
		format(fmt_msg, sizeof fmt_msg, "[A] %s[%d] назначил %s[%d] лидером организации \"%s\"", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerTeamName(to_player));
	
	SendMessageToAdmins(fmt_msg, 0x999999FF);
	return 1;
}

CMD:givegun(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, weapon_id, weapon_ammo; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /givegun [id игрока] [id оружи€] [кол-во патронов]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	if(!(1 <= weapon_id <= 46) || (19 <= weapon_id <= 21)) return SendClientMessage(playerid, 0x999999FF, "ID оружи€ от 1 до 46");
	if(!(1 <= weapon_ammo <= 1000)) return SendClientMessage(playerid, 0x999999FF, " оличество патронов от 1 до 1000");

	GivePlayerWeapon(to_player, weapon_id, weapon_ammo);

	new fmt_text[80];

	format(fmt_text, sizeof fmt_text, "јдминистратор %s[%d] выдал ¬ам %s и %d патр.", GetPlayerNameEx(playerid), playerid, GetWeaponName(weapon_id), weapon_ammo);
	SendClientMessage(to_player, -1, fmt_text);

	format(fmt_text, sizeof fmt_text, "¬ы выдали игроку %s[%d] %s и %d патр.", GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id), weapon_ammo);
	SendClientMessage(playerid, -1, fmt_text);

	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(fmt_text, sizeof fmt_text, "[A] јдминистратор %s[%d] выдал %s[%d] %s[%d патр]", GetPlayerAdminEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetWeaponName(weapon_id), weapon_ammo);
		SendMessageToAdmins(fmt_text, 0x999999FF);
	}

	return 1;
}

CMD:agivelic(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;

	extract params -> new to_player, license; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /agivelic [id игрока] [тип] (1-Ѕазовый уровень 2-ѕрофессиональный уровень 3-Ќа оружие)");
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	new fmt_text[144];

	switch(license)
	{
		case 1:
		{
			SetPlayerData(to_player, P_DRIVING_LIC, GetPlayerData(to_player, P_DRIVING_LIC) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "driving_lic", GetPlayerData(to_player, P_DRIVING_LIC));

			format(fmt_text, sizeof fmt_text, "јдминистратор %s[%d] %s лицензию на вождение Ѕазового уровн€", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) ? "выдал ¬ам" : "забрал у ¬ас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "¬ы %s %s[%d] лицензию на вождение Ѕазового уровн€", GetPlayerData(to_player, P_DRIVING_LIC) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] јдминистратор %s[%d] %s %s[%d] лицензию на вождение Ѕазового уровн€", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		case 2:
		{
			SetPlayerData(to_player, P_DRIVING_LIC, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? 0 : 2);
			UpdatePlayerDatabaseInt(to_player, "driving_lic", GetPlayerData(to_player, P_DRIVING_LIC));

			format(fmt_text, sizeof fmt_text, "јдминистратор %s[%d] %s лицензию на вождение ѕрофессионального уровн€", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "выдал ¬ам" : "забрал у ¬ас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "¬ы %s %s[%d] лицензию на вождение ѕрофессионального уровн€", GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] јдминистратор %s[%d] %s %s[%d] лицензию на вождение ѕрофессионального уровн€", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		case 3:
		{
			SetPlayerData(to_player, P_WEAPON_LIC, GetPlayerData(to_player, P_WEAPON_LIC) ^ 1);
			UpdatePlayerDatabaseInt(to_player, "weapon_lic", GetPlayerData(to_player, P_WEAPON_LIC));

			format(fmt_text, sizeof fmt_text, "јдминистратор %s[%d] %s лицензию на оружие", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_WEAPON_LIC) ? "выдал ¬ам" : "забрал у ¬ас");
			SendClientMessage(to_player, 0x3399FFFF, fmt_text);

			format(fmt_text, sizeof fmt_text, "¬ы %s %s[%d] лицензию оружие", GetPlayerData(to_player, P_WEAPON_LIC) ? "выдали" : "забрали у", GetPlayerNameEx(to_player), to_player);
			SendClientMessage(playerid, 0x66CC00FF, fmt_text);

			format(fmt_text, sizeof fmt_text, "[A] јдминистратор %s[%d] %s %s[%d] лицензию на оружие", GetPlayerNameEx(playerid), playerid, GetPlayerData(to_player, P_WEAPON_LIC) ? "выдал" : "забрал у", GetPlayerNameEx(to_player), to_player);
			SendMessageToAdmins(fmt_text, 0x999999FF);
		}
		default: SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /agivelic [id игрока] [тип] (1-Ѕазовый уровень 2-ѕрофессиональный уровень 3-Ќа оружие)");
	}

	return 1;
}

CMD:setskills(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	
	extract params -> new to_player, set_code, set_value; else {
	
	    SendClientMessage(playerid, 0xCECECEFF, "»спользование: /setskills [id игрока] [навык] [значение]");
	    SendClientMessage(playerid, 0xCECECEFF, " оды навыков:");
		SendClientMessage(playerid, 0xCECECEFF, "1 - Colt 45");
	    SendClientMessage(playerid, 0xCECECEFF, "2 - SD Pistol");
	    SendClientMessage(playerid, 0xCECECEFF, "3 - Desert Eagle");
	    SendClientMessage(playerid, 0xCECECEFF, "4 - Shotgun");
	    SendClientMessage(playerid, 0xCECECEFF, "5 - MP5");
	    SendClientMessage(playerid, 0xCECECEFF, "6 - AK47");
	    SendClientMessage(playerid, 0xCECECEFF, "7 - M4");
	    SendClientMessage(playerid, 0xCECECEFF, "8 - Sniper Rifle");
		SendClientMessage(playerid, 0xCECECEFF, "9 - Sawnoff");
		SendClientMessage(playerid, 0xCECECEFF, "10 - Combat SG");
		SendClientMessage(playerid, 0xCECECEFF, "11 - Micro Uzi");
	    SendClientMessage(playerid, 0xCECECEFF, "12 - —ила");
	    return 1;
	}
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	if(!(0 <= set_value <= 100)) return SendClientMessage(playerid, 0x999999FF, "«начение навыка от 0 до 100");
	
	new tmp_skill_name[32], query[128];
	
	switch(set_code)
	{
		case 1:
	    {
	        SetPlayerData(to_player, P_SKILL_COLT, set_value);
			tmp_skill_name = "Colt 45";
			UpdatePlayerDatabaseInt(to_player, "skill_colt", set_value);
	    }
	    case 2:
	    {
	        SetPlayerData(to_player, P_SKILL_SDPISTOL, set_value);
			tmp_skill_name = "SD Pistol";
			UpdatePlayerDatabaseInt(to_player, "skill_sdpistol", set_value);
	    }
	    case 3:
	    {
	        SetPlayerData(to_player, P_SKILL_DEAGLE, set_value);
			tmp_skill_name = "Desert Eagle";
			UpdatePlayerDatabaseInt(to_player, "skill_deagle", set_value);
	    }
	    case 4:
	    {
	        SetPlayerData(to_player, P_SKILL_SHOTGUN, set_value);
			tmp_skill_name = "Shotgun";
			UpdatePlayerDatabaseInt(to_player, "skill_shotgun", set_value);
	    }
	    case 5:
	    {
	        SetPlayerData(to_player, P_SKILL_MP5, set_value);
			tmp_skill_name = "MP5";
			UpdatePlayerDatabaseInt(to_player, "skill_mp5", set_value);
	    }
	    case 6:
	    {
	        SetPlayerData(to_player, P_SKILL_AK47, set_value);
			tmp_skill_name = "AK47";
			UpdatePlayerDatabaseInt(to_player, "skill_ak47", set_value);
	    }
	    case 7:
	    {
	        SetPlayerData(to_player, P_SKILL_M4, set_value);
			tmp_skill_name = "M4";
			UpdatePlayerDatabaseInt(to_player, "skill_m4", set_value);
	    }
	    case 8:
	    {
	        SetPlayerData(to_player, P_SKILL_SNIPER_RIFLE, set_value);
			tmp_skill_name = "Sniper Rifle";
			UpdatePlayerDatabaseInt(to_player, "skill_sniper_rifle", set_value);
	    }
		case 9:
	    {
	        SetPlayerData(to_player, P_SKILL_SAWNOFF, set_value);
			tmp_skill_name = "Sawnoff";
			UpdatePlayerDatabaseInt(to_player, "skill_sawnoff", set_value);
	    }
		case 10:
	    {
	        SetPlayerData(to_player, P_SKILL_COMBAT_SG, set_value);
			tmp_skill_name = "Combat SG";
			UpdatePlayerDatabaseInt(to_player, "skill_combat_sg", set_value);
	    }
		case 11:
	    {
	        SetPlayerData(to_player, P_SKILL_MICRO_UZI, set_value);
			tmp_skill_name = "Micro Uzi";
			UpdatePlayerDatabaseInt(to_player, "skill_micro_uzi", set_value);
	    }
	    case 12:
	    {
	        SetPlayerData(to_player, P_POWER, set_value);
			tmp_skill_name = "—ила";
			UpdatePlayerDatabaseInt(to_player, "power", set_value);
	    }
	    default: return SendClientMessage(playerid, 0x999999FF, "Ќеверно введен код навыка");
	}
	
	SetPlayerSkillsInit(to_player);

	format(query, sizeof query, "јдминистратор %s изменил ¬ам уровень навыка %s на %d", GetPlayerNameEx(playerid), tmp_skill_name, set_value);
	SendClientMessage(to_player, 0x3399FFFF, query);

	format(query, sizeof query, "¬ы изменили игроку %s уровень навыка %s на %d", GetPlayerNameEx(to_player), tmp_skill_name, set_value);
	SendClientMessage(playerid, 0x66CC00FF, query);
	
	if(GetPlayerAdminEx(playerid) <= 5)
	{
		format(query, sizeof query, "[A] јдминистратор %s[%d] изменил %s[%d] уровень навыка %s на %d", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, tmp_skill_name, set_value);
		SendMessageToAdmins(query, 0x999999FF);
	}	
	return 1;
}

CMD:setadm(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	extract params -> new to_player, admin_lvl; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /setadm [id игрока] [уровень администратора]");
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	else if(!(0 <= admin_lvl <= 6)) return SendClientMessage(playerid, 0x999999FF, "”ровень администратора от 0 до 6");
	else if(to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "¬ы не можете измен€ть свой уровень администратора");
	
	new fmt_msg[65];
	
	SetPlayerData(to_player, P_ADMIN, admin_lvl);
	UpdatePlayerDatabaseInt(to_player, "admin", admin_lvl);

	format(fmt_msg, sizeof fmt_msg, "%s выдал ¬ам права администратора %d уровн€", GetPlayerNameEx(playerid), admin_lvl);
	SendClientMessage(to_player, 0x3399FFFF, fmt_msg);

	format(fmt_msg, sizeof fmt_msg, "¬ы выдали %s права администратора %d уровн€", GetPlayerNameEx(to_player), admin_lvl);
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);

	return 1;
}

CMD:givecash(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 5) return 1;
	
	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /givecash [id игрока] [cумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");

	if(!(1 <= cash <= 1_000_000)) return SendClientMessage(playerid, 0xCECECEFF, "ћожно выдавать от 1 до 1000000 рублей за один раз");
	
	new reason[100];
	format(reason, sizeof reason, "¬ыдача денег от админа %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, cash, reason, true, true);
	
	format(reason, sizeof reason, "јдминистратор %s выдал ¬ам %d рублей", GetPlayerNameEx(playerid), cash);
	SendClientMessage(to_player, 0xFFFFFFFF, reason);
	
	format(reason, sizeof reason, "[A] %s[%d] выдал деньги %s[%d] кол-во %d руб, в итоге у игрока %d руб", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, cash, GetPlayerMoneyEx(to_player));
	SendMessageToAdmins(reason, 0xFFFF00FF);

	return 1;
}

CMD:pay(playerid, params[])
{
	extract params -> new to_player, cash; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /pay [id игрока] [сумма]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");

	new fmt_text[45],
		max_money = GetPlayerLevel(playerid) > 2 ? 4000 : 2000;

	if(!(1 <= cash <= max_money))
	{
		format(fmt_text, sizeof fmt_text, "—умма должна быть от 1 до %d рублей", max_money);

		SendClientMessage(playerid, 0xCECECEFF, fmt_text);
		return 1;
	}

	format(fmt_text, sizeof fmt_text, "+%d", cash);
	SetPlayerChatBubble(to_player, fmt_text, 0x00CC00FF, 10.0, 5000);

	format(fmt_text, sizeof fmt_text, "-%d", cash);
	SetPlayerChatBubble(to_player, fmt_text, 0xFF6600FF, 10.0, 5000);

	format(fmt_text, sizeof fmt_text, "передача денег от %s", GetPlayerNameEx(playerid));
	GivePlayerMoneyEx(to_player, cash, fmt_text, true, true);

	format(fmt_text, sizeof fmt_text, "передача денег игроку %s", GetPlayerNameEx(to_player));
	GivePlayerMoneyEx(playerid, -cash, fmt_text, true, true);

	Action(playerid, "достал кошелЄк и передал деньги");

	return 1;
}

CMD:apanel(playerid, params[])
{
	if(GetPlayerAdminEx(playerid) < 6) return 1;

	Dialog
	(
		playerid, DIALOG_ADMIN_PANEL, DIALOG_STYLE_LIST,
		"{FFCD00}”правление сервером",
		"\
		1. —писок администраторов\n\
		2. —писок лидеров\n\
		{66CC33}3. ”правление платными услугами\n\
		{FF3300}4. ”правление игроками\
		",
		"¬ыбор", "ќтмена"
	);

	return 1;
}

CMD:history(playerid, params[])
{
	if(!strlen(params)) 
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /history [им€ игрока]");
		
	if(!(3 <= strlen(params) <= 20)) 
		return SendClientMessage(playerid, 0x999999FF, "»грок с таким именем не найден");
	
	extract params -> new string: name[21];
	
	new query[128];
	new Cache: result, user_id;
	
	mysql_format(mysql, query, sizeof query, "SELECT id FROM accounts WHERE name='%e' LIMIT 1", name);
	result = mysql_query(mysql, query);
	
	if(cache_num_rows())
		user_id = cache_get_row_int(0, 0);
		
	cache_delete(result);
	
	if(!user_id)
		return SendClientMessage(playerid, 0x999999FF, "»грок с таким именем не найден");
	
	format(query, sizeof query, "SELECT name FROM change_names WHERE owner_id=%d ORDER BY id DESC LIMIT 45", user_id);
	mysql_tquery(mysql, query, "ShowChangeNameHistory", "is", playerid, name);

	return 1;
}

CMD:call(playerid, params[])
{
	if(!GetPlayerPhone(playerid)) 
		return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет телефона. ≈го можно купить в магазине 24/7"); 
	
	if(GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID) 
		return SendClientMessage(playerid, 0x999999FF, "«акончите текущий разговор");
	
	if(!GetPlayerPhoneCall(playerid, PC_ENABLED)) 
		return SendClientMessage(playerid, 0x999999FF, "¬аш телефон отключен");

	if(GetPlayerData(playerid, P_PHONE_BALANCE) >= 5)
	{
		new number;
		if(sscanf(params, "d", number))
		{
			Dialog
			(
				playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT,
				"{FFCD00}Ќаберите номер",
				"{6699CC}Ќомера государственных служб:\n\n\
				{FFFFFF}ѕолици€\t\t\t{66CC00}02\n\
				{FFFFFF}—кора€ помощь\t\t{66CC00}03\n\
				{FFFFFF}“акси\t\t\t\t{66CC00}555\n\
				{FFFFFF}ћеханик\t\t\t{66CC00}090\n\
				{FFFFFF}ћэри€\t\t\t\t{66CC00}022\n\
				{FFFFFF}—лужба точного времени\t{66CC00}060\n\
				{FFFFFF}ќператор св€зи\t\t{66CC00}111",
				"ѕозвонить", "ќтмена"
			);
			return 1; // (TODO)
		}
		
		switch(number)
		{
			case 02: return 1;
			case 03: return 1;
			case 555: return 1;
			case 090: return 1;
			case 022: return 1;
			
			case 060: 
			{
				ShowCurrentTime(playerid);
			}
			case 111:
			{
				new fmt_str[175];
				SetPlayerPhoneUseState(playerid, true);
				
				format
				(
					fmt_str, sizeof fmt_str, 
					"{FFFFFF}«дравствуйте! ¬ы позвонили оператору.\n"\
					"Ќа счету ¬ашего мобильного телефона {00FF00}%d руб\n\n"\
					"{FFFFFF}ѕополнить его можно в любом банкомате.\n"\
					"¬сего доброго!",
					GetPlayerData(playerid, P_PHONE_BALANCE)
				);
				Dialog(playerid, DIALOG_PHONE_CALL_BALANCE, DIALOG_STYLE_MSGBOX, "{FFCD00}ќператор сотовой св€зи", fmt_str, "ќк", "ќтмена");
			}
			
			default:
			{
				new subscriber = GetPlayerIDByPhone(number);
				
				if(number < 1) 
					return SendClientMessage(playerid, 0x999999FF, "ƒанный номер не обслуживаетс€");
					
				if(subscriber == INVALID_PLAYER_ID) 
					return SendClientMessage(playerid, 0xCECECEFF, "Ќабранный ¬ами номер не обслуживаетс€");
					
				if(subscriber == playerid || GetPlayerPhoneCall(subscriber, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(subscriber, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID) 
					return SendClientMessage(playerid, 0x999999FF, "јбонент зан€т");
				
				if(!GetPlayerPhoneCall(subscriber, PC_ENABLED))
					return SendClientMessage(playerid, 0x999999FF, "“елефон абонента вне зоны доступа");	

				SetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER, subscriber);
				SetPlayerPhoneCall(subscriber, PC_INCOMING_PLAYER, playerid);
				
				new fmt_str[90];
				
				format(fmt_str, sizeof fmt_str, "»сход€щий звонок | Ќомер: %d {FFCD00}| ќжидание ответа от %s...", number, GetPlayerNameEx(subscriber));
				SendClientMessage(playerid, 0x66CC00FF, fmt_str);
				
				format(fmt_str, sizeof fmt_str, "¬ход€щий звонок | Ќомер: %d {FFCD00}| ¬ызывает %s", GetPlayerPhone(playerid), GetPlayerNameEx(playerid));
				SendClientMessage(subscriber, 0x3399FFFF, fmt_str);
				
				SendClientMessage(subscriber, 0xFFFFFFFF, "»спользуйте {00CC00}/p {FFFFFF}чтобы ответить или {FF6600}/h {FFFFFF}чтобы отклонить вызов");				
				SetPlayerPhoneUseState(playerid, true);
			}
		}
	}
	else 
	{
		SendClientMessage(playerid, 0xCECECEFF, "Ќа счету недостаточно средств");
		SendClientMessage(playerid, 0xCECECEFF, "ѕополнить мобильный телефон можно в любом банкомате");	
	}
	
	return 1;
}
ALT:call:c;

CMD:p(playerid, params[])
{
	if(GetPlayerPhoneCall(playerid, PC_TIME) != -1) return 1;
	
	new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
	if(caller != INVALID_PLAYER_ID) 
	{
		SetPlayerPhoneCall(caller, PC_TIME, 0);
		SetPlayerPhoneCall(playerid, PC_TIME, 0);

		new fmt_str[64];
		format(fmt_str, sizeof fmt_str, "¬ы ответили на звонок %s", GetPlayerNameEx(caller));
		SendClientMessage(playerid, 0xDD90FFFF, fmt_str);
		
		format(fmt_str, sizeof fmt_str, "%s ответил на ¬аш звонок", GetPlayerNameEx(playerid));
		SendClientMessage(caller, 0xDD90FFFF, fmt_str);
		
		SetPlayerPhoneUseState(playerid, true, false);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "Ќет вход€щих вызовов");
	
	return 1;
}

CMD:h(playerid, params[])
{
	new caller = GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER);
	new call_to = GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER);
	
	if(call_to != INVALID_PLAYER_ID)
	{
		if(GetPlayerPhoneCall(call_to, PC_INCOMING_PLAYER) == playerid)
		{
			ClearPlayerPhoneCall(call_to);
			SendClientMessage(call_to, 0xFF9944FF, "«вонок окончен");

			SetPlayerPhoneUseState(call_to, false);
		}
		SendClientMessage(playerid, 0xFF9944FF, "«вонок окончен");
	}
	else if(caller != INVALID_PLAYER_ID)
	{
		if(GetPlayerPhoneCall(caller, PC_OUTCOMING_PLAYER) == playerid)
		{
			ClearPlayerPhoneCall(caller);
			SendClientMessage(caller, 0xFF9944FF, "«вонок окончен");

			SetPlayerPhoneUseState(caller, false);
		}
		if(GetPlayerPhoneCall(playerid, PC_TIME) != -1)
		{
			SendClientMessage(playerid, 0xFF9944FF, "«вонок окончен");
		}
		else SendClientMessage(playerid, 0xFF9944FF, "¬ы отклонили вход€щий вызов");
	}
	else return 1;
	
	ClearPlayerPhoneCall(playerid);
	SetPlayerPhoneUseState(playerid, false);

	return 1;
}
	
CMD:sms(playerid, params[])
{
	if(!GetPlayerPhone(playerid)) 
		return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет телефона. ≈го можно купить в магазине 24/7"); 
		
	if(!GetPlayerPhoneCall(playerid, PC_ENABLED))
		return SendClientMessage(playerid, 0x999999FF, "¬аш телефон отключен");
	
	if(GetPlayerData(playerid, P_PHONE_BALANCE) >= 5)
	{
		if(!strlen(params)) 
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /sms [номер телефона] [сообщение]");
		
		extract params -> new number, string:message[66];
		
		if(number < 550)
			return SendClientMessage(playerid, 0x999999FF, "ƒанный номер не обслуживаетс€"); 
		
		new subscriber = GetPlayerIDByPhone(number);
		
		if(subscriber != INVALID_PLAYER_ID) 
		{
			if(!GetPlayerPhoneCall(subscriber, PC_ENABLED)) 
				return SendClientMessage(playerid, 0x999999FF, "Ќе удаетс€ отправить сообщение. “елефон абонента недоступен");
			
			if(!strlen(message)) 	
				return SendClientMessage(playerid, 0xCECECEFF, "¬ведите сообщение дл€ отправки");
				
			if(strlen(message) > 64)
				return SendClientMessage(playerid, 0xCECECEFF, "—лишком длинное сообщение");
			
			AddPlayerData(playerid, P_PHONE_BALANCE, -, 5);
			GameTextForPlayer(playerid, "SMS ~n~~y~-5 rub", 4000, 1);

			new fmt_str[128];
			
			format(fmt_str, sizeof fmt_str, "SMS: %s | ќтправитель: %s [т.%d]", message, GetPlayerNameEx(playerid), GetPlayerPhone(playerid));
			SendClientMessage(subscriber, 0xFFFF00FF, fmt_str);
			SetPlayerChatBubble(subscriber, "SMS <<", 0xFFFF00FF, 5.0, 1500);
		
			format(fmt_str, sizeof fmt_str, "SMS: %s | ѕолучатель: %s [т.%d]", message, GetPlayerNameEx(subscriber), GetPlayerPhone(subscriber));
			SendClientMessage(playerid, 0xFFFF00FF, fmt_str);
			SetPlayerChatBubble(playerid, "SMS >>", 0xFFFF00FF, 5.0, 1500);
			
			format(fmt_str, sizeof fmt_str, "UPDATE accounts SET phone_balance=%d WHERE id=%d LIMIT 1", GetPlayerData(playerid, P_PHONE_BALANCE), GetPlayerAccountID(playerid));
			mysql_tquery(mysql, fmt_str, "", "");

			if(g_admin_ears)
			{
				format(fmt_str, sizeof fmt_str, "SMS: %s | ќтправитель: %s[%d] | ѕолучатель: %s[%d]", message, GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(subscriber), subscriber);
				SendMessageToAdmins(fmt_str, 0xFFFF00FF);
			}
		}
		else SendClientMessage(playerid, 0x999999FF, "“елефон находитс€ вне зоны доступа");
	}
	else 
	{
		SendClientMessage(playerid, 0xCECECEFF, "Ќа счету недостаточно средств");
		SendClientMessage(playerid, 0xCECECEFF, "ѕополнить мобильный телефон можно в любом банкомате");
	}
	return 1;
}

CMD:togphone(playerid, params[])
{
	if(!GetPlayerPhone(playerid)) 
		return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет телефона. ≈го можно купить в магазине 24/7"); 
	
	if(GetPlayerPhoneCall(playerid, PC_INCOMING_PLAYER) != INVALID_PLAYER_ID || GetPlayerPhoneCall(playerid, PC_OUTCOMING_PLAYER) != INVALID_PLAYER_ID) 
		return SendClientMessage(playerid, 0xCECECEFF, "«акончите текущий разговор");	
	
	if(GetPlayerPhoneCall(playerid, PC_ENABLED))
	{
		SetPlayerPhoneCall(playerid, PC_ENABLED, false);
		SendClientMessage(playerid, 0xFF6600FF, "“елефон отключен");
	}
	else
	{
		SetPlayerPhoneCall(playerid, PC_ENABLED, true);
		SendClientMessage(playerid, 0x66CC00FF, "“елефон включен");
	}
	return 1;
}

CMD:eject(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsPlayerDriver(playerid))
		return SendClientMessage(playerid, 0x999999FF, "¬ы должны сидеть за рулем транспорта");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /eject [id игрока]");
	
	extract params -> new to_player;
	
	if(vehicleid != GetPlayerVehicleID(to_player) || playerid == to_player)
		return SendClientMessage(playerid, 0x999999FF, "»грок должен сидеть в ¬ашем транспорте");
	
	RemovePlayerFromVehicle(to_player);
	
	new fmt_str[64];
	format(fmt_str, sizeof fmt_str, "%s выкинул ¬ас из своего транспорта", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "¬ы выкинули %s из своего транспорта", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_str);
	
	return 1;
}

CMD:book(playerid, params[])
{
	if(!GetPlayerPhone(playerid))
		return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет телефона. ≈го можно купить в магазине 24/7"); 
		
	return ShowPlayerPhoneBook(playerid);
}

CMD:add(playerid, params[])
{
	if(!GetPlayerPhone(playerid)) 
		return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет телефона. ≈го можно купить в магазине 24/7"); 

	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /add [id игрока] [номер телефона]");
		
	extract params -> new to_player, string: number[10];
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	
	if(!IsPlayerPhoneBookInit(playerid))
		InitPlayerPhoneBook(playerid);
	
	if(GetPlayerPhoneBookContacts(playerid) >= MAX_PHONE_BOOK_CONTACTS)
		return SendClientMessage(playerid, 0xCECECEFF, "«аписна€ книжка заполнена. ”далите ненужные контакты");
	
	if((3 <= strlen(number) <= 9) && IsNumeric(number) && strval(number) > 0)
		return AddPhoneBookContact(playerid, GetPlayerNameEx(to_player), number);
	
	SetPVarString(playerid, "add_contact_name", GetPlayerNameEx(to_player));
	new fmt_str[64 + 1];
	
	format(fmt_str, sizeof fmt_str, "{FFFFFF}¬ведите номер телефона дл€ контакта %s", GetPlayerNameEx(to_player));
	return Dialog(playerid, DIALOG_PHONE_BOOK_ADD_CONTACT, DIALOG_STYLE_INPUT, "{FFCD00}ƒобавление нового контакта", fmt_str, "ƒобавить", "ќтмена");
}

CMD:buyfuelst(playerid, params[])
{
	if(GetPlayerFuelStation(playerid) != -1)  
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас уже есть заправка. „тобы купить другую необходимо продать старую");
	
	new stationid = GetNearestFuelStation(playerid, 10.0);
	if(stationid != -1)
	{
		SetPVarInt(playerid, "buy_fuel_st", stationid);
		
		new fmt_str[256];
		format
		(
			fmt_str, sizeof fmt_str, 
			"{FFFFFF}Ќазвание:\t\t\t{339999}%s\n"\
			"{FFFFFF}—тоимость:\t\t\t{6699FF}%d руб\n"\
			"{FFFFFF}ѕлата за аренду:\t\t{6699FF}%d руб в день\n\n"\
			"{669966}¬ы уверены что хотите купить эту заправку?",
			GetFuelStationData(stationid, FS_NAME),
			GetFuelStationData(stationid, FS_PRICE),
			GetFuelStationData(stationid, FS_RENT_PRICE)
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY, DIALOG_STYLE_MSGBOX, "{33AACC}ѕокупка заправочной станции", fmt_str, "ƒа", "Ќет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "¬ы должны быть р€дом с заправкой, которую хотите купить");
	
	return 1;
}

CMD:fuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		new fmt_str[1024];
		format
		(
			fmt_str, sizeof fmt_str, 
			"{FFFFFF}Ќазвание:\t\t\t\t{339999}%s\n"\
			"{FFFFFF}Ќомер заправки:\t\t\t%d\n"\
			"¬ладелец:\t\t\t\t%s\n"\
			"√ород / область:\t\t\t%s\n"\
			"–айон:\t\t\t\t\t%s\n"\
			"”ровень улучшений:\t\t\t%d\n"\
			" оличество топлива:\t\t\t%d из %d\n"\
			"÷ена топлива:\t\t\t%d руб за 1 л\n"\
			"«акупочна€ цена:\t\t\t%d руб за 1 л\n"\
			"Ѕюджет заправки:\t\t\t%d руб\n"\
			"ј«— арендована на:\t\t\t%d/30 дней\n"\
			"√ос. стоимость:\t\t\t%d руб\n"\
			"јренда территории:\t\t\t%d руб в день\n"\
			"јкцизный сбор:\t\t\t%s\n"\
			"—татус:\t\t\t\t\t%s\n\n"\
			"{669966}ƒл€ открыти€ панели управлени€ заправочной станцией\n"\
			"нажмите кнопку \"»зменить\"",
			GetFuelStationData(stationid, FS_NAME),
			stationid,
			GetFuelStationData(stationid, FS_OWNER_NAME),
			GetCityName(GetFuelStationData(stationid, FS_CITY)),
			GetZoneName(GetFuelStationData(stationid, FS_ZONE)),
			GetFuelStationData(stationid, FS_IMPROVEMENTS),
			GetFuelStationData(stationid, FS_FUELS),
			GetFuelStationMaxFuel(stationid),
			GetFuelStationData(stationid, FS_FUEL_PRICE),
			GetFuelStationData(stationid, FS_BUY_FUEL_PRICE),
			GetFuelStationData(stationid, FS_BALANCE),
			GetElapsedTime(GetFuelStationData(stationid, FS_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetFuelStationData(stationid, FS_PRICE),
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? GetFuelStationData(stationid, FS_RENT_PRICE) : GetFuelStationData(stationid, FS_RENT_PRICE) / 2,
			GetFuelStationData(stationid, FS_IMPROVEMENTS) < 4 ? ("¬зымаетс€") : ("Ќе взымаетс€"),
			GetFuelStationData(stationid, FS_LOCK_STATUS) ? ("{CC3333}—танци€ закрыта") : ("{66CC33}—танци€ открыта")
		);
		Dialog(playerid, DIALOG_FUEL_STATION_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}»нформаци€ о заправке", fmt_str, "»зменить", "ќтмена");
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет заправки");

	return 1;
}

CMD:sellfuelst(playerid, params[])
{
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		Dialog
		(
			playerid, DIALOG_FUEL_STATION_SELL, DIALOG_STYLE_MSGBOX,
			"{FFCD00}ѕродажа заправочной станции",
			"{FFFFFF}¬ы уверены что хотите продать свою заправочную станцию государству?\n\n"\
			"¬ам будет возвращена ее стоимость за вычитом 30%\n"\
			"“акже будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"≈сли ¬ы хотите продать заправочную станцию другому игроку,\n"\
			"используйте команду /sellmyfuelst",
			"ƒа", "Ќет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет заправки");
	
	return 1;
}

CMD:sellmyfuelst(playerid, params[])
{	
	new stationid = GetPlayerFuelStation(playerid);
	if(stationid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /sellmyfuelst [id игрока] [стоимость]");
			
		extract params -> new to_player, price;
		
		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
		
		if(price < 1)
			return SendClientMessage(playerid, 0xCECECEFF, "”кажите стоимость продажи");
		
		new Float: f_pos_x = GetFuelStationData(stationid, FS_POS_X);
		new Float: f_pos_y = GetFuelStationData(stationid, FS_POS_Y);
		new Float: f_pos_z = GetFuelStationData(stationid, FS_POS_Z);
		
		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "” покупател€ нет такого количества средств");
			
		if(!(IsPlayerInRangeOfPoint(playerid, 10.0, f_pos_x, f_pos_y, f_pos_z) && IsPlayerInRangeOfPoint(to_player, 10.0, f_pos_x, f_pos_y, f_pos_z)))
			SendClientMessage(playerid, 0xCECECEFF, "¬ы и покупатель должны находитс€ р€дом с заправкой которую хотите продать");
	
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_FUEL_ST, stationid);
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет заправки");
	
	return 1;
}

CMD:fuel(playerid, params[])
{
	new fmt_str[41];
	new string[40 * (MAX_FUEL_STATIONS+2) + 1] = "є ј«—\t\t—тоимость 1 л\t\t¬ наличии\t\tЌазвание ј«—\n\n{FFFFFF}";

	for(new idx; idx < g_fuel_station_loaded; idx ++)
	{
		format(fmt_str, sizeof fmt_str, "%d\t\t\t%d руб\t\t%d л\t\t%s\n", idx, GetFuelStationData(idx, FS_FUEL_PRICE), GetFuelStationData(idx, FS_FUELS), GetFuelStationData(idx, FS_NAME));
		strcat(string, fmt_str);
	}
	return Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCD00}«аправочные станции", string, "«акрыть", "");
}

CMD:buyfuel(playerid, params[])
{
	ShowPlayerBuyJerricanDialog(playerid, GetNearestFuelStation(playerid, 10.0));
	
	return 1;
}

CMD:fill(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы не автомеханик");
	
	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны работать автомехаником");
	
	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны работать автомехаником и находитс€ в рабочем транспорте");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользование: /fill [id игрока] [кол-во топлива] [стоимость]");
		
	extract params -> new to_player, fill_fuel_count, fill_price;

	if(!IsPlayerConnected(to_player)) 
		return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
		
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 15.0)) 
		return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");
		
	if(!IsPlayerDriver(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, " лиент должен находитс€ за рулем");
		
	if(1 <= GetPlayerJobLoadItems(playerid) <= fill_fuel_count)
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет такого количества топлива");
	
	if(!(1 <= fill_price <= 1500)) 
		return SendClientMessage(playerid, 0xCECECEFF, "—тоимость должна быть до 1500 рублей");
		
	if(GetPlayerMoneyEx(to_player) < fill_price) 
		return SendClientMessage(playerid, 0xCECECEFF, "” клиента нет с собой столько денег");
	
	SendPlayerOffer(playerid, to_player, OFFER_TYPE_FILL_CAR, fill_fuel_count, fill_price);
	return 1;
}

CMD:repair(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы не автомеханик");
	
	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны работать автомехаником");
	
	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны работать автомехаником и находитс€ в рабочем транспорте");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользование: /repair [id игрока] [стоимость]");
		
	extract params -> new to_player, repair_price;

	if(!IsPlayerConnected(to_player)) 
		return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
		
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 15.0)) 
		return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");
		
	if(!IsPlayerDriver(to_player)) 
		return SendClientMessage(playerid, 0x999999FF, " лиент должен находитс€ за рулем");
		
	//new Float: vehicle_health;
	//GetVehicleHealth(GetPlayerVehicleID(to_player), vehicle_health);
	//if(vehicle_health < 350.0 && !IsPlayerInRangeOfPoint(playerid, 80.0, 1180.0962,2500.5166,12.4769)) return SendClientMessage(playerid, 0xCECECEFF, "“ранспорт клиента очень сильно поврежден, отвезите его на сто€нку автомехаников {CCCC00}(/gps)");
	
	if(!(1 <= repair_price <= 1500)) 
		return SendClientMessage(playerid, 0xCECECEFF, "—тоимость должна быть до 1500 рублей");
	
	if(GetPlayerMoneyEx(to_player) < repair_price) 
		return SendClientMessage(playerid, 0xCECECEFF, "” клиента нет с собой столько денег");
	
	SendPlayerOffer(playerid, to_player, OFFER_TYPE_REPAIR_CAR, repair_price);
	return 1;
}

CMD:getfuel(playerid, params[])
{
	if(GetPlayerJob(playerid) != JOB_MECHANIC)
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы не автомеханик");
	
	if(!IsPlayerInJob(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны работать автомехаником");
	
	new job_car = GetPlayerJobCar(playerid);
	if(!IsPlayerInVehicle(playerid, job_car) || GetVehicleData(job_car, V_ACTION_ID) == VEHICLE_ACTION_ID_NONE)
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны работать автомехаником и находитс€ в рабочем транспорте");
	
	new stationid = GetNearestFuelStation(playerid, 10.0);
	if(stationid != -1) 
	{
		SetPVarInt(playerid, "nearest_fuel_st", stationid);
		
		if(IsFuelStationOwned(stationid))
		{
			if(GetFuelStationData(stationid, FS_FUELS) < 10)
				return SendClientMessage(playerid, 0xFF6600FF, "’ранилище этой ј«— пусто");
		}

		new fmt_str[150];
		format
		(
			fmt_str, sizeof fmt_str, 
			"{FFFFFF}“опливо на ј«—:\t\t%d/10000 л\n"\
			"—тоимость 1 литра:\t%d руб\n\n"\
			"¬ведите кол-во бензина, которое хотите закупить\n"\
			"(число должно быть кратным 10)",
			GetFuelStationData(stationid, FS_FUELS),
			GetFuelStationData(stationid, FS_FUEL_PRICE)
		);
		Dialog(playerid, DIALOG_FUEL_STATION_BUY_FUEL_M, DIALOG_STYLE_INPUT, "{FFCD00}«акупка топлива", fmt_str, " упить", "ќтмена");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "ѕоблизости нет заправочных станций");

	return 1;
}

CMD:rentcar(playerid, params[])
{
	if(GetPlayerRentCar(playerid) != INVALID_VEHICLE_ID && playerid == rent_cars_data[GetPlayerRentCar(playerid) - first_rent_car_id][rent_car_tenant_id])
		return SendClientMessage(playerid, 0xFF6600FF, "»спользуйте /unrent чтобы разорвать текущий договор аренды");
	
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_RENT_CAR)
		return SendClientMessage(playerid, 0x999999FF, "¬ы должны быть в машине, которую можно арендовать");		
	
	SetPlayerData(playerid, P_RENT_CAR, vehicleid);
	rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = playerid; 
	
	Dialog(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
	
	SendClientMessage(playerid, 0x66CC00FF, "¬ы вз€ли транспорт в аренду");
	SendClientMessage(playerid, -1, "»спользуйте {00CC66}/lock 2 {FFFFFF}дл€ открыти€ и закрыти€ дверей");
	SendClientMessage(playerid, -1, "„тобы разорвать договор аренды введите {00CC66}/unrent");
	SendClientMessage(playerid, 0x999999FF, "≈сли ¬ы попадете в больницу или разобьете транспорт");
	SendClientMessage(playerid, 0x999999FF, "“о договор будет расторгнут. ≈сли ¬ы не закроете транспорт");
	SendClientMessage(playerid, 0x999999FF, "“о его может арендовать другой игрок и ¬ы потер€ете его");
	
	TogglePlayerControllable(playerid, true);

	return 1;
}

CMD:unrent(playerid, params[])
{
	new vehicleid = GetPlayerRentCar(playerid);
	if(!(vehicleid != INVALID_VEHICLE_ID && playerid == rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id]))
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет договора аренды транспорта");
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		RemovePlayerFromVehicle(playerid);
	
	SetPlayerData(playerid, P_RENT_CAR, INVALID_VEHICLE_ID);
	rent_cars_data[vehicleid - first_rent_car_id][rent_car_tenant_id] = INVALID_PLAYER_ID; 
	
	SendClientMessage(playerid, 0xFFFF00FF, "ƒоговор аренды транспорта расторгнут");
	return 1;
}

CMD:business(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		static const 
			music_name[6][9] = {"ќтключен", "«вук 1", "«вук 2", "«вук 3", "«вук 4", "«вук 5"};
		
		if(GetBusinessData(businessid, B_ENTER_MUSIC) > sizeof music_name - 1)
		{
			SetBusinessData(businessid, B_ENTER_MUSIC, sizeof music_name - 1);
		}
		
		new fmt_str[1024];
		format
		(
			fmt_str, sizeof fmt_str, 
			"{FFFFFF}Ќазвание:\t\t\t\t{339999}%s\n"\
			"{FFFFFF}Ќомер бизнеса:\t\t\t%d\n"\
			"¬ладелец:\t\t\t\t%s\n"\
			"√ород / область:\t\t\t%s\n"\
			"–айон:\t\t\t\t\t%s\n"\
			"ѕлата за вход:\t\t\t\t%d руб\n"\
			" оличество продуктов:\t\t%d из %d\n"\
			"—тоимость 1 продукта:\t\t%d руб\n"\
			"”ровень улучшений:\t\t\t%d\n"\
			"Ѕаланс предпри€ти€:\t\t\t%d руб\n"\
			"Ѕизнес арендован на:\t\t%d/30 дней\n"\
			"«вук при входе:\t\t\t{%s}%s\n"\
			"{FFFFFF}√ос. стоимость:\t\t\t%d руб\n"\
			"јренда помещени€:\t\t\t%d руб в день\n"\
			"“ип аренды:\t\t\t\t%s\n"\
			"—татус:\t\t\t\t\t%s\n\n"\
			"{669966}ƒл€ открыти€ панели управлени€ вашим бизнесом\n"\
			"нажмите кнопку \"»зменить\"",
			GetBusinessData(businessid, B_NAME),
			businessid,
			GetBusinessData(businessid, B_OWNER_NAME),
			GetCityName(GetBusinessData(businessid, B_CITY)),
			GetZoneName(GetBusinessData(businessid, B_ZONE)),
			GetBusinessData(businessid, B_ENTER_PRICE),
			GetBusinessData(businessid, B_PRODS),
			GetBusinessMaxProd(businessid),
			GetBusinessData(businessid, B_PROD_PRICE),
			GetBusinessData(businessid, B_IMPROVEMENTS),
			GetBusinessData(businessid, B_BALANCE),
			GetElapsedTime(GetBusinessData(businessid, B_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			!GetBusinessData(businessid, B_ENTER_MUSIC) ? ("FF3333") : ("33CC00"),
			music_name[GetBusinessData(businessid, B_ENTER_MUSIC)],
			GetBusinessData(businessid, B_PRICE),
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? (GetBusinessData(businessid, B_RENT_PRICE)) : (GetBusinessData(businessid, B_RENT_PRICE) / 2),
			GetBusinessData(businessid, B_IMPROVEMENTS) < 3 ? ("ѕолна€") : ("Ћьготна€"), 
			GetBusinessData(businessid, B_LOCK_STATUS) ? ("{CC3333}Ѕизнес закрыт") : ("{66CC33}Ѕизнес открыт") 
		);
		Dialog(playerid, DIALOG_BIZ_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}»нформаци€ о бизнесе", fmt_str, "»зменить", "ќтмена");	
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет бизнеса");
	
	return 1;
}

CMD:buybiz(playerid, params[])
{
	if(GetPlayerBusiness(playerid) != -1)
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас уже есть бизнес. „тобы купить другой необходимо продать старый");
	
	new businessid = GetNearestBusiness(playerid, 4.0);
	if(businessid != -1)
	{
		SetPVarInt(playerid, "buy_biz_id", businessid);
	
		new fmt_str[256];
		format
		(
			fmt_str, sizeof fmt_str,
			"{FFFFFF}Ќазвание:\t\t\t{339999}%s\n"\
			"{FFFFFF}—тоимость:\t\t\t{6699FF}%d руб\n"\
			"{FFFFFF}ѕлата за аренду:\t\t{6699FF}%d руб в день\n\n"\
			"{669966}¬ы уверены что хотите купить этот бизнес?",
			GetBusinessData(businessid, B_NAME),
			GetBusinessData(businessid, B_PRICE),
			GetBusinessData(businessid, B_RENT_PRICE)
		);
		Dialog(playerid, DIALOG_BIZ_BUY, DIALOG_STYLE_MSGBOX, "{33AACC}ѕокупка нового бизнеса", fmt_str, "ƒа", "Ќет");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "¬ы должны быть р€дом с бизнесом, который хотите купить");
	
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		Dialog
		(
			playerid, DIALOG_BIZ_SELL, DIALOG_STYLE_MSGBOX,
			"{FFCD00}ѕродажа бизнеса",
			"{FFFFFF}¬ы уверены что хотите продать свой бизнес государству?\n\n"\
			"¬ам будет возвращено его стоимость за вычитом 30%\n"\
			"“акже будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"≈сли ¬ы хотите продать бизнес другому игроку,\n"\
			"используйте команду /sellmybiz", 
			"ƒа", "Ќет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет бизнеса");
	
	return 1;
}

CMD:sellmybiz(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /sellmybiz [id игрока] [стоимость]");
			
		extract params -> new to_player, price;
		
		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
			return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
		
		if(price < 1)
			return SendClientMessage(playerid, 0xCECECEFF, "”кажите стоимость продажи");
		
		new Float: b_pos_x = GetBusinessData(businessid, B_POS_X);
		new Float: b_pos_y = GetBusinessData(businessid, B_POS_Y);
		new Float: b_pos_z = GetBusinessData(businessid, B_POS_Z);
		
		if(GetPlayerMoneyEx(to_player) < price)
			return SendClientMessage(playerid, 0xCECECEFF, "” покупател€ нет такого количества средств");
			
		if(!(IsPlayerInRangeOfPoint(playerid, 7.0, b_pos_x, b_pos_y, b_pos_z) && IsPlayerInRangeOfPoint(to_player, 7.0, b_pos_x, b_pos_y, b_pos_z)))
			SendClientMessage(playerid, 0xCECECEFF, "¬ы и покупатель должны находитс€ р€дом с бизнесом который хотите продать");
	
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_BUSINESS, businessid);
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет бизнеса");
	
	return 1;
}

CMD:bizmusic(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(GetBusinessData(businessid, B_IMPROVEMENTS) >= 4)
		{
			new fmt_str[13 + 1];
			new string[(sizeof fmt_str - 1) * (sizeof g_business_sound) + 1];
			
			string = "1. ќтключен\n";
			for(new idx = 1; idx <= sizeof g_business_sound; idx ++)
			{
				format(fmt_str, sizeof fmt_str, "%d. «вук є%d\n", idx + 1, idx);	
				strcat(string, fmt_str);
			}
			Dialog(playerid, DIALOG_BIZ_ENTER_MUSIC, DIALOG_STYLE_LIST, "{FFCD00}«вук при входе в бизнес", string, "¬ыбрать", "«акрыть");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "ƒл€ использование этой функции необходим 4 уровень улучшени€ бизнеса");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет бизнеса");
	
	return 1;
}
  
CMD:manager(playerid, params[])
{
	new businessid = GetPlayerBusiness(playerid);
	if(businessid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /manager [id игрока]");
			
		extract params -> new to_player;
		
		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
			return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
			
		if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) 
			return SendClientMessage(playerid, 0xCECECEFF, "»грок находитс€ слишком далеко");
		
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_BUSINESS_MANAGER, businessid);
	}
	else SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет бизнеса");
	
	return 1;
}

CMD:buy(playerid, params[])
{
	new businessid = GetPlayerInBiz(playerid);
	if(businessid != -1)
	{
		if(IsPlayerInBuyPosBiz(playerid, businessid, BUSINESS_TYPE_SHOP_24_7))
		{
			Dialog
			(
				playerid, DIALOG_BIZ_SHOP_24_7, DIALOG_STYLE_LIST,
				"{0099FF}ћагазин 24/7",
				"1. ћобильный телефон\t{00CC00}170 руб\n"\
				"2. »зменить номер\t\t{00CC00}450 руб\n"\
				"3. »зменить цвет телефона\t{00CC00}200 руб\n"\
				"4. јптечка (2 шт)\t\t{00CC00}300 руб\n"\
				"5. ‘отоаппарат (15 снимков)\t{00CC00}200 руб\n"\
				"6. Ѕукет цветов\t\t{00CC00}150 руб\n"\
				"7. “рость\t\t\t{00CC00}600 руб\n"\
				"8. ѕарашют\t\t\t{00CC00}800 руб\n"\
				"9. Ћотерейный билет\t\t{00CC00}400 руб\n"\
				"10. ћаска\t\t\t{00CC00}110 руб",
				" упить", "ќтмена"
			);
		}
		else SendClientMessage(playerid, 0xCECECEFF, "¬ы должны быть в продуктовом магазине");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "¬ы должны быть в продуктовом магазине");
	
	return 1;
}

CMD:healme(playerid, params[])
{
	if(GetPlayerData(playerid, P_MED_CHEST) <= 0) 
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет с собой аптечки");
	
	AddPlayerData(playerid, P_MED_CHEST, -, 1);
	SetPlayerHealthEx(playerid, 60.0, true);

	GameTextForPlayer(playerid, "~b~+60 hp", 4000, 1);
	SendClientMessage(playerid, 0x3399FFFF, "¬ы использовали аптечку. «доровье пополнено на 60 единиц");
	
	ApplyAnimation(playerid, "ped", "gum_eat", 4.0, 0, 0, 0, 0, 0, 0);
	
	return 1;
}

CMD:present(playerid, params[])
{
	if(!IsPlayerHaveWeapon(playerid, WEAPON_FLOWER))
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет цветов");
	
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /present [id игрока]");
	
	extract params -> new to_player;
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid)
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 3.0))
		return SendClientMessage(playerid, 0xCECECEFF, "»грок слишком далеко");
	
	if(IsPlayerHaveWeapon(to_player, WEAPON_FLOWER))
		return SendClientMessage(playerid, 0xCECECEFF, "” этого игрока уже есть букет цветов");
	
	new fmt_str[64];
	
	new Float: angle;
	new Float: to_x, Float: to_y;
	new Float: x, Float: y, Float: z;
	
	GetPlayerPos(playerid, x, y, z);
	GetPlayerPos(to_player, to_x, to_y, z);
	
	angle = GetAngleToPoint(to_x, to_y, x, y);
	
	SetPlayerFacingAngle(playerid, angle);
	SetPlayerFacingAngle(to_player, angle + 180.0);
	
	ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0, 0);
	ApplyAnimation(to_player, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0, 0);
	
	format(fmt_str, sizeof fmt_str, "%s получил(а) от ¬ас цветы", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_str);
	
	format(fmt_str, sizeof fmt_str, "%s подарил(а) ¬ам цветы", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_str);
	
	SetTimerEx("PresentFlowersToPlayer", 1500, false, "ii", playerid, to_player);
	return 1;
}

CMD:mask(playerid, params[])
{
	if(GetPlayerData(playerid, P_MASK) != 1)
		return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет с собой маски");
	
	SetPlayerData(playerid, P_MASK, 600 + 1);
	SetPlayerColorEx(playerid, 0x00000000);
	
	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 0);
	SetPlayerChatBubble(playerid, "Ќадевает маску", 0xFF9900FF, 15.0, 5000);
	
	GameTextForPlayer(playerid, "~b~~h~invisible on", 2500, 4);
	SendClientMessage(playerid, 0x3399FFFF, "¬аше месторасположение на GPS скрыто на 10 минут");
	
	return 1;
}

CMD:gate(playerid, params[])
{
	if(!CheckNearestGate(playerid))
	{
		CallRemoteFunction("FS_PlayerUseButton", "i", playerid);
	}
	return 1;
}

CMD:home(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new fmt_str[1024];
		new entranceid = GetHouseData(houseid, H_ENTRACE);
		
		format(fmt_str, sizeof fmt_str, "{FFFFFF}“ип / название:\t\t\t{339999}%s\n", GetHouseData(houseid, H_NAME));
		if(entranceid != -1)
		{
			format
			(
				fmt_str, sizeof fmt_str,
				"%s{FFFFFF}Ќомер подъезда:\t\t\t%d\n"\
				"Ќомер квартиры:\t\t\t%d\n"\
				"√ород / область:\t\t\t%s\n"\
				"–айон:\t\t\t\t\t%s\n", 
				fmt_str,
				entranceid + 1,
				GetHouseData(houseid, H_FLAT_ID) + 1,
				GetCityName(GetEntranceData(entranceid, E_CITY)),
				GetZoneName(GetEntranceData(entranceid, E_ZONE))
			);
		}
		else 
		{
			format
			(
				fmt_str, sizeof fmt_str,
				"%s{FFFFFF}Ќомер дома:\t\t\t\t%d\n"\
				"√ород / область:\t\t\t%s\n"\
				"–айон:\t\t\t\t\t%s\n",
				fmt_str,
				houseid,
				GetCityName(GetHouseData(houseid, H_CITY)),
				GetZoneName(GetHouseData(houseid, H_ZONE))
			);
		}
		
		format
		(
			fmt_str, sizeof fmt_str, 
			"%s—тоимость:\t\t\t\t%d руб\n"\
			"ƒом оплачен на:\t\t\t%d/30 дней\n"\
			" оличество комнат:\t\t\t%d\n"\
			"”ровень улучшений:\t\t\t%d\n"\
			"ћодель домашнего авто:\t\t{FF3333}Ќет\n"\
			"{FFFFFF} вартплата:\t\t\t\t%d руб в день\n"\
			"“ип квартплаты:\t\t\t%s\n"\
			"—татус:\t\t\t\t\t%s\n\n"\
			"{669966}ƒл€ открыти€ панели управлени€ вашим домом\n"\
			"нажмите кнопку \"»зменить\"",
			fmt_str,
			GetHouseData(houseid, H_PRICE),
			GetElapsedTime(GetHouseData(houseid, H_RENT_DATE), gettime(), CONVERT_TIME_TO_DAYS),
			GetHouseTypeInfo(GetHouseData(houseid, H_TYPE), HT_ROOMS),
			GetHouseData(houseid, H_IMPROVEMENTS),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? (GetHouseData(houseid, H_RENT_PRICE)) : (GetHouseData(houseid, H_RENT_PRICE) / 2),
			GetHouseData(houseid, H_IMPROVEMENTS) < 4 ? ("ќбычна€") : ("ѕониженна€"),
			GetHouseData(houseid, H_LOCK_STATUS) ? ("{CC3333}ƒом закрыт") : ("{66CC33}ƒом открыт")
		);
		Dialog(playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX, "{33AACC}»нформаци€ о доме", fmt_str, "»зменить", "ќтмена");	
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет дома");
	
	return 1;
}

CMD:sellhome(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		Dialog
		(
			playerid, DIALOG_HOUSE_SELL, DIALOG_STYLE_MSGBOX,
			"{FFCD00}ѕродажа дома",
			"{FFFFFF}¬ы уверены что хотите продать свой дом государству?\n\n"\
			"¬ам будет возвращено ее стоимость за вычитом 30%\n"\
			"“акже будет возвращено 60% от стоимости купленных улучшений\n\n"\
			"≈сли ¬ы хотите продать дом другому игроку,\n"\
			"используйте команду /sellmyhome",
			"ƒа", "Ќет"
		);	
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет дома");
	
	return 1;
}

CMD:sellmyhome(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /sellmyhome [id игрока] [стоимость]");
			
		extract params -> new to_player, price;
		
		new house_price = GetHouseData(houseid, H_PRICE);
		
		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) 
			return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
			
		if(GetPlayerHouse(to_player) != -1) 
			return SendClientMessage(playerid, 0xCECECEFF, "” этого игрока уже есть дом");
			
		if(!((house_price / 3) <= price <= (house_price * 3))) 
			return SendClientMessage(playerid, 0xCECECEFF, "—тоимость не должна быть дороже или дешевле в 3 раза от стоимости дома");
		
		if(GetPlayerMoneyEx(to_player) < price) 
			return SendClientMessage(playerid, 0xCECECEFF, "” этого игрока нет такой суммы");
			
		if(!(IsPlayerInRangeOfHouse(playerid, houseid, 10.0) && IsPlayerInRangeOfHouse(to_player, houseid, 10.0)))
			return SendClientMessage(playerid, 0xCECECEFF, "¬ы и покупатель должны находитьс€ около дома который хотите продать");
		
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_HOME, houseid, price);
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет дома");
	
	return 1;
}

CMD:live(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{
		new type = GetHouseData(houseid, H_TYPE);
		new rooms = GetHouseTypeInfo(type, HT_ROOMS);
		
		if(GetHouseRentersCount(houseid) >= rooms)
			return SendClientMessage(playerid, 0x999999FF, "¬се комнаты ¬ашего дома уже зан€ты");
		
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /live [id игрока]"); // [кол-во дней] [цена (необ€зательно)]
		
		extract params -> new to_player, days, price;
		
		if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) 
			return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
		
		if(GetPlayerHouse(to_player) != -1) 
			return SendClientMessage(playerid, 0xCECECEFF, "” этого игрока уже есть дом");
		
		/*
		if(!(300 <= price <= 10_000))
			return SendClientMessage(playerid, 0xCECECEFF, "÷ена аренды должна быть от 300 до 10000 руб");
		
		else if(!(1 <= days <= 30))
			return SendClientMessage(playerid, 0xCECECEFF, " ол-во дней аренды должно быть от 0 до 30");
		
		if(GetPlayerMoneyEx(to_player) < price) 
			return SendClientMessage(playerid, 0xCECECEFF, "” этого игрока нет такой суммы");
		*/
		
		if(!(IsPlayerInRangeOfHouse(playerid, houseid, 10.0) && IsPlayerInRangeOfHouse(to_player, houseid, 10.0)))
			return SendClientMessage(playerid, 0xCECECEFF, "¬ы и арендатор должны находитьс€ около дома который хотите сдать в аренду");
	
		SendPlayerOffer(playerid, to_player, OFFER_TYPE_HOME_RENT_ROOM, houseid);
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет дома");
	
	return 1;
}

CMD:liveout(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_ROOM);
	if(houseid != -1)
	{
		Dialog
		(
			playerid, DIALOG_HOUSE_EVICT, DIALOG_STYLE_MSGBOX,
			"{FF9900}¬ыселение из дома",
			"{FFFFFF}¬ы действительно хотите выселитьс€ из дома?", 
			"ƒа", "Ќет"
		);
	}
	else SendClientMessage(playerid, 0x999999FF, "¬ы нигде не проживаете");
	
	return 1;
}

CMD:makestore(playerid, params[])
{
	new houseid = GetPlayerHouse(playerid, HOUSE_TYPE_HOME);
	if(houseid != -1)
	{	
		if(GetHouseData(houseid, H_IMPROVEMENTS) >= 5)
		{
			if(GetPlayerInHouse(playerid) == houseid)
			{
				new type = GetHouseData(houseid, H_TYPE);
				if(IsPlayerInRangeOfPoint(playerid, 50.0, GetHouseTypeInfo(type, HT_ENTER_POS_X), GetHouseTypeInfo(type, HT_ENTER_POS_Y), GetHouseTypeInfo(type, HT_ENTER_POS_Z)))
				{
					Dialog
					(
						playerid, DIALOG_HOUSE_MOVE_STORE, DIALOG_STYLE_MSGBOX, 
						"{FFCD00}Ўкаф", 
						"{FFFFFF}¬ы хотите разместить шкаф в этом месте?",
						"ƒа", "Ќет"
					);
				}
				else SendClientMessage(playerid, 0x999999FF, "¬ы должны находитс€ у себ€ в доме");
			}
			else SendClientMessage(playerid, 0x999999FF, "¬ы должны находитс€ у себ€ в доме");
		}
		else SendClientMessage(playerid, 0x999999FF, "Ќеобходим 5 уровень улучшений дл€ дома");
	}
	else SendClientMessage(playerid, 0x999999FF, "‘ункци€ доступна владельцам недвижимости");
	
	return 1;
}

CMD:use(playerid, params[])
{
	new TODO_THIS; // доработать систему шкафа

	return 1;
}

CMD:tv(playerid, params[])
{	
	new TODO_THIS; // доработать TV (фракци€ “¬ и радио)
	
	return 1;
}

CMD:homelock(playerid, params[])
{
	new hotel_id = GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL);
	new room_id = GetPlayerData(playerid, P_HOUSE_ROOM);
	
	if(hotel_id != -1)
	{
		if(GetHotelData(hotel_id, room_id, H_STATUS))
		{
			SetHotelData(hotel_id, room_id, H_STATUS, false);
			
			GameTextForPlayer(playerid, "~g~~h~OПKPСПO", 2000, 4);
			SendClientMessage(playerid, 0x66CC00FF, "Ќомер открыт");
		}
		else 
		{
			SetHotelData(hotel_id, room_id, H_STATUS, true);
			
			GameTextForPlayer(playerid, "~r~~h~ИAKPСПO", 2000, 4);
			SendClientMessage(playerid, 0xFF6600FF, "Ќомер закрыт");
		}
		
		new query[64];
		format(query, sizeof query, "UPDATE hotels SET status=%d WHERE id=%d LIMIT 1", GetHotelData(hotel_id, room_id, H_STATUS), GetHotelData(hotel_id, room_id, H_SQL_ID));
		mysql_query(mysql, query, false);
	}
	else SendClientMessage(playerid, 0x999999FF, "¬ы не снимаете номер в гостинице");
	
	return 1;
}

CMD:exit(playerid, params[])
{
	if(GetPlayerInHouse(playerid) != -1)
	{
		ExitPlayerFromHouse(playerid, 3.0);
	}
	else if(GetPlayerData(playerid, P_IN_HOTEL_ROOM) != -1)
	{
		ExitPlayerFromHotelRoom(playerid);
	}
	else if(!GetPlayerInterior(playerid))
	{
		SendClientMessage(playerid, 0xCECECEFF, "¬ы не в помещении");
	}

	return 1;
}

CMD:lift(playerid, params[])
{
	new entranceid = GetPlayerInEntrance(playerid);
	if(entranceid != -1)
	{
		new floor = GetPlayerInEntranceFloor(playerid);
		if(floor != -1)
		{
			if(!floor)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 1.5, 30.5405, 1403.6593, 1508.4163))
					return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ около лифта");
			}
			else
			{
				if(!IsPlayerInRangeOfPoint(playerid, 1.5, 11.1776, 1377.5216, 1508.4163))
					return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ около лифта");		
			}
			ShowPlayerEntranceFloorsLift(playerid, entranceid, floor);
		}
	}
	else SendClientMessage(playerid, 0xCECECEFF, "¬ы не в подъезде");
	
	return 1;
}

CMD:lock(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /lock [тип] (1-Ћичный транспорт 2-јрендованна€ машина 3-–абочий транспорт 4-ƒоверенный транспорт)");
	
	extract params -> new type;
	
	new Float: radius = 20.0;
	new vehicleid = INVALID_VEHICLE_ID;
	
	switch(type)
	{
		case 1:
		{
			vehicleid = GetPlayerOwnableCar(playerid);
			
			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет личного транспорта");
		}
		case 2:
		{
			vehicleid = GetPlayerRentCar(playerid);
	
			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет арендованной машины");
		}
		case 3:
		{
			vehicleid = GetPlayerJobCar(playerid);
			
			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "¬ы не можете использовать эту функцию");
		}
		case 4:
		{
			if(vehicleid == INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет доверенного транспорта");
		}
		default:
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /lock [тип] (1-Ћичный транспорт 2-јрендованна€ машина 3-–абочий транспорт 4-ƒоверенный транспорт)");
	}
	
	new Float: x, Float: y, Float: z;
	GetVehiclePos(vehicleid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z))
	{
		new status = GetVehicleParam(vehicleid, V_LOCK);
		if(status)
		{
			if(type == 1)
			{
				Action(playerid, "открыл личный транспорт", _, true);
			}
			GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~ПPAмCМOPП~g~ OПKPСП", 3000, 3);
		}
		else 
		{
			if(type == 1)
			{
				Action(playerid, "закрыл личный транспорт", _, true);
			}				
			GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~ПPAмCМOPП~r~ ИAKPСП", 3000, 3);
		}
		SetVehicleParam(vehicleid, V_LOCK, status ^ VEHICLE_PARAM_ON);
	}
	else SendClientMessage(playerid, 0x999999FF, "¬ы должны сто€ть р€дом с транспортом");

	return 1;
}

CMD:key(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(!IsABike(vehicleid))
			{
				if(vehicleid == GetPlayerOwnableCar(playerid))
				{
					new index = GetVehicleData(vehicleid, V_ACTION_ID);
					new bool: status = GetOwnableCarData(index, OC_KEY_IN);
					
					if(status)
					{
						if(GetVehicleParam(vehicleid, V_ENGINE) == VEHICLE_PARAM_ON)
						{
							SetVehicleParam(vehicleid, V_ENGINE, VEHICLE_PARAM_OFF);
						}
						Action(playerid, "вытащил ключ из замка зажигани€", _, false);
					}
					else Action(playerid, "вставил ключ в замок зажигани€", _, false);
					
					SetOwnableCarData(index, OC_KEY_IN, status ^ true);
					SpeedometrKeyStatusInit(playerid, vehicleid);
				}
				else SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ в личном транспорте");
			}
		}
		else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет личного транспорта");
	}
	else SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ в транспорте");
	
	return 1;
}

CMD:getmycar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new price = 300;
		new i_have_home = (GetPlayerHouse(playerid, HOUSE_TYPE_HOME) != -1 || GetPlayerHouse(playerid, HOUSE_TYPE_HOTEL) != -1); 
		
		if(GetPlayerGPSInfo(playerid, G_ENABLED) == GPS_STATUS_OFF)
		{
			if(GetPlayerMoneyEx(playerid) >= price || i_have_home)
			{
				if(!i_have_home)
					GivePlayerMoneyEx(playerid, -price, "ћетка “— на GPS", true, true);
				
				new Float: x, Float: y, Float: z;
				GetVehiclePos(vehicleid, x, y, z);
				
				EnablePlayerGPS(playerid, 55, x, y, z, "ћестоположение ¬ашего транспорта отмечено на GPS");
				return 1;
			}
			else SendClientMessage(playerid, 0x999999FF, "Ќедостаточно денег");
		}
		else SendClientMessage(playerid, 0xCECECEFF, "Ќа ¬ашем GPS уже отмечено место");
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет личного транспорта");
	
	return 0;
}

CMD:sellcar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		new model_id = GetVehicleData(vehicleid, V_MODELID);
		if(model_id)
		{
			new fmt_str[256];
			
			new price = GetVehicleInfo(model_id-400, VI_PRICE);
			new percent = price * 20 / 100;
			
			format
			(
				fmt_str, sizeof fmt_str,
				"{FFFFFF}ћодель:\t%s (є%d)\n"\
				"—тоимость:\t%d руб\n\n"\
				"¬ы уверены что хотите продать транспорт?\n"\
				"Ќа ¬аш банковский счет будет начислено %d руб\n\n"\
				"≈сли ¬ы хотите продать его другому игроку,\n"\
				"используйте команду /sellmycar",	
				GetVehicleName(vehicleid),
				model_id,
				price,
				price - percent
			);
			Dialog(playerid, DIALOG_OWNABLE_CAR_SELL, DIALOG_STYLE_MSGBOX, "{FFCD00}ѕродажа личного транспорта", fmt_str, "ƒа", "Ќет");				
		}
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет личного транспорта");

	return 1;
}

CMD:sellmycar(playerid, params[])
{
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(!strlen(params))
			return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /sellmycar [id игрока] [стоимость]");
		
		extract params -> new to_player, price;
		
		new model_id = GetVehicleData(vehicleid, V_MODELID);
		if(model_id)
		{
			new car_price = GetVehicleInfo(model_id-400, VI_PRICE);
			
			if(!IsPlayerConnected(to_player) || to_player == playerid) 
				return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
				
			if((GetPlayerOwnableCars(to_player) + 1) > GetPlayerCarSlots(to_player)) 
				return SendClientMessage(playerid, 0xCECECEFF, "” этого игрока нет свободных слотов дл€ транспорта");

			if(GetPlayerOwnableCar(to_player) != INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, 0xCECECEFF, "Ётот игрок должен выгрузить его личный транспорт с сервера {888888}(/car > 7)");
				
			if(!(3000 <= price <= (car_price * 2)))
				return SendClientMessage(playerid, 0xCECECEFF, "—тоимость должа быть от 3000 рублей и не дороже в 2 раза гос. стоимости “—");
			
			if(GetPlayerMoneyEx(to_player) < price) 
				return SendClientMessage(playerid, 0xCECECEFF, "” этого игрока нет такой суммы");
			
			new  Float: car_x, Float: car_y, Float: car_z; 
			GetVehiclePos(vehicleid, car_x, car_y, car_z);
			
			if(IsPlayerInRangeOfPoint(playerid, 15.0, car_x, car_y, car_z) && IsPlayerInRangeOfPoint(to_player, 15.0, car_x, car_y, car_z))
			{
				SendPlayerOffer(playerid, to_player, OFFER_TYPE_SELL_OWNABLE_CAR, price, vehicleid);	
			}
			else SendClientMessage(playerid, 0xCECECEFF, "¬ы и покупатель должны находитьс€ около “—");	
		}
	}
	else SendClientMessage(playerid, 0x999999FF, "” ¬ас нет личного транспорта"); 
	
	return 1;
}

CMD:allow(playerid, params[])
{
	new TODO_THIS; // выдача доверенного ключа

	return 1;
}

CMD:park(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) 
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ в транспорте");
	
	new vehicleid = GetPlayerOwnableCar(playerid);
	if(vehicleid == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, 0x999999FF, "” ¬ас нет личного транспорта"); 
	
	if(vehicleid != GetPlayerVehicleID(playerid))
		return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитс€ в личном транспорте");

	new Float: x, Float: y, Float: z;
	new Float: angle, index;

	index = GetVehicleData(vehicleid, V_ACTION_ID);
	
	GetVehiclePos(vehicleid, x, y, z);
	
	GetVehicleZAngle(vehicleid, angle);
	
	SetOwnableCarData(index, OC_POS_X, x);
	SetOwnableCarData(index, OC_POS_Y, y);
	SetOwnableCarData(index, OC_POS_Z, z);
	SetOwnableCarData(index, OC_ANGLE, angle);

	SaveOwnableCar(vehicleid);
	return SendClientMessage(playerid, 0x66CC00FF, "“ранспорт припаркован");
}

CMD:car(playerid, params[])
{
	if(GetPlayerOwnableCar(playerid) != INVALID_VEHICLE_ID)
	{
		Dialog
		(
			playerid, DIALOG_OWNABLE_CAR, DIALOG_STYLE_LIST, 
			"{FFCD00}—истема управлени€ транспортом",
			"1. {669900}ќткрыть {FFFFFF}или {FF3300}закрыть {FFFFFF}транспорт\n"\
			"2. ¬ставить / вытащить ключи\n"\
			"3. ќтметить транспорт на GPS {FF6600}(300 руб)\n"\
			"4. —одержимое багажника\n"\
			"5. ƒокументы на транспорт\n"\
			"{888888}6. ѕрипарковать транспорт\n"\
			"{888888}7. ¬ыгрузить транспорт с сервера", 
			"¬ыбрать", "«акрыть"
		);
	}
	else
	{
		new fmt_text[640],
			Cache: result,
			id;

		mysql_format(mysql, fmt_text, sizeof fmt_text, "SELECT * FROM ownable_cars WHERE owner_id='%d'", GetPlayerAccountID(playerid));
		result = mysql_query(mysql, fmt_text, true);

		if(!cache_num_rows())
			SendClientMessage(playerid, 0x999999FF, "” ¬ас нет личного транспорта");
		else
		{
			if(cache_num_rows() == 1)
			{
				id = cache_get_field_content_int(0, "id");
				
				ShowOwnableCarLoadDialog(playerid, id);
			}
			else
			{
				new query[60],
					model_id,
					car_number[7];

				format(fmt_text, sizeof fmt_text, "");

				for(new i = 0; i < cache_num_rows(); i++)
				{
					id = cache_get_field_content_int(i, "id");
					model_id = cache_get_field_content_int(i, "model_id") - 400;
					cache_get_field_content(i, "number", car_number);

					format(query, sizeof query, "{ffffff}%d. %s {888888}[%s]\n", i+1, GetVehicleInfo(model_id, VI_NAME), car_number);
					strcat(fmt_text, query);
					SetPlayerListitemValue(playerid, i, id);
				}
				
				Dialog
				(
					playerid, DIALOG_OWNABLE_CAR_LIST, DIALOG_STYLE_LIST,
					"{FFCD00}¬ыберите транспорт",
					fmt_text,
					"¬ыбрать", "«акрыть"
				);
			}
		}

		cache_delete(result);
	}
	
	return 1;
}

CMD:trunk(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new vehicleid;
		new Float: x, Float: y, Float: z;
		new Float: angle, Float: distance; 
	
		while((++vehicleid) < MAX_VEHICLES)
		{
			if(!GetVehicleData(vehicleid, V_MODELID)) continue;
			
			GetCoordVehicle(vehicleid, VEHICLE_COORD_TYPE_BOOT, x, y, z, angle, distance);
			if(!IsPlayerInRangeOfPoint(playerid, 1.0, x, y, z)) continue;

			ShowTrunkDialog(playerid, vehicleid, false);
			break;
		}
	}
	return 1;
}


CMD:ta(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /ta [vehicleid] [item] [amount]");
		
	extract params -> new vehicleid, item, amount;
	
	if(AddTrunkItem(vehicleid, item, amount))
	{
		new fmt_str[128];
		
		format(fmt_str, sizeof fmt_str, "¬ы положили \"%s\" в багажник, кол-во: %d %s", GetItemInfo(item, I_NAME), amount, GetItemInfo(item, I_NAME_COUNT));
		SendClientMessage(playerid, 0x3399FFFF, fmt_str);
	}
	else SendClientMessage(playerid, 0x999999FF, "Ќеверный тип предмета");
	
	return 1;
}

/*
CMD:finit(playerid, params[])
{
	new query[128];
	
	new floor, flat;
	for(new idx; idx < 46; idx ++)
	{
		for(floor = 0; floor < GetEntranceData(idx, E_FLOORS); floor ++)
		{
			for(flat = 0; flat < 4; flat ++)
			{				
				format(query, sizeof query, "INSERT INTO houses (price,rent_price,type,entrance) VALUES (%d,%d,%d,%d)", 400000 + (!random(3) ? 50000 : 100000), 500, 0, idx);
				mysql_query(mysql, query, false);
			}
		}
	}
	return 1;
}
*/
/*
CMD:money(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /money [кол-во]");
		
	extract params -> new money;
	
	if(!(1 <= money <= 100_000))
		return SendClientMessage(playerid, 0xCECECEFF, "«а раз можно вз€ть от 1 до 100.000");

	return GivePlayerMoneyEx(playerid, money, "test", true, true);
}*/

CMD:test(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsAOwnableCar(vehicleid))
	{
		new index = GetVehicleData(vehicleid, V_ACTION_ID);
		new bool: param = GetOwnableCarData(index, OC_KEY_IN);
		
		SetOwnableCarData(index, OC_KEY_IN, param ^ true);
	}
	//SetRandomWeather();

	//new fmt_str[32];
	
	//format(fmt_str, sizeof fmt_str, "in_biz: %d", GetPlayerInBiz(playerid));
	//SendClientMessage(playerid, 0xCECECEFF, fmt_str);

	//new param = GetPVarInt(playerid, "test");
	//SetPVarInt(playerid, "test", param ^ 1);

	//extract params-> new itemid;
	//GivePlayerDrinkItem(playerid, itemid);
	
	/*
	if(!strlen(params))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуй: /test [action id]");
		
	extract params -> new action_id;
	SetPlayerSpecialAction(playerid, action_id);
	*/
	
	return 1;
}

CMD:pos(playerid, params[])
{
	new Float: x, Float: y, Float: z, interior, virtual_world;
	
	if(sscanf(params, "P<,>fff", x, y, z))
		return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /pos [x y z]");
		
	sscanf(params, "P<,>{fff}dd", interior, virtual_world);
	
	return SetPlayerPosEx(playerid, x, y, z, interior, virtual_world);
}

CMD:r(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "¬ы нигде не работаете/не состоите в организаци€х");
	else if(TEAM_OPG_ARZAMASKAYA <= GetPlayerTeamEx(playerid) <= TEAM_OPG_LYTKARINSKAYA) return SendClientMessage(playerid, 0xCECECEFF, "‘ункци€ доступна дл€ сотрудников гос. организаций");
	else if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "ƒоступ в чат заблокирован. ¬рем€ до разблокировки: {66CC33}/time");
	else if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /r [текст]");

	new fmt_msg[150];

	format(fmt_msg, sizeof fmt_msg, "[R] %s %s [%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);

	if(1 <= GetPlayerTeamEx(playerid) <= 10)
		SendMessageToTeam(GetPlayerTeamEx(playerid), fmt_msg, 0x33CC66FF);
	else
		SendMessageToJob(GetPlayerJob(playerid), fmt_msg, 0x33CC66FF, _, true);

	SetPlayerChatBubble(playerid, "сказал(а) что-то в рацию", 0xDD99FFAA, 10.0, 4000);
	return 1;
}

CMD:f(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "¬ы не состоите в организаци€х");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "ƒоступ в чат заблокирован. ¬рем€ до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /f [текст]");
	
	new fmt_msg[185];
	format(fmt_msg, sizeof fmt_msg, "[F] %s %s [%d]: %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);
	
	for(new i; i < MAX_PLAYERS; i ++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerLogged(i)) continue;
		if(!GetPlayerTeamEx(i)) continue;
		//if(player_advisor_block_chat{i}) continue;
		
		if(GetFamilyChatID(GetPlayerTeamEx(i)) != GetFamilyChatID(GetPlayerTeamEx(playerid))) continue;
		
		SendClientMessage(i, 0x6699CCFF, fmt_msg);
	}
	return 1;
}

CMD:gnews(playerid, params[])
{
	if(!(TEAM_GOVERNMENT <= GetPlayerTeamEx(playerid) <= TEAM_FBI)) return SendClientMessage(playerid, 0x999999FF, "¬ам недоступна данна€ функци€");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "‘ункци€ доступна лидерам организации и их заместител€м");
	if(IsPlayerMuted(playerid) > 0) return SendClientMessage(playerid, 0xFF6600FF, "ƒоступ в чат заблокирован. ¬рем€ до разблокировки: {66CC33}/time");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /gnews [текст]");
	
	new fmt_msg[170 + 1];
	format(fmt_msg, sizeof fmt_msg, "√ос.новости: %s[%d]: %s", GetPlayerNameEx(playerid), playerid, params);
	SendClientMessageToAll(0x4466CCFF,  fmt_msg);
	
	return 1;
}
ALT:gnews:gov;

CMD:invite(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "¬ам недоступна данна€ функци€");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "‘ункци€ доступна лидерам организации и их заместител€м");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /invite [id игрока]");
	
	extract params -> new to_player;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
	if(1 <= GetPlayerTeamEx(to_player) <= 10) return SendClientMessage(playerid, 0xCECECEFF, "Ётот игрок уже состоит в организации");

	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 10.0)) return SendClientMessage(playerid, 0xCECECEFF, "»грок находитс€ слишком далеко");
	
	SendPlayerOffer(playerid, to_player, OFFER_TYPE_INVITE);
	return 1;
}

CMD:uninvite(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "¬ам недоступна данна€ функци€");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "‘ункци€ доступна лидерам организации и их заместител€м");
	
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /uninvite [id игрока]");
	extract params -> new to_player;
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0xCECECEFF, "“акого игрока нет");
	
	if(GetPlayerTeamEx(playerid) == TEAM_GOVERNMENT && GetPlayerJob(playerid) >= 10)
	{
		if(!(1 <= GetPlayerTeamEx(playerid) <= TEAM_PPS)) return SendClientMessage(playerid, 0xCECECEFF, "¬ы можете уволить любого сотрудника гос. организации, кроме ‘едеральна€ —лужба Ѕезопасности");
	}
	else 
	{
		if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Ётот игрок не состоит в ¬ашей организации");
		if(GetPlayerJob(to_player) >= GetPlayerJob(playerid)) return SendClientMessage(playerid, 0xCECECEFF, "Ќельз€ уволить уволить заместител€/лидера организации");
	}
	
	UnInvite(playerid, to_player);
	return 1;
}

CMD:rang(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "¬ам недоступна данна€ функци€");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "‘ункци€ доступна лидерам организации и их заместител€м");
	
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /rang [id игрока] [+/-]");
	extract params -> new to_player, string:give_rang[2];
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Ётот игрок не состоит в ¬ашей организации");
	if(GetPlayerJob(to_player) >= 10) return SendClientMessage(playerid, 0x999999FF, "Ќельз€ повысить или понизить лидера организации");
	
	new current_rang = GetPlayerJob(to_player);
	
	new fmt_msg[75];
	if(give_rang[0] == '+')
	{
		if((current_rang + 1) >= GetPlayerJob(playerid)) return SendClientMessage(playerid, 0x999999FF, "Ќельз€ повысить больше своего ранга");
		
		GetPlayerJob(to_player)++;
		format(fmt_msg, sizeof fmt_msg, "¬аш ранг в организации был повышен до %d (%s)", GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
		SendClientMessage(to_player, 0x3399FFFF, fmt_msg);
	}
	else if(give_rang[0] == '-')
	{
		if((current_rang - 1) < 1) return SendClientMessage(playerid, 0x999999FF, "Ќельз€ понизить ниже 1 ранга");
		
		GetPlayerJob(to_player)--;
		format(fmt_msg, sizeof fmt_msg, "¬аш ранг в организации был понижен до %d (%s)", GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
		SendClientMessage(to_player, 0x3399FFFF, fmt_msg);
	}
	else return SendClientMessage(playerid, 0xCECECEFF, "¬ведите действие: '+' чтобы повысить или '-' чтобы понизить");
	
	if(GetPlayerTeamEx(to_player) == TEAM_GOVERNMENT && IsValidDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL)))
	{
		DestroyDynamic3DTextLabel(GetPlayerData(to_player, P_ADVISOR_LABEL));
		SetPlayerData(to_player, P_ADVISOR_LABEL, Text3D: -1);
	}	
	
	if(!GetPlayerSex(to_player))
	{	
		SetPlayerData(playerid, P_OSKIN, GetTeamData(GetPlayerTeamEx(to_player), O_SKINS)[GetPlayerJob(to_player)-1]);
		ResetSkin(to_player);
	}
	
	format(fmt_msg, sizeof fmt_msg, "¬ы %s ранг %s[%d] до %d (%s)", (give_rang[0] == '+') ? ("повысили") : ("понизили"),  GetPlayerNameEx(to_player), to_player, GetPlayerJob(to_player), GetPlayerJobAndRankName(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
	
	format(fmt_msg, sizeof fmt_msg, "UPDATE accounts SET org_skin=%d,job=%d WHERE id=%d", GetPlayerData(to_player, P_OSKIN), GetPlayerJob(to_player), GetPlayerAccountID(to_player));
	mysql_query(mysql, fmt_msg, false);
	
	return 1;
}

CMD:changeskin(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "¬ам недоступна данна€ функци€");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "‘ункци€ доступна лидерам организации и их заместител€м");
	
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /changeskin [id игрока]");
	extract params -> new to_player;
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(GetPlayerTeamEx(to_player) != GetPlayerTeamEx(playerid)) return SendClientMessage(playerid, 0x999999FF, "Ётот игрок не состоит в ¬ашей организации");
	if(GetPlayerSex(to_player)) return SendClientMessage(playerid, 0x999999FF, "Ќельз€ изменить внешность игрокам с женским полом");
	
	new team_id = GetPlayerTeamEx(playerid);
	
	new fmt_str[18];
	new text[(sizeof fmt_str) * 10];
	new old_skin;
	new count;
	
	SetPVarInt(playerid, "change_team_skin_playerid", to_player);
	
	for(new i; i < 10; i ++)
	{
		if(old_skin == GetTeamData(team_id, O_SKINS)[i]) continue;
		
		SetPlayerListitemValue(playerid, count, i);
		count ++;
		
		old_skin = GetTeamData(team_id, O_SKINS)[i];
		format(fmt_str, sizeof fmt_str, "—кин %d (id %d)\n", count, old_skin);
		strcat(text, fmt_str);
	}
	Dialog(playerid, DIALOG_TEAM_CHANGE_SKIN, DIALOG_STYLE_LIST, "¬ыберите внешность дл€ игрока:", text, "ќк", "ќтмена");
	
	return 1;
}

CMD:showall(playerid, params[])
{
	if(!(1 <= GetPlayerTeamEx(playerid) <= 10)) return SendClientMessage(playerid, 0x999999FF, "¬ам недоступна данна€ функци€");
	if(!(9 <= GetPlayerJob(playerid) <= 10)) return SendClientMessage(playerid, 0xCECECEFF, "‘ункци€ доступна лидерам организации и их заместител€м");
	
	new query[75];
	format(query, sizeof query, "SELECT name, level, rank FROM accounts WHERE org = %d ORDER BY rank DESC", GetPlayerTeamEx(playerid));
	mysql_tquery(mysql, query, "ShowOrgAllPlayers", "i", playerid);
	return 1;
}

public: ShowOrgAllPlayers(playerid)
{
	new rows = cache_num_rows();

	new p_name[21];
	new lvl, rang;
	
	new fmt_str[33];
	new text[1290] = "”ровень\t–анг\t»м€\n\n{FFFFFF}";
	
	new idx, j = rows;
	if(j > 45)
		j = 45;
		
	for(idx = 0; idx < j; idx ++)
	{
		cache_get_row(idx, 0, p_name);
		lvl = cache_get_row_int(idx, 1);
		rang = cache_get_row_int(idx,2);
		
		format(fmt_str, sizeof fmt_str, "%d\t%d\t%s\n", lvl, rang, p_name);
		strcat(text, fmt_str);
	}
	
	format(fmt_str, sizeof fmt_str, "{00CC00}ѕоказаны %d/%d игроков", idx, rows);
	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, fmt_str, text, "«акрыть", "");
	return 1;
}

CMD:find(playerid, params[])
{
	if(!(GetPlayerTeamEx(playerid) || GetPlayerJob(playerid))) return SendClientMessage(playerid, 0xCECECEFF, "¬ы нигде не работаете/не состоите в организаци€х");

	ShowTeamStructureDialog(playerid, GetPlayerTeamEx(playerid));
	return 1;
}

stock ShowTeamStructureDialog(playerid, teamid)
{
	new string[1500];
	new fmt_str[40];
	
	if(teamid)
	{
		string = "”ровень\t–анг\t“елефон\t»м€\n\n{FFFFFF}";
		
		for(new i; i < MAX_PLAYERS; i ++)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerTeamEx(i) != teamid) continue;
			
			format(fmt_str, sizeof fmt_str, "%d\t\t%d\t%d\t\t%s", GetPlayerLevel(i), GetPlayerJob(i), GetPlayerPhone(i), GetPlayerNameEx(i));
			strcat(string, fmt_str);
			
			if(IsPlayerAFK(i))
				strcat(string, "-AFK");
	
			strcat(string, "\n");
		}
		
		if(IsTeamSubdivision(teamid))
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}„лены подразделени€ online", string, "«акрыть", "");
		else
			Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}„лены организации online", string, "«акрыть", "");
	}
	else 
	{
		string = "”ровень\t“елефон\t»м€\n\n{FFFFFF}";
		
		for(new i; i < MAX_PLAYERS; i ++)
		{
			if(!IsPlayerConnected(i)) continue;
			else if(!IsPlayerLogged(i)) continue;
			else if(GetPlayerJob(i) != GetPlayerJob(playerid)) continue;
			
			format(fmt_str, sizeof fmt_str, "%d\t%d%s%s", GetPlayerLevel(i), GetPlayerPhone(i), GetPlayerPhone(i) > 0 ? ("\t") : ("\t\t"), GetPlayerNameEx(i));
			strcat(string, fmt_str);
			
			if(IsPlayerAFK(i))
				strcat(string, "-AFK");
			
			if(IsPlayerInJob(i))
				strcat(string, " *");
				
			strcat(string, "\n");
		}
		
		Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{FFCC00}—отрудники online", string, "«акрыть", "");		
	}
	return 1;
}

CMD:debtorsell(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT) return SendClientMessage(playerid, 0x999999FF, "‘ункци€ доступна сотрудникам правительства");
	if(GetPlayerJob(playerid) < 4) return SendClientMessage(playerid, 0xCECECEFF, " оманда доступна сотрудникам правительства с 4 ранга");
	
	Dialog
	(
		playerid, DIALOG_DEBTOR_SELL_LIST, DIALOG_STYLE_LIST,
		"¬ыберите действие",
		"1. ¬ыселить должника из жиль€\n\
		2. «абрать предпри€тие у должника\n\
		3. «абрать ј«— у должника",
		"ƒалее", "«акрыть"
	);
	return 1;
}

CMD:debtorlist(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT) return SendClientMessage(playerid, 0x999999FF, "‘ункци€ доступна сотрудникам правительства");
	if(GetPlayerJob(playerid) < 3) return SendClientMessage(playerid, 0xCECECEFF, " оманда доступна сотрудникам правительства с 3 ранга");
	
	Dialog
	(
		playerid, DIALOG_DEBTORLIST, DIALOG_STYLE_LIST,
		"¬ыберите тип собственности",
		"1. ∆илье\n\
		2. ѕредпри€ти€\n\
		3. «аправочные станции",
		"¬ыбрать", "«акрыть"
	);
	return 1;
}

stock ShowDebtorListDialog(playerid, type)
{
	new 
		fmt_str[36 + 1],
		text[((sizeof fmt_str) * 20) + 1],
		cur_time = gettime(),
		idx,
		count;
	
	if(type == 0)
	{
		for(idx = 0, count = 0; idx < g_house_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetHouseData(idx, H_OWNER_ID) < 1) continue;
			if((((GetHouseData(idx, H_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetHouseData(idx, H_EVICTION)) continue;
			
			SetPlayerListitemValue(playerid, count, idx);
			count ++;
			
			if(GetHouseData(idx, H_TYPE))
			{
				format(fmt_str, sizeof fmt_str, "кв. %d под. %d (%s)\n", idx % 6 + 1, GetHouseData(idx, H_ENTRACE) + 1, "Ќижегородска€ обл.");
			}
			else 
			{
				format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Ќижегородска€ обл.");
			}
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "ƒолжников по оплате аренды за жилье нет");
		
		Dialog(playerid, DIALOG_DEBTORLIST_HOUSE, DIALOG_STYLE_LIST, "{FFCC00}∆илье должников", text, "ќтметить", "Ќазад");
	}
	else if(type == 1)
	{
		for(idx = 0, count = 0; idx < g_business_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetBusinessData(idx, B_OWNER_ID) < 1) continue;
			if((((GetBusinessData(idx, B_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetBusinessData(idx, B_EVICTION)) continue;
			
			SetPlayerListitemValue(playerid, count, idx);
			count ++;
			
			format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Ќижегородска€ обл.");
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "ƒолжников по оплате аренды за предпри€ти€ нет");
		
		Dialog(playerid, DIALOG_DEBTORLIST_BIZ, DIALOG_STYLE_LIST, "{FFCC00}ѕредпри€ти€ должников", text, "ќтметить", "Ќазад");
	}
	else 
	{
		for(idx = 0, count = 0; idx < g_fuel_station_loaded; idx ++)
		{
			if(count > 20) break;
			if(GetFuelStationData(idx, FS_OWNER_ID) < 1) continue;
			if((((GetFuelStationData(idx, FS_RENT_DATE) - cur_time) / 86400) + 1) > 0) continue;
			if(GetFuelStationData(idx, FS_EVICTION)) continue;
			
			SetPlayerListitemValue(playerid, count, idx);
			count ++;
			
			format(fmt_str, sizeof fmt_str, "%d (%s)\n", idx, "Ќижегородска€ обл.");
			strcat(text, fmt_str);
		}
		if(!count) return SendClientMessage(playerid, 0xCECECEFF, "ƒолжников по оплате аренды за ј«— нет");
		
		Dialog(playerid, DIALOG_DEBTORLIST_FUEL_ST, DIALOG_STYLE_LIST, "{FFCC00}«аправочные станции должников", text, "ќтметить", "Ќазад");
	}
	
	return 1;
}

stock SellDebtorsProperty()
{
	new cur_time = gettime();
	
	for(new i; i < g_house_loaded; i ++)
	{
		if(!GetHouseData(i, H_EVICTION)) continue;
		if(GetHouseData(i, H_RENT_DATE) < cur_time) continue;
		
		SetHouseData(i, H_OWNER_ID,		0);
		SetHouseData(i, H_IMPROVEMENTS,	0);

		SetHouseData(i, H_RENT_DATE,		0);
		SetHouseData(i, H_LOCK_STATUS,	false);
		
		format(query, sizeof query, "UPDATE accounts a,houses h SET a.house_type=-1,a.house=-1,h.owner_id=0,h.lock=0 WHERE a.id=%d AND h.id=%d", GetPlayerAccountID(playerid), GetHouseData(houseid, H_SQL_ID));
		mysql_query(mysql, query, false);
		
		UpdateHouse(i);
		
		HouseHealthInit(i);
		HouseStoreInit(i);
	}
	
	for(new i; i < g_business_loaded; i ++)
	{
		if(!GetBusinessData(i, B_EVICTION)) continue;
		if(GetBusinessData(i, B_RENT_DATE) < cur_time) continue;
		
		SetBusinessData(i, B_OWNER_ID, 		0);
		SetBusinessData(i, B_IMPROVEMENTS, 	0);

		SetBusinessData(i, B_PRODS, 			0);
		SetBusinessData(i, B_PROD_PRICE,		0);
		
		SetBusinessData(i, B_BALANCE,			0);
		SetBusinessData(i, B_RENT_DATE,		0);
		SetBusinessData(i, B_ENTER_MUSIC,		0);
		SetBusinessData(i, B_LOCK_STATUS,	false);
		
		BusinessHealthPickupInit(i);
		
		format(query, sizeof query, "UPDATE accounts a,business b SET a.business=-1,b.owner_id=0,b.products=0,b.prod_price=0,b.lock=0 WHERE a.id=%d AND b.id=%d", GetPlayerAccountID(playerid), GetBusinessData(i, B_SQL_ID));
		mysql_query(mysql, query, false);
		
		format(query, sizeof query, "DELETE FROM business_gps WHERE bid=%d", i);
		mysql_query(mysql, query, false);
		
		g_business_gps_init = false;
		
		//format(query, sizeof query, "UPDATE business_profit SET view=0 WHERE bid=%d AND view=1", GetBusinessData(i, B_SQL_ID));
		//mysql_query(mysql, query, false);

		CallLocalFunction("UpdateBusinessLabel", "i", i);
	}

	for(new i; i < g_fuel_station_loaded; i ++)
	{
		if(!GetFuelStationData(i, FS_EVICTION)) continue;
		if(GetFuelStationData(i, FS_RENT_DATE) < cur_time) continue;
		
		SetFuelStationData(i, FS_OWNER_ID, 0);
		SetFuelStationData(i, FS_IMPROVEMENTS, 	0);

		SetFuelStationData(i, FS_FUELS, 		1000);
		SetFuelStationData(i, FS_FUEL_PRICE,	3);
		SetFuelStationData(i, FS_BUY_FUEL_PRICE,0);
		
		SetFuelStationData(i, FS_BALANCE,		0);
		SetFuelStationData(i, FS_RENT_DATE,		0);
		SetFuelStationData(i, FS_LOCK_STATUS,	false);
		
		format(query, sizeof query, "UPDATE accounts a,fuel_stations f SET a.fuel_st=-1,f.owner_id=0,f.fuels=1000,f.fuel_price=3,f.lock=0 WHERE a.id=%d AND f.id=%d", GetPlayerAccountID(playerid), GetFuelStationData(i, FS_SQL_ID));
		mysql_query(mysql, query, false);
		
		//format(query, sizeof query, "UPDATE fuel_stations_profit SET view=0 WHERE fid=%d AND view=1",  GetFuelStationData(i, FS_SQL_ID));
		//mysql_query(mysql, query, false);
		
		CallLocalFunction("UpdateFuelStationLabel", "i", i);
	}
	
	return 1;
}

stock SellDebtorsHotels()
{
	new cur_time = gettime();
	new query[160];
	
	mysql_format(mysql, query, sizeof query, "UPDATE accounts a,hotel h SET a.hotel_id=-1,a.hotel_room=0,h.owner_id=0,h.rent_days=0,h.lock_status=1 WHERE a.id=h.owner_id AND h.rent_days < %d", cur_time);
	mysql_query(mysql, query, false);	
	
	new hotel_owner_playerid;
	
	for(new h_id, r_id; h_id < MAX_HOTELS; h_id ++)
	{
		for(r_id = 0; r_id < MAX_HOTEL_ROOMS; r_id ++)
		{
			if(GetHotelData(h_id, r_id, h_rent_days) < cur_time) continue;
			
			GetPlayerID(GetHotelData(h_id, r_id, H_OWNER_NAME), hotel_owner_playerid);
			
			SetHotelData(h_id, r_id, H_OWNER_ID, 0);
			SetHotelData(h_id, r_id, H_RENT_DATE, 0);
			SetHotelData(h_id, r_id, H_LOCK_STATUS, 1);
		
			if(IsPlayerConnected(hotel_owner_playerid) && IsPlayerLogged(hotel_owner_playerid))
			{
				if(GetPlayerHouse(hotel_owner_playerid, HOUSE_TYPE_HOTEL) == h_id)
				{
					SetPlayerData(hotel_owner_playerid, P_HOUSE, 		-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_ROOM, 	-1);
					SetPlayerData(hotel_owner_playerid, P_HOUSE_TYPE, 	-1);
					
					SendClientMessage(hotel_owner_playerid, 0xFF6600FF, "¬ы были выселены из гостиницы за неуплату услуг");
				}
			}
		}
	}
	return 1;
}

CMD:smenu(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_GOVERNMENT || !(5 <= GetPlayerJob(playerid) <= 6)) return SendClientMessage(playerid, 0x999999FF, "‘ункци€ доступна советникам правительства");
	
	Dialog
	(
		playerid, DIALOG_ADVISOR_MENU, DIALOG_STYLE_LIST,
		"{33CC66}ћеню советника",
		"1. ѕоказать/скрыть бейджик\n\
		2. ѕоказать/скрыть рацию организации\n\
		3. ѕоказать состав организации",
		"¬ыбрать", "«акрыть"
	);
	return 1;
}

CMD:medhelp(playerid, params[])
{	
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "¬ы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1131.1603, -8.5709, 1011.1254)) return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитьс€ в больнице");
	
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользование: /medhelp [id игрока] [стоимость лечени€]");
	extract params -> new to_player, price;
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "ѕациент слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0x999999FF, "Ётот игрок не лежит в больнице");
	if(!(100 <= price <= 5000)) return SendClientMessage(playerid, 0xCECECEFF, "—тоимость лечени€ должна быть от 100 до 5000 рублей");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0x999999FF, "” пациента нет с собой столько денег");
	
	SendPlayerOffer(playerid, to_player, OFFER_TYPE_MEDHELP, price);
	return 1;
}

CMD:out(playerid, params[])
{	
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "¬ы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1131.1603, -8.5709, 1011.1254)) return SendClientMessage(playerid, 0xCECECEFF, "¬ы должны находитьс€ в больнице");
	
	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /out [id игрока]");
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0x999999FF, "»грок должен находитьс€ на лечении");
	
	ClearMedBed(to_player, GetPlayerData(playerid, P_OCCUPIED_BED));
	SetPlayerData(to_player, P_HOSPITAL, false);
	
	SetPlayerChatBubble(to_player, "¬ыписан", 0x66CC00FF, 10.0, 2000);   
	
	new fmt_msg[60];
	format(fmt_msg, sizeof fmt_msg, "ћедицинский работник %s выписал ¬ас из больницы", GetPlayerNameEx(playerid));
	SendClientMessage(to_player, 0x3399FFFF, fmt_msg);
	
	format(fmt_msg, sizeof fmt_msg, "¬ы выписали %s из больницы", GetPlayerNameEx(to_player));
	SendClientMessage(playerid, 0x3399FFFF, fmt_msg);
	return 1;
}

CMD:heal(playerid, params[])
{	
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "¬ы не медицинский работник");
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользование: /heal [id игрока] [цена за лечение]");
	extract params -> new to_player, price; 
	
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(playerid)) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(GetVehicleData(vehicleid, V_ACTION_TYPE) != VEHICLE_ACTION_TYPE_MED_CAR || GetPlayerVehicleID(to_player) != vehicleid) return SendClientMessage(playerid, 0x999999FF, "¬ы или ¬аш пациент находитесь не в машине скорой помощи");
	if(!(0 <= price <= 5000)) return SendClientMessage(playerid, 0xCECECEFF, "—тоимость лечени€ должна быть от 0 до 5000 рублей");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0x999999FF, "” пациента нет с собой столько денег");
	
	SendPlayerOffer(playerid, to_player, OFFER_TYPE_HEAL, price);
	return 1;
}

CMD:changesex(playerid, params[])
{	
	if(GetPlayerTeamEx(playerid) != TEAM_HOSPITAL) return SendClientMessage(playerid, 0x999999FF, "¬ы не медицинский работник");
	if(!IsPlayerInRangeOfPoint(playerid, 70.0, 1131.1603, -8.5709, 1011.1254)) return SendClientMessage(playerid, 0x999999FF, "¬ы должны находитс€ в больнице");
	
	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользование: /changesex [id игрока] [стоимость операции]");
	extract params -> new to_player, price;
	
	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");
	if(GetPlayerData(to_player, P_OCCUPIED_BED) == -1) return SendClientMessage(playerid, 0xCECECEFF, "»грок должен находитс€ на стационарном лечении");
	if(!(500000 <= price <= 1000000)) return SendClientMessage(playerid, 0xCECECEFF, "—тоимость операции должна быть от 500000 до 1000000 рублей");
	if(GetPlayerMoneyEx(to_player) < price) return SendClientMessage(playerid, 0x999999FF, "” пациента нет с собой столько денег");
	
	SendPlayerOffer(playerid, to_player, OFFER_TYPE_CHANGE_SEX, price);
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "¬ы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /cuff [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");

	if(GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "»грок уже закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND, 19418, A_OBJECT_BONE_RIGHT_HAND, -0.011, 0.028, -0.022, -15.600012, -33.699977, -81.700035, 0.891999, 1.00, 1.168);
	SetPlayerData(to_player, P_CUFFED, true);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s надел на %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid) && GetPlayerAdminEx(playerid) == 0) return SendClientMessage(playerid, 0x999999FF, "¬ы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /uncuff [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "»грок не закован в наручники");

	SetPlayerSpecialAction(to_player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(to_player, A_OBJECT_SLOT_HAND);
	SetPlayerData(to_player, P_CUFFED, false);

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s сн€л с %s наручники", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:putpl(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "¬ы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /putpl [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player)) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");

	if(!GetPlayerData(to_player, P_CUFFED)) return SendClientMessage(playerid, 0x999999FF, "»грок не закован в наручники");

	new vehicle_id = GetPlayerVehicleID(playerid);
	if(!vehicle_id) return SendClientMessage(playerid, 0x999999FF, "¬ы должны находитьс€ в автомобиле");

	if(!IsPlayerInPoliceCar(playerid))
		return SendClientMessage(playerid, 0x999999FF, "¬ы должны находитьс€ в служебном транспорте");
	
	new bool: is_there_some_free_places;

	for(new i = 2; i < 3; i++)
	{
		if(IsVehicleSeatOccupied(vehicle_id, i)) continue;
		PutPlayerInVehicle(to_player, vehicle_id, i);
		is_there_some_free_places = true;
		break;
	}

	if(!is_there_some_free_places) return SendClientMessage(playerid, 0x999999FF, "«адние места ¬ашего автомобил€ зан€ты");

	new fmt_str[90];

	format(fmt_str, sizeof fmt_str, "%s %s посадил %s в машину", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_str, 0xDD90FFFF, 25.0);

	return 1;
}

CMD:search(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "¬ы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /search [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");

	new fmt_text[110],
		bool: some_is_found;

	format(fmt_text, sizeof fmt_text, "%s %s произвЄл обыск у %s", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(to_player));
	SendMessageInLocal(playerid, fmt_text, 0xDD90FFFF, 25.0);

	if(GetPlayerData(to_player, P_DRUGS))
	{
		format(fmt_text, sizeof fmt_text, "” %s[%d] обнаружено %d г наркотиков", GetPlayerData(to_player, P_DRUGS));
		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

		some_is_found = true;
	}
	if(GetPlayerData(to_player, P_AMMO))
	{
		format(fmt_text, sizeof fmt_text, "” %s[%d] обнаружено %d патронов", GetPlayerData(to_player, P_AMMO));
		SendClientMessage(playerid, 0xFFFF00FF, fmt_text);

		some_is_found = true;
	}
	
	if(!some_is_found) SendClientMessage(playerid, 0xFFFF00FF, "Ќичего не найдено");

	return 1;
}

CMD:su(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "¬ы не работник правоохранительных органов");

	extract params -> new criminalid, string:message[66]; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /su [id игрока] [причина]");

	if(!IsPlayerConnected(criminalid) || !IsPlayerLogged(criminalid) || criminalid == playerid) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, criminalid, 6.0)) return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "¬ведите причину");

	if(GetPlayerSuspect(criminalid) >= 6) return SendClientMessage(playerid, 0x999999FF, "»грок имеет максимальный уровень розыска");

	new fmt_text[255];

	AddPlayerData(criminalid, P_SUSPECT, +, 1);
	SetPlayerSuspectInit(criminalid);
	UpdatePlayerDatabaseInt(criminalid, "suspect", GetPlayerData(criminalid, P_SUSPECT));

	format(fmt_text, sizeof fmt_text, "%s объ€вил ¬ас в розыск. ѕричина: %s. “екущий уровень розыска %d", GetPlayerNameEx(playerid), message, GetPlayerSuspect(criminalid));
	SendClientMessage(criminalid, 0x3399FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "¬ы объ€вили %s в розыск. ѕричина: %s. “екущий уровень розыска %d", GetPlayerNameEx(criminalid), message, GetPlayerSuspect(criminalid));
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] объ€вил %s[%d] в розыск [%d/6], причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(criminalid), criminalid, GetPlayerSuspect(criminalid), message);
	
	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	return 1;
}

CMD:m(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "¬ы не работник правоохранительных органов");

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /m [текст]");

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "<< %s %s[%d]: %s >>", GetPlayerJobAndRankName(playerid), GetPlayerNameEx(playerid), playerid, params);
	SendMessageInLocal(playerid, fmt_text, 0xFFFF00FF, 60.0);

	return 1;
}

CMD:takelic(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "¬ы не работник правоохранительных органов");

	extract params -> new to_player, string:message[66]; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /takelic [id игрока] [причина]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");
	if(!IsPlayerInRangeOfPlayer(playerid, to_player, 6.0)) return SendClientMessage(playerid, 0x999999FF, "»грок находитс€ слишком далеко");

	if(!strlen(message)) return SendClientMessage(playerid, 0x999999FF, "¬ведите причину");

	if(!GetPlayerData(to_player, P_DRIVING_LIC)) return SendClientMessage(playerid, 0x999999FF, "” игрока нет прав");

	new fmt_text[255];

	format(fmt_text, sizeof fmt_text, "%s[%d] забрал у ¬ас права. ѕричина: %s", GetPlayerNameEx(playerid), playerid, message);
	SendClientMessage(to_player, 0x3399FFFF, fmt_text);
	format(fmt_text, sizeof fmt_text, "¬ы забрали у %s[%d] права. ѕричина: %s", GetPlayerNameEx(to_player), to_player, message);
	SendClientMessage(playerid, 0x3399FFFF, fmt_text);

	format(fmt_text, sizeof fmt_text, "%s %s[%d] забрал у %s[%d] %s права, причина: %s", GetPlayerJobAndRankName(playerid),
	GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(to_player), to_player, GetPlayerData(to_player, P_DRIVING_LIC) == 2 ? "проф." : "базовые", message);
	
	SendMessageToPoliceTeam(fmt_text, 0xFFC000FF, playerid);

	SetPlayerData(to_player, P_DRIVING_LIC, 0);
	UpdatePlayerDatabaseInt(to_player, "driving_lic", 0);

	return 1;
}

CMD:wanted(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "¬ы не работник правоохранительных органов");

	new fmt_text[40],
		fmt_list[1024] = "–озыск\t»м€{ffffff}\n";

	foreach(new i : Player)
	{
		if(!GetPlayerSuspect(i)) continue;
		format(fmt_text, sizeof fmt_text, "\n%d\t\t%s", GetPlayerSuspect(i), GetPlayerNameEx(i));
		strcat(fmt_list, fmt_text);
	}

	Dialog(playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX, "{ffcc00}—писок разыскиваемых", fmt_list, "«акрыть", "");

	return 1;
}

CMD:setmark(playerid, params[])
{
	if(!IsPlayerInPoliceTeam(playerid)) return SendClientMessage(playerid, 0x999999FF, "¬ы не работник правоохранительных органов");

	extract params -> new to_player; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /setmark [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player) || to_player == playerid) return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	if(!GetPlayerSuspect(to_player)) return SendClientMessage(playerid, 0xCECECEFF, "Ётот игрок не в розыске");

	new Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(to_player, x, y, z);

	EnablePlayerGPS(playerid, 37, x, y, z, "{66cc33}¬ последний раз преступника видели на отмеченном месте");

	return 1;
}

CMD:makegun(playerid, params[])
{
	if(GetPlayerTeamEx(playerid) != TEAM_ARMY) return SendClientMessage(playerid, 0x999999FF, "¬ы не военнослужащий");

	extract params -> new weapon_id, weapon_ammo;

	if(!(1 <= weapon_id <= 7))
	{
		Dialog
		(
			playerid, INVALID_DIALOG_ID, DIALOG_STYLE_MSGBOX,
			"ƒоступное оружие",
			"{669999}\
			ID\tЌазвание\t\tћеталл\n\n\
			{ffffff}1.\tSilenced 9mm\t\t3\n\
			2.\tDesert Eagle\t\t6\n\
			3.\tShotgun\t\t8\n\
			4.\tMP5\t\t\t9\n\
			5.\tAK47\t\t\t10\n\
			6.\tM4\t\t\t10\n\
			7.\tCountry Rifle\t\t11\n\n\
			ƒл€ добавлени€ патронов к созданному оружию\n\
			необходимо держать его в руках\
			",
			"«акрыть", ""
		);

		SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /makegun [id оружи€] [кол-во патронов]");

		return 1;
	}

	if(!strlen(params)) return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /makegun [id оружи€] [кол-во патронов]");
	if(weapon_ammo <= 0) return SendClientMessage(playerid, 0xCECECEFF, "Ќеверное количество патронов");

	enum TEMP_GUN_INFO
	{
		GUN_ID,
		GUN_METAL,
		GUN_NAME[16]
	};

	new temp_gun[7][TEMP_GUN_INFO] =
	{
		{23, 3, "Silenced 9mm"},
		{24, 3, "Desert Eagle"},
		{25, 3, "Shotgun"},
		{29, 3, "MP5"},
		{30, 3, "AK47"},
		{31, 3, "M4"},
		{33, 3, "Country Rifle"}
	};

	if(GetPlayerData(playerid, P_METALL) < temp_gun[weapon_id-1][GUN_METAL]) return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет нужного количества металла");
	if(GetPlayerData(playerid, P_AMMO) < weapon_ammo) return SendClientMessage(playerid, 0xCECECEFF, "” ¬ас нет нужного количества патронов");

	new fmt_text[128];

	format(fmt_text, sizeof fmt_text, "сделал %s из металла и %d патронов", temp_gun[weapon_id-1][GUN_NAME], weapon_ammo);	

	Action(playerid, fmt_text, _, false);

	GivePlayerWeapon(playerid, temp_gun[weapon_id-1][GUN_ID], weapon_ammo);

	AddPlayerData(playerid, P_METALL, -, temp_gun[weapon_id-1][GUN_METAL]);
	UpdatePlayerDatabaseInt(playerid, "metall", GetPlayerData(playerid, P_METALL));

	AddPlayerData(playerid, P_AMMO, -, weapon_ammo);
	UpdatePlayerDatabaseInt(playerid, "ammo", GetPlayerData(playerid, P_AMMO));

	return 1;
}

stock IsPlayerInPoliceTeam(playerid)
{
	if(TEAM_DPS <= GetPlayerTeamEx(playerid) <= TEAM_FBI) return true;
	return false;
}

stock IsPlayerInPoliceCar(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(VEHICLE_ACTION_TYPE_DPS_CAR <= GetVehicleData(vehicleid, V_ACTION_TYPE) <= VEHICLE_ACTION_TYPE_FBI_CAR) return true;
	return false;
}

stock GetCarNumberPrice(number[])
{
	if(strlen(number) != 6) return 1;

	new chars[4],
		price = 100;

	format(chars, sizeof chars, "%c%c%c", number[0], number[4], number[5]);

	if(!strcmp(chars, "amp", true)) price += 800;
	else if(!strcmp(chars, "ooo", true)) price += 700;
	else if(!strcmp(chars, "aaa", true)) price += 700;
	else if(!strcmp(chars, "ekx", true)) price += 600;
	else if(!strcmp(chars, "xam", true)) price += 600;
	else if(!strcmp(chars, "bop", true)) price += 300;
	else if(!strcmp(chars, "xep", true)) price += 200;
	else if(!strcmp(chars, "hax", true)) price += 200;
	else
	{
		if(chars[0] == chars[1] && chars[0] != chars[2]) price += 50;
		else if(chars[0] == chars[1] && chars[0] == chars[2]) price += 200;
		else if(chars[0] == chars[2] && chars[0] != chars[1]) price += 100;
	}

	if(number[1] == 0 && number[1] == 0) price += 200;
	else if(number[1] == number[2] && number[1] != number[3]) price += 150;
	else if(number[1] == number[2] && number[1] == number[3]) price += 250;

	return price;
}

CMD:checknumber(playerid, params[])
{
	extract params -> new string:number[7]; else return SendClientMessage(playerid, 0xCECECEFF, "»спользуйте: /checknumber [номер]");

	if(strlen(number) != 6) return SendClientMessage(playerid, 0x999999FF, "ƒлина номера должна быть 6 символов");
	
	new fmt_text[90];
	format(fmt_text, sizeof fmt_text, "—тоимость введенного ¬ами номера: %d рублей", GetCarNumberPrice(number));
	SendClientMessage(playerid, 0x66CC33FF, fmt_text);

	return 1;
}

CMD:skill(playerid, params[])
{
	extract params -> new to_player; else return SendClientMessage(playerid, 0x999999FF, "»спользуйте: /skill [id игрока]");

	if(!IsPlayerConnected(to_player) || !IsPlayerLogged(to_player))
		return SendClientMessage(playerid, 0x999999FF, "“акого игрока нет");

	if(to_player == playerid)
	{
		ShowPlayerSkills(playerid);
		return Action(playerid, "просматривает свои навыки владени€ оружием", _, false);
	}

	SendPlayerOffer(playerid, to_player, OFFER_TYPE_SHOW_SKILL);

	return 1;
}

CMD:donat(playerid, params[])
{
	if(!IsPlayerHasDonations(playerid)) return SendClientMessage(playerid, 0x999999FF, "Ќовых пополнений не найдено");
	
	new	query[590],
		rows,
		Cache: result,
		total_money,
		total_money_with_action;

	mysql_format(mysql, query, sizeof query, "SELECT * FROM `donations` WHERE acc_id=%d AND activated=0", GetPlayerAccountID(playerid));
	result = mysql_query(mysql, query, true);

	rows = cache_num_rows();

	for(new i = 0; i < rows; i++)
	{
		if(cache_get_field_content_int(i, "amount") <= 0) continue;

		total_money += cache_get_field_content_int(i, "amount");
	}

	cache_delete(result);

	mysql_format(mysql, query, sizeof query, "UPDATE `donations` SET activated=1 WHERE acc_id=%d", GetPlayerAccountID(playerid));
	mysql_query(mysql, query, false);

	if(0 < total_money <= 498) total_money_with_action = total_money;
	else if(499 <= total_money <= 998) total_money_with_action = total_money + total_money/100*5;
	else if(999 <= total_money <= 1998) total_money_with_action = total_money + total_money/100*15;
	else if(1999 <= total_money <= 4998) total_money_with_action = total_money + total_money/100*20;
	else if(total_money >= 4999) total_money_with_action = total_money + total_money/100*30;

	format
	(
		query, sizeof query,
		"{ffffff}\
		¬ы пополнили счЄт на {6699cc}%d.00 руб\n\
		{ffffff}— учЄтом акции будет зачислено {6699cc}%d.00 руб\n\n\
		{ffffff}”слови€ акции:\n\
		ѕри зачислении суммы от {ff9900}499 руб {ffffff}вы получаете надбавку {33cc66}5%i%% от суммы\n\
		{ffffff}ѕри зачислении суммы от {ff9900}999 руб {ffffff}вы получаете надбавку {33cc66}15%i%% от суммы\n\
		{ffffff}ѕри зачислении суммы от {ff9900}1999 руб {ffffff}вы получаете надбавку {33cc66}20%i%% от суммы\n\
		{ffffff}ѕри зачислении суммы от {ff9900}4999 руб {ffffff}вы получаете надбавку {33cc66}30%i%% от суммы\
		",
		total_money,
		total_money_with_action
	);

	Dialog(playerid, DIALOG_DONATE_ENROLLMENT, DIALOG_STYLE_MSGBOX, "{ffcc00}ƒонат", query, "«ачислить", "ќтмена");

	SetPVarInt(playerid, "donate_money", total_money);
	SetPVarInt(playerid, "donate_money_with_action", total_money_with_action);

	return 1;
}
ALT:donat:donate;

CMD:setspawn(playerid, params[])
{
	Dialog
	(
		playerid, DIALOG_SET_SPAWN, DIALOG_STYLE_LIST,
		"{FFCC00}»зменение места по€влени€ в игре",
		"1. Ќа ∆/ƒ вокзале или автостанции\n\
		2. ¬ собственном доме\n\
		3. ¬ гостиничном номере\n\
		4. Ќа базе организации\n\
		5. ¬ гост€х (совместное проживание)",
		"¬ыбрать", "ќтмена"
	);
	return 1;
}
